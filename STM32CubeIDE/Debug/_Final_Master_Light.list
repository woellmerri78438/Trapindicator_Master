
_Final_Master_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014afc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001078  08014c40  08014c40  00024c40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cb8  08015cb8  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08015cb8  08015cb8  00025cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015cc0  08015cc0  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cc0  08015cc0  00025cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015cc4  08015cc4  00025cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08015cc8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d30  20000230  08015ef4  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f60  08015ef4  00030f60  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ede  00000000  00000000  00030256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007196  00000000  00000000  00059134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f0  00000000  00000000  000602d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f0  00000000  00000000  000627c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246b3  00000000  00000000  000649b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c685  00000000  00000000  00089063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bebef  00000000  00000000  000b56e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001742d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab6c  00000000  00000000  00174328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000230 	.word	0x20000230
 800015c:	00000000 	.word	0x00000000
 8000160:	08014c24 	.word	0x08014c24

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000234 	.word	0x20000234
 800017c:	08014c24 	.word	0x08014c24

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e66:	2afd      	cmp	r2, #253	; 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	; 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	; 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	; 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_uldivmod>:
 80011a0:	b953      	cbnz	r3, 80011b8 <__aeabi_uldivmod+0x18>
 80011a2:	b94a      	cbnz	r2, 80011b8 <__aeabi_uldivmod+0x18>
 80011a4:	2900      	cmp	r1, #0
 80011a6:	bf08      	it	eq
 80011a8:	2800      	cmpeq	r0, #0
 80011aa:	bf1c      	itt	ne
 80011ac:	f04f 31ff 	movne.w	r1, #4294967295
 80011b0:	f04f 30ff 	movne.w	r0, #4294967295
 80011b4:	f000 b992 	b.w	80014dc <__aeabi_idiv0>
 80011b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011c0:	f000 f824 	bl	800120c <__udivmoddi4>
 80011c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011cc:	b004      	add	sp, #16
 80011ce:	4770      	bx	lr

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f9e5 	bl	80005a8 <__aeabi_dmul>
 80011de:	f000 f97f 	bl	80014e0 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f966 	bl	80004b4 <__aeabi_ui2d>
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f7ff f9dc 	bl	80005a8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7ff f81e 	bl	8000238 <__aeabi_dsub>
 80011fc:	f000 f970 	bl	80014e0 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <__udivmoddi4>:
 800120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	9e08      	ldr	r6, [sp, #32]
 8001212:	460d      	mov	r5, r1
 8001214:	4604      	mov	r4, r0
 8001216:	4688      	mov	r8, r1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d14d      	bne.n	80012b8 <__udivmoddi4+0xac>
 800121c:	428a      	cmp	r2, r1
 800121e:	4694      	mov	ip, r2
 8001220:	d968      	bls.n	80012f4 <__udivmoddi4+0xe8>
 8001222:	fab2 f282 	clz	r2, r2
 8001226:	b152      	cbz	r2, 800123e <__udivmoddi4+0x32>
 8001228:	fa01 f302 	lsl.w	r3, r1, r2
 800122c:	f1c2 0120 	rsb	r1, r2, #32
 8001230:	fa20 f101 	lsr.w	r1, r0, r1
 8001234:	fa0c fc02 	lsl.w	ip, ip, r2
 8001238:	ea41 0803 	orr.w	r8, r1, r3
 800123c:	4094      	lsls	r4, r2
 800123e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8001242:	0c21      	lsrs	r1, r4, #16
 8001244:	fbb8 fef5 	udiv	lr, r8, r5
 8001248:	fa1f f78c 	uxth.w	r7, ip
 800124c:	fb05 831e 	mls	r3, r5, lr, r8
 8001250:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001254:	fb0e f107 	mul.w	r1, lr, r7
 8001258:	4299      	cmp	r1, r3
 800125a:	d90b      	bls.n	8001274 <__udivmoddi4+0x68>
 800125c:	eb1c 0303 	adds.w	r3, ip, r3
 8001260:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001264:	f080 811e 	bcs.w	80014a4 <__udivmoddi4+0x298>
 8001268:	4299      	cmp	r1, r3
 800126a:	f240 811b 	bls.w	80014a4 <__udivmoddi4+0x298>
 800126e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001272:	4463      	add	r3, ip
 8001274:	1a5b      	subs	r3, r3, r1
 8001276:	b2a4      	uxth	r4, r4
 8001278:	fbb3 f0f5 	udiv	r0, r3, r5
 800127c:	fb05 3310 	mls	r3, r5, r0, r3
 8001280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001284:	fb00 f707 	mul.w	r7, r0, r7
 8001288:	42a7      	cmp	r7, r4
 800128a:	d90a      	bls.n	80012a2 <__udivmoddi4+0x96>
 800128c:	eb1c 0404 	adds.w	r4, ip, r4
 8001290:	f100 33ff 	add.w	r3, r0, #4294967295
 8001294:	f080 8108 	bcs.w	80014a8 <__udivmoddi4+0x29c>
 8001298:	42a7      	cmp	r7, r4
 800129a:	f240 8105 	bls.w	80014a8 <__udivmoddi4+0x29c>
 800129e:	4464      	add	r4, ip
 80012a0:	3802      	subs	r0, #2
 80012a2:	1be4      	subs	r4, r4, r7
 80012a4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80012a8:	2100      	movs	r1, #0
 80012aa:	b11e      	cbz	r6, 80012b4 <__udivmoddi4+0xa8>
 80012ac:	40d4      	lsrs	r4, r2
 80012ae:	2300      	movs	r3, #0
 80012b0:	e9c6 4300 	strd	r4, r3, [r6]
 80012b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b8:	428b      	cmp	r3, r1
 80012ba:	d908      	bls.n	80012ce <__udivmoddi4+0xc2>
 80012bc:	2e00      	cmp	r6, #0
 80012be:	f000 80ee 	beq.w	800149e <__udivmoddi4+0x292>
 80012c2:	2100      	movs	r1, #0
 80012c4:	e9c6 0500 	strd	r0, r5, [r6]
 80012c8:	4608      	mov	r0, r1
 80012ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ce:	fab3 f183 	clz	r1, r3
 80012d2:	2900      	cmp	r1, #0
 80012d4:	d14a      	bne.n	800136c <__udivmoddi4+0x160>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d302      	bcc.n	80012e0 <__udivmoddi4+0xd4>
 80012da:	4282      	cmp	r2, r0
 80012dc:	f200 80f9 	bhi.w	80014d2 <__udivmoddi4+0x2c6>
 80012e0:	1a84      	subs	r4, r0, r2
 80012e2:	eb65 0303 	sbc.w	r3, r5, r3
 80012e6:	2001      	movs	r0, #1
 80012e8:	4698      	mov	r8, r3
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d0e2      	beq.n	80012b4 <__udivmoddi4+0xa8>
 80012ee:	e9c6 4800 	strd	r4, r8, [r6]
 80012f2:	e7df      	b.n	80012b4 <__udivmoddi4+0xa8>
 80012f4:	b902      	cbnz	r2, 80012f8 <__udivmoddi4+0xec>
 80012f6:	deff      	udf	#255	; 0xff
 80012f8:	fab2 f282 	clz	r2, r2
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	f040 8091 	bne.w	8001424 <__udivmoddi4+0x218>
 8001302:	eba1 050c 	sub.w	r5, r1, ip
 8001306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800130a:	fa1f fe8c 	uxth.w	lr, ip
 800130e:	2101      	movs	r1, #1
 8001310:	fbb5 f3f7 	udiv	r3, r5, r7
 8001314:	fb07 5013 	mls	r0, r7, r3, r5
 8001318:	0c25      	lsrs	r5, r4, #16
 800131a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800131e:	fb0e f003 	mul.w	r0, lr, r3
 8001322:	42a8      	cmp	r0, r5
 8001324:	d908      	bls.n	8001338 <__udivmoddi4+0x12c>
 8001326:	eb1c 0505 	adds.w	r5, ip, r5
 800132a:	f103 38ff 	add.w	r8, r3, #4294967295
 800132e:	d202      	bcs.n	8001336 <__udivmoddi4+0x12a>
 8001330:	42a8      	cmp	r0, r5
 8001332:	f200 80cb 	bhi.w	80014cc <__udivmoddi4+0x2c0>
 8001336:	4643      	mov	r3, r8
 8001338:	1a2d      	subs	r5, r5, r0
 800133a:	b2a4      	uxth	r4, r4
 800133c:	fbb5 f0f7 	udiv	r0, r5, r7
 8001340:	fb07 5510 	mls	r5, r7, r0, r5
 8001344:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001348:	fb0e fe00 	mul.w	lr, lr, r0
 800134c:	45a6      	cmp	lr, r4
 800134e:	d908      	bls.n	8001362 <__udivmoddi4+0x156>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f100 35ff 	add.w	r5, r0, #4294967295
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x154>
 800135a:	45a6      	cmp	lr, r4
 800135c:	f200 80bb 	bhi.w	80014d6 <__udivmoddi4+0x2ca>
 8001360:	4628      	mov	r0, r5
 8001362:	eba4 040e 	sub.w	r4, r4, lr
 8001366:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800136a:	e79e      	b.n	80012aa <__udivmoddi4+0x9e>
 800136c:	f1c1 0720 	rsb	r7, r1, #32
 8001370:	408b      	lsls	r3, r1
 8001372:	fa22 fc07 	lsr.w	ip, r2, r7
 8001376:	ea4c 0c03 	orr.w	ip, ip, r3
 800137a:	fa20 f407 	lsr.w	r4, r0, r7
 800137e:	fa05 f301 	lsl.w	r3, r5, r1
 8001382:	431c      	orrs	r4, r3
 8001384:	40fd      	lsrs	r5, r7
 8001386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800138a:	fa00 f301 	lsl.w	r3, r0, r1
 800138e:	fbb5 f8f9 	udiv	r8, r5, r9
 8001392:	0c20      	lsrs	r0, r4, #16
 8001394:	fa1f fe8c 	uxth.w	lr, ip
 8001398:	fb09 5518 	mls	r5, r9, r8, r5
 800139c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80013a0:	fb08 f00e 	mul.w	r0, r8, lr
 80013a4:	42a8      	cmp	r0, r5
 80013a6:	fa02 f201 	lsl.w	r2, r2, r1
 80013aa:	d90b      	bls.n	80013c4 <__udivmoddi4+0x1b8>
 80013ac:	eb1c 0505 	adds.w	r5, ip, r5
 80013b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80013b4:	f080 8088 	bcs.w	80014c8 <__udivmoddi4+0x2bc>
 80013b8:	42a8      	cmp	r0, r5
 80013ba:	f240 8085 	bls.w	80014c8 <__udivmoddi4+0x2bc>
 80013be:	f1a8 0802 	sub.w	r8, r8, #2
 80013c2:	4465      	add	r5, ip
 80013c4:	1a2d      	subs	r5, r5, r0
 80013c6:	b2a4      	uxth	r4, r4
 80013c8:	fbb5 f0f9 	udiv	r0, r5, r9
 80013cc:	fb09 5510 	mls	r5, r9, r0, r5
 80013d0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80013d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80013d8:	45ae      	cmp	lr, r5
 80013da:	d908      	bls.n	80013ee <__udivmoddi4+0x1e2>
 80013dc:	eb1c 0505 	adds.w	r5, ip, r5
 80013e0:	f100 34ff 	add.w	r4, r0, #4294967295
 80013e4:	d26c      	bcs.n	80014c0 <__udivmoddi4+0x2b4>
 80013e6:	45ae      	cmp	lr, r5
 80013e8:	d96a      	bls.n	80014c0 <__udivmoddi4+0x2b4>
 80013ea:	3802      	subs	r0, #2
 80013ec:	4465      	add	r5, ip
 80013ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80013f2:	fba0 9402 	umull	r9, r4, r0, r2
 80013f6:	eba5 050e 	sub.w	r5, r5, lr
 80013fa:	42a5      	cmp	r5, r4
 80013fc:	46c8      	mov	r8, r9
 80013fe:	46a6      	mov	lr, r4
 8001400:	d356      	bcc.n	80014b0 <__udivmoddi4+0x2a4>
 8001402:	d053      	beq.n	80014ac <__udivmoddi4+0x2a0>
 8001404:	b15e      	cbz	r6, 800141e <__udivmoddi4+0x212>
 8001406:	ebb3 0208 	subs.w	r2, r3, r8
 800140a:	eb65 050e 	sbc.w	r5, r5, lr
 800140e:	fa05 f707 	lsl.w	r7, r5, r7
 8001412:	fa22 f301 	lsr.w	r3, r2, r1
 8001416:	40cd      	lsrs	r5, r1
 8001418:	431f      	orrs	r7, r3
 800141a:	e9c6 7500 	strd	r7, r5, [r6]
 800141e:	2100      	movs	r1, #0
 8001420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001424:	f1c2 0320 	rsb	r3, r2, #32
 8001428:	fa20 f103 	lsr.w	r1, r0, r3
 800142c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001430:	fa25 f303 	lsr.w	r3, r5, r3
 8001434:	4095      	lsls	r5, r2
 8001436:	430d      	orrs	r5, r1
 8001438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800143c:	fa1f fe8c 	uxth.w	lr, ip
 8001440:	fbb3 f1f7 	udiv	r1, r3, r7
 8001444:	fb07 3011 	mls	r0, r7, r1, r3
 8001448:	0c2b      	lsrs	r3, r5, #16
 800144a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800144e:	fb01 f00e 	mul.w	r0, r1, lr
 8001452:	4298      	cmp	r0, r3
 8001454:	fa04 f402 	lsl.w	r4, r4, r2
 8001458:	d908      	bls.n	800146c <__udivmoddi4+0x260>
 800145a:	eb1c 0303 	adds.w	r3, ip, r3
 800145e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001462:	d22f      	bcs.n	80014c4 <__udivmoddi4+0x2b8>
 8001464:	4298      	cmp	r0, r3
 8001466:	d92d      	bls.n	80014c4 <__udivmoddi4+0x2b8>
 8001468:	3902      	subs	r1, #2
 800146a:	4463      	add	r3, ip
 800146c:	1a1b      	subs	r3, r3, r0
 800146e:	b2ad      	uxth	r5, r5
 8001470:	fbb3 f0f7 	udiv	r0, r3, r7
 8001474:	fb07 3310 	mls	r3, r7, r0, r3
 8001478:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800147c:	fb00 f30e 	mul.w	r3, r0, lr
 8001480:	42ab      	cmp	r3, r5
 8001482:	d908      	bls.n	8001496 <__udivmoddi4+0x28a>
 8001484:	eb1c 0505 	adds.w	r5, ip, r5
 8001488:	f100 38ff 	add.w	r8, r0, #4294967295
 800148c:	d216      	bcs.n	80014bc <__udivmoddi4+0x2b0>
 800148e:	42ab      	cmp	r3, r5
 8001490:	d914      	bls.n	80014bc <__udivmoddi4+0x2b0>
 8001492:	3802      	subs	r0, #2
 8001494:	4465      	add	r5, ip
 8001496:	1aed      	subs	r5, r5, r3
 8001498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800149c:	e738      	b.n	8001310 <__udivmoddi4+0x104>
 800149e:	4631      	mov	r1, r6
 80014a0:	4630      	mov	r0, r6
 80014a2:	e707      	b.n	80012b4 <__udivmoddi4+0xa8>
 80014a4:	4686      	mov	lr, r0
 80014a6:	e6e5      	b.n	8001274 <__udivmoddi4+0x68>
 80014a8:	4618      	mov	r0, r3
 80014aa:	e6fa      	b.n	80012a2 <__udivmoddi4+0x96>
 80014ac:	454b      	cmp	r3, r9
 80014ae:	d2a9      	bcs.n	8001404 <__udivmoddi4+0x1f8>
 80014b0:	ebb9 0802 	subs.w	r8, r9, r2
 80014b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80014b8:	3801      	subs	r0, #1
 80014ba:	e7a3      	b.n	8001404 <__udivmoddi4+0x1f8>
 80014bc:	4640      	mov	r0, r8
 80014be:	e7ea      	b.n	8001496 <__udivmoddi4+0x28a>
 80014c0:	4620      	mov	r0, r4
 80014c2:	e794      	b.n	80013ee <__udivmoddi4+0x1e2>
 80014c4:	4641      	mov	r1, r8
 80014c6:	e7d1      	b.n	800146c <__udivmoddi4+0x260>
 80014c8:	46d0      	mov	r8, sl
 80014ca:	e77b      	b.n	80013c4 <__udivmoddi4+0x1b8>
 80014cc:	3b02      	subs	r3, #2
 80014ce:	4465      	add	r5, ip
 80014d0:	e732      	b.n	8001338 <__udivmoddi4+0x12c>
 80014d2:	4608      	mov	r0, r1
 80014d4:	e709      	b.n	80012ea <__udivmoddi4+0xde>
 80014d6:	4464      	add	r4, ip
 80014d8:	3802      	subs	r0, #2
 80014da:	e742      	b.n	8001362 <__udivmoddi4+0x156>

080014dc <__aeabi_idiv0>:
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <__aeabi_d2uiz>:
 80014e0:	004a      	lsls	r2, r1, #1
 80014e2:	d211      	bcs.n	8001508 <__aeabi_d2uiz+0x28>
 80014e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80014e8:	d211      	bcs.n	800150e <__aeabi_d2uiz+0x2e>
 80014ea:	d50d      	bpl.n	8001508 <__aeabi_d2uiz+0x28>
 80014ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80014f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80014f4:	d40e      	bmi.n	8001514 <__aeabi_d2uiz+0x34>
 80014f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80014fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001502:	fa23 f002 	lsr.w	r0, r3, r2
 8001506:	4770      	bx	lr
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	4770      	bx	lr
 800150e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001512:	d102      	bne.n	800151a <__aeabi_d2uiz+0x3a>
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	4770      	bx	lr
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	4770      	bx	lr

08001520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800152e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4313      	orrs	r3, r2
 8001536:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800155e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4313      	orrs	r3, r2
 8001566:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001574:	68fb      	ldr	r3, [r7, #12]
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]

	  /* USER CODE END ADC_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc.Instance = ADC;
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_ADC_Init+0xc4>)
 8001592:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <MX_ADC_Init+0xc8>)
 8001594:	601a      	str	r2, [r3, #0]
	  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_ADC_Init+0xc4>)
 8001598:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800159c:	605a      	str	r2, [r3, #4]
	  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_ADC_Init+0xc4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
	  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_ADC_Init+0xc4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
	  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_ADC_Init+0xc4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
	  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_ADC_Init+0xc4>)
 80015b2:	2204      	movs	r2, #4
 80015b4:	615a      	str	r2, [r3, #20]
	  hadc.Init.LowPowerAutoWait = DISABLE;
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_ADC_Init+0xc4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	761a      	strb	r2, [r3, #24]
	  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_ADC_Init+0xc4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	765a      	strb	r2, [r3, #25]
	  hadc.Init.ContinuousConvMode = DISABLE;
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_ADC_Init+0xc4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	769a      	strb	r2, [r3, #26]
	  hadc.Init.NbrOfConversion = 1;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_ADC_Init+0xc4>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	61da      	str	r2, [r3, #28]
	  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_ADC_Init+0xc4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_ADC_Init+0xc4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
	  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_ADC_Init+0xc4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc.Init.DMAContinuousRequests = DISABLE;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_ADC_Init+0xc4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_ADC_Init+0xc4>)
 80015ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_ADC_Init+0xc4>)
 80015f4:	2206      	movs	r2, #6
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
	  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_ADC_Init+0xc4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
	  hadc.Init.OversamplingMode = DISABLE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_ADC_Init+0xc4>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_ADC_Init+0xc4>)
 8001608:	2200      	movs	r2, #0
 800160a:	64da      	str	r2, [r3, #76]	; 0x4c
	  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_ADC_Init+0xc4>)
 800160e:	f004 fae7 	bl	8005be0 <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC_Init+0x9c>
	  {
	    Error_Handler();
 8001618:	f000 fdd0 	bl	80021bc <Error_Handler>


	  /* USER CODE BEGIN ADC_Init 2 */
	  /** Configure Regular Channel
		  */
		  sConfig.Channel = ADC_CHANNEL_3;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_ADC_Init+0xcc>)
 800161e:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
		  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_ADC_Init+0xc4>)
 800162e:	f004 fd75 	bl	800611c <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC_Init+0xbc>
		  {
		    Error_Handler();
 8001638:	f000 fdc0 	bl	80021bc <Error_Handler>
		  }
	  /* USER CODE END ADC_Init 2 */


}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000024c 	.word	0x2000024c
 8001648:	40012400 	.word	0x40012400
 800164c:	0c000008 	.word	0x0c000008

08001650 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <HAL_ADC_MspInit+0x50>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d112      	bne.n	8001698 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001676:	f7ff ff6b 	bl	8001550 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2002      	movs	r0, #2
 800167c:	f7ff ff50 	bl	8001520 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001680:	2310      	movs	r3, #16
 8001682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001684:	2303      	movs	r3, #3
 8001686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4619      	mov	r1, r3
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <HAL_ADC_MspInit+0x54>)
 8001694:	f005 fe4a 	bl	800732c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40012400 	.word	0x40012400
 80016a4:	48000400 	.word	0x48000400

080016a8 <Berechnung_Akkustand>:
/* Berechnung des Akkustands
 * Einstellen der Parameter (R1,R2)
 * Übergabe: /
 * Rückgabe: berechneter Akkustand
 */
float Berechnung_Akkustand(uint32_t R1, uint32_t R2) {
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]

	//Wegen Wakeup neuinit nötig!
	MX_ADC_Init();
 80016b2:	f7ff ff65 	bl	8001580 <MX_ADC_Init>
	uint32_t adc0;
	float Vin;
	float Vakku;

	HAL_ADC_Start(&hadc);
 80016b6:	4828      	ldr	r0, [pc, #160]	; (8001758 <Berechnung_Akkustand+0xb0>)
 80016b8:	f004 fc46 	bl	8005f48 <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc, 1000) == HAL_OK) //ADC Conversion True
 80016bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016c0:	4825      	ldr	r0, [pc, #148]	; (8001758 <Berechnung_Akkustand+0xb0>)
 80016c2:	f004 fc87 	bl	8005fd4 <HAL_ADC_PollForConversion>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d139      	bne.n	8001740 <Berechnung_Akkustand+0x98>
			{
		adc0 = HAL_ADC_GetValue(&hadc); ///Wert der Conversion in adc0 speichern
 80016cc:	4822      	ldr	r0, [pc, #136]	; (8001758 <Berechnung_Akkustand+0xb0>)
 80016ce:	f004 fd18 	bl	8006102 <HAL_ADC_GetValue>
 80016d2:	6138      	str	r0, [r7, #16]
		Vin = (((float)adc0 / BITMAX) * VMAX);
 80016d4:	6938      	ldr	r0, [r7, #16]
 80016d6:	f7ff fb45 	bl	8000d64 <__aeabi_ui2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	491f      	ldr	r1, [pc, #124]	; (800175c <Berechnung_Akkustand+0xb4>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fc4c 	bl	8000f7c <__aeabi_fdiv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff06 	bl	80004f8 <__aeabi_f2d>
 80016ec:	a318      	add	r3, pc, #96	; (adr r3, 8001750 <Berechnung_Akkustand+0xa8>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe ff59 	bl	80005a8 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff fa2b 	bl	8000b58 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	60fb      	str	r3, [r7, #12]
		Vakku = Vin * (((float)R2 + (float)R1) / (float)R2); //Vin Berechnen (Spg.teiler mit einbezogen)
 8001706:	6838      	ldr	r0, [r7, #0]
 8001708:	f7ff fb2c 	bl	8000d64 <__aeabi_ui2f>
 800170c:	4604      	mov	r4, r0
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fb28 	bl	8000d64 <__aeabi_ui2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4619      	mov	r1, r3
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fa73 	bl	8000c04 <__addsf3>
 800171e:	4603      	mov	r3, r0
 8001720:	461c      	mov	r4, r3
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f7ff fb1e 	bl	8000d64 <__aeabi_ui2f>
 8001728:	4603      	mov	r3, r0
 800172a:	4619      	mov	r1, r3
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fc25 	bl	8000f7c <__aeabi_fdiv>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff fb6c 	bl	8000e14 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	617b      	str	r3, [r7, #20]
	}

	return Vakku;
 8001740:	697b      	ldr	r3, [r7, #20]
}
 8001742:	4618      	mov	r0, r3
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	66666666 	.word	0x66666666
 8001754:	400a6666 	.word	0x400a6666
 8001758:	2000024c 	.word	0x2000024c
 800175c:	457ff000 	.word	0x457ff000

08001760 <Ausgabe_Akkustand>:

/* Ausgabe des Prozentwerts und der Spannung über UART
 * Übergabe: berechneter Akkustand
 * Rückgabe: berechneter Prozentwert
 */
int Ausgabe_Akkustand(float Vakku) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	int Prozentwert;

	if (Vakku >= 4.1) {
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7fe fec5 	bl	80004f8 <__aeabi_f2d>
 800176e:	a350      	add	r3, pc, #320	; (adr r3, 80018b0 <Ausgabe_Akkustand+0x150>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7ff f99e 	bl	8000ab4 <__aeabi_dcmpge>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <Ausgabe_Akkustand+0x24>
		Prozentwert = 100; //100%
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e08d      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 4.0) && (Vakku <= 4.1)) {
 8001784:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fcf5 	bl	8001178 <__aeabi_fcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00d      	beq.n	80017b0 <Ausgabe_Akkustand+0x50>
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe feaf 	bl	80004f8 <__aeabi_f2d>
 800179a:	a345      	add	r3, pc, #276	; (adr r3, 80018b0 <Ausgabe_Akkustand+0x150>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7ff f97e 	bl	8000aa0 <__aeabi_dcmple>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <Ausgabe_Akkustand+0x50>
		Prozentwert = 90;		//90
 80017aa:	235a      	movs	r3, #90	; 0x5a
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e077      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.9) && (Vakku <= 4.0)) {
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7fe fea1 	bl	80004f8 <__aeabi_f2d>
 80017b6:	a340      	add	r3, pc, #256	; (adr r3, 80018b8 <Ausgabe_Akkustand+0x158>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7ff f97a 	bl	8000ab4 <__aeabi_dcmpge>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <Ausgabe_Akkustand+0x7c>
 80017c6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fcca 	bl	8001164 <__aeabi_fcmple>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <Ausgabe_Akkustand+0x7c>
		Prozentwert = 80;		//80%
 80017d6:	2350      	movs	r3, #80	; 0x50
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e061      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.8) && (Vakku <= 3.9)) {
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7fe fe8b 	bl	80004f8 <__aeabi_f2d>
 80017e2:	a337      	add	r3, pc, #220	; (adr r3, 80018c0 <Ausgabe_Akkustand+0x160>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7ff f964 	bl	8000ab4 <__aeabi_dcmpge>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00d      	beq.n	800180e <Ausgabe_Akkustand+0xae>
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fe80 	bl	80004f8 <__aeabi_f2d>
 80017f8:	a32f      	add	r3, pc, #188	; (adr r3, 80018b8 <Ausgabe_Akkustand+0x158>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7ff f94f 	bl	8000aa0 <__aeabi_dcmple>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <Ausgabe_Akkustand+0xae>
		Prozentwert = 60;		//60%
 8001808:	233c      	movs	r3, #60	; 0x3c
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e048      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.7) && (Vakku <= 3.8)) {
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fe72 	bl	80004f8 <__aeabi_f2d>
 8001814:	a32c      	add	r3, pc, #176	; (adr r3, 80018c8 <Ausgabe_Akkustand+0x168>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7ff f94b 	bl	8000ab4 <__aeabi_dcmpge>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00d      	beq.n	8001840 <Ausgabe_Akkustand+0xe0>
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7fe fe67 	bl	80004f8 <__aeabi_f2d>
 800182a:	a325      	add	r3, pc, #148	; (adr r3, 80018c0 <Ausgabe_Akkustand+0x160>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7ff f936 	bl	8000aa0 <__aeabi_dcmple>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <Ausgabe_Akkustand+0xe0>
		Prozentwert = 40;		//40%
 800183a:	2328      	movs	r3, #40	; 0x28
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e02f      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.6) && (Vakku <= 3.7)) {
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7fe fe59 	bl	80004f8 <__aeabi_f2d>
 8001846:	a322      	add	r3, pc, #136	; (adr r3, 80018d0 <Ausgabe_Akkustand+0x170>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7ff f932 	bl	8000ab4 <__aeabi_dcmpge>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <Ausgabe_Akkustand+0x112>
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe fe4e 	bl	80004f8 <__aeabi_f2d>
 800185c:	a31a      	add	r3, pc, #104	; (adr r3, 80018c8 <Ausgabe_Akkustand+0x168>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7ff f91d 	bl	8000aa0 <__aeabi_dcmple>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <Ausgabe_Akkustand+0x112>
		Prozentwert = 20;		//20%
 800186c:	2314      	movs	r3, #20
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e016      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku <= 3.6) && (Vakku > 3)) {
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fe40 	bl	80004f8 <__aeabi_f2d>
 8001878:	a315      	add	r3, pc, #84	; (adr r3, 80018d0 <Ausgabe_Akkustand+0x170>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7ff f90f 	bl	8000aa0 <__aeabi_dcmple>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <Ausgabe_Akkustand+0x13c>
 8001888:	4913      	ldr	r1, [pc, #76]	; (80018d8 <Ausgabe_Akkustand+0x178>)
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fc7e 	bl	800118c <__aeabi_fcmpgt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <Ausgabe_Akkustand+0x13c>
		Prozentwert = 0;		//0%
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e001      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else
		Prozentwert = 255;
 800189c:	23ff      	movs	r3, #255	; 0xff
 800189e:	60fb      	str	r3, [r7, #12]
	return (Prozentwert);
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	66666666 	.word	0x66666666
 80018b4:	40106666 	.word	0x40106666
 80018b8:	33333333 	.word	0x33333333
 80018bc:	400f3333 	.word	0x400f3333
 80018c0:	66666666 	.word	0x66666666
 80018c4:	400e6666 	.word	0x400e6666
 80018c8:	9999999a 	.word	0x9999999a
 80018cc:	400d9999 	.word	0x400d9999
 80018d0:	cccccccd 	.word	0xcccccccd
 80018d4:	400ccccc 	.word	0x400ccccc
 80018d8:	40400000 	.word	0x40400000

080018dc <BT_UART_RXCallback>:
static void memcpy_char_dword(uint64_t * targetword, uint8_t * chararray);

/*FDEF*/


void BT_UART_RXCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
	oldPos = newPos;
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <BT_UART_RXCallback+0x150>)
 80018ea:	881a      	ldrh	r2, [r3, #0]
 80018ec:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <BT_UART_RXCallback+0x154>)
 80018ee:	801a      	strh	r2, [r3, #0]

	if (oldPos+Size > MainBuf_SIZE) {
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <BT_UART_RXCallback+0x154>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	4413      	add	r3, r2
 80018fa:	2bc8      	cmp	r3, #200	; 0xc8
 80018fc:	dd22      	ble.n	8001944 <BT_UART_RXCallback+0x68>
		uint16_t datatocopy = MainBuf_SIZE-oldPos;
 80018fe:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <BT_UART_RXCallback+0x154>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001906:	81fb      	strh	r3, [r7, #14]
		memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);
 8001908:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <BT_UART_RXCallback+0x154>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <BT_UART_RXCallback+0x158>)
 8001910:	4413      	add	r3, r2
 8001912:	89fa      	ldrh	r2, [r7, #14]
 8001914:	4948      	ldr	r1, [pc, #288]	; (8001a38 <BT_UART_RXCallback+0x15c>)
 8001916:	4618      	mov	r0, r3
 8001918:	f00f fb04 	bl	8010f24 <memcpy>
			oldPos = 0;
 800191c:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <BT_UART_RXCallback+0x154>)
 800191e:	2200      	movs	r2, #0
 8001920:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	4a44      	ldr	r2, [pc, #272]	; (8001a38 <BT_UART_RXCallback+0x15c>)
 8001926:	1899      	adds	r1, r3, r2
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	461a      	mov	r2, r3
 8001930:	4840      	ldr	r0, [pc, #256]	; (8001a34 <BT_UART_RXCallback+0x158>)
 8001932:	f00f faf7 	bl	8010f24 <memcpy>
			newPos = (Size-datatocopy);
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	89fb      	ldrh	r3, [r7, #14]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <BT_UART_RXCallback+0x150>)
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	e010      	b.n	8001966 <BT_UART_RXCallback+0x8a>
	}

	else {
		memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 8001944:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <BT_UART_RXCallback+0x154>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <BT_UART_RXCallback+0x158>)
 800194c:	4413      	add	r3, r2
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	4939      	ldr	r1, [pc, #228]	; (8001a38 <BT_UART_RXCallback+0x15c>)
 8001952:	4618      	mov	r0, r3
 8001954:	f00f fae6 	bl	8010f24 <memcpy>
		newPos = Size+oldPos;
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <BT_UART_RXCallback+0x154>)
 800195a:	881a      	ldrh	r2, [r3, #0]
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	4413      	add	r3, r2
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <BT_UART_RXCallback+0x150>)
 8001964:	801a      	strh	r2, [r3, #0]
	}

	rxSize = Size;
 8001966:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <BT_UART_RXCallback+0x160>)
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	8013      	strh	r3, [r2, #0]
	flag_RX_Done = 1;
 800196c:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <BT_UART_RXCallback+0x164>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]

	/*Abort reception while received data is evaluated*/
	HAL_UART_AbortReceive(&hlpuart1);
 8001972:	4834      	ldr	r0, [pc, #208]	; (8001a44 <BT_UART_RXCallback+0x168>)
 8001974:	f008 fd34 	bl	800a3e0 <HAL_UART_AbortReceive>


	/*Evaluate received data*/
	if (strncmp((char*)MainBuf, "GSMTest", 7) == 0){
 8001978:	2207      	movs	r2, #7
 800197a:	4933      	ldr	r1, [pc, #204]	; (8001a48 <BT_UART_RXCallback+0x16c>)
 800197c:	482d      	ldr	r0, [pc, #180]	; (8001a34 <BT_UART_RXCallback+0x158>)
 800197e:	f00f ff87 	bl	8011890 <strncmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <BT_UART_RXCallback+0xb4>
		commandflag = 1;
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <BT_UART_RXCallback+0x170>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
	/*If more Data is expected: */
	//HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
	//__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);


}
 800198e:	e049      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "Batterytest", 11) == 0){
 8001990:	220b      	movs	r2, #11
 8001992:	492f      	ldr	r1, [pc, #188]	; (8001a50 <BT_UART_RXCallback+0x174>)
 8001994:	4827      	ldr	r0, [pc, #156]	; (8001a34 <BT_UART_RXCallback+0x158>)
 8001996:	f00f ff7b 	bl	8011890 <strncmp>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <BT_UART_RXCallback+0xcc>
		commandflag = 2;
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <BT_UART_RXCallback+0x170>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
}
 80019a6:	e03d      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "LoRaDevices", 11) == 0){
 80019a8:	220b      	movs	r2, #11
 80019aa:	492a      	ldr	r1, [pc, #168]	; (8001a54 <BT_UART_RXCallback+0x178>)
 80019ac:	4821      	ldr	r0, [pc, #132]	; (8001a34 <BT_UART_RXCallback+0x158>)
 80019ae:	f00f ff6f 	bl	8011890 <strncmp>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d103      	bne.n	80019c0 <BT_UART_RXCallback+0xe4>
		commandflag = 3;
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <BT_UART_RXCallback+0x170>)
 80019ba:	2203      	movs	r2, #3
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	e031      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "Startsleep", 10) == 0){
 80019c0:	220a      	movs	r2, #10
 80019c2:	4925      	ldr	r1, [pc, #148]	; (8001a58 <BT_UART_RXCallback+0x17c>)
 80019c4:	481b      	ldr	r0, [pc, #108]	; (8001a34 <BT_UART_RXCallback+0x158>)
 80019c6:	f00f ff63 	bl	8011890 <strncmp>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <BT_UART_RXCallback+0xfc>
		commandflag = 4;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <BT_UART_RXCallback+0x170>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	701a      	strb	r2, [r3, #0]
}
 80019d6:	e025      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "NewNr: ", 6) == 0){
 80019d8:	2206      	movs	r2, #6
 80019da:	4920      	ldr	r1, [pc, #128]	; (8001a5c <BT_UART_RXCallback+0x180>)
 80019dc:	4815      	ldr	r0, [pc, #84]	; (8001a34 <BT_UART_RXCallback+0x158>)
 80019de:	f00f ff57 	bl	8011890 <strncmp>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <BT_UART_RXCallback+0x122>
		commandflag = 5;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <BT_UART_RXCallback+0x170>)
 80019ea:	2205      	movs	r2, #5
 80019ec:	701a      	strb	r2, [r3, #0]
		memcpy(mobilenr_set, MainBuf+sizeof("NewNr: ")-1, 14);
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <BT_UART_RXCallback+0x184>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	491c      	ldr	r1, [pc, #112]	; (8001a64 <BT_UART_RXCallback+0x188>)
 80019f4:	220e      	movs	r2, #14
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00f fa94 	bl	8010f24 <memcpy>
}
 80019fc:	e012      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "NewWakeup: ", 10) == 0){
 80019fe:	220a      	movs	r2, #10
 8001a00:	4919      	ldr	r1, [pc, #100]	; (8001a68 <BT_UART_RXCallback+0x18c>)
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <BT_UART_RXCallback+0x158>)
 8001a04:	f00f ff44 	bl	8011890 <strncmp>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <BT_UART_RXCallback+0x144>
		commandflag = 6;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <BT_UART_RXCallback+0x170>)
 8001a10:	2206      	movs	r2, #6
 8001a12:	701a      	strb	r2, [r3, #0]
		memcpy_char_dword(&wakeup_set, MainBuf+sizeof("NewWakeup: ")-1);
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <BT_UART_RXCallback+0x190>)
 8001a16:	4619      	mov	r1, r3
 8001a18:	4815      	ldr	r0, [pc, #84]	; (8001a70 <BT_UART_RXCallback+0x194>)
 8001a1a:	f000 f867 	bl	8001aec <memcpy_char_dword>
}
 8001a1e:	e001      	b.n	8001a24 <BT_UART_RXCallback+0x148>
		SetUpTXRXCycle_BTUART();
 8001a20:	f000 f828 	bl	8001a74 <SetUpTXRXCycle_BTUART>
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200003e2 	.word	0x200003e2
 8001a30:	200003e0 	.word	0x200003e0
 8001a34:	20000318 	.word	0x20000318
 8001a38:	200002b4 	.word	0x200002b4
 8001a3c:	200003e4 	.word	0x200003e4
 8001a40:	200002b1 	.word	0x200002b1
 8001a44:	20000478 	.word	0x20000478
 8001a48:	08014c40 	.word	0x08014c40
 8001a4c:	20000960 	.word	0x20000960
 8001a50:	08014c48 	.word	0x08014c48
 8001a54:	08014c54 	.word	0x08014c54
 8001a58:	08014c60 	.word	0x08014c60
 8001a5c:	08014c6c 	.word	0x08014c6c
 8001a60:	20000000 	.word	0x20000000
 8001a64:	2000031f 	.word	0x2000031f
 8001a68:	08014c74 	.word	0x08014c74
 8001a6c:	20000323 	.word	0x20000323
 8001a70:	200008e0 	.word	0x200008e0

08001a74 <SetUpTXRXCycle_BTUART>:

void SetUpTXRXCycle_BTUART(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	/*clear Buffer and flags*/
	memset(RxBuf, 0, RxBuf_SIZE);
 8001a78:	2264      	movs	r2, #100	; 0x64
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <SetUpTXRXCycle_BTUART+0x54>)
 8001a7e:	f00f fa5f 	bl	8010f40 <memset>
	memset(MainBuf, 0, MainBuf_SIZE);
 8001a82:	22c8      	movs	r2, #200	; 0xc8
 8001a84:	2100      	movs	r1, #0
 8001a86:	4811      	ldr	r0, [pc, #68]	; (8001acc <SetUpTXRXCycle_BTUART+0x58>)
 8001a88:	f00f fa5a 	bl	8010f40 <memset>
	oldPos = 0;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <SetUpTXRXCycle_BTUART+0x5c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <SetUpTXRXCycle_BTUART+0x60>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	801a      	strh	r2, [r3, #0]
	flag_RX_Done = 0;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <SetUpTXRXCycle_BTUART+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
	rxSize = 0;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <SetUpTXRXCycle_BTUART+0x68>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	801a      	strh	r2, [r3, #0]
	flag_timeout = 0;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <SetUpTXRXCycle_BTUART+0x6c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]

	/*Start DMA to be prepared for RX*/
	HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, RxBuf, RxBuf_SIZE);
 8001aaa:	2264      	movs	r2, #100	; 0x64
 8001aac:	4906      	ldr	r1, [pc, #24]	; (8001ac8 <SetUpTXRXCycle_BTUART+0x54>)
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <SetUpTXRXCycle_BTUART+0x70>)
 8001ab0:	f00a fe5f 	bl	800c772 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <SetUpTXRXCycle_BTUART+0x74>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <SetUpTXRXCycle_BTUART+0x74>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200002b4 	.word	0x200002b4
 8001acc:	20000318 	.word	0x20000318
 8001ad0:	200003e0 	.word	0x200003e0
 8001ad4:	200003e2 	.word	0x200003e2
 8001ad8:	200002b1 	.word	0x200002b1
 8001adc:	200003e4 	.word	0x200003e4
 8001ae0:	200002b0 	.word	0x200002b0
 8001ae4:	20000478 	.word	0x20000478
 8001ae8:	20000628 	.word	0x20000628

08001aec <memcpy_char_dword>:


/*
 * Memcopy for char array of 8 to doubleword -> for example '0''0''0''1''2''5''5''5'' => 12555
 */
static void memcpy_char_dword(uint64_t * targetword, uint8_t * chararray){
 8001aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	*targetword = 0;
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 7; i >= 0; i--){
 8001b06:	2307      	movs	r3, #7
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e032      	b.n	8001b72 <memcpy_char_dword+0x86>
		*targetword += (chararray[i]-48) * (uint64_t)pow(10, (double)(8-(i+1)));
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	3b30      	subs	r3, #48	; 0x30
 8001b16:	17da      	asrs	r2, r3, #31
 8001b18:	4698      	mov	r8, r3
 8001b1a:	4691      	mov	r9, r2
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fcd6 	bl	80004d4 <__aeabi_i2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	4914      	ldr	r1, [pc, #80]	; (8001b84 <memcpy_char_dword+0x98>)
 8001b32:	f012 f993 	bl	8013e5c <pow>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff fb47 	bl	80011d0 <__aeabi_d2ulz>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	fb02 f009 	mul.w	r0, r2, r9
 8001b4a:	fb08 f103 	mul.w	r1, r8, r3
 8001b4e:	4401      	add	r1, r0
 8001b50:	fba8 4502 	umull	r4, r5, r8, r2
 8001b54:	194b      	adds	r3, r1, r5
 8001b56:	461d      	mov	r5, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	eb14 0a02 	adds.w	sl, r4, r2
 8001b62:	eb45 0b03 	adc.w	fp, r5, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	e9c3 ab00 	strd	sl, fp, [r3]
	for (int i = 7; i >= 0; i--){
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dac9      	bge.n	8001b0c <memcpy_char_dword+0x20>
	}
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b84:	40240000 	.word	0x40240000

08001b88 <HAL_GPIO_EXTI_Callback>:
/*private function prototypes*/
static void onButtonTimmerEvent(void *context);

//Overwrite weak callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* When user button Interrupt came */
  if (GPIO_Pin == BUT_BOOT_Pin) {
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b98:	d10d      	bne.n	8001bb6 <HAL_GPIO_EXTI_Callback+0x2e>
	  commandflag = 0;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
	  //Create and start timer of 200ms
	  UTIL_TIMER_Create(&timerButton, BUTTONREAD_TIME_MS, UTIL_TIMER_ONESHOT, onButtonTimmerEvent, NULL);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	21c8      	movs	r1, #200	; 0xc8
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001bac:	f00e fca6 	bl	80104fc <UTIL_TIMER_Create>

	  UTIL_TIMER_Start(&timerButton);
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001bb2:	f00e fcd9 	bl	8010568 <UTIL_TIMER_Start>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000960 	.word	0x20000960
 8001bc4:	08001bcd 	.word	0x08001bcd
 8001bc8:	200003e8 	.word	0x200003e8

08001bcc <onButtonTimmerEvent>:


static void onButtonTimmerEvent(void *context) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	buttontimesctr++;
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001bde:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(BUT_BOOT_GPIO_Port, BUT_BOOT_Pin) == 0){
 8001be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be4:	4823      	ldr	r0, [pc, #140]	; (8001c74 <onButtonTimmerEvent+0xa8>)
 8001be6:	f005 fdcf 	bl	8007788 <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <onButtonTimmerEvent+0x2c>
		//if button still pressed then start timer again
		UTIL_TIMER_Start(&timerButton);
 8001bf0:	4821      	ldr	r0, [pc, #132]	; (8001c78 <onButtonTimmerEvent+0xac>)
 8001bf2:	f00e fcb9 	bl	8010568 <UTIL_TIMER_Start>
			//if button is pressed longer than 10 seconds, commandflag is 4
			 commandflag = 4;
			 buttontimesctr = 0;
		}
	}
}
 8001bf6:	e036      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
		if (buttontimesctr < 10) {
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d809      	bhi.n	8001c14 <onButtonTimmerEvent+0x48>
			commandflag = 1;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <onButtonTimmerEvent+0xb0>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
			buttonpressdone = 1;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <onButtonTimmerEvent+0xb4>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
			buttontimesctr = 0;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	801a      	strh	r2, [r3, #0]
}
 8001c12:	e028      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
		else if (buttontimesctr >= 10 && buttontimesctr < 25 ) {
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d90a      	bls.n	8001c32 <onButtonTimmerEvent+0x66>
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b18      	cmp	r3, #24
 8001c22:	d806      	bhi.n	8001c32 <onButtonTimmerEvent+0x66>
			commandflag = 2;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <onButtonTimmerEvent+0xb0>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	701a      	strb	r2, [r3, #0]
			buttontimesctr = 0;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	e019      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
		else if (buttontimesctr >= 25 && buttontimesctr < 50){
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b18      	cmp	r3, #24
 8001c38:	d90a      	bls.n	8001c50 <onButtonTimmerEvent+0x84>
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	2b31      	cmp	r3, #49	; 0x31
 8001c40:	d806      	bhi.n	8001c50 <onButtonTimmerEvent+0x84>
			commandflag = 3;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <onButtonTimmerEvent+0xb0>)
 8001c44:	2203      	movs	r2, #3
 8001c46:	701a      	strb	r2, [r3, #0]
			buttontimesctr = 0;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	e00a      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
		else if (buttontimesctr >= 50){
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2b31      	cmp	r3, #49	; 0x31
 8001c56:	d906      	bls.n	8001c66 <onButtonTimmerEvent+0x9a>
			 commandflag = 4;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <onButtonTimmerEvent+0xb0>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	701a      	strb	r2, [r3, #0]
			 buttontimesctr = 0;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	801a      	strh	r2, [r3, #0]
}
 8001c64:	e7ff      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000400 	.word	0x20000400
 8001c74:	48000400 	.word	0x48000400
 8001c78:	200003e8 	.word	0x200003e8
 8001c7c:	20000960 	.word	0x20000960
 8001c80:	20000961 	.word	0x20000961

08001c84 <LL_AHB1_GRP1_EnableClock>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cb8:	2004      	movs	r0, #4
 8001cba:	f7ff ffe3 	bl	8001c84 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff ffe0 	bl	8001c84 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f7ff ffdd 	bl	8001c84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2102      	movs	r1, #2
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f004 fcd9 	bl	8006686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cd4:	200f      	movs	r0, #15
 8001cd6:	f004 fcf0 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2010      	movs	r0, #16
 8001ce0:	f004 fcd1 	bl	8006686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ce4:	2010      	movs	r0, #16
 8001ce6:	f004 fce8 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	203a      	movs	r0, #58	; 0x3a
 8001cf0:	f004 fcc9 	bl	8006686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001cf4:	203a      	movs	r0, #58	; 0x3a
 8001cf6:	f004 fce0 	bl	80066ba <HAL_NVIC_EnableIRQ>

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <Eraseflash_func>:
static uint32_t GetPage(uint32_t Address);



/*PFDs*/
void Eraseflash_func(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	/* Erase the user Flash area (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
	HAL_FLASH_Unlock();
 8001d04:	f005 f93c 	bl	8006f80 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <Eraseflash_func+0x5c>)
 8001d0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d0e:	611a      	str	r2, [r3, #16]
	FirstPage = GetPage(FLASH_USER_START_ADDR);
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <Eraseflash_func+0x60>)
 8001d12:	f000 f91b 	bl	8001f4c <GetPage>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <Eraseflash_func+0x64>)
 8001d1a:	6013      	str	r3, [r2, #0]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8001d1c:	4812      	ldr	r0, [pc, #72]	; (8001d68 <Eraseflash_func+0x68>)
 8001d1e:	f000 f915 	bl	8001f4c <GetPage>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <Eraseflash_func+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <Eraseflash_func+0x6c>)
 8001d2e:	6013      	str	r3, [r2, #0]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <Eraseflash_func+0x70>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = FirstPage;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <Eraseflash_func+0x64>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <Eraseflash_func+0x70>)
 8001d3c:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbPages = NbOfPages;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <Eraseflash_func+0x6c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <Eraseflash_func+0x70>)
 8001d44:	6093      	str	r3, [r2, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 8001d46:	490b      	ldr	r1, [pc, #44]	; (8001d74 <Eraseflash_func+0x74>)
 8001d48:	4809      	ldr	r0, [pc, #36]	; (8001d70 <Eraseflash_func+0x70>)
 8001d4a:	f005 fa1b 	bl	8007184 <HAL_FLASHEx_Erase>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d000      	beq.n	8001d56 <Eraseflash_func+0x56>
		while (1) {}
 8001d54:	e7fe      	b.n	8001d54 <Eraseflash_func+0x54>
		HAL_FLASH_Lock();
	}
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	58004000 	.word	0x58004000
 8001d60:	08030000 	.word	0x08030000
 8001d64:	20000404 	.word	0x20000404
 8001d68:	0803ffff 	.word	0x0803ffff
 8001d6c:	20000408 	.word	0x20000408
 8001d70:	20000418 	.word	0x20000418
 8001d74:	20000410 	.word	0x20000410

08001d78 <Writeflash_func>:


/* Die Übergebene Struktur "Parameter" wird in den Speicher geschrieben, dafür muss die größe der char Arrays beachtet werden, da der
 * Handynummer Array größer als ein doubleword ist, wird dieses auf zwei Arrays aufgeteilt. Die typkonvertierung findet mit memcpy statt.*/

void Writeflash_func(uint64_t Handynr1, uint64_t Handynr2, uint64_t wakeupmins) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d82:	e9c7 2300 	strd	r2, r3, [r7]

	HAL_FLASH_Unlock();
 8001d86:	f005 f8fb 	bl	8006f80 <HAL_FLASH_Unlock>
	Address = FLASH_USER_START_ADDR;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <Writeflash_func+0x94>)
 8001d8c:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <Writeflash_func+0x98>)
 8001d8e:	601a      	str	r2, [r3, #0]

	int err = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
	err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Handynr1);
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <Writeflash_func+0x94>)
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f005 f8ab 	bl	8006ef8 <HAL_FLASH_Program>
 8001da2:	4603      	mov	r3, r0
 8001da4:	617b      	str	r3, [r7, #20]
	if (err == HAL_OK) {
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10f      	bne.n	8001dcc <Writeflash_func+0x54>
		Address = Address + 8; /* increment to next double word*/
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <Writeflash_func+0x94>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3308      	adds	r3, #8
 8001db2:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <Writeflash_func+0x94>)
 8001db4:	6013      	str	r3, [r2, #0]
	} else {
		while (1) {}
	}

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Handynr2) == HAL_OK) {
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <Writeflash_func+0x94>)
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f005 f89a 	bl	8006ef8 <HAL_FLASH_Program>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d111      	bne.n	8001dee <Writeflash_func+0x76>
 8001dca:	e000      	b.n	8001dce <Writeflash_func+0x56>
		while (1) {}
 8001dcc:	e7fe      	b.n	8001dcc <Writeflash_func+0x54>
		Address = Address + 8; /* increment to next double word*/
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <Writeflash_func+0x94>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <Writeflash_func+0x94>)
 8001dd6:	6013      	str	r3, [r2, #0]
	} else {
		while (1) {}
	}

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, wakeupmins) == HAL_OK) {
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <Writeflash_func+0x94>)
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001de0:	2001      	movs	r0, #1
 8001de2:	f005 f889 	bl	8006ef8 <HAL_FLASH_Program>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <Writeflash_func+0x84>
 8001dec:	e000      	b.n	8001df0 <Writeflash_func+0x78>
		while (1) {}
 8001dee:	e7fe      	b.n	8001dee <Writeflash_func+0x76>
		Address = Address + 8; /* increment to next double word*/
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <Writeflash_func+0x94>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3308      	adds	r3, #8
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <Writeflash_func+0x94>)
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e000      	b.n	8001dfe <Writeflash_func+0x86>
	} else {
		while (1) {}
 8001dfc:	e7fe      	b.n	8001dfc <Writeflash_func+0x84>
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001dfe:	f005 f8e1 	bl	8006fc4 <HAL_FLASH_Lock>

}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000040c 	.word	0x2000040c
 8001e10:	08030000 	.word	0x08030000

08001e14 <Readflash_func>:

/* Die Funktion schreibt die im Flash abgelegten Daten in eine Struktur "Auslesen" und gibt diese zurück. Da beim schreiben des Flashs
 * die char Arrays als doubleword geschrieben werden, muss noch eine Typkonvertierung zurück in char stattfinden. Diese wird mittels memcpy erledigt.
 * Das Array der Handynummer wird am Ende aus den zwei gelesenen doublewords zusammengefügt.*/

Parametersatztype Readflash_func(void) {
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b092      	sub	sp, #72	; 0x48
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

	Parametersatztype Auslesen = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2230      	movs	r2, #48	; 0x30
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00f f88b 	bl	8010f40 <memset>

	Address = FLASH_USER_START_ADDR;
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <Readflash_func+0x128>)
 8001e2c:	4a44      	ldr	r2, [pc, #272]	; (8001f40 <Readflash_func+0x12c>)
 8001e2e:	601a      	str	r2, [r3, #0]
	MemoryProgramStatus = 0x0;
 8001e30:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <Readflash_func+0x130>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
	uint64_t speicher;

	if (Address < FLASH_USER_END_ADDR) {
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <Readflash_func+0x128>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a43      	ldr	r2, [pc, #268]	; (8001f48 <Readflash_func+0x134>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d20a      	bcs.n	8001e56 <Readflash_func+0x42>
		speicher = *(__IO uint64_t*) Address;
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <Readflash_func+0x128>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Address = Address + 8;
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <Readflash_func+0x128>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3308      	adds	r3, #8
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <Readflash_func+0x128>)
 8001e54:	6013      	str	r3, [r2, #0]
	}
	memcpy(Auslesen.Handynummer1, &speicher, sizeof(char) * 8);
 8001e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e5a:	f107 0208 	add.w	r2, r7, #8
 8001e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e62:	e883 0003 	stmia.w	r3, {r0, r1}

	if (Address < FLASH_USER_END_ADDR) {
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <Readflash_func+0x128>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a37      	ldr	r2, [pc, #220]	; (8001f48 <Readflash_func+0x134>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d20a      	bcs.n	8001e86 <Readflash_func+0x72>
		speicher = *(__IO uint64_t*) Address;
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <Readflash_func+0x128>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Address = Address + 8;
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <Readflash_func+0x128>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3308      	adds	r3, #8
 8001e82:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <Readflash_func+0x128>)
 8001e84:	6013      	str	r3, [r2, #0]
	}
	memcpy(Auslesen.Handynummer2, &speicher, sizeof(char) * 8);
 8001e86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e8a:	f107 0208 	add.w	r2, r7, #8
 8001e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e92:	e883 0003 	stmia.w	r3, {r0, r1}

	if (Address < FLASH_USER_END_ADDR) {
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <Readflash_func+0x128>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <Readflash_func+0x134>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d20a      	bcs.n	8001eb6 <Readflash_func+0xa2>
		speicher = *(__IO uint64_t*) Address;
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <Readflash_func+0x128>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Address = Address + 8;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <Readflash_func+0x128>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <Readflash_func+0x128>)
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
	}
	memcpy(&Auslesen.Wakeup, &speicher, sizeof(uint64_t));
 8001eba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	for (int i = 0; i <= 15; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec2:	e028      	b.n	8001f16 <Readflash_func+0x102>
		if (i <= 7)
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	2b07      	cmp	r3, #7
 8001ec8:	dc0b      	bgt.n	8001ee2 <Readflash_func+0xce>
			Auslesen.Handynummer[i] = Auslesen.Handynummer1[i];
 8001eca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed0:	4413      	add	r3, r2
 8001ed2:	7819      	ldrb	r1, [r3, #0]
 8001ed4:	f107 0210 	add.w	r2, r7, #16
 8001ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eda:	4413      	add	r3, r2
 8001edc:	460a      	mov	r2, r1
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e016      	b.n	8001f10 <Readflash_func+0xfc>
		else {
			for (int f = (i - 8); (i - f) == 8; f++) {
 8001ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee4:	3b08      	subs	r3, #8
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee8:	e00d      	b.n	8001f06 <Readflash_func+0xf2>
				Auslesen.Handynummer[i] = Auslesen.Handynummer2[f];
 8001eea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef0:	4413      	add	r3, r2
 8001ef2:	7819      	ldrb	r1, [r3, #0]
 8001ef4:	f107 0210 	add.w	r2, r7, #16
 8001ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001efa:	4413      	add	r3, r2
 8001efc:	460a      	mov	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
			for (int f = (i - 8); (i - f) == 8; f++) {
 8001f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f02:	3301      	adds	r3, #1
 8001f04:	643b      	str	r3, [r7, #64]	; 0x40
 8001f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d0ec      	beq.n	8001eea <Readflash_func+0xd6>
	for (int i = 0; i <= 15; i++) {
 8001f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f12:	3301      	adds	r3, #1
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
 8001f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	ddd3      	ble.n	8001ec4 <Readflash_func+0xb0>
			}

		}
	}

	return Auslesen;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	461d      	mov	r5, r3
 8001f20:	f107 0410 	add.w	r4, r7, #16
 8001f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

}
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	3748      	adds	r7, #72	; 0x48
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3c:	2000040c 	.word	0x2000040c
 8001f40:	08030000 	.word	0x08030000
 8001f44:	20000414 	.word	0x20000414
 8001f48:	0803ffff 	.word	0x0803ffff

08001f4c <GetPage>:
/**
 * @brief  Gets the page of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The page of a given address
 */
static uint32_t GetPage(uint32_t Addr) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001f5a:	0adb      	lsrs	r3, r3, #11
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <LL_AHB2_GRP1_EnableClock>:
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
	...

08001f98 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7ff ffda 	bl	8001f66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7ff ffd7 	bl	8001f66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	2004      	movs	r0, #4
 8001fba:	f7ff ffd4 	bl	8001f66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fbe:	2080      	movs	r0, #128	; 0x80
 8001fc0:	f7ff ffd1 	bl	8001f66 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Green_Pin|LED_Red_Pin|LED_Board_Pin, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f244 2120 	movw	r1, #16928	; 0x4220
 8001fca:	4835      	ldr	r0, [pc, #212]	; (80020a0 <MX_GPIO_Init+0x108>)
 8001fcc:	f005 fbf3 	bl	80077b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GSM_RSTPin_Pin|GSM_Switch_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f240 2101 	movw	r1, #513	; 0x201
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fda:	f005 fbec 	bl	80077b6 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); */

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REEDPin_Pin;
 8001fde:	2308      	movs	r3, #8
 8001fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(REEDPin_GPIO_Port, &GPIO_InitStruct);
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	482c      	ldr	r0, [pc, #176]	; (80020a0 <MX_GPIO_Init+0x108>)
 8001ff0:	f005 f99c 	bl	800732c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin;
 8001ff4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ff8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4825      	ldr	r0, [pc, #148]	; (80020a0 <MX_GPIO_Init+0x108>)
 800200c:	f005 f98e 	bl	800732c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); */

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Board_Pin;
 8002010:	2320      	movs	r3, #32
 8002012:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201c:	2302      	movs	r3, #2
 800201e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_Board_GPIO_Port, &GPIO_InitStruct);
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4619      	mov	r1, r3
 8002024:	481e      	ldr	r0, [pc, #120]	; (80020a0 <MX_GPIO_Init+0x108>)
 8002026:	f005 f981 	bl	800732c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GSM_RSTPin_Pin|GSM_Switch_Pin;
 800202a:	f240 2301 	movw	r3, #513	; 0x201
 800202e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002044:	f005 f972 	bl	800732c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_BOOT_Pin;
 8002048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800204e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002052:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002054:	2301      	movs	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT_BOOT_GPIO_Port, &GPIO_InitStruct);
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <MX_GPIO_Init+0x108>)
 800205e:	f005 f965 	bl	800732c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002062:	2308      	movs	r3, #8
 8002064:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002066:	2303      	movs	r3, #3
 8002068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	4619      	mov	r1, r3
 8002072:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MX_GPIO_Init+0x10c>)
 8002074:	f005 f95a 	bl	800732c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2009      	movs	r0, #9
 800207e:	f004 fb02 	bl	8006686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002082:	2009      	movs	r0, #9
 8002084:	f004 fb19 	bl	80066ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2029      	movs	r0, #41	; 0x29
 800208e:	f004 fafa 	bl	8006686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002092:	2029      	movs	r0, #41	; 0x29
 8002094:	f004 fb11 	bl	80066ba <HAL_NVIC_EnableIRQ>

}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	48000400 	.word	0x48000400
 80020a4:	48001c00 	.word	0x48001c00

080020a8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f023 0218 	bic.w	r2, r3, #24
 80020bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d8:	f003 fbfa 	bl	80058d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020dc:	f000 f814 	bl	8002108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e0:	f7ff ff5a 	bl	8001f98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020e4:	f000 ff20 	bl	8002f28 <MX_USART2_UART_Init>
  MX_SubGHz_Phy_Init();
 80020e8:	f001 ff01 	bl	8003eee <MX_SubGHz_Phy_Init>
  MX_ADC_Init();
 80020ec:	f7ff fa48 	bl	8001580 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 80020f0:	f000 fe80 	bl	8002df4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Write LEDBoard Pin high (off)
  HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 1);
 80020f4:	2201      	movs	r2, #1
 80020f6:	2120      	movs	r1, #32
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <main+0x30>)
 80020fa:	f005 fb5c 	bl	80077b6 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80020fe:	f001 fefe 	bl	8003efe <MX_SubGHz_Phy_Process>
 8002102:	e7fc      	b.n	80020fe <main+0x2a>
 8002104:	48000400 	.word	0x48000400

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b09a      	sub	sp, #104	; 0x68
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	f107 0320 	add.w	r3, r7, #32
 8002112:	2248      	movs	r2, #72	; 0x48
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f00e ff12 	bl	8010f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211c:	f107 0308 	add.w	r3, r7, #8
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800212e:	f005 fb8b 	bl	8007848 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff ffb8 	bl	80020a8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <SystemClock_Config+0xb0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <SystemClock_Config+0xb0>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <SystemClock_Config+0xb0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002154:	2324      	movs	r3, #36	; 0x24
 8002156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002158:	2381      	movs	r3, #129	; 0x81
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800215c:	2301      	movs	r3, #1
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002160:	2300      	movs	r3, #0
 8002162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002164:	23b0      	movs	r3, #176	; 0xb0
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002168:	2300      	movs	r3, #0
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	4618      	mov	r0, r3
 8002172:	f005 feb5 	bl	8007ee0 <HAL_RCC_OscConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800217c:	f000 f81e 	bl	80021bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8002180:	234f      	movs	r3, #79	; 0x4f
 8002182:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	2102      	movs	r1, #2
 800219e:	4618      	mov	r0, r3
 80021a0:	f006 fa3a 	bl	8008618 <HAL_RCC_ClockConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021aa:	f000 f807 	bl	80021bc <Error_Handler>
  }
}
 80021ae:	bf00      	nop
 80021b0:	3768      	adds	r7, #104	; 0x68
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	58000400 	.word	0x58000400

080021bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c0:	b672      	cpsid	i
}
 80021c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <Error_Handler+0x8>

080021c6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <LL_APB1_GRP1_EnableClock>:
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
	...

08002218 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	222c      	movs	r2, #44	; 0x2c
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f00e fe8b 	bl	8010f40 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <MX_RTC_Init+0x9c>)
 800222c:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <MX_RTC_Init+0xa0>)
 800222e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002232:	221f      	movs	r2, #31
 8002234:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002236:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <MX_RTC_Init+0x9c>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <MX_RTC_Init+0x9c>)
 800224a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800224e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002252:	2200      	movs	r2, #0
 8002254:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800225e:	4815      	ldr	r0, [pc, #84]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002260:	f006 fe96 	bl	8008f90 <HAL_RTC_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800226a:	f7ff ffa7 	bl	80021bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800226e:	4811      	ldr	r0, [pc, #68]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002270:	f007 f984 	bl	800957c <HAL_RTCEx_SetSSRU_IT>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800227a:	f7ff ff9f 	bl	80021bc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800228a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800228e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_RTC_Init+0x9c>)
 800229e:	f006 fef1 	bl	8009084 <HAL_RTC_SetAlarm_IT>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80022a8:	f7ff ff88 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	3730      	adds	r7, #48	; 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000424 	.word	0x20000424
 80022b8:	40002800 	.word	0x40002800

080022bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b090      	sub	sp, #64	; 0x40
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	2238      	movs	r2, #56	; 0x38
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00e fe37 	bl	8010f40 <memset>
  if(rtcHandle->Instance==RTC)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_RTC_MspInit+0x74>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d125      	bne.n	8002328 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	4618      	mov	r0, r3
 80022ee:	f006 fd35 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80022f8:	f7ff ff60 	bl	80021bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022fc:	f7ff ff63 	bl	80021c6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002300:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002304:	f7ff ff6f 	bl	80021e6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2002      	movs	r0, #2
 800230e:	f004 f9ba 	bl	8006686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002312:	2002      	movs	r0, #2
 8002314:	f004 f9d1 	bl	80066ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	202a      	movs	r0, #42	; 0x2a
 800231e:	f004 f9b2 	bl	8006686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002322:	202a      	movs	r0, #42	; 0x2a
 8002324:	f004 f9c9 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002328:	bf00      	nop
 800232a:	3740      	adds	r7, #64	; 0x40
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40002800 	.word	0x40002800

08002334 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800233a:	2201      	movs	r2, #1
 800233c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	58000400 	.word	0x58000400

0800234c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002368:	f003 fad2 	bl	8005910 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800236c:	f7ff ffe2 	bl	8002334 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002370:	2001      	movs	r0, #1
 8002372:	f005 fafb 	bl	800796c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}

0800237a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800237e:	f003 fad5 	bl	800592c <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002382:	f001 fd35 	bl	8003df0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}

0800238a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800238e:	f003 fabf 	bl	8005910 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002392:	2101      	movs	r1, #1
 8002394:	2000      	movs	r0, #0
 8002396:	f005 fa65 	bl	8007864 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}

0800239e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80023a2:	f003 fac3 	bl	800592c <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <NMI_Handler+0x4>

080023bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <HardFault_Handler+0x4>

080023c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <MemManage_Handler+0x4>

080023c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <BusFault_Handler+0x4>

080023ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <UsageFault_Handler+0x4>

080023d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800240a:	f007 f8f3 	bl	80095f4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000424 	.word	0x20000424

08002418 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line 3 Interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(REEDPin_Pin);
 800241c:	2008      	movs	r0, #8
 800241e:	f005 f9fb 	bl	8007818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <DMA1_Channel5_IRQHandler+0x10>)
 800242e:	f004 fbe9 	bl	8006c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000688 	.word	0x20000688

0800243c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <DMA1_Channel6_IRQHandler+0x10>)
 8002442:	f004 fbdf 	bl	8006c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000628 	.word	0x20000628

08002450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <USART1_IRQHandler+0x10>)
 8002456:	f008 f875 	bl	800a544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000508 	.word	0x20000508

08002464 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <USART2_IRQHandler+0x10>)
 800246a:	f008 f86b 	bl	800a544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000598 	.word	0x20000598

08002478 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <LPUART1_IRQHandler+0x10>)
 800247e:	f008 f861 	bl	800a544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000478 	.word	0x20000478

0800248c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002490:	2029      	movs	r0, #41	; 0x29
 8002492:	f004 f920 	bl	80066d6 <HAL_NVIC_DisableIRQ>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002496:	f3bf 8f4f 	dsb	sy
}
 800249a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800249c:	f3bf 8f6f 	isb	sy
}
 80024a0:	bf00      	nop
  //Ensure, that all IRQ Bits are Set before continuing. This way no second irq will fire accidently
  __DSB();
  __ISB();
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BOOT_Pin);
 80024a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024a6:	f005 f9b7 	bl	8007818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <RTC_Alarm_IRQHandler+0x10>)
 80024b6:	f006 ff4d 	bl	8009354 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000424 	.word	0x20000424

080024c4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80024ca:	f007 fbfb 	bl	8009cc4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000045c 	.word	0x2000045c

080024d8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 Channel 5 Interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <DMA2_Channel5_IRQHandler+0x10>)
 80024de:	f004 fb91 	bl	8006c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200006e8 	.word	0x200006e8

080024ec <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_SUBGHZ_Init+0x20>)
 8002522:	2210      	movs	r2, #16
 8002524:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_SUBGHZ_Init+0x20>)
 8002528:	f007 f950 	bl	80097cc <HAL_SUBGHZ_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002532:	f7ff fe43 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000045c 	.word	0x2000045c

08002540 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ffcf 	bl	80024ec <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2032      	movs	r0, #50	; 0x32
 8002554:	f004 f897 	bl	8006686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002558:	2032      	movs	r0, #50	; 0x32
 800255a:	f004 f8ae 	bl	80066ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff ffe8 	bl	8002566 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002596:	f00d ffa1 	bl	80104dc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <SystemApp_Init+0x38>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80025a0:	f000 f88a 	bl	80026b8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80025a4:	f00d fa42 	bl	800fa2c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80025a8:	4807      	ldr	r0, [pc, #28]	; (80025c8 <SystemApp_Init+0x3c>)
 80025aa:	f00d fadb 	bl	800fb64 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80025ae:	2002      	movs	r0, #2
 80025b0:	f00d fae6 	bl	800fb80 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80025b4:	f00d fcce 	bl	800ff54 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80025b8:	2101      	movs	r1, #1
 80025ba:	2001      	movs	r0, #1
 80025bc:	f00d fd0a 	bl	800ffd4 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000468 	.word	0x20000468
 80025c8:	080025d9 	.word	0x080025d9

080025cc <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80025d0:	f00d fd30 	bl	8010034 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00d ff40 	bl	801046c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <TimestampNow+0x3c>)
 80025f6:	2110      	movs	r1, #16
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f81d 	bl	8002638 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fd fdbe 	bl	8000180 <strlen>
 8002604:	4603      	mov	r3, r0
 8002606:	b29a      	uxth	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08014c80 	.word	0x08014c80

08002618 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800261c:	2101      	movs	r1, #1
 800261e:	2002      	movs	r0, #2
 8002620:	f00d fca8 	bl	800ff74 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800262c:	2100      	movs	r1, #0
 800262e:	2002      	movs	r0, #2
 8002630:	f00d fca0 	bl	800ff74 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002638:	b40c      	push	{r2, r3}
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f00e fae7 	bl	8010c24 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002660:	b002      	add	sp, #8
 8002662:	4770      	bx	lr

08002664 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_GetTick+0x24>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800268a:	f000 f99b 	bl	80029c4 <TIMER_IF_GetTimerValue>
 800268e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000468 	.word	0x20000468

080026a0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fa11 	bl	8002ad2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80026bc:	f003 f944 	bl	8005948 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80026c0:	f003 f948 	bl	8005954 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80026c4:	f003 f94c 	bl	8005960 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return 1;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <_kill>:

int _kill(int pid, int sig)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026e4:	f00e fbf4 	bl	8010ed0 <__errno>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2216      	movs	r2, #22
 80026ec:	601a      	str	r2, [r3, #0]
	return -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_exit>:

void _exit (int status)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002702:	f04f 31ff 	mov.w	r1, #4294967295
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffe7 	bl	80026da <_kill>
	while (1) {}		/* Make sure we hang here */
 800270c:	e7fe      	b.n	800270c <_exit+0x12>

0800270e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e00a      	b.n	8002736 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002720:	f3af 8000 	nop.w
 8002724:	4601      	mov	r1, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	60ba      	str	r2, [r7, #8]
 800272c:	b2ca      	uxtb	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	dbf0      	blt.n	8002720 <_read+0x12>
	}

return len;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e009      	b.n	800276e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	60ba      	str	r2, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	dbf1      	blt.n	800275a <_write+0x12>
	}
	return len;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_close>:

int _close(int file)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	return -1;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a6:	605a      	str	r2, [r3, #4]
	return 0;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <_isatty>:

int _isatty(int file)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	return 1;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f00e fb5e 	bl	8010ed0 <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20010000 	.word	0x20010000
 8002840:	00000400 	.word	0x00000400
 8002844:	2000046c 	.word	0x2000046c
 8002848:	20000f60 	.word	0x20000f60

0800284c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <TIMER_IF_Init+0x5c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	f083 0301 	eor.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01b      	beq.n	80028b4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <TIMER_IF_Init+0x60>)
 800287e:	f04f 32ff 	mov.w	r2, #4294967295
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002884:	f7ff fcc8 	bl	8002218 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002888:	f000 f856 	bl	8002938 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800288c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <TIMER_IF_Init+0x60>)
 8002892:	f006 fd03 	bl	800929c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <TIMER_IF_Init+0x60>)
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800289e:	4809      	ldr	r0, [pc, #36]	; (80028c4 <TIMER_IF_Init+0x60>)
 80028a0:	f006 fe3a 	bl	8009518 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f000 f9d3 	bl	8002c50 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80028aa:	f000 f85f 	bl	800296c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <TIMER_IF_Init+0x5c>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80028b4:	79fb      	ldrb	r3, [r7, #7]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000470 	.word	0x20000470
 80028c4:	20000424 	.word	0x20000424

080028c8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	; 0x38
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80028d6:	f107 0308 	add.w	r3, r7, #8
 80028da:	222c      	movs	r2, #44	; 0x2c
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f00e fb2e 	bl	8010f40 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80028e4:	f000 f828 	bl	8002938 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <TIMER_IF_StartTimer+0x68>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002900:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002904:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	2201      	movs	r2, #1
 8002912:	4619      	mov	r1, r3
 8002914:	4807      	ldr	r0, [pc, #28]	; (8002934 <TIMER_IF_StartTimer+0x6c>)
 8002916:	f006 fbb5 	bl	8009084 <HAL_RTC_SetAlarm_IT>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002920:	f7ff fc4c 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002924:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002928:	4618      	mov	r0, r3
 800292a:	3738      	adds	r7, #56	; 0x38
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000474 	.word	0x20000474
 8002934:	20000424 	.word	0x20000424

08002938 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <TIMER_IF_StopTimer+0x2c>)
 8002944:	2201      	movs	r2, #1
 8002946:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800294c:	4806      	ldr	r0, [pc, #24]	; (8002968 <TIMER_IF_StopTimer+0x30>)
 800294e:	f006 fca5 	bl	800929c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <TIMER_IF_StopTimer+0x30>)
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800295a:	79fb      	ldrb	r3, [r7, #7]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40002800 	.word	0x40002800
 8002968:	20000424 	.word	0x20000424

0800296c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002970:	f000 f98e 	bl	8002c90 <GetTimerTicks>
 8002974:	4603      	mov	r3, r0
 8002976:	4a03      	ldr	r2, [pc, #12]	; (8002984 <TIMER_IF_SetTimerContext+0x18>)
 8002978:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800297a:	4b02      	ldr	r3, [pc, #8]	; (8002984 <TIMER_IF_SetTimerContext+0x18>)
 800297c:	681b      	ldr	r3, [r3, #0]
}
 800297e:	4618      	mov	r0, r3
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000474 	.word	0x20000474

08002988 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <TIMER_IF_GetTimerContext+0x10>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	20000474 	.word	0x20000474

0800299c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80029a6:	f000 f973 	bl	8002c90 <GetTimerTicks>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80029b4:	687b      	ldr	r3, [r7, #4]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000474 	.word	0x20000474

080029c4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <TIMER_IF_GetTimerValue+0x24>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80029d6:	f000 f95b 	bl	8002c90 <GetTimerTicks>
 80029da:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80029dc:	687b      	ldr	r3, [r7, #4]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000470 	.word	0x20000470

080029ec <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80029f6:	2303      	movs	r3, #3
 80029f8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80029fa:	687b      	ldr	r3, [r7, #4]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002a06:	b5b0      	push	{r4, r5, r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a0e:	2100      	movs	r1, #0
 8002a10:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	2000      	movs	r0, #0
 8002a16:	460a      	mov	r2, r1
 8002a18:	4603      	mov	r3, r0
 8002a1a:	0d95      	lsrs	r5, r2, #22
 8002a1c:	0294      	lsls	r4, r2, #10
 8002a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	4620      	mov	r0, r4
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7fe fbb9 	bl	80011a0 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4613      	mov	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bdb0      	pop	{r4, r5, r7, pc}

08002a40 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002a40:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	2000      	movs	r0, #0
 8002a52:	460c      	mov	r4, r1
 8002a54:	4605      	mov	r5, r0
 8002a56:	4620      	mov	r0, r4
 8002a58:	4629      	mov	r1, r5
 8002a5a:	f04f 0a00 	mov.w	sl, #0
 8002a5e:	f04f 0b00 	mov.w	fp, #0
 8002a62:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002a66:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002a6a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002a6e:	4650      	mov	r0, sl
 8002a70:	4659      	mov	r1, fp
 8002a72:	1b02      	subs	r2, r0, r4
 8002a74:	eb61 0305 	sbc.w	r3, r1, r5
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	0099      	lsls	r1, r3, #2
 8002a82:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a86:	0090      	lsls	r0, r2, #2
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	eb12 0804 	adds.w	r8, r2, r4
 8002a90:	eb43 0905 	adc.w	r9, r3, r5
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa8:	4690      	mov	r8, r2
 8002aaa:	4699      	mov	r9, r3
 8002aac:	4640      	mov	r0, r8
 8002aae:	4649      	mov	r1, r9
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	0a82      	lsrs	r2, r0, #10
 8002aba:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002abe:	0a8b      	lsrs	r3, r1, #10
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ad0:	4770      	bx	lr

08002ad2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff93 	bl	8002a06 <TIMER_IF_Convert_ms2Tick>
 8002ae0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ae2:	f000 f8d5 	bl	8002c90 <GetTimerTicks>
 8002ae6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ae8:	e000      	b.n	8002aec <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002aea:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002aec:	f000 f8d0 	bl	8002c90 <GetTimerTicks>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f6      	bhi.n	8002aea <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002b0e:	f00d fe33 	bl	8010778 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002b22:	f000 f8a5 	bl	8002c70 <TIMER_IF_BkUp_Read_MSBticks>
 8002b26:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f88f 	bl	8002c50 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002b3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002b48:	f000 f8a2 	bl	8002c90 <GetTimerTicks>
 8002b4c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002b4e:	f000 f88f 	bl	8002c70 <TIMER_IF_BkUp_Read_MSBticks>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	2200      	movs	r2, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	60fa      	str	r2, [r7, #12]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	000b      	movs	r3, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	4605      	mov	r5, r0
 8002b72:	eb12 0804 	adds.w	r8, r2, r4
 8002b76:	eb43 0905 	adc.w	r9, r3, r5
 8002b7a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	0a82      	lsrs	r2, r0, #10
 8002b8c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002b90:	0a8b      	lsrs	r3, r1, #10
 8002b92:	4613      	mov	r3, r2
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002ba4:	f04f 0b00 	mov.w	fp, #0
 8002ba8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff46 	bl	8002a40 <TIMER_IF_Convert_Tick2ms>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3730      	adds	r7, #48	; 0x30
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bc8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4803      	ldr	r0, [pc, #12]	; (8002be4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002bd6:	f006 fd31 	bl	800963c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000424 	.word	0x20000424

08002be8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4803      	ldr	r0, [pc, #12]	; (8002c04 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002bf6:	f006 fd21 	bl	800963c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000424 	.word	0x20000424

08002c08 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002c12:	2100      	movs	r1, #0
 8002c14:	4804      	ldr	r0, [pc, #16]	; (8002c28 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002c16:	f006 fd29 	bl	800966c <HAL_RTCEx_BKUPRead>
 8002c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002c1c:	687b      	ldr	r3, [r7, #4]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000424 	.word	0x20000424

08002c2c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002c36:	2101      	movs	r1, #1
 8002c38:	4804      	ldr	r0, [pc, #16]	; (8002c4c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002c3a:	f006 fd17 	bl	800966c <HAL_RTCEx_BKUPRead>
 8002c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000424 	.word	0x20000424

08002c50 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4803      	ldr	r0, [pc, #12]	; (8002c6c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002c5e:	f006 fced 	bl	800963c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000424 	.word	0x20000424

08002c70 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002c76:	2102      	movs	r1, #2
 8002c78:	4804      	ldr	r0, [pc, #16]	; (8002c8c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002c7a:	f006 fcf7 	bl	800966c <HAL_RTCEx_BKUPRead>
 8002c7e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002c80:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000424 	.word	0x20000424

08002c90 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c96:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <GetTimerTicks+0x34>)
 8002c98:	f7ff fdd8 	bl	800284c <LL_RTC_TIME_GetSubSecond>
 8002c9c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c9e:	e003      	b.n	8002ca8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ca0:	4808      	ldr	r0, [pc, #32]	; (8002cc4 <GetTimerTicks+0x34>)
 8002ca2:	f7ff fdd3 	bl	800284c <LL_RTC_TIME_GetSubSecond>
 8002ca6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ca8:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <GetTimerTicks+0x34>)
 8002caa:	f7ff fdcf 	bl	800284c <LL_RTC_TIME_GetSubSecond>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d1f4      	bne.n	8002ca0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40002800 	.word	0x40002800

08002cc8 <LL_AHB2_GRP1_EnableClock>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cec:	68fb      	ldr	r3, [r7, #12]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <LL_APB1_GRP1_EnableClock>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <LL_APB1_GRP2_EnableClock>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <LL_APB1_GRP1_DisableClock>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6e:	4013      	ands	r3, r2
 8002d70:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <LL_APB1_GRP2_DisableClock>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d92:	4013      	ands	r3, r2
 8002d94:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <LL_APB2_GRP1_EnableClock>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <LL_APB2_GRP1_DisableClock>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de6:	4013      	ands	r3, r2
 8002de8:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002df8:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002dfa:	4a24      	ldr	r2, [pc, #144]	; (8002e8c <MX_LPUART1_UART_Init+0x98>)
 8002dfc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e24:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV2;
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e3c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e3e:	4812      	ldr	r0, [pc, #72]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e40:	f007 f8ff 	bl	800a042 <HAL_UART_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002e4a:	f7ff f9b7 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	480d      	ldr	r0, [pc, #52]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e52:	f009 fc12 	bl	800c67a <HAL_UARTEx_SetTxFifoThreshold>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002e5c:	f7ff f9ae 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e60:	2100      	movs	r1, #0
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e64:	f009 fc47 	bl	800c6f6 <HAL_UARTEx_SetRxFifoThreshold>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002e6e:	f7ff f9a5 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e74:	f009 fbc6 	bl	800c604 <HAL_UARTEx_EnableFifoMode>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002e7e:	f7ff f99d 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000478 	.word	0x20000478
 8002e8c:	40008000 	.word	0x40008000

08002e90 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e94:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <MX_USART1_UART_Init+0x94>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ed8:	4811      	ldr	r0, [pc, #68]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eda:	f007 f8b2 	bl	800a042 <HAL_UART_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ee4:	f7ff f96a 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	480d      	ldr	r0, [pc, #52]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eec:	f009 fbc5 	bl	800c67a <HAL_UARTEx_SetTxFifoThreshold>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ef6:	f7ff f961 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002efa:	2100      	movs	r1, #0
 8002efc:	4808      	ldr	r0, [pc, #32]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002efe:	f009 fbfa 	bl	800c6f6 <HAL_UARTEx_SetRxFifoThreshold>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f08:	f7ff f958 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002f0c:	4804      	ldr	r0, [pc, #16]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002f0e:	f009 fb79 	bl	800c604 <HAL_UARTEx_EnableFifoMode>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f18:	f7ff f950 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000508 	.word	0x20000508
 8002f24:	40013800 	.word	0x40013800

08002f28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <MX_USART2_UART_Init+0x94>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f32:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f70:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f72:	f007 f866 	bl	800a042 <HAL_UART_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f7c:	f7ff f91e 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f80:	2100      	movs	r1, #0
 8002f82:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f84:	f009 fb79 	bl	800c67a <HAL_UARTEx_SetTxFifoThreshold>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f8e:	f7ff f915 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f92:	2100      	movs	r1, #0
 8002f94:	4808      	ldr	r0, [pc, #32]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f96:	f009 fbae 	bl	800c6f6 <HAL_UARTEx_SetRxFifoThreshold>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002fa0:	f7ff f90c 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002fa4:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002fa6:	f009 fb2d 	bl	800c604 <HAL_UARTEx_EnableFifoMode>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002fb0:	f7ff f904 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000598 	.word	0x20000598
 8002fbc:	40004400 	.word	0x40004400

08002fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b096      	sub	sp, #88	; 0x58
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	2238      	movs	r2, #56	; 0x38
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f00d ffad 	bl	8010f40 <memset>
  if(uartHandle->Instance==LPUART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a8b      	ldr	r2, [pc, #556]	; (8003218 <HAL_UART_MspInit+0x258>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d156      	bne.n	800309e <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4618      	mov	r0, r3
 8003000:	f005 feac 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800300a:	f7ff f8d7 	bl	80021bc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800300e:	2001      	movs	r0, #1
 8003010:	f7ff fe8a 	bl	8002d28 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003014:	2004      	movs	r0, #4
 8003016:	f7ff fe57 	bl	8002cc8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART_TXPin_Pin|LPUART_RXPin_Pin;
 800301a:	2303      	movs	r3, #3
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800302a:	2308      	movs	r3, #8
 800302c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003032:	4619      	mov	r1, r3
 8003034:	4879      	ldr	r0, [pc, #484]	; (800321c <HAL_UART_MspInit+0x25c>)
 8003036:	f004 f979 	bl	800732c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 800303a:	4b79      	ldr	r3, [pc, #484]	; (8003220 <HAL_UART_MspInit+0x260>)
 800303c:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_UART_MspInit+0x264>)
 800303e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003040:	4b77      	ldr	r3, [pc, #476]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003042:	2215      	movs	r2, #21
 8003044:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003046:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304c:	4b74      	ldr	r3, [pc, #464]	; (8003220 <HAL_UART_MspInit+0x260>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003058:	4b71      	ldr	r3, [pc, #452]	; (8003220 <HAL_UART_MspInit+0x260>)
 800305a:	2200      	movs	r2, #0
 800305c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800305e:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003064:	4b6e      	ldr	r3, [pc, #440]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800306a:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_UART_MspInit+0x260>)
 800306c:	2200      	movs	r2, #0
 800306e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003070:	486b      	ldr	r0, [pc, #428]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003072:	f003 fb4d 	bl	8006710 <HAL_DMA_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800307c:	f7ff f89e 	bl	80021bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a67      	ldr	r2, [pc, #412]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003084:	67da      	str	r2, [r3, #124]	; 0x7c
 8003086:	4a66      	ldr	r2, [pc, #408]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	2100      	movs	r1, #0
 8003090:	2026      	movs	r0, #38	; 0x26
 8003092:	f003 faf8 	bl	8006686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003096:	2026      	movs	r0, #38	; 0x26
 8003098:	f003 fb0f 	bl	80066ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800309c:	e0b7      	b.n	800320e <HAL_UART_MspInit+0x24e>
  else if(uartHandle->Instance==USART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a61      	ldr	r2, [pc, #388]	; (8003228 <HAL_UART_MspInit+0x268>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d156      	bne.n	8003156 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030a8:	2301      	movs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80030ac:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_UART_MspInit+0x26c>)
 80030ae:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 fe51 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_MspInit+0x104>
      Error_Handler();
 80030c0:	f7ff f87c 	bl	80021bc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80030c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030c8:	f7ff fe6a 	bl	8002da0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	2002      	movs	r0, #2
 80030ce:	f7ff fdfb 	bl	8002cc8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = UARTUSB_RXPin_Pin|UARTUSB_TXPin_Pin;
 80030d2:	23c0      	movs	r3, #192	; 0xc0
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2300      	movs	r3, #0
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e2:	2307      	movs	r3, #7
 80030e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030ea:	4619      	mov	r1, r3
 80030ec:	4850      	ldr	r0, [pc, #320]	; (8003230 <HAL_UART_MspInit+0x270>)
 80030ee:	f004 f91d 	bl	800732c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel5;
 80030f2:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_UART_MspInit+0x274>)
 80030f4:	4a50      	ldr	r2, [pc, #320]	; (8003238 <HAL_UART_MspInit+0x278>)
 80030f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80030f8:	4b4e      	ldr	r3, [pc, #312]	; (8003234 <HAL_UART_MspInit+0x274>)
 80030fa:	2212      	movs	r2, #18
 80030fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030fe:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003100:	2210      	movs	r2, #16
 8003102:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003104:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_UART_MspInit+0x274>)
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003110:	4b48      	ldr	r3, [pc, #288]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800311c:	4b45      	ldr	r3, [pc, #276]	; (8003234 <HAL_UART_MspInit+0x274>)
 800311e:	2200      	movs	r2, #0
 8003120:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003122:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003124:	2200      	movs	r2, #0
 8003126:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003128:	4842      	ldr	r0, [pc, #264]	; (8003234 <HAL_UART_MspInit+0x274>)
 800312a:	f003 faf1 	bl	8006710 <HAL_DMA_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8003134:	f7ff f842 	bl	80021bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3e      	ldr	r2, [pc, #248]	; (8003234 <HAL_UART_MspInit+0x274>)
 800313c:	679a      	str	r2, [r3, #120]	; 0x78
 800313e:	4a3d      	ldr	r2, [pc, #244]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003144:	2200      	movs	r2, #0
 8003146:	2103      	movs	r1, #3
 8003148:	2024      	movs	r0, #36	; 0x24
 800314a:	f003 fa9c 	bl	8006686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800314e:	2024      	movs	r0, #36	; 0x24
 8003150:	f003 fab3 	bl	80066ba <HAL_NVIC_EnableIRQ>
}
 8003154:	e05b      	b.n	800320e <HAL_UART_MspInit+0x24e>
  else if(uartHandle->Instance==USART2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a38      	ldr	r2, [pc, #224]	; (800323c <HAL_UART_MspInit+0x27c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d156      	bne.n	800320e <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003160:	2302      	movs	r3, #2
 8003162:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003164:	4b36      	ldr	r3, [pc, #216]	; (8003240 <HAL_UART_MspInit+0x280>)
 8003166:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	4618      	mov	r0, r3
 800316e:	f005 fdf5 	bl	8008d5c <HAL_RCCEx_PeriphCLKConfig>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8003178:	f7ff f820 	bl	80021bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800317c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003180:	f7ff fdba 	bl	8002cf8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	2001      	movs	r0, #1
 8003186:	f7ff fd9f 	bl	8002cc8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = UARTGSM_RXPin_Pin|UARTGSM_TXPin_Pin;
 800318a:	230c      	movs	r3, #12
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800319a:	2307      	movs	r3, #7
 800319c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031a2:	4619      	mov	r1, r3
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a8:	f004 f8c0 	bl	800732c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel5;
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031ae:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_UART_MspInit+0x288>)
 80031b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031b4:	2213      	movs	r2, #19
 80031b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d0:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031d8:	2200      	movs	r2, #0
 80031da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031de:	2200      	movs	r2, #0
 80031e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031e2:	4818      	ldr	r0, [pc, #96]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031e4:	f003 fa94 	bl	8006710 <HAL_DMA_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_MspInit+0x232>
      Error_Handler();
 80031ee:	f7fe ffe5 	bl	80021bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80031f8:	4a12      	ldr	r2, [pc, #72]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2102      	movs	r1, #2
 8003202:	2025      	movs	r0, #37	; 0x25
 8003204:	f003 fa3f 	bl	8006686 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003208:	2025      	movs	r0, #37	; 0x25
 800320a:	f003 fa56 	bl	80066ba <HAL_NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3758      	adds	r7, #88	; 0x58
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40008000 	.word	0x40008000
 800321c:	48000800 	.word	0x48000800
 8003220:	20000628 	.word	0x20000628
 8003224:	4002006c 	.word	0x4002006c
 8003228:	40013800 	.word	0x40013800
 800322c:	00030001 	.word	0x00030001
 8003230:	48000400 	.word	0x48000400
 8003234:	20000688 	.word	0x20000688
 8003238:	40020058 	.word	0x40020058
 800323c:	40004400 	.word	0x40004400
 8003240:	000c0004 	.word	0x000c0004
 8003244:	200006e8 	.word	0x200006e8
 8003248:	40020458 	.word	0x40020458

0800324c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_UART_MspDeInit+0x94>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10f      	bne.n	800327e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800325e:	2001      	movs	r0, #1
 8003260:	f7ff fd8c 	bl	8002d7c <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, LPUART_TXPin_Pin|LPUART_RXPin_Pin);
 8003264:	2103      	movs	r1, #3
 8003266:	481f      	ldr	r0, [pc, #124]	; (80032e4 <HAL_UART_MspDeInit+0x98>)
 8003268:	f004 f9c0 	bl	80075ec <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003270:	4618      	mov	r0, r3
 8003272:	f003 faf5 	bl	8006860 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8003276:	2026      	movs	r0, #38	; 0x26
 8003278:	f003 fa2d 	bl	80066d6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800327c:	e02b      	b.n	80032d6 <HAL_UART_MspDeInit+0x8a>
  else if(uartHandle->Instance==USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_UART_MspDeInit+0x9c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d110      	bne.n	80032aa <HAL_UART_MspDeInit+0x5e>
    __HAL_RCC_USART1_CLK_DISABLE();
 8003288:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800328c:	f7ff fda0 	bl	8002dd0 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOB, UARTUSB_RXPin_Pin|UARTUSB_TXPin_Pin);
 8003290:	21c0      	movs	r1, #192	; 0xc0
 8003292:	4816      	ldr	r0, [pc, #88]	; (80032ec <HAL_UART_MspDeInit+0xa0>)
 8003294:	f004 f9aa 	bl	80075ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fadf 	bl	8006860 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80032a2:	2024      	movs	r0, #36	; 0x24
 80032a4:	f003 fa17 	bl	80066d6 <HAL_NVIC_DisableIRQ>
}
 80032a8:	e015      	b.n	80032d6 <HAL_UART_MspDeInit+0x8a>
  else if(uartHandle->Instance==USART2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_UART_MspDeInit+0xa4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d110      	bne.n	80032d6 <HAL_UART_MspDeInit+0x8a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80032b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032b8:	f7ff fd4e 	bl	8002d58 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, UARTGSM_RXPin_Pin|UARTGSM_TXPin_Pin);
 80032bc:	210c      	movs	r1, #12
 80032be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c2:	f004 f993 	bl	80075ec <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fac8 	bl	8006860 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80032d0:	2025      	movs	r0, #37	; 0x25
 80032d2:	f003 fa00 	bl	80066d6 <HAL_NVIC_DisableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40008000 	.word	0x40008000
 80032e4:	48000800 	.word	0x48000800
 80032e8:	40013800 	.word	0x40013800
 80032ec:	48000400 	.word	0x48000400
 80032f0:	40004400 	.word	0x40004400

080032f4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart2.Instance) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <HAL_UARTEx_RxEventCallback+0x44>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d105      	bne.n	8003318 <HAL_UARTEx_RxEventCallback+0x24>
		GSM_UART_RXCallback(huart, Size);
 800330c:	887b      	ldrh	r3, [r7, #2]
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f815 	bl	8003340 <GSM_UART_RXCallback>
	}
	else if (huart->Instance == hlpuart1.Instance) {

		BT_UART_RXCallback(huart, Size);
	}
}
 8003316:	e00a      	b.n	800332e <HAL_UARTEx_RxEventCallback+0x3a>
	else if (huart->Instance == hlpuart1.Instance) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_UARTEx_RxEventCallback+0x48>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d104      	bne.n	800332e <HAL_UARTEx_RxEventCallback+0x3a>
		BT_UART_RXCallback(huart, Size);
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe fad7 	bl	80018dc <BT_UART_RXCallback>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000598 	.word	0x20000598
 800333c:	20000478 	.word	0x20000478

08003340 <GSM_UART_RXCallback>:
static uint16_t oldPos = 0;
static uint16_t newPos = 0;
static uint16_t rxSize = 0;
static uint8_t offst = 0;

void GSM_UART_RXCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
	oldPos = newPos;
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <GSM_UART_RXCallback+0xb0>)
 800334e:	881a      	ldrh	r2, [r3, #0]
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 8003352:	801a      	strh	r2, [r3, #0]

	if (oldPos+Size > MainBuf_SIZE) {
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	4413      	add	r3, r2
 800335e:	2bc8      	cmp	r3, #200	; 0xc8
 8003360:	dd22      	ble.n	80033a8 <GSM_UART_RXCallback+0x68>
		uint16_t datatocopy = MainBuf_SIZE-oldPos;
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800336a:	81fb      	strh	r3, [r7, #14]
		memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <GSM_UART_RXCallback+0xb8>)
 8003374:	4413      	add	r3, r2
 8003376:	89fa      	ldrh	r2, [r7, #14]
 8003378:	4920      	ldr	r1, [pc, #128]	; (80033fc <GSM_UART_RXCallback+0xbc>)
 800337a:	4618      	mov	r0, r3
 800337c:	f00d fdd2 	bl	8010f24 <memcpy>
		oldPos = 0;
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 8003382:	2200      	movs	r2, #0
 8003384:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));
 8003386:	89fb      	ldrh	r3, [r7, #14]
 8003388:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <GSM_UART_RXCallback+0xbc>)
 800338a:	1899      	adds	r1, r3, r2
 800338c:	887a      	ldrh	r2, [r7, #2]
 800338e:	89fb      	ldrh	r3, [r7, #14]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	461a      	mov	r2, r3
 8003394:	4818      	ldr	r0, [pc, #96]	; (80033f8 <GSM_UART_RXCallback+0xb8>)
 8003396:	f00d fdc5 	bl	8010f24 <memcpy>
		newPos = (Size-datatocopy);
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	89fb      	ldrh	r3, [r7, #14]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <GSM_UART_RXCallback+0xb0>)
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	e010      	b.n	80033ca <GSM_UART_RXCallback+0x8a>
		}
	else {
		memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <GSM_UART_RXCallback+0xb8>)
 80033b0:	4413      	add	r3, r2
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	4911      	ldr	r1, [pc, #68]	; (80033fc <GSM_UART_RXCallback+0xbc>)
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00d fdb4 	bl	8010f24 <memcpy>
		newPos = Size+oldPos;
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 80033be:	881a      	ldrh	r2, [r3, #0]
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	4413      	add	r3, r2
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <GSM_UART_RXCallback+0xb0>)
 80033c8:	801a      	strh	r2, [r3, #0]
	}

	rxSize = Size;
 80033ca:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <GSM_UART_RXCallback+0xc0>)
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	8013      	strh	r3, [r2, #0]
	flag_RX_Done = 1;
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <GSM_UART_RXCallback+0xc4>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
	UTIL_TIMER_Stop(&timerTimeout);
 80033d6:	480c      	ldr	r0, [pc, #48]	; (8003408 <GSM_UART_RXCallback+0xc8>)
 80033d8:	f00d f934 	bl	8010644 <UTIL_TIMER_Stop>
	HAL_UART_AbortReceive(huart_gsm);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <GSM_UART_RXCallback+0xcc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f006 fffd 	bl	800a3e0 <HAL_UART_AbortReceive>

	/*If more Data is expected: */
	//HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
	//__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);

}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000892 	.word	0x20000892
 80033f4:	20000890 	.word	0x20000890
 80033f8:	200007c8 	.word	0x200007c8
 80033fc:	20000764 	.word	0x20000764
 8003400:	20000894 	.word	0x20000894
 8003404:	20000761 	.word	0x20000761
 8003408:	20000748 	.word	0x20000748
 800340c:	20000004 	.word	0x20000004

08003410 <GSMSimpleAT>:
/*
 * @brief Sends a simple "AT" command to Module, Module should respond with OK. Also necessary for auto bauding function of the module.
 * @retval 1: Ok // 102: Timeout, no response  // 101: unexpected wrong data received (?)
 *
 */
uint8_t GSMSimpleAT(void){
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0

	SetUpTXRXCycle();
 8003414:	f000 fbe4 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT\r", sizeof("AT\r"), 300);
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <GSMSimpleAT+0x60>)
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003420:	2204      	movs	r2, #4
 8003422:	4914      	ldr	r1, [pc, #80]	; (8003474 <GSMSimpleAT+0x64>)
 8003424:	f006 fe5d 	bl	800a0e2 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003428:	bf00      	nop
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <GSMSimpleAT+0x68>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <GSMSimpleAT+0x2a>
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <GSMSimpleAT+0x6c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f7      	beq.n	800342a <GSMSimpleAT+0x1a>

	if (flag_timeout) {
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <GSMSimpleAT+0x68>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <GSMSimpleAT+0x36>
		return 102;
 8003442:	2366      	movs	r3, #102	; 0x66
 8003444:	e012      	b.n	800346c <GSMSimpleAT+0x5c>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT\r") + 2; //get offset index
 8003446:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <GSMSimpleAT+0x70>)
 8003448:	2206      	movs	r2, #6
 800344a:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "OK", 2) == 0){
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <GSMSimpleAT+0x70>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <GSMSimpleAT+0x74>)
 8003454:	4413      	add	r3, r2
 8003456:	2202      	movs	r2, #2
 8003458:	490b      	ldr	r1, [pc, #44]	; (8003488 <GSMSimpleAT+0x78>)
 800345a:	4618      	mov	r0, r3
 800345c:	f00e fa18 	bl	8011890 <strncmp>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <GSMSimpleAT+0x5a>
			return 1;
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <GSMSimpleAT+0x5c>
		}
		else {
			return 101;
 800346a:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000004 	.word	0x20000004
 8003474:	08014c8c 	.word	0x08014c8c
 8003478:	20000760 	.word	0x20000760
 800347c:	20000761 	.word	0x20000761
 8003480:	20000896 	.word	0x20000896
 8003484:	200007c8 	.word	0x200007c8
 8003488:	08014c90 	.word	0x08014c90

0800348c <GSMCheckSimInsert>:
/*
 * @brief Sends special AT command to Module and evaluates the answer to get Simcard insertion status
 * @retval 1: Sim Inserted // 0: Sim Not inserted // 101: unexpected wrong data received (?) // 102: Timeout, no response
 *
 */
uint8_t GSMCheckSimInsert(void){
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0

	SetUpTXRXCycle();
 8003490:	f000 fba6 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CSMINS?\r", sizeof("AT+CSMINS?\r"), 300);
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <GSMCheckSimInsert+0x78>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800349c:	220c      	movs	r2, #12
 800349e:	491a      	ldr	r1, [pc, #104]	; (8003508 <GSMCheckSimInsert+0x7c>)
 80034a0:	f006 fe1f 	bl	800a0e2 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 80034a4:	bf00      	nop
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <GSMCheckSimInsert+0x80>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <GSMCheckSimInsert+0x2a>
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <GSMCheckSimInsert+0x84>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f7      	beq.n	80034a6 <GSMCheckSimInsert+0x1a>

	if (flag_timeout) {
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <GSMCheckSimInsert+0x80>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <GSMCheckSimInsert+0x36>
			return 102;
 80034be:	2366      	movs	r3, #102	; 0x66
 80034c0:	e01e      	b.n	8003500 <GSMCheckSimInsert+0x74>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT+CSMINS?\r") + 2; //get offset index
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034c4:	220e      	movs	r2, #14
 80034c6:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "+CSMINS", 7) == 0){
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <GSMCheckSimInsert+0x8c>)
 80034d0:	4413      	add	r3, r2
 80034d2:	2207      	movs	r2, #7
 80034d4:	4911      	ldr	r1, [pc, #68]	; (800351c <GSMCheckSimInsert+0x90>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00e f9da 	bl	8011890 <strncmp>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <GSMCheckSimInsert+0x72>

			offst = offst + 11; //go to sim inserted value
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	330b      	adds	r3, #11
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034ec:	701a      	strb	r2, [r3, #0]

			return (uint8_t)MainBuf[offst] - 48; //convert ASCII 0 or 1 to uint 0 or 1
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <GSMCheckSimInsert+0x8c>)
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	3b30      	subs	r3, #48	; 0x30
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e000      	b.n	8003500 <GSMCheckSimInsert+0x74>
		}
		else {
			return 101;
 80034fe:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000004 	.word	0x20000004
 8003508:	08014c94 	.word	0x08014c94
 800350c:	20000760 	.word	0x20000760
 8003510:	20000761 	.word	0x20000761
 8003514:	20000896 	.word	0x20000896
 8003518:	200007c8 	.word	0x200007c8
 800351c:	08014ca0 	.word	0x08014ca0

08003520 <GSMGetRegState>:
 *  // 2: Not registered, but MT is currently searching // 3: Registration denied // 4: unknown
 *  // 5: Registered with Roaming
 *  // 101: unexpected wrong data received (?) // 102: Timeout, no response
 *
 */
uint8_t GSMGetRegState(void){
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0

	SetUpTXRXCycle();
 8003524:	f000 fb5c 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CREG?\r", sizeof("AT+CREG?\r"), 300);
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <GSMGetRegState+0x78>)
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003530:	220a      	movs	r2, #10
 8003532:	491a      	ldr	r1, [pc, #104]	; (800359c <GSMGetRegState+0x7c>)
 8003534:	f006 fdd5 	bl	800a0e2 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003538:	bf00      	nop
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <GSMGetRegState+0x80>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <GSMGetRegState+0x2a>
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <GSMGetRegState+0x84>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f7      	beq.n	800353a <GSMGetRegState+0x1a>

	if (flag_timeout) {
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <GSMGetRegState+0x80>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <GSMGetRegState+0x36>
			return 102;
 8003552:	2366      	movs	r3, #102	; 0x66
 8003554:	e01e      	b.n	8003594 <GSMGetRegState+0x74>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT+CREG?\r") + 2; //get offset index
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <GSMGetRegState+0x88>)
 8003558:	220c      	movs	r2, #12
 800355a:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "+CREG", 5) == 0){
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <GSMGetRegState+0x88>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <GSMGetRegState+0x8c>)
 8003564:	4413      	add	r3, r2
 8003566:	2205      	movs	r2, #5
 8003568:	4911      	ldr	r1, [pc, #68]	; (80035b0 <GSMGetRegState+0x90>)
 800356a:	4618      	mov	r0, r3
 800356c:	f00e f990 	bl	8011890 <strncmp>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <GSMGetRegState+0x72>

			offst = offst + 9; //go to net reg value
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <GSMGetRegState+0x88>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	3309      	adds	r3, #9
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <GSMGetRegState+0x88>)
 8003580:	701a      	strb	r2, [r3, #0]

			return (uint8_t)MainBuf[offst] - 48; //convert ASCII to uint
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <GSMGetRegState+0x88>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <GSMGetRegState+0x8c>)
 800358a:	5c9b      	ldrb	r3, [r3, r2]
 800358c:	3b30      	subs	r3, #48	; 0x30
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e000      	b.n	8003594 <GSMGetRegState+0x74>
		}
		else {
			return 101;
 8003592:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000004 	.word	0x20000004
 800359c:	08014ca8 	.word	0x08014ca8
 80035a0:	20000760 	.word	0x20000760
 80035a4:	20000761 	.word	0x20000761
 80035a8:	20000896 	.word	0x20000896
 80035ac:	200007c8 	.word	0x200007c8
 80035b0:	08014cb4 	.word	0x08014cb4

080035b4 <GSMGetSignalStrength>:
 * @retval [RSSI] 0: -115 dBm or less // 1:  -111 dBm // 2...30:  -110... -54 dBm //
 * 31: -52 dBm or greater // 99:  not known or not detectable //
 *  // 101: unexpected wrong data received (?) // 102: Timeout, no response
 *
 */
uint8_t GSMGetSignalStrength(void){
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0

	SetUpTXRXCycle();
 80035b8:	f000 fb12 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CSQ\r", sizeof("AT+CSQ\r"), 300);
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <GSMGetSignalStrength+0x84>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80035c4:	2208      	movs	r2, #8
 80035c6:	491d      	ldr	r1, [pc, #116]	; (800363c <GSMGetSignalStrength+0x88>)
 80035c8:	f006 fd8b 	bl	800a0e2 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 80035cc:	bf00      	nop
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <GSMGetSignalStrength+0x8c>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <GSMGetSignalStrength+0x2a>
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <GSMGetSignalStrength+0x90>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f7      	beq.n	80035ce <GSMGetSignalStrength+0x1a>

	if (flag_timeout) {
 80035de:	4b18      	ldr	r3, [pc, #96]	; (8003640 <GSMGetSignalStrength+0x8c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <GSMGetSignalStrength+0x36>
			return 102;
 80035e6:	2366      	movs	r3, #102	; 0x66
 80035e8:	e023      	b.n	8003632 <GSMGetSignalStrength+0x7e>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT+CSQ\r") + 2; //get offset index
 80035ea:	4b17      	ldr	r3, [pc, #92]	; (8003648 <GSMGetSignalStrength+0x94>)
 80035ec:	220a      	movs	r2, #10
 80035ee:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "+CSQ", 4) == 0){
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <GSMGetSignalStrength+0x94>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <GSMGetSignalStrength+0x98>)
 80035f8:	4413      	add	r3, r2
 80035fa:	2204      	movs	r2, #4
 80035fc:	4914      	ldr	r1, [pc, #80]	; (8003650 <GSMGetSignalStrength+0x9c>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f00e f946 	bl	8011890 <strncmp>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d112      	bne.n	8003630 <GSMGetSignalStrength+0x7c>

			offst = offst + 6; //go to RSSI value
 800360a:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <GSMGetSignalStrength+0x94>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	3306      	adds	r3, #6
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <GSMGetSignalStrength+0x94>)
 8003614:	701a      	strb	r2, [r3, #0]
			return (uint8_t)strtol((char*)MainBuf+offst, NULL, 10);
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <GSMGetSignalStrength+0x94>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <GSMGetSignalStrength+0x98>)
 800361e:	4413      	add	r3, r2
 8003620:	220a      	movs	r2, #10
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f00e f9d9 	bl	80119dc <strtol>
 800362a:	4603      	mov	r3, r0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e000      	b.n	8003632 <GSMGetSignalStrength+0x7e>

		}
		else {
			return 101;
 8003630:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000004 	.word	0x20000004
 800363c:	08014cbc 	.word	0x08014cbc
 8003640:	20000760 	.word	0x20000760
 8003644:	20000761 	.word	0x20000761
 8003648:	20000896 	.word	0x20000896
 800364c:	200007c8 	.word	0x200007c8
 8003650:	08014cc4 	.word	0x08014cc4

08003654 <GSMGetBatteryCharge>:
 * @param: uint16_t * voltagepntr - Module can write its current supply voltage to this address,
 * 									Format: 4 digit usint, for example 3758 means 3,758 Volts supply
 * @retval 1 - 100: Battery Charge in Percent // 101: unexpected wrong data received (?) // 102: Timeout, no response
 *
 */
uint8_t GSMGetBatteryCharge(uint16_t * voltagepntr){
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

	SetUpTXRXCycle();
 800365c:	f000 fac0 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CBC\r", sizeof("AT+CBC\r"), 300);
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <GSMGetBatteryCharge+0xd0>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003668:	2208      	movs	r2, #8
 800366a:	492f      	ldr	r1, [pc, #188]	; (8003728 <GSMGetBatteryCharge+0xd4>)
 800366c:	f006 fd39 	bl	800a0e2 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003670:	bf00      	nop
 8003672:	4b2e      	ldr	r3, [pc, #184]	; (800372c <GSMGetBatteryCharge+0xd8>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <GSMGetBatteryCharge+0x2e>
 800367a:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <GSMGetBatteryCharge+0xdc>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f7      	beq.n	8003672 <GSMGetBatteryCharge+0x1e>

	if (flag_timeout) {
 8003682:	4b2a      	ldr	r3, [pc, #168]	; (800372c <GSMGetBatteryCharge+0xd8>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <GSMGetBatteryCharge+0x3a>
			return 102;
 800368a:	2366      	movs	r3, #102	; 0x66
 800368c:	e045      	b.n	800371a <GSMGetBatteryCharge+0xc6>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT+CBC\r") + 2; //get offset index
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 8003690:	220a      	movs	r2, #10
 8003692:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "+CBC", 4) == 0){
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <GSMGetBatteryCharge+0xe4>)
 800369c:	4413      	add	r3, r2
 800369e:	2204      	movs	r2, #4
 80036a0:	4926      	ldr	r1, [pc, #152]	; (800373c <GSMGetBatteryCharge+0xe8>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f00e f8f4 	bl	8011890 <strncmp>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d134      	bne.n	8003718 <GSMGetBatteryCharge+0xc4>
			offst = offst + 8; //go to percent value
 80036ae:	4b21      	ldr	r3, [pc, #132]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	3308      	adds	r3, #8
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036b8:	701a      	strb	r2, [r3, #0]
			uint8_t percentage = (uint8_t)strtol((char*)MainBuf+offst, NULL, 10);
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <GSMGetBatteryCharge+0xe4>)
 80036c2:	4413      	add	r3, r2
 80036c4:	220a      	movs	r2, #10
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f00e f987 	bl	80119dc <strtol>
 80036ce:	4603      	mov	r3, r0
 80036d0:	73fb      	strb	r3, [r7, #15]

			if (voltagepntr != NULL) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01d      	beq.n	8003714 <GSMGetBatteryCharge+0xc0>
				(percentage/10 >= 1) ? (offst += 3) : (offst += 2);
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b09      	cmp	r3, #9
 80036dc:	d906      	bls.n	80036ec <GSMGetBatteryCharge+0x98>
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	3303      	adds	r3, #3
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e005      	b.n	80036f8 <GSMGetBatteryCharge+0xa4>
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	3302      	adds	r3, #2
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036f6:	701a      	strb	r2, [r3, #0]
				*voltagepntr = (uint16_t)strtol((char*)MainBuf+offst, NULL, 10);
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <GSMGetBatteryCharge+0xe4>)
 8003700:	4413      	add	r3, r2
 8003702:	220a      	movs	r2, #10
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f00e f968 	bl	80119dc <strtol>
 800370c:	4603      	mov	r3, r0
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	801a      	strh	r2, [r3, #0]
			}
			return percentage;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	e000      	b.n	800371a <GSMGetBatteryCharge+0xc6>
		}
		else {
			return 101;
 8003718:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000004 	.word	0x20000004
 8003728:	08014ccc 	.word	0x08014ccc
 800372c:	20000760 	.word	0x20000760
 8003730:	20000761 	.word	0x20000761
 8003734:	20000896 	.word	0x20000896
 8003738:	200007c8 	.word	0x200007c8
 800373c:	08014cd4 	.word	0x08014cd4

08003740 <GSMSendSMS>:
 * @retval  1: OK, SMS Sent // 101: unexpected wrong data received (Probably Error) //
 * 			102: Timeout, no response - not done//
 * 			103: Message too long
 *
 */
uint8_t GSMSendSMS(const char * targetnr, const char * message){
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b0ad      	sub	sp, #180	; 0xb4
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]

	char sendtext[SMS_MSG_LEN];
	static uint8_t endmsg_nr = 26;

	if (strlen(message)+1 > SMS_MSG_LEN){ // strlen skips the \0 terminator, but its necessary
 800374a:	6838      	ldr	r0, [r7, #0]
 800374c:	f7fc fd18 	bl	8000180 <strlen>
 8003750:	4603      	mov	r3, r0
 8003752:	3301      	adds	r3, #1
 8003754:	2ba0      	cmp	r3, #160	; 0xa0
 8003756:	d901      	bls.n	800375c <GSMSendSMS+0x1c>
		return 103;
 8003758:	2367      	movs	r3, #103	; 0x67
 800375a:	e0f8      	b.n	800394e <GSMSendSMS+0x20e>
	}



	/*1 .Transmit AT Command for SMS Text Mode in Blocking Mode*/
	SetUpTXRXCycle();
 800375c:	f000 fa40 	bl	8003be0 <SetUpTXRXCycle>
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CMGF=1\r", sizeof("AT+CMGF=1\r"), 300);
 8003760:	4b7d      	ldr	r3, [pc, #500]	; (8003958 <GSMSendSMS+0x218>)
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003768:	220b      	movs	r2, #11
 800376a:	497c      	ldr	r1, [pc, #496]	; (800395c <GSMSendSMS+0x21c>)
 800376c:	f006 fcb9 	bl	800a0e2 <HAL_UART_Transmit>

	/*1.1 Wait until Timeout flag or Data Received flag and verify Answer */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003770:	bf00      	nop
 8003772:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <GSMSendSMS+0x220>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <GSMSendSMS+0x42>
 800377a:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <GSMSendSMS+0x224>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f7      	beq.n	8003772 <GSMSendSMS+0x32>

	if (flag_timeout) {
 8003782:	4b77      	ldr	r3, [pc, #476]	; (8003960 <GSMSendSMS+0x220>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <GSMSendSMS+0x4e>
			return 102;
 800378a:	2366      	movs	r3, #102	; 0x66
 800378c:	e0df      	b.n	800394e <GSMSendSMS+0x20e>
	}
	offst = sizeof("AT+CMGF=1\r") + 2; //get offset index
 800378e:	4b76      	ldr	r3, [pc, #472]	; (8003968 <GSMSendSMS+0x228>)
 8003790:	220d      	movs	r2, #13
 8003792:	701a      	strb	r2, [r3, #0]
	if (strncmp((char*)MainBuf+offst, "OK", 2) != 0  && strncmp((char*)MainBuf+offst+1, "OK", 2) != 0 ){
 8003794:	4b74      	ldr	r3, [pc, #464]	; (8003968 <GSMSendSMS+0x228>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b74      	ldr	r3, [pc, #464]	; (800396c <GSMSendSMS+0x22c>)
 800379c:	4413      	add	r3, r2
 800379e:	2202      	movs	r2, #2
 80037a0:	4973      	ldr	r1, [pc, #460]	; (8003970 <GSMSendSMS+0x230>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f00e f874 	bl	8011890 <strncmp>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <GSMSendSMS+0x8c>
 80037ae:	4b6e      	ldr	r3, [pc, #440]	; (8003968 <GSMSendSMS+0x228>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a6d      	ldr	r2, [pc, #436]	; (800396c <GSMSendSMS+0x22c>)
 80037b6:	4413      	add	r3, r2
 80037b8:	2202      	movs	r2, #2
 80037ba:	496d      	ldr	r1, [pc, #436]	; (8003970 <GSMSendSMS+0x230>)
 80037bc:	4618      	mov	r0, r3
 80037be:	f00e f867 	bl	8011890 <strncmp>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <GSMSendSMS+0x8c>
		return 101; //Error, probably no SIM Card or not registered to GSM Network
 80037c8:	2365      	movs	r3, #101	; 0x65
 80037ca:	e0c0      	b.n	800394e <GSMSendSMS+0x20e>
	}

	/*2. Transmit AT Switch to Textmode Command for SMS */
	HAL_Delay(300);
 80037cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037d0:	f7fe ff66 	bl	80026a0 <HAL_Delay>
	SetUpTXRXCycle();
 80037d4:	f000 fa04 	bl	8003be0 <SetUpTXRXCycle>

	strcpy(sendtext, "AT+CMGS=\"");
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	4a65      	ldr	r2, [pc, #404]	; (8003974 <GSMSendSMS+0x234>)
 80037de:	ca07      	ldmia	r2, {r0, r1, r2}
 80037e0:	c303      	stmia	r3!, {r0, r1}
 80037e2:	801a      	strh	r2, [r3, #0]
	strcat(sendtext, targetnr);
 80037e4:	f107 0308 	add.w	r3, r7, #8
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f00e f82c 	bl	8011848 <strcat>
	strcat(sendtext, "\"\r");
 80037f0:	f107 0308 	add.w	r3, r7, #8
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fcc3 	bl	8000180 <strlen>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	f107 0308 	add.w	r3, r7, #8
 8003802:	4413      	add	r3, r2
 8003804:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <GSMSendSMS+0x238>)
 8003806:	8811      	ldrh	r1, [r2, #0]
 8003808:	7892      	ldrb	r2, [r2, #2]
 800380a:	8019      	strh	r1, [r3, #0]
 800380c:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart_gsm, (uint8_t *)sendtext, strlen(sendtext), 300);
 800380e:	4b52      	ldr	r3, [pc, #328]	; (8003958 <GSMSendSMS+0x218>)
 8003810:	681c      	ldr	r4, [r3, #0]
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fcb2 	bl	8000180 <strlen>
 800381c:	4603      	mov	r3, r0
 800381e:	b29a      	uxth	r2, r3
 8003820:	f107 0108 	add.w	r1, r7, #8
 8003824:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003828:	4620      	mov	r0, r4
 800382a:	f006 fc5a 	bl	800a0e2 <HAL_UART_Transmit>
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 800382e:	bf00      	nop
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <GSMSendSMS+0x220>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <GSMSendSMS+0x100>
 8003838:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <GSMSendSMS+0x224>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f7      	beq.n	8003830 <GSMSendSMS+0xf0>

	/*2.1 After Echo is received send text to send */
	HAL_Delay(300);
 8003840:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003844:	f7fe ff2c 	bl	80026a0 <HAL_Delay>
	SetUpTXRXCycle();
 8003848:	f000 f9ca 	bl	8003be0 <SetUpTXRXCycle>

	memset(sendtext, 0, SMS_MSG_LEN);
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	22a0      	movs	r2, #160	; 0xa0
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f00d fb73 	bl	8010f40 <memset>
	strcpy(sendtext, message);
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f00e f80d 	bl	8011880 <strcpy>

	HAL_UART_Transmit(huart_gsm, (uint8_t *)sendtext, strlen(sendtext), 300);
 8003866:	4b3c      	ldr	r3, [pc, #240]	; (8003958 <GSMSendSMS+0x218>)
 8003868:	681c      	ldr	r4, [r3, #0]
 800386a:	f107 0308 	add.w	r3, r7, #8
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fc86 	bl	8000180 <strlen>
 8003874:	4603      	mov	r3, r0
 8003876:	b29a      	uxth	r2, r3
 8003878:	f107 0108 	add.w	r1, r7, #8
 800387c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003880:	4620      	mov	r0, r4
 8003882:	f006 fc2e 	bl	800a0e2 <HAL_UART_Transmit>
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003886:	bf00      	nop
 8003888:	4b35      	ldr	r3, [pc, #212]	; (8003960 <GSMSendSMS+0x220>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <GSMSendSMS+0x158>
 8003890:	4b34      	ldr	r3, [pc, #208]	; (8003964 <GSMSendSMS+0x224>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f7      	beq.n	8003888 <GSMSendSMS+0x148>


	/*2.2 After Echo is received send END Character to terminate SMS */
	HAL_Delay(300);
 8003898:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800389c:	f7fe ff00 	bl	80026a0 <HAL_Delay>

	/*SetUp Custom TX RX Cycle because of higher Timeout*/
	memset(RxBuf, 0, RxBuf_SIZE);
 80038a0:	2264      	movs	r2, #100	; 0x64
 80038a2:	2100      	movs	r1, #0
 80038a4:	4835      	ldr	r0, [pc, #212]	; (800397c <GSMSendSMS+0x23c>)
 80038a6:	f00d fb4b 	bl	8010f40 <memset>
	memset(MainBuf, 0, MainBuf_SIZE);
 80038aa:	22c8      	movs	r2, #200	; 0xc8
 80038ac:	2100      	movs	r1, #0
 80038ae:	482f      	ldr	r0, [pc, #188]	; (800396c <GSMSendSMS+0x22c>)
 80038b0:	f00d fb46 	bl	8010f40 <memset>
	oldPos = 0;
 80038b4:	4b32      	ldr	r3, [pc, #200]	; (8003980 <GSMSendSMS+0x240>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 80038ba:	4b32      	ldr	r3, [pc, #200]	; (8003984 <GSMSendSMS+0x244>)
 80038bc:	2200      	movs	r2, #0
 80038be:	801a      	strh	r2, [r3, #0]
	flag_RX_Done = 0;
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <GSMSendSMS+0x224>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
	rxSize = 0;
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <GSMSendSMS+0x248>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	801a      	strh	r2, [r3, #0]
	flag_timeout = 0;
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <GSMSendSMS+0x220>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
	/*Start DMA to be prepared for RX*/
	HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <GSMSendSMS+0x218>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2264      	movs	r2, #100	; 0x64
 80038d8:	4928      	ldr	r1, [pc, #160]	; (800397c <GSMSendSMS+0x23c>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f008 ff49 	bl	800c772 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);
 80038e0:	4b2a      	ldr	r3, [pc, #168]	; (800398c <GSMSendSMS+0x24c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <GSMSendSMS+0x24c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0204 	bic.w	r2, r2, #4
 80038f2:	601a      	str	r2, [r3, #0]
	/*Create and Start Timer for Timeout Watch*/
	UTIL_TIMER_Create(&timerTimeout, 6000, UTIL_TIMER_ONESHOT, OnRxTimeout, NULL);
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <GSMSendSMS+0x250>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	f241 7170 	movw	r1, #6000	; 0x1770
 8003900:	4824      	ldr	r0, [pc, #144]	; (8003994 <GSMSendSMS+0x254>)
 8003902:	f00c fdfb 	bl	80104fc <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerTimeout);
 8003906:	4823      	ldr	r0, [pc, #140]	; (8003994 <GSMSendSMS+0x254>)
 8003908:	f00c fe2e 	bl	8010568 <UTIL_TIMER_Start>
	/*Custom Setup TXRX Cycle End*/

	HAL_UART_Transmit(huart_gsm, &endmsg_nr, 1 , 300);
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <GSMSendSMS+0x218>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003914:	2201      	movs	r2, #1
 8003916:	4920      	ldr	r1, [pc, #128]	; (8003998 <GSMSendSMS+0x258>)
 8003918:	f006 fbe3 	bl	800a0e2 <HAL_UART_Transmit>

	/*2.3. Module should Acknowledge the Sending,
	 * Wait until Timeout flag or Data Received flag and verify Answer*/
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 800391c:	bf00      	nop
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <GSMSendSMS+0x220>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <GSMSendSMS+0x1ee>
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <GSMSendSMS+0x224>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f7      	beq.n	800391e <GSMSendSMS+0x1de>

	if (flag_timeout) {
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <GSMSendSMS+0x220>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <GSMSendSMS+0x1fa>
			return 102;
 8003936:	2366      	movs	r3, #102	; 0x66
 8003938:	e009      	b.n	800394e <GSMSendSMS+0x20e>
	}
	if (strstr((char*)MainBuf, "OK") == NULL){
 800393a:	490d      	ldr	r1, [pc, #52]	; (8003970 <GSMSendSMS+0x230>)
 800393c:	480b      	ldr	r0, [pc, #44]	; (800396c <GSMSendSMS+0x22c>)
 800393e:	f00d ffbb 	bl	80118b8 <strstr>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <GSMSendSMS+0x20c>
			return 101; //Error, Unexpected Answer, no acknoledge from board
 8003948:	2365      	movs	r3, #101	; 0x65
 800394a:	e000      	b.n	800394e <GSMSendSMS+0x20e>
	}

	return 1; //OK
 800394c:	2301      	movs	r3, #1

}
 800394e:	4618      	mov	r0, r3
 8003950:	37ac      	adds	r7, #172	; 0xac
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop
 8003958:	20000004 	.word	0x20000004
 800395c:	08014cdc 	.word	0x08014cdc
 8003960:	20000760 	.word	0x20000760
 8003964:	20000761 	.word	0x20000761
 8003968:	20000896 	.word	0x20000896
 800396c:	200007c8 	.word	0x200007c8
 8003970:	08014c90 	.word	0x08014c90
 8003974:	08014ce8 	.word	0x08014ce8
 8003978:	08014cf4 	.word	0x08014cf4
 800397c:	20000764 	.word	0x20000764
 8003980:	20000890 	.word	0x20000890
 8003984:	20000892 	.word	0x20000892
 8003988:	20000894 	.word	0x20000894
 800398c:	20000008 	.word	0x20000008
 8003990:	08003bad 	.word	0x08003bad
 8003994:	20000748 	.word	0x20000748
 8003998:	2000000c 	.word	0x2000000c

0800399c <GSMGetBalance>:
/*
 * @brief Sends special AT command to Module and evaluates the answer to get Prepaid Balance over USSD code
 * @param: uint16_t * balanceptr -> balance in cents gets written there if valid value from gsm module
 * @retval  //1: Ok, valid value in referenced argument // 101: unexpected wrong data received (?) // 102: Timeout, no response
 */
uint8_t GSMGetBalance(uint16_t * balanceptr){
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	6078      	str	r0, [r7, #4]
	char * targetptr = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
	char * endptr = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
	uint16_t euro = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	82fb      	strh	r3, [r7, #22]
	uint16_t cent = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	82bb      	strh	r3, [r7, #20]
	uint8_t abstnd = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	74fb      	strb	r3, [r7, #19]
	char digitstring[10] = {0};
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	809a      	strh	r2, [r3, #4]

	SetUpTXRXCycle();
 80039c6:	f000 f90b 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CUSD=1, \"*100#\"\r", sizeof("AT+CUSD=1, \"*100#\"\r"), 300);
 80039ca:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <GSMGetBalance+0x1d4>)
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80039d2:	2214      	movs	r2, #20
 80039d4:	4967      	ldr	r1, [pc, #412]	; (8003b74 <GSMGetBalance+0x1d8>)
 80039d6:	f006 fb84 	bl	800a0e2 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 80039da:	bf00      	nop
 80039dc:	4b66      	ldr	r3, [pc, #408]	; (8003b78 <GSMGetBalance+0x1dc>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <GSMGetBalance+0x50>
 80039e4:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <GSMGetBalance+0x1e0>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f7      	beq.n	80039dc <GSMGetBalance+0x40>

	if (flag_timeout) {
 80039ec:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <GSMGetBalance+0x1dc>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <GSMGetBalance+0x5c>
			return 102;
 80039f4:	2366      	movs	r3, #102	; 0x66
 80039f6:	e0b6      	b.n	8003b66 <GSMGetBalance+0x1ca>
	}

	/*Start Custom RX with longer timeout because USSD Code takes some time*/
	memset(RxBuf, 0, RxBuf_SIZE);
 80039f8:	2264      	movs	r2, #100	; 0x64
 80039fa:	2100      	movs	r1, #0
 80039fc:	4860      	ldr	r0, [pc, #384]	; (8003b80 <GSMGetBalance+0x1e4>)
 80039fe:	f00d fa9f 	bl	8010f40 <memset>
	memset(MainBuf, 0, MainBuf_SIZE);
 8003a02:	22c8      	movs	r2, #200	; 0xc8
 8003a04:	2100      	movs	r1, #0
 8003a06:	485f      	ldr	r0, [pc, #380]	; (8003b84 <GSMGetBalance+0x1e8>)
 8003a08:	f00d fa9a 	bl	8010f40 <memset>
	oldPos = 0;
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <GSMGetBalance+0x1ec>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003a12:	4b5e      	ldr	r3, [pc, #376]	; (8003b8c <GSMGetBalance+0x1f0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]
	flag_RX_Done = 0;
 8003a18:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <GSMGetBalance+0x1e0>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
	rxSize = 0;
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	; (8003b90 <GSMGetBalance+0x1f4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	801a      	strh	r2, [r3, #0]
	flag_timeout = 0;
 8003a24:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <GSMGetBalance+0x1dc>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]

	/*Start DMA to be prepared for RX*/
	HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <GSMGetBalance+0x1d4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2264      	movs	r2, #100	; 0x64
 8003a30:	4953      	ldr	r1, [pc, #332]	; (8003b80 <GSMGetBalance+0x1e4>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f008 fe9d 	bl	800c772 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);
 8003a38:	4b56      	ldr	r3, [pc, #344]	; (8003b94 <GSMGetBalance+0x1f8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <GSMGetBalance+0x1f8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]

	/*Create and Start Timer for Timeout Watch*/
	UTIL_TIMER_Create(&timerTimeout, 6000, UTIL_TIMER_ONESHOT, OnRxTimeout, NULL);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <GSMGetBalance+0x1fc>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	f241 7170 	movw	r1, #6000	; 0x1770
 8003a58:	4850      	ldr	r0, [pc, #320]	; (8003b9c <GSMGetBalance+0x200>)
 8003a5a:	f00c fd4f 	bl	80104fc <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerTimeout);
 8003a5e:	484f      	ldr	r0, [pc, #316]	; (8003b9c <GSMGetBalance+0x200>)
 8003a60:	f00c fd82 	bl	8010568 <UTIL_TIMER_Start>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003a64:	bf00      	nop
 8003a66:	4b44      	ldr	r3, [pc, #272]	; (8003b78 <GSMGetBalance+0x1dc>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <GSMGetBalance+0xda>
 8003a6e:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <GSMGetBalance+0x1e0>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f7      	beq.n	8003a66 <GSMGetBalance+0xca>

	if (flag_timeout) {
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <GSMGetBalance+0x1dc>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <GSMGetBalance+0xe6>
			return 102;
 8003a7e:	2366      	movs	r3, #102	; 0x66
 8003a80:	e071      	b.n	8003b66 <GSMGetBalance+0x1ca>
	}

	/* check if expected Data
	 * There should be the Substring "Aktuelles Prepaid Guthaben: " followed by the balance */
	targetptr = strstr((char*)MainBuf, "Aktuelles Prepaid Guthaben: ");
 8003a82:	4947      	ldr	r1, [pc, #284]	; (8003ba0 <GSMGetBalance+0x204>)
 8003a84:	483f      	ldr	r0, [pc, #252]	; (8003b84 <GSMGetBalance+0x1e8>)
 8003a86:	f00d ff17 	bl	80118b8 <strstr>
 8003a8a:	61f8      	str	r0, [r7, #28]
	if (targetptr != NULL){
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d053      	beq.n	8003b3a <GSMGetBalance+0x19e>
		offst = sizeof("Aktuelles Prepaid Guthaben: ")-1;
 8003a92:	4b44      	ldr	r3, [pc, #272]	; (8003ba4 <GSMGetBalance+0x208>)
 8003a94:	221c      	movs	r2, #28
 8003a96:	701a      	strb	r2, [r3, #0]
		/*EUR*/
		targetptr = targetptr + offst;//go to Balance value
 8003a98:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <GSMGetBalance+0x208>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	61fb      	str	r3, [r7, #28]
		endptr = strstr(targetptr, ",");
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	69f8      	ldr	r0, [r7, #28]
 8003aa8:	f00d fedd 	bl	8011866 <strchr>
 8003aac:	61b8      	str	r0, [r7, #24]
		if (endptr == NULL){
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <GSMGetBalance+0x11c>
			return 101;
 8003ab4:	2365      	movs	r3, #101	; 0x65
 8003ab6:	e056      	b.n	8003b66 <GSMGetBalance+0x1ca>
		}
		abstnd = endptr - targetptr;
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	74fb      	strb	r3, [r7, #19]
		memcpy(digitstring, targetptr, abstnd);
 8003ac0:	7cfa      	ldrb	r2, [r7, #19]
 8003ac2:	f107 0308 	add.w	r3, r7, #8
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f00d fa2b 	bl	8010f24 <memcpy>
		digitstring[abstnd+1] = '\0';
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	3320      	adds	r3, #32
 8003ad4:	443b      	add	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f803 2c18 	strb.w	r2, [r3, #-24]
		euro = (uint16_t)strtol(digitstring, NULL, 10);
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	220a      	movs	r2, #10
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f00d ff79 	bl	80119dc <strtol>
 8003aea:	4603      	mov	r3, r0
 8003aec:	82fb      	strh	r3, [r7, #22]
		/*Cent*/
		targetptr = endptr+1;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
		memcpy(digitstring, targetptr, 2);
 8003afa:	813b      	strh	r3, [r7, #8]
		digitstring[3] = '\0';
 8003afc:	2300      	movs	r3, #0
 8003afe:	72fb      	strb	r3, [r7, #11]
		cent = (uint16_t)strtol(digitstring, NULL, 10);
 8003b00:	f107 0308 	add.w	r3, r7, #8
 8003b04:	220a      	movs	r2, #10
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f00d ff67 	bl	80119dc <strtol>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	82bb      	strh	r3, [r7, #20]

		if (balanceptr != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d012      	beq.n	8003b3e <GSMGetBalance+0x1a2>
		{
			*balanceptr = euro*100 + cent;
 8003b18:	8afb      	ldrh	r3, [r7, #22]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	0092      	lsls	r2, r2, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	0091      	lsls	r1, r2, #2
 8003b24:	461a      	mov	r2, r3
 8003b26:	460b      	mov	r3, r1
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	8abb      	ldrh	r3, [r7, #20]
 8003b30:	4413      	add	r3, r2
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	e001      	b.n	8003b3e <GSMGetBalance+0x1a2>
		}

	}
	else {
		return 101;
 8003b3a:	2365      	movs	r3, #101	; 0x65
 8003b3c:	e013      	b.n	8003b66 <GSMGetBalance+0x1ca>
	}

	SetUpTXRXCycle();
 8003b3e:	f000 f84f 	bl	8003be0 <SetUpTXRXCycle>
	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CUSD=0\r", sizeof("AT+CUSD=0\r"), 300);
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <GSMGetBalance+0x1d4>)
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003b4a:	220b      	movs	r2, #11
 8003b4c:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <GSMGetBalance+0x20c>)
 8003b4e:	f006 fac8 	bl	800a0e2 <HAL_UART_Transmit>
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003b52:	bf00      	nop
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <GSMGetBalance+0x1dc>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <GSMGetBalance+0x1c8>
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <GSMGetBalance+0x1e0>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f7      	beq.n	8003b54 <GSMGetBalance+0x1b8>
	return 1;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000004 	.word	0x20000004
 8003b74:	08014cf8 	.word	0x08014cf8
 8003b78:	20000760 	.word	0x20000760
 8003b7c:	20000761 	.word	0x20000761
 8003b80:	20000764 	.word	0x20000764
 8003b84:	200007c8 	.word	0x200007c8
 8003b88:	20000890 	.word	0x20000890
 8003b8c:	20000892 	.word	0x20000892
 8003b90:	20000894 	.word	0x20000894
 8003b94:	20000008 	.word	0x20000008
 8003b98:	08003bad 	.word	0x08003bad
 8003b9c:	20000748 	.word	0x20000748
 8003ba0:	08014d0c 	.word	0x08014d0c
 8003ba4:	20000896 	.word	0x20000896
 8003ba8:	08014d2c 	.word	0x08014d2c

08003bac <OnRxTimeout>:

static void OnRxTimeout(void *context) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	flag_timeout = 1;
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <OnRxTimeout+0x28>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
	UTIL_TIMER_Stop(&timerTimeout);
 8003bba:	4807      	ldr	r0, [pc, #28]	; (8003bd8 <OnRxTimeout+0x2c>)
 8003bbc:	f00c fd42 	bl	8010644 <UTIL_TIMER_Stop>
	HAL_UART_AbortReceive(huart_gsm);
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <OnRxTimeout+0x30>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f006 fc0b 	bl	800a3e0 <HAL_UART_AbortReceive>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000760 	.word	0x20000760
 8003bd8:	20000748 	.word	0x20000748
 8003bdc:	20000004 	.word	0x20000004

08003be0 <SetUpTXRXCycle>:

static void SetUpTXRXCycle(void){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af02      	add	r7, sp, #8
	/*clear Buffer and flags*/
	memset(RxBuf, 0, RxBuf_SIZE);
 8003be6:	2264      	movs	r2, #100	; 0x64
 8003be8:	2100      	movs	r1, #0
 8003bea:	481b      	ldr	r0, [pc, #108]	; (8003c58 <SetUpTXRXCycle+0x78>)
 8003bec:	f00d f9a8 	bl	8010f40 <memset>
	memset(MainBuf, 0, MainBuf_SIZE);
 8003bf0:	22c8      	movs	r2, #200	; 0xc8
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4819      	ldr	r0, [pc, #100]	; (8003c5c <SetUpTXRXCycle+0x7c>)
 8003bf6:	f00d f9a3 	bl	8010f40 <memset>
	oldPos = 0;
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <SetUpTXRXCycle+0x80>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <SetUpTXRXCycle+0x84>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	801a      	strh	r2, [r3, #0]
	flag_RX_Done = 0;
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <SetUpTXRXCycle+0x88>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
	rxSize = 0;
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <SetUpTXRXCycle+0x8c>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	801a      	strh	r2, [r3, #0]
	flag_timeout = 0;
 8003c12:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <SetUpTXRXCycle+0x90>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]

	/*Start DMA to be prepared for RX*/
	HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <SetUpTXRXCycle+0x94>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2264      	movs	r2, #100	; 0x64
 8003c1e:	490e      	ldr	r1, [pc, #56]	; (8003c58 <SetUpTXRXCycle+0x78>)
 8003c20:	4618      	mov	r0, r3
 8003c22:	f008 fda6 	bl	800c772 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <SetUpTXRXCycle+0x98>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <SetUpTXRXCycle+0x98>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0204 	bic.w	r2, r2, #4
 8003c38:	601a      	str	r2, [r3, #0]

	/*Create and Start Timer for Timeout Watch*/
	UTIL_TIMER_Create(&timerTimeout, Receive_TIMEOUT_VALUE, UTIL_TIMER_ONESHOT, OnRxTimeout, NULL);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <SetUpTXRXCycle+0x9c>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003c46:	480e      	ldr	r0, [pc, #56]	; (8003c80 <SetUpTXRXCycle+0xa0>)
 8003c48:	f00c fc58 	bl	80104fc <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerTimeout);
 8003c4c:	480c      	ldr	r0, [pc, #48]	; (8003c80 <SetUpTXRXCycle+0xa0>)
 8003c4e:	f00c fc8b 	bl	8010568 <UTIL_TIMER_Start>
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000764 	.word	0x20000764
 8003c5c:	200007c8 	.word	0x200007c8
 8003c60:	20000890 	.word	0x20000890
 8003c64:	20000892 	.word	0x20000892
 8003c68:	20000761 	.word	0x20000761
 8003c6c:	20000894 	.word	0x20000894
 8003c70:	20000760 	.word	0x20000760
 8003c74:	20000004 	.word	0x20000004
 8003c78:	20000008 	.word	0x20000008
 8003c7c:	08003bad 	.word	0x08003bad
 8003c80:	20000748 	.word	0x20000748

08003c84 <LL_APB2_GRP1_ForceReset>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <LL_APB2_GRP1_ReleaseReset>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
	...

08003ccc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <LL_EXTI_EnableIT_0_31+0x24>)
 8003cd6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003cda:	4905      	ldr	r1, [pc, #20]	; (8003cf0 <LL_EXTI_EnableIT_0_31+0x24>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	58000800 	.word	0x58000800

08003cf4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <vcom_Init+0x28>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003d02:	f7fd ffd7 	bl	8001cb4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003d06:	f7ff f8c3 	bl	8002e90 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003d0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003d0e:	f7ff ffdd 	bl	8003ccc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003d12:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000898 	.word	0x20000898

08003d20 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003d24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d28:	f7ff ffac 	bl	8003c84 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003d2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d30:	f7ff ffb9 	bl	8003ca6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003d34:	4804      	ldr	r0, [pc, #16]	; (8003d48 <vcom_DeInit+0x28>)
 8003d36:	f7ff fa89 	bl	800324c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003d3a:	200f      	movs	r0, #15
 8003d3c:	f002 fccb 	bl	80066d6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003d40:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000508 	.word	0x20000508

08003d4c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4804      	ldr	r0, [pc, #16]	; (8003d70 <vcom_Trace_DMA+0x24>)
 8003d60:	f006 faac 	bl	800a2bc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003d64:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000508 	.word	0x20000508

08003d74 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <vcom_ReceiveInit+0x70>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003d82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d86:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003d88:	f107 0308 	add.w	r3, r7, #8
 8003d8c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d90:	4815      	ldr	r0, [pc, #84]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003d92:	f008 fbaa 	bl	800c4ea <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003d96:	bf00      	nop
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da6:	d0f7      	beq.n	8003d98 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003da8:	bf00      	nop
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db8:	d1f7      	bne.n	8003daa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003dc8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003dca:	4807      	ldr	r0, [pc, #28]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dcc:	f008 fbe8 	bl	800c5a0 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4906      	ldr	r1, [pc, #24]	; (8003dec <vcom_ReceiveInit+0x78>)
 8003dd4:	4804      	ldr	r0, [pc, #16]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dd6:	f006 fa1b 	bl	800a210 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003dda:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	2000089c 	.word	0x2000089c
 8003de8:	20000508 	.word	0x20000508
 8003dec:	20000897 	.word	0x20000897

08003df0 <vcom_Resume>:

void vcom_Resume(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003df4:	4808      	ldr	r0, [pc, #32]	; (8003e18 <vcom_Resume+0x28>)
 8003df6:	f006 f924 	bl	800a042 <HAL_UART_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003e00:	f7fe f9dc 	bl	80021bc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e04:	4805      	ldr	r0, [pc, #20]	; (8003e1c <vcom_Resume+0x2c>)
 8003e06:	f002 fc83 	bl	8006710 <HAL_DMA_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003e10:	f7fe f9d4 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000508 	.word	0x20000508
 8003e1c:	20000688 	.word	0x20000688

08003e20 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <HAL_UART_TxCpltCallback+0x24>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d103      	bne.n	8003e3a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_UART_TxCpltCallback+0x28>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2000      	movs	r0, #0
 8003e38:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40013800 	.word	0x40013800
 8003e48:	20000898 	.word	0x20000898

08003e4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0d      	ldr	r2, [pc, #52]	; (8003e90 <HAL_UART_RxCpltCallback+0x44>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d113      	bne.n	8003e86 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_UART_RxCpltCallback+0x48>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_UART_RxCpltCallback+0x30>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_UART_RxCpltCallback+0x48>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2101      	movs	r1, #1
 8003e78:	4807      	ldr	r0, [pc, #28]	; (8003e98 <HAL_UART_RxCpltCallback+0x4c>)
 8003e7a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4906      	ldr	r1, [pc, #24]	; (8003e98 <HAL_UART_RxCpltCallback+0x4c>)
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f006 f9c5 	bl	800a210 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40013800 	.word	0x40013800
 8003e94:	2000089c 	.word	0x2000089c
 8003e98:	20000897 	.word	0x20000897

08003e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e9c:	480d      	ldr	r0, [pc, #52]	; (8003ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ea0:	f001 fce5 	bl	800586e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ea4:	480c      	ldr	r0, [pc, #48]	; (8003ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ea6:	490d      	ldr	r1, [pc, #52]	; (8003edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <LoopForever+0xe>)
  movs r3, #0
 8003eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eac:	e002      	b.n	8003eb4 <LoopCopyDataInit>

08003eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eb2:	3304      	adds	r3, #4

08003eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb8:	d3f9      	bcc.n	8003eae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ebc:	4c0a      	ldr	r4, [pc, #40]	; (8003ee8 <LoopForever+0x16>)
  movs r3, #0
 8003ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ec0:	e001      	b.n	8003ec6 <LoopFillZerobss>

08003ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec4:	3204      	adds	r2, #4

08003ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec8:	d3fb      	bcc.n	8003ec2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003eca:	f00d f807 	bl	8010edc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ece:	f7fe f901 	bl	80020d4 <main>

08003ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ed2:	e7fe      	b.n	8003ed2 <LoopForever>
  ldr   r0, =_estack
 8003ed4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003edc:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003ee0:	08015cc8 	.word	0x08015cc8
  ldr r2, =_sbss
 8003ee4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003ee8:	20000f60 	.word	0x20000f60

08003eec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003eec:	e7fe      	b.n	8003eec <ADC_IRQHandler>

08003eee <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8003ef2:	f7fe fb4b 	bl	800258c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8003ef6:	f000 f80b 	bl	8003f10 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}

08003efe <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295
 8003f06:	f00c f8e7 	bl	80100d8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <SubghzApp_Init>:
int digits_only(const char *s);
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b096      	sub	sp, #88	; 0x58
 8003f14:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

	//Read Params from Flash
  Parameter = Readflash_func();
 8003f16:	4c48      	ldr	r4, [pc, #288]	; (8004038 <SubghzApp_Init+0x128>)
 8003f18:	463b      	mov	r3, r7
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd ff7a 	bl	8001e14 <Readflash_func>
 8003f20:	4625      	mov	r5, r4
 8003f22:	463c      	mov	r4, r7
 8003f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8003f34:	4b41      	ldr	r3, [pc, #260]	; (800403c <SubghzApp_Init+0x12c>)
 8003f36:	4a42      	ldr	r2, [pc, #264]	; (8004040 <SubghzApp_Init+0x130>)
 8003f38:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8003f3a:	4b40      	ldr	r3, [pc, #256]	; (800403c <SubghzApp_Init+0x12c>)
 8003f3c:	4a41      	ldr	r2, [pc, #260]	; (8004044 <SubghzApp_Init+0x134>)
 8003f3e:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8003f40:	4b3e      	ldr	r3, [pc, #248]	; (800403c <SubghzApp_Init+0x12c>)
 8003f42:	4a41      	ldr	r2, [pc, #260]	; (8004048 <SubghzApp_Init+0x138>)
 8003f44:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <SubghzApp_Init+0x12c>)
 8003f48:	4a40      	ldr	r2, [pc, #256]	; (800404c <SubghzApp_Init+0x13c>)
 8003f4a:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	; (800403c <SubghzApp_Init+0x12c>)
 8003f4e:	4a40      	ldr	r2, [pc, #256]	; (8004050 <SubghzApp_Init+0x140>)
 8003f50:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8003f52:	4b40      	ldr	r3, [pc, #256]	; (8004054 <SubghzApp_Init+0x144>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4839      	ldr	r0, [pc, #228]	; (800403c <SubghzApp_Init+0x12c>)
 8003f58:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* Radio Set frequency */
   Radio.SetChannel(RF_FREQUENCY);
 8003f5a:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <SubghzApp_Init+0x144>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	483e      	ldr	r0, [pc, #248]	; (8004058 <SubghzApp_Init+0x148>)
 8003f60:	4798      	blx	r3

   /* Radio configuration */
 #if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
   APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 8003f62:	4b3e      	ldr	r3, [pc, #248]	; (800405c <SubghzApp_Init+0x14c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f00b fd7b 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 8003f6e:	4b3c      	ldr	r3, [pc, #240]	; (8004060 <SubghzApp_Init+0x150>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	2002      	movs	r0, #2
 8003f76:	f00b fd75 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8003f7a:	237d      	movs	r3, #125	; 0x7d
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <SubghzApp_Init+0x154>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	2100      	movs	r1, #0
 8003f84:	2002      	movs	r0, #2
 8003f86:	f00b fd6d 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	4b36      	ldr	r3, [pc, #216]	; (8004068 <SubghzApp_Init+0x158>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	2100      	movs	r1, #0
 8003f94:	2002      	movs	r0, #2
 8003f96:	f00b fd65 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>

   Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <SubghzApp_Init+0x144>)
 8003f9c:	69dc      	ldr	r4, [r3, #28]
 8003f9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003fa2:	9308      	str	r3, [sp, #32]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9307      	str	r3, [sp, #28]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	9306      	str	r3, [sp, #24]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9305      	str	r3, [sp, #20]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	9304      	str	r3, [sp, #16]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9303      	str	r3, [sp, #12]
 8003fb8:	2308      	movs	r3, #8
 8003fba:	9302      	str	r3, [sp, #8]
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2114      	movs	r1, #20
 8003fca:	2001      	movs	r0, #1
 8003fcc:	47a0      	blx	r4
                     LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                     LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                     true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

   Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <SubghzApp_Init+0x144>)
 8003fd0:	699c      	ldr	r4, [r3, #24]
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9308      	str	r3, [sp, #32]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9307      	str	r3, [sp, #28]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9306      	str	r3, [sp, #24]
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	9305      	str	r3, [sp, #20]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9304      	str	r3, [sp, #16]
 8003fea:	2300      	movs	r3, #0
 8003fec:	9303      	str	r3, [sp, #12]
 8003fee:	2305      	movs	r3, #5
 8003ff0:	9302      	str	r3, [sp, #8]
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	220c      	movs	r2, #12
 8003ffe:	2100      	movs	r1, #0
 8004000:	2001      	movs	r0, #1
 8004002:	47a0      	blx	r4
                     LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                     LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                     0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

   Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <SubghzApp_Init+0x144>)
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	2108      	movs	r1, #8
 800400a:	2001      	movs	r0, #1
 800400c:	4798      	blx	r3
 #else
 #error "Please define a modulation in the subghz_phy_app.h file."
 #endif /* USE_MODEM_LORA | USE_MODEM_FSK */

   //send Radio to sleep in the beginning
   Radio.Sleep();
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <SubghzApp_Init+0x144>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	4798      	blx	r3

  /*UART task registration*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ConfigMode_Idle), UTIL_SEQ_RFU, ConfigModeIdle);
 8004014:	4a15      	ldr	r2, [pc, #84]	; (800406c <SubghzApp_Init+0x15c>)
 8004016:	2100      	movs	r1, #0
 8004018:	2004      	movs	r0, #4
 800401a:	f00c f959 	bl	80102d0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SyncedWakeup), UTIL_SEQ_RFU, SyncedWakeup);
 800401e:	4a14      	ldr	r2, [pc, #80]	; (8004070 <SubghzApp_Init+0x160>)
 8004020:	2100      	movs	r1, #0
 8004022:	2008      	movs	r0, #8
 8004024:	f00c f954 	bl	80102d0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ConfigMode_Idle), CFG_SEQ_Prio_0);
 8004028:	2100      	movs	r1, #0
 800402a:	2004      	movs	r0, #4
 800402c:	f00c f972 	bl	8010314 <UTIL_SEQ_SetTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 8004030:	bf00      	nop
 8004032:	3730      	adds	r7, #48	; 0x30
 8004034:	46bd      	mov	sp, r7
 8004036:	bdb0      	pop	{r4, r5, r7, pc}
 8004038:	20000010 	.word	0x20000010
 800403c:	200008a0 	.word	0x200008a0
 8004040:	08004075 	.word	0x08004075
 8004044:	0800408d 	.word	0x0800408d
 8004048:	08004105 	.word	0x08004105
 800404c:	0800411d 	.word	0x0800411d
 8004050:	08004135 	.word	0x08004135
 8004054:	08015758 	.word	0x08015758
 8004058:	33bca100 	.word	0x33bca100
 800405c:	08014d38 	.word	0x08014d38
 8004060:	08014d4c 	.word	0x08014d4c
 8004064:	08014d60 	.word	0x08014d60
 8004068:	08014d74 	.word	0x08014d74
 800406c:	0800414d 	.word	0x0800414d
 8004070:	08004765 	.word	0x08004765

08004074 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	State = TX;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <OnTxDone+0x14>)
 800407a:	2204      	movs	r2, #4
 800407c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxDone */
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000a1c 	.word	0x20000a1c

0800408c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4603      	mov	r3, r0
 800409c:	817b      	strh	r3, [r7, #10]
 800409e:	460b      	mov	r3, r1
 80040a0:	813b      	strh	r3, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
	//_BT_PRINT("MSG Received\r");
	/*Only Messages with the correct identifier are relevant*/
	if(payload[0] != 0xFA)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2bfa      	cmp	r3, #250	; 0xfa
 80040ac:	d11a      	bne.n	80040e4 <OnRxDone+0x58>
		return;

	/*If size is not correct, its also not a correct message for master*/
	if (size != PAYLOAD_LEN)
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d119      	bne.n	80040e8 <OnRxDone+0x5c>
		return;

	/*Eventuell noch MAster ID einführen, dass nachrichten an anderen Master auch verworfen werden können!!!!*/
	State = RX;
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <OnRxDone+0x64>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
	RxBufferSize = size;
 80040ba:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <OnRxDone+0x68>)
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	8013      	strh	r3, [r2, #0]
	/*Only Copy if Received Data is less than Buffer availible*/
	if (RxBufferSize < RXBUF_LEN){
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <OnRxDone+0x68>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	2b13      	cmp	r3, #19
 80040c6:	d805      	bhi.n	80040d4 <OnRxDone+0x48>
		memcpy(RxBuffer, payload, size);
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68f9      	ldr	r1, [r7, #12]
 80040ce:	480a      	ldr	r0, [pc, #40]	; (80040f8 <OnRxDone+0x6c>)
 80040d0:	f00c ff28 	bl	8010f24 <memcpy>
	}
	RssiValue = rssi;
 80040d4:	893b      	ldrh	r3, [r7, #8]
 80040d6:	b25a      	sxtb	r2, r3
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <OnRxDone+0x70>)
 80040da:	701a      	strb	r2, [r3, #0]
	SnrValue = LoraSnr_FskCfo;
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <OnRxDone+0x74>)
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	7013      	strb	r3, [r2, #0]
 80040e2:	e002      	b.n	80040ea <OnRxDone+0x5e>
		return;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <OnRxDone+0x5e>
		return;
 80040e8:	bf00      	nop
  /* USER CODE END OnRxDone */
}
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000a1c 	.word	0x20000a1c
 80040f4:	20000a28 	.word	0x20000a28
 80040f8:	20000a2c 	.word	0x20000a2c
 80040fc:	20000a2a 	.word	0x20000a2a
 8004100:	20000a2b 	.word	0x20000a2b

08004104 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	State = TX_TIMEOUT;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <OnTxTimeout+0x14>)
 800410a:	2205      	movs	r2, #5
 800410c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxTimeout */
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000a1c 	.word	0x20000a1c

0800411c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	State = RX_TIMEOUT;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <OnRxTimeout+0x14>)
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxTimeout */
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000a1c 	.word	0x20000a1c

08004134 <OnRxError>:

static void OnRxError(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	State = RX_ERROR;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <OnRxError+0x14>)
 800413a:	2203      	movs	r2, #3
 800413c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxError */
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000a1c 	.word	0x20000a1c

0800414c <ConfigModeIdle>:

/* USER CODE BEGIN PrFD */

static void ConfigModeIdle(void){
 800414c:	b5b0      	push	{r4, r5, r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8


	//Disable Reed Contact Interrupt in Config Mode (in System-Init all IRQs are enabled)
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8004152:	2009      	movs	r0, #9
 8004154:	f002 fabf 	bl	80066d6 <HAL_NVIC_DisableIRQ>
	//LED Red Blink 1 Hz start
	UTIL_TIMER_Create(&timerLedIdleConf, LEDConfIdle_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledConfIdleEvent, NULL);
 8004158:	2300      	movs	r3, #0
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	4bb8      	ldr	r3, [pc, #736]	; (8004440 <ConfigModeIdle+0x2f4>)
 800415e:	2200      	movs	r2, #0
 8004160:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004164:	48b7      	ldr	r0, [pc, #732]	; (8004444 <ConfigModeIdle+0x2f8>)
 8004166:	f00c f9c9 	bl	80104fc <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerLedIdleConf);
 800416a:	48b6      	ldr	r0, [pc, #728]	; (8004444 <ConfigModeIdle+0x2f8>)
 800416c:	f00c f9fc 	bl	8010568 <UTIL_TIMER_Start>
	_BT_PRINT("Master Trap in Config Mode...\r");
 8004170:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004174:	221e      	movs	r2, #30
 8004176:	49b4      	ldr	r1, [pc, #720]	; (8004448 <ConfigModeIdle+0x2fc>)
 8004178:	48b4      	ldr	r0, [pc, #720]	; (800444c <ConfigModeIdle+0x300>)
 800417a:	f005 ffb2 	bl	800a0e2 <HAL_UART_Transmit>
	//In Config Mode the GSM and Bluetooth module - power transistor is enabled
	HAL_GPIO_WritePin(GSM_Switch_GPIO_Port, GSM_Switch_Pin, 1);
 800417e:	2201      	movs	r2, #1
 8004180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004188:	f003 fb15 	bl	80077b6 <HAL_GPIO_WritePin>
	//Timer to give GSM Module time to register
	UTIL_TIMER_Create(&timerGSMStartConf, GSM_Startuptime_MS, UTIL_TIMER_ONESHOT, OnGSMConfTimeEvent, NULL);
 800418c:	2300      	movs	r3, #0
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	4baf      	ldr	r3, [pc, #700]	; (8004450 <ConfigModeIdle+0x304>)
 8004192:	2200      	movs	r2, #0
 8004194:	f643 2198 	movw	r1, #15000	; 0x3a98
 8004198:	48ae      	ldr	r0, [pc, #696]	; (8004454 <ConfigModeIdle+0x308>)
 800419a:	f00c f9af 	bl	80104fc <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerGSMStartConf);
 800419e:	48ad      	ldr	r0, [pc, #692]	; (8004454 <ConfigModeIdle+0x308>)
 80041a0:	f00c f9e2 	bl	8010568 <UTIL_TIMER_Start>

	//Start RX of BT
	HAL_UART_AbortReceive(&hlpuart1);
 80041a4:	48a9      	ldr	r0, [pc, #676]	; (800444c <ConfigModeIdle+0x300>)
 80041a6:	f006 f91b 	bl	800a3e0 <HAL_UART_AbortReceive>
	SetUpTXRXCycle_BTUART();
 80041aa:	f7fd fc63 	bl	8001a74 <SetUpTXRXCycle_BTUART>

	//Wait for commandflag (either buttonpress or BT uart from App)
	//variable "commandflag" as int - defines which command should be initiated and is written by command interrupt
	while (1) {
		//button only pressed quickly -> Perform GSM Test
		if (commandflag == 1){
 80041ae:	4baa      	ldr	r3, [pc, #680]	; (8004458 <ConfigModeIdle+0x30c>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d11f      	bne.n	80041f6 <ConfigModeIdle+0xaa>
			HAL_UART_AbortReceive(&hlpuart1);
 80041b6:	48a5      	ldr	r0, [pc, #660]	; (800444c <ConfigModeIdle+0x300>)
 80041b8:	f006 f912 	bl	800a3e0 <HAL_UART_AbortReceive>
			commandflag = 0;
 80041bc:	4ba6      	ldr	r3, [pc, #664]	; (8004458 <ConfigModeIdle+0x30c>)
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 80041c2:	48a0      	ldr	r0, [pc, #640]	; (8004444 <ConfigModeIdle+0x2f8>)
 80041c4:	f00c fa3e 	bl	8010644 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041ce:	48a3      	ldr	r0, [pc, #652]	; (800445c <ConfigModeIdle+0x310>)
 80041d0:	f003 faf1 	bl	80077b6 <HAL_GPIO_WritePin>
			/*Test GSM Functions*/
			GSMTest();
 80041d4:	f000 fdfc 	bl	8004dd0 <GSMTest>
			buttonpressdone = 0;
 80041d8:	4ba1      	ldr	r3, [pc, #644]	; (8004460 <ConfigModeIdle+0x314>)
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
			/*Clear Pending Interrupts in case button was pressed while GSM Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 80041de:	4ba1      	ldr	r3, [pc, #644]	; (8004464 <ConfigModeIdle+0x318>)
 80041e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041e4:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80041e6:	2029      	movs	r0, #41	; 0x29
 80041e8:	f002 fa83 	bl	80066f2 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041ec:	2029      	movs	r0, #41	; 0x29
 80041ee:	f002 fa64 	bl	80066ba <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 80041f2:	f7fd fc3f 	bl	8001a74 <SetUpTXRXCycle_BTUART>
		}
		//button pressed between 2 and 5 seconds -> Read out Battery voltage
		if (commandflag == 2){
 80041f6:	4b98      	ldr	r3, [pc, #608]	; (8004458 <ConfigModeIdle+0x30c>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d11c      	bne.n	8004238 <ConfigModeIdle+0xec>
			HAL_UART_AbortReceive(&hlpuart1);
 80041fe:	4893      	ldr	r0, [pc, #588]	; (800444c <ConfigModeIdle+0x300>)
 8004200:	f006 f8ee 	bl	800a3e0 <HAL_UART_AbortReceive>
			commandflag = 0;
 8004204:	4b94      	ldr	r3, [pc, #592]	; (8004458 <ConfigModeIdle+0x30c>)
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 800420a:	488e      	ldr	r0, [pc, #568]	; (8004444 <ConfigModeIdle+0x2f8>)
 800420c:	f00c fa1a 	bl	8010644 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004216:	4891      	ldr	r0, [pc, #580]	; (800445c <ConfigModeIdle+0x310>)
 8004218:	f003 facd 	bl	80077b6 <HAL_GPIO_WritePin>
			/*Battery Readout*/
			BatteryReadout();
 800421c:	f000 fd46 	bl	8004cac <BatteryReadout>
			/*Clear Pending Interrupts in case button was pressed while GSM Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 8004220:	4b90      	ldr	r3, [pc, #576]	; (8004464 <ConfigModeIdle+0x318>)
 8004222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004226:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8004228:	2029      	movs	r0, #41	; 0x29
 800422a:	f002 fa62 	bl	80066f2 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800422e:	2029      	movs	r0, #41	; 0x29
 8004230:	f002 fa43 	bl	80066ba <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 8004234:	f7fd fc1e 	bl	8001a74 <SetUpTXRXCycle_BTUART>
		}
		//button over 5s pressed: search and sync slave devices over LoRa
		if (commandflag == 3){
 8004238:	4b87      	ldr	r3, [pc, #540]	; (8004458 <ConfigModeIdle+0x30c>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d11c      	bne.n	800427a <ConfigModeIdle+0x12e>
			HAL_UART_AbortReceive(&hlpuart1);
 8004240:	4882      	ldr	r0, [pc, #520]	; (800444c <ConfigModeIdle+0x300>)
 8004242:	f006 f8cd 	bl	800a3e0 <HAL_UART_AbortReceive>
			commandflag = 0;
 8004246:	4b84      	ldr	r3, [pc, #528]	; (8004458 <ConfigModeIdle+0x30c>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 800424c:	487d      	ldr	r0, [pc, #500]	; (8004444 <ConfigModeIdle+0x2f8>)
 800424e:	f00c f9f9 	bl	8010644 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004252:	2200      	movs	r2, #0
 8004254:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004258:	4880      	ldr	r0, [pc, #512]	; (800445c <ConfigModeIdle+0x310>)
 800425a:	f003 faac 	bl	80077b6 <HAL_GPIO_WritePin>
			/*Find, sync and register LoRa Slaves with their ID*/
			LoRa_FindSync();
 800425e:	f000 ff81 	bl	8005164 <LoRa_FindSync>
			/*Clear Pending Interrupts in case button was pressed while GSM Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 8004262:	4b80      	ldr	r3, [pc, #512]	; (8004464 <ConfigModeIdle+0x318>)
 8004264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004268:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800426a:	2029      	movs	r0, #41	; 0x29
 800426c:	f002 fa41 	bl	80066f2 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004270:	2029      	movs	r0, #41	; 0x29
 8004272:	f002 fa22 	bl	80066ba <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 8004276:	f7fd fbfd 	bl	8001a74 <SetUpTXRXCycle_BTUART>

		}
		//button over 10s pressed: start LoRa
		if (commandflag == 4){
 800427a:	4b77      	ldr	r3, [pc, #476]	; (8004458 <ConfigModeIdle+0x30c>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b04      	cmp	r3, #4
 8004280:	f040 8114 	bne.w	80044ac <ConfigModeIdle+0x360>
			HAL_UART_AbortReceive(&hlpuart1);
 8004284:	4871      	ldr	r0, [pc, #452]	; (800444c <ConfigModeIdle+0x300>)
 8004286:	f006 f8ab 	bl	800a3e0 <HAL_UART_AbortReceive>
			uint8_t readyforsleep_lora = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
			uint8_t validnr = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	75bb      	strb	r3, [r7, #22]
			commandflag = 0;
 8004292:	4b71      	ldr	r3, [pc, #452]	; (8004458 <ConfigModeIdle+0x30c>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 8004298:	486a      	ldr	r0, [pc, #424]	; (8004444 <ConfigModeIdle+0x2f8>)
 800429a:	f00c f9d3 	bl	8010644 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042a4:	486d      	ldr	r0, [pc, #436]	; (800445c <ConfigModeIdle+0x310>)
 80042a6:	f003 fa86 	bl	80077b6 <HAL_GPIO_WritePin>
			_BT_PRINT("Initializing Sleep for trap mode...\r");
 80042aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80042ae:	2224      	movs	r2, #36	; 0x24
 80042b0:	496d      	ldr	r1, [pc, #436]	; (8004468 <ConfigModeIdle+0x31c>)
 80042b2:	4866      	ldr	r0, [pc, #408]	; (800444c <ConfigModeIdle+0x300>)
 80042b4:	f005 ff15 	bl	800a0e2 <HAL_UART_Transmit>

			/*Check if Valid nr*/
			if (strncmp(Parameter.Handynummer, "+", 1) == 0 && digits_only(Parameter.Handynummer+1) == 1){
 80042b8:	4b6c      	ldr	r3, [pc, #432]	; (800446c <ConfigModeIdle+0x320>)
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <ConfigModeIdle+0x324>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <ConfigModeIdle+0x18e>
 80042c6:	4b6b      	ldr	r3, [pc, #428]	; (8004474 <ConfigModeIdle+0x328>)
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 f9d7 	bl	800567c <digits_only>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <ConfigModeIdle+0x18e>
				validnr = 1;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75bb      	strb	r3, [r7, #22]
 80042d8:	e001      	b.n	80042de <ConfigModeIdle+0x192>
			}
			else {
				validnr = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	75bb      	strb	r3, [r7, #22]
			}

			/*Sleep Mode activation over LoRa, if slaves are used*/
			if (slaves_reg != 0){
 80042de:	4b66      	ldr	r3, [pc, #408]	; (8004478 <ConfigModeIdle+0x32c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d004      	beq.n	80042f0 <ConfigModeIdle+0x1a4>
				readyforsleep_lora = LoRa_StartSleep();
 80042e6:	f001 f845 	bl	8005374 <LoRa_StartSleep>
 80042ea:	4603      	mov	r3, r0
 80042ec:	75fb      	strb	r3, [r7, #23]
 80042ee:	e001      	b.n	80042f4 <ConfigModeIdle+0x1a8>
			}
			else {
				readyforsleep_lora = 1;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
			}


			if (readyforsleep_lora == 0){
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d153      	bne.n	80043a2 <ConfigModeIdle+0x256>
				sprintf(printstr, "Error! Following slave devices did not acknowledge sleep mode: ");
 80042fa:	4960      	ldr	r1, [pc, #384]	; (800447c <ConfigModeIdle+0x330>)
 80042fc:	4860      	ldr	r0, [pc, #384]	; (8004480 <ConfigModeIdle+0x334>)
 80042fe:	f00d fa83 	bl	8011808 <siprintf>
				for (uint8_t i = 0; i < slaves_reg; i++){
 8004302:	2300      	movs	r3, #0
 8004304:	757b      	strb	r3, [r7, #21]
 8004306:	e019      	b.n	800433c <ConfigModeIdle+0x1f0>
					if (slavestatus[i] == ERROR_BEFORE_SLEEP){	// 8=missing ack, 1 = ok,
 8004308:	7d7b      	ldrb	r3, [r7, #21]
 800430a:	4a5e      	ldr	r2, [pc, #376]	; (8004484 <ConfigModeIdle+0x338>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d111      	bne.n	8004336 <ConfigModeIdle+0x1ea>
						char slaveid_str[5] = {0};
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	2300      	movs	r3, #0
 8004318:	723b      	strb	r3, [r7, #8]
						sprintf(slaveid_str, "%u", slaveaddrss[i]);
 800431a:	7d7b      	ldrb	r3, [r7, #21]
 800431c:	4a5a      	ldr	r2, [pc, #360]	; (8004488 <ConfigModeIdle+0x33c>)
 800431e:	5cd3      	ldrb	r3, [r2, r3]
 8004320:	461a      	mov	r2, r3
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	4959      	ldr	r1, [pc, #356]	; (800448c <ConfigModeIdle+0x340>)
 8004326:	4618      	mov	r0, r3
 8004328:	f00d fa6e 	bl	8011808 <siprintf>
						strcat(printstr, slaveid_str);
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	4619      	mov	r1, r3
 8004330:	4853      	ldr	r0, [pc, #332]	; (8004480 <ConfigModeIdle+0x334>)
 8004332:	f00d fa89 	bl	8011848 <strcat>
				for (uint8_t i = 0; i < slaves_reg; i++){
 8004336:	7d7b      	ldrb	r3, [r7, #21]
 8004338:	3301      	adds	r3, #1
 800433a:	757b      	strb	r3, [r7, #21]
 800433c:	4b4e      	ldr	r3, [pc, #312]	; (8004478 <ConfigModeIdle+0x32c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	7d7a      	ldrb	r2, [r7, #21]
 8004342:	429a      	cmp	r2, r3
 8004344:	d3e0      	bcc.n	8004308 <ConfigModeIdle+0x1bc>
					}
				}
				strcat(printstr, "\r");
 8004346:	484e      	ldr	r0, [pc, #312]	; (8004480 <ConfigModeIdle+0x334>)
 8004348:	f7fb ff1a 	bl	8000180 <strlen>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <ConfigModeIdle+0x334>)
 8004352:	4413      	add	r3, r2
 8004354:	494e      	ldr	r1, [pc, #312]	; (8004490 <ConfigModeIdle+0x344>)
 8004356:	461a      	mov	r2, r3
 8004358:	460b      	mov	r3, r1
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	8013      	strh	r3, [r2, #0]
				_BT_PRINT(printstr);
 800435e:	4848      	ldr	r0, [pc, #288]	; (8004480 <ConfigModeIdle+0x334>)
 8004360:	f7fb ff0e 	bl	8000180 <strlen>
 8004364:	4603      	mov	r3, r0
 8004366:	b29a      	uxth	r2, r3
 8004368:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800436c:	4944      	ldr	r1, [pc, #272]	; (8004480 <ConfigModeIdle+0x334>)
 800436e:	4837      	ldr	r0, [pc, #220]	; (800444c <ConfigModeIdle+0x300>)
 8004370:	f005 feb7 	bl	800a0e2 <HAL_UART_Transmit>
				_BT_PRINT("Initiation of sleep mode canceled.\r");
 8004374:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004378:	2223      	movs	r2, #35	; 0x23
 800437a:	4946      	ldr	r1, [pc, #280]	; (8004494 <ConfigModeIdle+0x348>)
 800437c:	4833      	ldr	r0, [pc, #204]	; (800444c <ConfigModeIdle+0x300>)
 800437e:	f005 feb0 	bl	800a0e2 <HAL_UART_Transmit>
				indicateLED_return(0);
 8004382:	2000      	movs	r0, #0
 8004384:	f001 f8dc 	bl	8005540 <indicateLED_return>
				__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <ConfigModeIdle+0x318>)
 800438a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800438e:	60da      	str	r2, [r3, #12]
				HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8004390:	2029      	movs	r0, #41	; 0x29
 8004392:	f002 f9ae 	bl	80066f2 <HAL_NVIC_ClearPendingIRQ>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004396:	2029      	movs	r0, #41	; 0x29
 8004398:	f002 f98f 	bl	80066ba <HAL_NVIC_EnableIRQ>
				SetUpTXRXCycle_BTUART();
 800439c:	f7fd fb6a 	bl	8001a74 <SetUpTXRXCycle_BTUART>
 80043a0:	e084      	b.n	80044ac <ConfigModeIdle+0x360>
			}
			else if (validnr == 0){
 80043a2:	7dbb      	ldrb	r3, [r7, #22]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11d      	bne.n	80043e4 <ConfigModeIdle+0x298>
				_BT_PRINT("No valid Mobile-Nr to send SMS to was set. Please specifiy a Number starting with +49..\r");
 80043a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80043ac:	2258      	movs	r2, #88	; 0x58
 80043ae:	493a      	ldr	r1, [pc, #232]	; (8004498 <ConfigModeIdle+0x34c>)
 80043b0:	4826      	ldr	r0, [pc, #152]	; (800444c <ConfigModeIdle+0x300>)
 80043b2:	f005 fe96 	bl	800a0e2 <HAL_UART_Transmit>
				_BT_PRINT("Initiation of sleep mode canceled.\r");
 80043b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80043ba:	2223      	movs	r2, #35	; 0x23
 80043bc:	4935      	ldr	r1, [pc, #212]	; (8004494 <ConfigModeIdle+0x348>)
 80043be:	4823      	ldr	r0, [pc, #140]	; (800444c <ConfigModeIdle+0x300>)
 80043c0:	f005 fe8f 	bl	800a0e2 <HAL_UART_Transmit>
				indicateLED_return(0);
 80043c4:	2000      	movs	r0, #0
 80043c6:	f001 f8bb 	bl	8005540 <indicateLED_return>
				__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <ConfigModeIdle+0x318>)
 80043cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043d0:	60da      	str	r2, [r3, #12]
				HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80043d2:	2029      	movs	r0, #41	; 0x29
 80043d4:	f002 f98d 	bl	80066f2 <HAL_NVIC_ClearPendingIRQ>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043d8:	2029      	movs	r0, #41	; 0x29
 80043da:	f002 f96e 	bl	80066ba <HAL_NVIC_EnableIRQ>
				SetUpTXRXCycle_BTUART();
 80043de:	f7fd fb49 	bl	8001a74 <SetUpTXRXCycle_BTUART>
 80043e2:	e063      	b.n	80044ac <ConfigModeIdle+0x360>
			}
			else{
				if (slaves_reg != 0){
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <ConfigModeIdle+0x32c>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <ConfigModeIdle+0x2b0>
					_BT_PRINT("All slaves acknowledged, starting power-down trap mode now... Bluetooth connection will break\r");
 80043ec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80043f0:	225e      	movs	r2, #94	; 0x5e
 80043f2:	492a      	ldr	r1, [pc, #168]	; (800449c <ConfigModeIdle+0x350>)
 80043f4:	4815      	ldr	r0, [pc, #84]	; (800444c <ConfigModeIdle+0x300>)
 80043f6:	f005 fe74 	bl	800a0e2 <HAL_UART_Transmit>
 80043fa:	e006      	b.n	800440a <ConfigModeIdle+0x2be>
				}
				else {
					_BT_PRINT("Starting power-down trap mode with no slaves now...Bluetooth connection will break\r");
 80043fc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004400:	2253      	movs	r2, #83	; 0x53
 8004402:	4927      	ldr	r1, [pc, #156]	; (80044a0 <ConfigModeIdle+0x354>)
 8004404:	4811      	ldr	r0, [pc, #68]	; (800444c <ConfigModeIdle+0x300>)
 8004406:	f005 fe6c 	bl	800a0e2 <HAL_UART_Transmit>
				}
				HAL_Delay(200);
 800440a:	20c8      	movs	r0, #200	; 0xc8
 800440c:	f7fe f948 	bl	80026a0 <HAL_Delay>

				/*Stop UART BT Reception*/
				HAL_UART_AbortReceive(&hlpuart1);
 8004410:	480e      	ldr	r0, [pc, #56]	; (800444c <ConfigModeIdle+0x300>)
 8004412:	f005 ffe5 	bl	800a3e0 <HAL_UART_AbortReceive>

				/*Shut down GSM and Bluetooth module*/
				HAL_GPIO_WritePin(GSM_Switch_GPIO_Port, GSM_Switch_Pin, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800441c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004420:	f003 f9c9 	bl	80077b6 <HAL_GPIO_WritePin>
				UTIL_TIMER_Create(&timerSleepWakeup, 60000, UTIL_TIMER_ONESHOT, timerSleepWakeupEvent, NULL); //every min, mins++
 8004424:	2300      	movs	r3, #0
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <ConfigModeIdle+0x358>)
 800442a:	2200      	movs	r2, #0
 800442c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8004430:	481d      	ldr	r0, [pc, #116]	; (80044a8 <ConfigModeIdle+0x35c>)
 8004432:	f00c f863 	bl	80104fc <UTIL_TIMER_Create>
				UTIL_TIMER_Start(&timerSleepWakeup);
 8004436:	481c      	ldr	r0, [pc, #112]	; (80044a8 <ConfigModeIdle+0x35c>)
 8004438:	f00c f896 	bl	8010568 <UTIL_TIMER_Start>
				return;
 800443c:	e165      	b.n	800470a <ConfigModeIdle+0x5be>
 800443e:	bf00      	nop
 8004440:	080055b9 	.word	0x080055b9
 8004444:	200008e8 	.word	0x200008e8
 8004448:	08014d84 	.word	0x08014d84
 800444c:	20000478 	.word	0x20000478
 8004450:	080055e1 	.word	0x080055e1
 8004454:	20000900 	.word	0x20000900
 8004458:	20000960 	.word	0x20000960
 800445c:	48000400 	.word	0x48000400
 8004460:	20000961 	.word	0x20000961
 8004464:	58000800 	.word	0x58000800
 8004468:	08014da4 	.word	0x08014da4
 800446c:	20000010 	.word	0x20000010
 8004470:	08014dcc 	.word	0x08014dcc
 8004474:	20000011 	.word	0x20000011
 8004478:	200009e0 	.word	0x200009e0
 800447c:	08014dd0 	.word	0x08014dd0
 8004480:	20000970 	.word	0x20000970
 8004484:	200009ec 	.word	0x200009ec
 8004488:	200009e4 	.word	0x200009e4
 800448c:	08014e10 	.word	0x08014e10
 8004490:	08014e14 	.word	0x08014e14
 8004494:	08014e18 	.word	0x08014e18
 8004498:	08014e3c 	.word	0x08014e3c
 800449c:	08014e98 	.word	0x08014e98
 80044a0:	08014ef8 	.word	0x08014ef8
 80044a4:	0800561d 	.word	0x0800561d
 80044a8:	20000918 	.word	0x20000918
			}

		}

		if (commandflag == 5){
 80044ac:	4b98      	ldr	r3, [pc, #608]	; (8004710 <ConfigModeIdle+0x5c4>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	f040 80aa 	bne.w	800460a <ConfigModeIdle+0x4be>
			HAL_UART_AbortReceive(&hlpuart1);
 80044b6:	4897      	ldr	r0, [pc, #604]	; (8004714 <ConfigModeIdle+0x5c8>)
 80044b8:	f005 ff92 	bl	800a3e0 <HAL_UART_AbortReceive>
			commandflag = 0;
 80044bc:	4b94      	ldr	r3, [pc, #592]	; (8004710 <ConfigModeIdle+0x5c4>)
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 80044c2:	4895      	ldr	r0, [pc, #596]	; (8004718 <ConfigModeIdle+0x5cc>)
 80044c4:	f00c f8be 	bl	8010644 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 80044c8:	2200      	movs	r2, #0
 80044ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044ce:	4893      	ldr	r0, [pc, #588]	; (800471c <ConfigModeIdle+0x5d0>)
 80044d0:	f003 f971 	bl	80077b6 <HAL_GPIO_WritePin>
			_BT_PRINT("Storing new number...\r");
 80044d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80044d8:	2216      	movs	r2, #22
 80044da:	4991      	ldr	r1, [pc, #580]	; (8004720 <ConfigModeIdle+0x5d4>)
 80044dc:	488d      	ldr	r0, [pc, #564]	; (8004714 <ConfigModeIdle+0x5c8>)
 80044de:	f005 fe00 	bl	800a0e2 <HAL_UART_Transmit>
			//Check if valid nr
			if (strncmp(handynr_set, "+", 1) == 0 && digits_only(handynr_set+1) == 1){
 80044e2:	4b90      	ldr	r3, [pc, #576]	; (8004724 <ConfigModeIdle+0x5d8>)
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	4b90      	ldr	r3, [pc, #576]	; (8004728 <ConfigModeIdle+0x5dc>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d176      	bne.n	80045de <ConfigModeIdle+0x492>
 80044f0:	4b8e      	ldr	r3, [pc, #568]	; (800472c <ConfigModeIdle+0x5e0>)
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 f8c2 	bl	800567c <digits_only>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d16f      	bne.n	80045de <ConfigModeIdle+0x492>
				memcpy(Parameter.Handynummer, handynr_set, 15);
 80044fe:	4a8c      	ldr	r2, [pc, #560]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004500:	4b88      	ldr	r3, [pc, #544]	; (8004724 <ConfigModeIdle+0x5d8>)
 8004502:	4614      	mov	r4, r2
 8004504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004506:	c407      	stmia	r4!, {r0, r1, r2}
 8004508:	8023      	strh	r3, [r4, #0]
 800450a:	3402      	adds	r4, #2
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	7023      	strb	r3, [r4, #0]

				for (int i = 0; i <= 15; i++) {
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e026      	b.n	8004564 <ConfigModeIdle+0x418>
					if (i <= 8)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b08      	cmp	r3, #8
 800451a:	dc0a      	bgt.n	8004532 <ConfigModeIdle+0x3e6>
						Parameter.Handynummer1[i] = Parameter.Handynummer[i];
 800451c:	4a84      	ldr	r2, [pc, #528]	; (8004730 <ConfigModeIdle+0x5e4>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4413      	add	r3, r2
 8004522:	7819      	ldrb	r1, [r3, #0]
 8004524:	4a82      	ldr	r2, [pc, #520]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	3320      	adds	r3, #32
 800452c:	460a      	mov	r2, r1
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e015      	b.n	800455e <ConfigModeIdle+0x412>
					else {
						for (int f = (i - 8); (i - f) == 8; f++) {
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3b08      	subs	r3, #8
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e00c      	b.n	8004554 <ConfigModeIdle+0x408>

							Parameter.Handynummer2[f] = Parameter.Handynummer[i];
 800453a:	4a7d      	ldr	r2, [pc, #500]	; (8004730 <ConfigModeIdle+0x5e4>)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	7819      	ldrb	r1, [r3, #0]
 8004542:	4a7b      	ldr	r2, [pc, #492]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	3328      	adds	r3, #40	; 0x28
 800454a:	460a      	mov	r2, r1
 800454c:	701a      	strb	r2, [r3, #0]
						for (int f = (i - 8); (i - f) == 8; f++) {
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3301      	adds	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b08      	cmp	r3, #8
 800455c:	d0ed      	beq.n	800453a <ConfigModeIdle+0x3ee>
				for (int i = 0; i <= 15; i++) {
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3301      	adds	r3, #1
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	ddd5      	ble.n	8004516 <ConfigModeIdle+0x3ca>
 800456a:	4b71      	ldr	r3, [pc, #452]	; (8004730 <ConfigModeIdle+0x5e4>)
 800456c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
						}
					}
				}

				memcpy(&speicherhandynr1, Parameter.Handynummer1, 8);
 8004570:	4970      	ldr	r1, [pc, #448]	; (8004734 <ConfigModeIdle+0x5e8>)
 8004572:	e9c1 2300 	strd	r2, r3, [r1]
 8004576:	4b6e      	ldr	r3, [pc, #440]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004578:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
				memcpy(&speicherhandynr2, Parameter.Handynummer2, 8);
 800457c:	496e      	ldr	r1, [pc, #440]	; (8004738 <ConfigModeIdle+0x5ec>)
 800457e:	e9c1 2300 	strd	r2, r3, [r1]

				Eraseflash_func();
 8004582:	f7fd fbbd 	bl	8001d00 <Eraseflash_func>
				Writeflash_func(speicherhandynr1, speicherhandynr2, Parameter.Wakeup);
 8004586:	4b6b      	ldr	r3, [pc, #428]	; (8004734 <ConfigModeIdle+0x5e8>)
 8004588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800458c:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <ConfigModeIdle+0x5ec>)
 800458e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004592:	4b67      	ldr	r3, [pc, #412]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004594:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004598:	e9cd 2300 	strd	r2, r3, [sp]
 800459c:	4622      	mov	r2, r4
 800459e:	462b      	mov	r3, r5
 80045a0:	f7fd fbea 	bl	8001d78 <Writeflash_func>
				_BT_PRINT("Successfully stored ")
 80045a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045a8:	2214      	movs	r2, #20
 80045aa:	4964      	ldr	r1, [pc, #400]	; (800473c <ConfigModeIdle+0x5f0>)
 80045ac:	4859      	ldr	r0, [pc, #356]	; (8004714 <ConfigModeIdle+0x5c8>)
 80045ae:	f005 fd98 	bl	800a0e2 <HAL_UART_Transmit>
				_BT_PRINT(handynr_set);
 80045b2:	485c      	ldr	r0, [pc, #368]	; (8004724 <ConfigModeIdle+0x5d8>)
 80045b4:	f7fb fde4 	bl	8000180 <strlen>
 80045b8:	4603      	mov	r3, r0
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045c0:	4958      	ldr	r1, [pc, #352]	; (8004724 <ConfigModeIdle+0x5d8>)
 80045c2:	4854      	ldr	r0, [pc, #336]	; (8004714 <ConfigModeIdle+0x5c8>)
 80045c4:	f005 fd8d 	bl	800a0e2 <HAL_UART_Transmit>
				_BT_PRINT(" as the number to send SMS to...\r");
 80045c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045cc:	2221      	movs	r2, #33	; 0x21
 80045ce:	495c      	ldr	r1, [pc, #368]	; (8004740 <ConfigModeIdle+0x5f4>)
 80045d0:	4850      	ldr	r0, [pc, #320]	; (8004714 <ConfigModeIdle+0x5c8>)
 80045d2:	f005 fd86 	bl	800a0e2 <HAL_UART_Transmit>
				indicateLED_return(1);
 80045d6:	2001      	movs	r0, #1
 80045d8:	f000 ffb2 	bl	8005540 <indicateLED_return>
 80045dc:	e009      	b.n	80045f2 <ConfigModeIdle+0x4a6>
			}
			else {
				_BT_PRINT("No valid Mobile-Nr to send SMS to was set. Please specifiy a Number starting with +49..\r");
 80045de:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045e2:	2258      	movs	r2, #88	; 0x58
 80045e4:	4957      	ldr	r1, [pc, #348]	; (8004744 <ConfigModeIdle+0x5f8>)
 80045e6:	484b      	ldr	r0, [pc, #300]	; (8004714 <ConfigModeIdle+0x5c8>)
 80045e8:	f005 fd7b 	bl	800a0e2 <HAL_UART_Transmit>
				indicateLED_return(0);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f000 ffa7 	bl	8005540 <indicateLED_return>
			}

			/*Clear Pending Interrupts in case button was pressed while Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 80045f2:	4b55      	ldr	r3, [pc, #340]	; (8004748 <ConfigModeIdle+0x5fc>)
 80045f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80045fa:	2029      	movs	r0, #41	; 0x29
 80045fc:	f002 f879 	bl	80066f2 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004600:	2029      	movs	r0, #41	; 0x29
 8004602:	f002 f85a 	bl	80066ba <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 8004606:	f7fd fa35 	bl	8001a74 <SetUpTXRXCycle_BTUART>

		}
		if (commandflag == 6){
 800460a:	4b41      	ldr	r3, [pc, #260]	; (8004710 <ConfigModeIdle+0x5c4>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b06      	cmp	r3, #6
 8004610:	f47f adcd 	bne.w	80041ae <ConfigModeIdle+0x62>
			HAL_UART_AbortReceive(&hlpuart1);
 8004614:	483f      	ldr	r0, [pc, #252]	; (8004714 <ConfigModeIdle+0x5c8>)
 8004616:	f005 fee3 	bl	800a3e0 <HAL_UART_AbortReceive>
			commandflag = 0;
 800461a:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <ConfigModeIdle+0x5c4>)
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 8004620:	483d      	ldr	r0, [pc, #244]	; (8004718 <ConfigModeIdle+0x5cc>)
 8004622:	f00c f80f 	bl	8010644 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800462c:	483b      	ldr	r0, [pc, #236]	; (800471c <ConfigModeIdle+0x5d0>)
 800462e:	f003 f8c2 	bl	80077b6 <HAL_GPIO_WritePin>
			_BT_PRINT("Storing new wakeup time interval...\r");
 8004632:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	4944      	ldr	r1, [pc, #272]	; (800474c <ConfigModeIdle+0x600>)
 800463a:	4836      	ldr	r0, [pc, #216]	; (8004714 <ConfigModeIdle+0x5c8>)
 800463c:	f005 fd51 	bl	800a0e2 <HAL_UART_Transmit>
			//Check if valid nr
			if (wakeup_set > 0){
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <ConfigModeIdle+0x604>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	4313      	orrs	r3, r2
 8004648:	d048      	beq.n	80046dc <ConfigModeIdle+0x590>
				Parameter.Wakeup = wakeup_set;
 800464a:	4b41      	ldr	r3, [pc, #260]	; (8004750 <ConfigModeIdle+0x604>)
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	4937      	ldr	r1, [pc, #220]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004652:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004656:	4b36      	ldr	r3, [pc, #216]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004658:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
				memcpy(&speicherhandynr1, Parameter.Handynummer1, 8);
 800465c:	4935      	ldr	r1, [pc, #212]	; (8004734 <ConfigModeIdle+0x5e8>)
 800465e:	e9c1 2300 	strd	r2, r3, [r1]
 8004662:	4b33      	ldr	r3, [pc, #204]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004664:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
				memcpy(&speicherhandynr2, Parameter.Handynummer2, 8);
 8004668:	4933      	ldr	r1, [pc, #204]	; (8004738 <ConfigModeIdle+0x5ec>)
 800466a:	e9c1 2300 	strd	r2, r3, [r1]

				Eraseflash_func();
 800466e:	f7fd fb47 	bl	8001d00 <Eraseflash_func>
				Writeflash_func(speicherhandynr1, speicherhandynr2, Parameter.Wakeup);
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <ConfigModeIdle+0x5e8>)
 8004674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004678:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <ConfigModeIdle+0x5ec>)
 800467a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800467e:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004680:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004684:	e9cd 2300 	strd	r2, r3, [sp]
 8004688:	4622      	mov	r2, r4
 800468a:	462b      	mov	r3, r5
 800468c:	f7fd fb74 	bl	8001d78 <Writeflash_func>
				_BT_PRINT("Successfully stored ");
 8004690:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004694:	2214      	movs	r2, #20
 8004696:	4929      	ldr	r1, [pc, #164]	; (800473c <ConfigModeIdle+0x5f0>)
 8004698:	481e      	ldr	r0, [pc, #120]	; (8004714 <ConfigModeIdle+0x5c8>)
 800469a:	f005 fd22 	bl	800a0e2 <HAL_UART_Transmit>
				sprintf(printstr, "%lu" , (uint32_t)wakeup_set);
 800469e:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <ConfigModeIdle+0x604>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	4613      	mov	r3, r2
 80046a6:	461a      	mov	r2, r3
 80046a8:	492a      	ldr	r1, [pc, #168]	; (8004754 <ConfigModeIdle+0x608>)
 80046aa:	482b      	ldr	r0, [pc, #172]	; (8004758 <ConfigModeIdle+0x60c>)
 80046ac:	f00d f8ac 	bl	8011808 <siprintf>
				_BT_PRINT(printstr);
 80046b0:	4829      	ldr	r0, [pc, #164]	; (8004758 <ConfigModeIdle+0x60c>)
 80046b2:	f7fb fd65 	bl	8000180 <strlen>
 80046b6:	4603      	mov	r3, r0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80046be:	4926      	ldr	r1, [pc, #152]	; (8004758 <ConfigModeIdle+0x60c>)
 80046c0:	4814      	ldr	r0, [pc, #80]	; (8004714 <ConfigModeIdle+0x5c8>)
 80046c2:	f005 fd0e 	bl	800a0e2 <HAL_UART_Transmit>
				_BT_PRINT(" minutes as wakeup time interval...\r");
 80046c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	4923      	ldr	r1, [pc, #140]	; (800475c <ConfigModeIdle+0x610>)
 80046ce:	4811      	ldr	r0, [pc, #68]	; (8004714 <ConfigModeIdle+0x5c8>)
 80046d0:	f005 fd07 	bl	800a0e2 <HAL_UART_Transmit>
				indicateLED_return(1);
 80046d4:	2001      	movs	r0, #1
 80046d6:	f000 ff33 	bl	8005540 <indicateLED_return>
 80046da:	e009      	b.n	80046f0 <ConfigModeIdle+0x5a4>
			}
			else {
				_BT_PRINT("No valid wakeup time interval in minutes was set, please specify a number over 0..\r");
 80046dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80046e0:	2253      	movs	r2, #83	; 0x53
 80046e2:	491f      	ldr	r1, [pc, #124]	; (8004760 <ConfigModeIdle+0x614>)
 80046e4:	480b      	ldr	r0, [pc, #44]	; (8004714 <ConfigModeIdle+0x5c8>)
 80046e6:	f005 fcfc 	bl	800a0e2 <HAL_UART_Transmit>
				indicateLED_return(0);
 80046ea:	2000      	movs	r0, #0
 80046ec:	f000 ff28 	bl	8005540 <indicateLED_return>
			}

			/*Clear Pending Interrupts in case button was pressed while Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 80046f0:	4b15      	ldr	r3, [pc, #84]	; (8004748 <ConfigModeIdle+0x5fc>)
 80046f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046f6:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80046f8:	2029      	movs	r0, #41	; 0x29
 80046fa:	f001 fffa 	bl	80066f2 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046fe:	2029      	movs	r0, #41	; 0x29
 8004700:	f001 ffdb 	bl	80066ba <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 8004704:	f7fd f9b6 	bl	8001a74 <SetUpTXRXCycle_BTUART>
		if (commandflag == 1){
 8004708:	e551      	b.n	80041ae <ConfigModeIdle+0x62>
		}

	}
}
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bdb0      	pop	{r4, r5, r7, pc}
 8004710:	20000960 	.word	0x20000960
 8004714:	20000478 	.word	0x20000478
 8004718:	200008e8 	.word	0x200008e8
 800471c:	48000400 	.word	0x48000400
 8004720:	08014f4c 	.word	0x08014f4c
 8004724:	200008d0 	.word	0x200008d0
 8004728:	08014dcc 	.word	0x08014dcc
 800472c:	200008d1 	.word	0x200008d1
 8004730:	20000010 	.word	0x20000010
 8004734:	200008c0 	.word	0x200008c0
 8004738:	200008c8 	.word	0x200008c8
 800473c:	08014f64 	.word	0x08014f64
 8004740:	08014f7c 	.word	0x08014f7c
 8004744:	08014e3c 	.word	0x08014e3c
 8004748:	58000800 	.word	0x58000800
 800474c:	08014fa0 	.word	0x08014fa0
 8004750:	200008e0 	.word	0x200008e0
 8004754:	08014fc8 	.word	0x08014fc8
 8004758:	20000970 	.word	0x20000970
 800475c:	08014fcc 	.word	0x08014fcc
 8004760:	08014ff4 	.word	0x08014ff4

08004764 <SyncedWakeup>:

static void SyncedWakeup(void){
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b0e1      	sub	sp, #388	; 0x184
 8004768:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	2120      	movs	r1, #32
 800476e:	48a3      	ldr	r0, [pc, #652]	; (80049fc <SyncedWakeup+0x298>)
 8004770:	f003 f821 	bl	80077b6 <HAL_GPIO_WritePin>
	uint8_t i = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
	uint8_t message_neccessary = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176

	/*Get Slaves status*/
	/*fills tx buffer*/
	memset(BufferTx, 0x0, PAYLOAD_LEN);
 8004780:	2208      	movs	r2, #8
 8004782:	2100      	movs	r1, #0
 8004784:	489e      	ldr	r0, [pc, #632]	; (8004a00 <SyncedWakeup+0x29c>)
 8004786:	f00c fbdb 	bl	8010f40 <memset>
	BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 800478a:	4b9d      	ldr	r3, [pc, #628]	; (8004a00 <SyncedWakeup+0x29c>)
 800478c:	22fa      	movs	r2, #250	; 0xfa
 800478e:	701a      	strb	r2, [r3, #0]
	BufferTx[1] = 0x84; //Function -> Message from Master, Poll Slaves state in trapmode
 8004790:	4b9b      	ldr	r3, [pc, #620]	; (8004a00 <SyncedWakeup+0x29c>)
 8004792:	2284      	movs	r2, #132	; 0x84
 8004794:	705a      	strb	r2, [r3, #1]
	/*Data*/
	BufferTx[3] = 0x00; //
 8004796:	4b9a      	ldr	r3, [pc, #616]	; (8004a00 <SyncedWakeup+0x29c>)
 8004798:	2200      	movs	r2, #0
 800479a:	70da      	strb	r2, [r3, #3]
	BufferTx[4] = 0x00;
 800479c:	4b98      	ldr	r3, [pc, #608]	; (8004a00 <SyncedWakeup+0x29c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	711a      	strb	r2, [r3, #4]
	BufferTx[5] = 0x00;
 80047a2:	4b97      	ldr	r3, [pc, #604]	; (8004a00 <SyncedWakeup+0x29c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	715a      	strb	r2, [r3, #5]
	BufferTx[6] = 0x00;
 80047a8:	4b95      	ldr	r3, [pc, #596]	; (8004a00 <SyncedWakeup+0x29c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	719a      	strb	r2, [r3, #6]
	BufferTx[7] = 0x00;
 80047ae:	4b94      	ldr	r3, [pc, #592]	; (8004a00 <SyncedWakeup+0x29c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	71da      	strb	r2, [r3, #7]

	for (i = 0; i<slaves_reg; i++){
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 80047ba:	e091      	b.n	80048e0 <SyncedWakeup+0x17c>
		/*Send to slaves*/
		BufferTx[2] = slaveaddrss[i]<<4; //SlaveID
 80047bc:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80047c0:	4a90      	ldr	r2, [pc, #576]	; (8004a04 <SyncedWakeup+0x2a0>)
 80047c2:	5cd3      	ldrb	r3, [r2, r3]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4b8d      	ldr	r3, [pc, #564]	; (8004a00 <SyncedWakeup+0x29c>)
 80047ca:	709a      	strb	r2, [r3, #2]
		State = NONE;
 80047cc:	4b8e      	ldr	r3, [pc, #568]	; (8004a08 <SyncedWakeup+0x2a4>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
		slavestatus[i] = NON;
 80047d2:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80047d6:	4a8d      	ldr	r2, [pc, #564]	; (8004a0c <SyncedWakeup+0x2a8>)
 80047d8:	2100      	movs	r1, #0
 80047da:	54d1      	strb	r1, [r2, r3]
		Radio.Send(BufferTx, PAYLOAD_LEN);
 80047dc:	4b8c      	ldr	r3, [pc, #560]	; (8004a10 <SyncedWakeup+0x2ac>)
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	2108      	movs	r1, #8
 80047e2:	4887      	ldr	r0, [pc, #540]	; (8004a00 <SyncedWakeup+0x29c>)
 80047e4:	4798      	blx	r3
		/*Wait until LoRa module has done something*/
		while (State != TX && State != TX_TIMEOUT);
 80047e6:	bf00      	nop
 80047e8:	4b87      	ldr	r3, [pc, #540]	; (8004a08 <SyncedWakeup+0x2a4>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d003      	beq.n	80047f8 <SyncedWakeup+0x94>
 80047f0:	4b85      	ldr	r3, [pc, #532]	; (8004a08 <SyncedWakeup+0x2a4>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d1f7      	bne.n	80047e8 <SyncedWakeup+0x84>
		if (State == TX_TIMEOUT){
 80047f8:	4b83      	ldr	r3, [pc, #524]	; (8004a08 <SyncedWakeup+0x2a4>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d107      	bne.n	8004810 <SyncedWakeup+0xac>
			 Radio.Sleep();
 8004800:	4b83      	ldr	r3, [pc, #524]	; (8004a10 <SyncedWakeup+0x2ac>)
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4798      	blx	r3
			 slavestatus[i] = NOT_REACHABLE;
 8004806:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800480a:	4a80      	ldr	r2, [pc, #512]	; (8004a0c <SyncedWakeup+0x2a8>)
 800480c:	2103      	movs	r1, #3
 800480e:	54d1      	strb	r1, [r2, r3]
		}
		/*Start Reception with timeout*/
		State = NONE;
 8004810:	4b7d      	ldr	r3, [pc, #500]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
		Radio.Rx(6000);
 8004816:	4b7e      	ldr	r3, [pc, #504]	; (8004a10 <SyncedWakeup+0x2ac>)
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	f241 7070 	movw	r0, #6000	; 0x1770
 800481e:	4798      	blx	r3
		/*Wait until something happens*/
		while(State != RX && State != RX_ERROR && State != RX_TIMEOUT);
 8004820:	bf00      	nop
 8004822:	4b79      	ldr	r3, [pc, #484]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d007      	beq.n	800483a <SyncedWakeup+0xd6>
 800482a:	4b77      	ldr	r3, [pc, #476]	; (8004a08 <SyncedWakeup+0x2a4>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b03      	cmp	r3, #3
 8004830:	d003      	beq.n	800483a <SyncedWakeup+0xd6>
 8004832:	4b75      	ldr	r3, [pc, #468]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d1f3      	bne.n	8004822 <SyncedWakeup+0xbe>
		if (State == RX_ERROR || State == RX_TIMEOUT){
 800483a:	4b73      	ldr	r3, [pc, #460]	; (8004a08 <SyncedWakeup+0x2a4>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d003      	beq.n	800484a <SyncedWakeup+0xe6>
 8004842:	4b71      	ldr	r3, [pc, #452]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d105      	bne.n	8004856 <SyncedWakeup+0xf2>
			slavestatus[i] = NOT_REACHABLE;
 800484a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800484e:	4a6f      	ldr	r2, [pc, #444]	; (8004a0c <SyncedWakeup+0x2a8>)
 8004850:	2103      	movs	r1, #3
 8004852:	54d1      	strb	r1, [r2, r3]
 8004854:	e03f      	b.n	80048d6 <SyncedWakeup+0x172>
		}
		else if (State == RX){
 8004856:	4b6c      	ldr	r3, [pc, #432]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d13b      	bne.n	80048d6 <SyncedWakeup+0x172>
			/* check if slave with current address answered*/
			uint8_t currentslaveid = RxBuffer[2] >> 4;
 800485e:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <SyncedWakeup+0x2b0>)
 8004860:	789b      	ldrb	r3, [r3, #2]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
			if (currentslaveid == slaveaddrss[i]){
 8004868:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800486c:	4a65      	ldr	r2, [pc, #404]	; (8004a04 <SyncedWakeup+0x2a0>)
 800486e:	5cd3      	ldrb	r3, [r2, r3]
 8004870:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 8004874:	429a      	cmp	r2, r3
 8004876:	d129      	bne.n	80048cc <SyncedWakeup+0x168>
				/* if its the correct slave, check data (battery, trap trigger state) */
				slavebatterystate[i] = RxBuffer[3];
 8004878:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800487c:	4a65      	ldr	r2, [pc, #404]	; (8004a14 <SyncedWakeup+0x2b0>)
 800487e:	78d1      	ldrb	r1, [r2, #3]
 8004880:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <SyncedWakeup+0x2b4>)
 8004882:	54d1      	strb	r1, [r2, r3]
				slavetriggerstate[i] = RxBuffer[4];
 8004884:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004888:	4a62      	ldr	r2, [pc, #392]	; (8004a14 <SyncedWakeup+0x2b0>)
 800488a:	7911      	ldrb	r1, [r2, #4]
 800488c:	4a63      	ldr	r2, [pc, #396]	; (8004a1c <SyncedWakeup+0x2b8>)
 800488e:	54d1      	strb	r1, [r2, r3]
				if (slavebatterystate[i] == 255 || slavebatterystate[i] <= 20 || slavetriggerstate[i] == 1){
 8004890:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004894:	4a60      	ldr	r2, [pc, #384]	; (8004a18 <SyncedWakeup+0x2b4>)
 8004896:	5cd3      	ldrb	r3, [r2, r3]
 8004898:	2bff      	cmp	r3, #255	; 0xff
 800489a:	d00b      	beq.n	80048b4 <SyncedWakeup+0x150>
 800489c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80048a0:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <SyncedWakeup+0x2b4>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	2b14      	cmp	r3, #20
 80048a6:	d905      	bls.n	80048b4 <SyncedWakeup+0x150>
 80048a8:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80048ac:	4a5b      	ldr	r2, [pc, #364]	; (8004a1c <SyncedWakeup+0x2b8>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <SyncedWakeup+0x15c>
					slavestatus[i] = BAD_CONDITION;
 80048b4:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80048b8:	4a54      	ldr	r2, [pc, #336]	; (8004a0c <SyncedWakeup+0x2a8>)
 80048ba:	2104      	movs	r1, #4
 80048bc:	54d1      	strb	r1, [r2, r3]
 80048be:	e00a      	b.n	80048d6 <SyncedWakeup+0x172>
				} else {
					slavestatus[i] = ACK; //fine in trap mode
 80048c0:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80048c4:	4a51      	ldr	r2, [pc, #324]	; (8004a0c <SyncedWakeup+0x2a8>)
 80048c6:	2101      	movs	r1, #1
 80048c8:	54d1      	strb	r1, [r2, r3]
 80048ca:	e004      	b.n	80048d6 <SyncedWakeup+0x172>
				}
			}else {
				slavestatus[i] = NOT_REACHABLE;
 80048cc:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80048d0:	4a4e      	ldr	r2, [pc, #312]	; (8004a0c <SyncedWakeup+0x2a8>)
 80048d2:	2103      	movs	r1, #3
 80048d4:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<slaves_reg; i++){
 80048d6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80048da:	3301      	adds	r3, #1
 80048dc:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 80048e0:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <SyncedWakeup+0x2bc>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 80048e8:	429a      	cmp	r2, r3
 80048ea:	f4ff af67 	bcc.w	80047bc <SyncedWakeup+0x58>
			}
		}
	}
	State = NONE;
 80048ee:	4b46      	ldr	r3, [pc, #280]	; (8004a08 <SyncedWakeup+0x2a4>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
	Radio.Sleep();
 80048f4:	4b46      	ldr	r3, [pc, #280]	; (8004a10 <SyncedWakeup+0x2ac>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4798      	blx	r3
	/*Get Slave Status end*/

	/*Get own status*/
	traptriggered = HAL_GPIO_ReadPin(REEDPin_GPIO_Port, REEDPin_Pin);
 80048fa:	2108      	movs	r1, #8
 80048fc:	483f      	ldr	r0, [pc, #252]	; (80049fc <SyncedWakeup+0x298>)
 80048fe:	f002 ff43 	bl	8007788 <HAL_GPIO_ReadPin>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <SyncedWakeup+0x2c0>)
 8004908:	701a      	strb	r2, [r3, #0]
	Akku_Prozent = Ausgabe_Akkustand(Berechnung_Akkustand(R9, R8));
 800490a:	f24b 21e8 	movw	r1, #45800	; 0xb2e8
 800490e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8004912:	f7fc fec9 	bl	80016a8 <Berechnung_Akkustand>
 8004916:	4603      	mov	r3, r0
 8004918:	4618      	mov	r0, r3
 800491a:	f7fc ff21 	bl	8001760 <Ausgabe_Akkustand>
 800491e:	4603      	mov	r3, r0
 8004920:	4a41      	ldr	r2, [pc, #260]	; (8004a28 <SyncedWakeup+0x2c4>)
 8004922:	6013      	str	r3, [r2, #0]
	 * -one or more of the slaves or master has low power or faulty battery reading
	 * -one or more of the slaves is not reachable
	 * (Slave conditions are already checked in code above)
	 * BUT ONLY SEND, IF THOSE EVENTS OCCUR THE FIST TIME!
	 */
	for(i = 0; i< slaves_reg; i++)
 8004924:	2300      	movs	r3, #0
 8004926:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800492a:	e095      	b.n	8004a58 <SyncedWakeup+0x2f4>
	{
		if(slavestatus[i] == NOT_REACHABLE && slaveunreachable_before[i] == 0){
 800492c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004930:	4a36      	ldr	r2, [pc, #216]	; (8004a0c <SyncedWakeup+0x2a8>)
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d10e      	bne.n	8004956 <SyncedWakeup+0x1f2>
 8004938:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800493c:	4a3b      	ldr	r2, [pc, #236]	; (8004a2c <SyncedWakeup+0x2c8>)
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d108      	bne.n	8004956 <SyncedWakeup+0x1f2>
			slaveunreachable_before[i] = 1;
 8004944:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004948:	4a38      	ldr	r2, [pc, #224]	; (8004a2c <SyncedWakeup+0x2c8>)
 800494a:	2101      	movs	r1, #1
 800494c:	54d1      	strb	r1, [r2, r3]
			message_neccessary = 1;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8004954:	e010      	b.n	8004978 <SyncedWakeup+0x214>
		} else if (slavestatus[i] != NOT_REACHABLE && slavestatus[i] != NON) {
 8004956:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800495a:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <SyncedWakeup+0x2a8>)
 800495c:	5cd3      	ldrb	r3, [r2, r3]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d00a      	beq.n	8004978 <SyncedWakeup+0x214>
 8004962:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004966:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <SyncedWakeup+0x2a8>)
 8004968:	5cd3      	ldrb	r3, [r2, r3]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <SyncedWakeup+0x214>
			slaveunreachable_before[i] = 0;  //if slave somehow manages to participate with correct time sync again, it can be evaluated in the next wakeup again
 800496e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004972:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <SyncedWakeup+0x2c8>)
 8004974:	2100      	movs	r1, #0
 8004976:	54d1      	strb	r1, [r2, r3]
		}
		if((slavebatterystate[i] == 255 || slavebatterystate[i] <= 20) && slavebatterybad_before[i] == 0){
 8004978:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <SyncedWakeup+0x2b4>)
 800497e:	5cd3      	ldrb	r3, [r2, r3]
 8004980:	2bff      	cmp	r3, #255	; 0xff
 8004982:	d005      	beq.n	8004990 <SyncedWakeup+0x22c>
 8004984:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004988:	4a23      	ldr	r2, [pc, #140]	; (8004a18 <SyncedWakeup+0x2b4>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	2b14      	cmp	r3, #20
 800498e:	d80e      	bhi.n	80049ae <SyncedWakeup+0x24a>
 8004990:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004994:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <SyncedWakeup+0x2cc>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d108      	bne.n	80049ae <SyncedWakeup+0x24a>
			slavebatterybad_before[i] = 1;
 800499c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80049a0:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <SyncedWakeup+0x2cc>)
 80049a2:	2101      	movs	r1, #1
 80049a4:	54d1      	strb	r1, [r2, r3]
			message_neccessary = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 80049ac:	e010      	b.n	80049d0 <SyncedWakeup+0x26c>
		} else if ((slavebatterystate[i] != 255 && slavebatterystate[i] > 20)){
 80049ae:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80049b2:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <SyncedWakeup+0x2b4>)
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	2bff      	cmp	r3, #255	; 0xff
 80049b8:	d00a      	beq.n	80049d0 <SyncedWakeup+0x26c>
 80049ba:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80049be:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <SyncedWakeup+0x2b4>)
 80049c0:	5cd3      	ldrb	r3, [r2, r3]
 80049c2:	2b14      	cmp	r3, #20
 80049c4:	d904      	bls.n	80049d0 <SyncedWakeup+0x26c>
			slavebatterybad_before[i] = 0;  //if slave somehow manages to participate with correct time sync and enough battery again, it can be evaluated in the next wakeup again
 80049c6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80049ca:	4a19      	ldr	r2, [pc, #100]	; (8004a30 <SyncedWakeup+0x2cc>)
 80049cc:	2100      	movs	r1, #0
 80049ce:	54d1      	strb	r1, [r2, r3]
		}
		if(slavetriggerstate[i] == 1 && slavetriggered_before[i] == 0){
 80049d0:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80049d4:	4a11      	ldr	r2, [pc, #68]	; (8004a1c <SyncedWakeup+0x2b8>)
 80049d6:	5cd3      	ldrb	r3, [r2, r3]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d12d      	bne.n	8004a38 <SyncedWakeup+0x2d4>
 80049dc:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <SyncedWakeup+0x2d0>)
 80049e2:	5cd3      	ldrb	r3, [r2, r3]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d127      	bne.n	8004a38 <SyncedWakeup+0x2d4>
			slavetriggered_before[i] = 1;
 80049e8:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 80049ec:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <SyncedWakeup+0x2d0>)
 80049ee:	2101      	movs	r1, #1
 80049f0:	54d1      	strb	r1, [r2, r3]
			message_neccessary = 1;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 80049f8:	e029      	b.n	8004a4e <SyncedWakeup+0x2ea>
 80049fa:	bf00      	nop
 80049fc:	48000400 	.word	0x48000400
 8004a00:	20000a20 	.word	0x20000a20
 8004a04:	200009e4 	.word	0x200009e4
 8004a08:	20000a1c 	.word	0x20000a1c
 8004a0c:	200009ec 	.word	0x200009ec
 8004a10:	08015758 	.word	0x08015758
 8004a14:	20000a2c 	.word	0x20000a2c
 8004a18:	200009f4 	.word	0x200009f4
 8004a1c:	200009fc 	.word	0x200009fc
 8004a20:	200009e0 	.word	0x200009e0
 8004a24:	2000096d 	.word	0x2000096d
 8004a28:	20000968 	.word	0x20000968
 8004a2c:	20000a14 	.word	0x20000a14
 8004a30:	20000a04 	.word	0x20000a04
 8004a34:	20000a0c 	.word	0x20000a0c
		} else if (slavetriggerstate[i] == 0){
 8004a38:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004a3c:	4a89      	ldr	r2, [pc, #548]	; (8004c64 <SyncedWakeup+0x500>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <SyncedWakeup+0x2ea>
			slavetriggered_before[i] = 0;   //if slave somehow gets its trigger reset and is still on time sync, it can be evaulated in the next wakeup again
 8004a44:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004a48:	4a87      	ldr	r2, [pc, #540]	; (8004c68 <SyncedWakeup+0x504>)
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i< slaves_reg; i++)
 8004a4e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004a52:	3301      	adds	r3, #1
 8004a54:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8004a58:	4b84      	ldr	r3, [pc, #528]	; (8004c6c <SyncedWakeup+0x508>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8004a60:	429a      	cmp	r2, r3
 8004a62:	f4ff af63 	bcc.w	800492c <SyncedWakeup+0x1c8>
		}
	}


	if ((Akku_Prozent <= 20 || Akku_Prozent == 255) && masterbatterybad_before == 0){
 8004a66:	4b82      	ldr	r3, [pc, #520]	; (8004c70 <SyncedWakeup+0x50c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b14      	cmp	r3, #20
 8004a6c:	dd03      	ble.n	8004a76 <SyncedWakeup+0x312>
 8004a6e:	4b80      	ldr	r3, [pc, #512]	; (8004c70 <SyncedWakeup+0x50c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2bff      	cmp	r3, #255	; 0xff
 8004a74:	d10a      	bne.n	8004a8c <SyncedWakeup+0x328>
 8004a76:	4b7f      	ldr	r3, [pc, #508]	; (8004c74 <SyncedWakeup+0x510>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <SyncedWakeup+0x328>
		masterbatterybad_before = 1;
 8004a7e:	4b7d      	ldr	r3, [pc, #500]	; (8004c74 <SyncedWakeup+0x510>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
		message_neccessary = 1;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8004a8a:	e00a      	b.n	8004aa2 <SyncedWakeup+0x33e>
	} else if ((Akku_Prozent > 20 && Akku_Prozent != 255)) {
 8004a8c:	4b78      	ldr	r3, [pc, #480]	; (8004c70 <SyncedWakeup+0x50c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b14      	cmp	r3, #20
 8004a92:	dd06      	ble.n	8004aa2 <SyncedWakeup+0x33e>
 8004a94:	4b76      	ldr	r3, [pc, #472]	; (8004c70 <SyncedWakeup+0x50c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2bff      	cmp	r3, #255	; 0xff
 8004a9a:	d002      	beq.n	8004aa2 <SyncedWakeup+0x33e>
		masterbatterybad_before = 0;
 8004a9c:	4b75      	ldr	r3, [pc, #468]	; (8004c74 <SyncedWakeup+0x510>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
	}
	if (traptriggered && mastertriggered_before == 0){
 8004aa2:	4b75      	ldr	r3, [pc, #468]	; (8004c78 <SyncedWakeup+0x514>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <SyncedWakeup+0x35c>
 8004aaa:	4b74      	ldr	r3, [pc, #464]	; (8004c7c <SyncedWakeup+0x518>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <SyncedWakeup+0x35c>
		mastertriggered_before = 1;
 8004ab2:	4b72      	ldr	r3, [pc, #456]	; (8004c7c <SyncedWakeup+0x518>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
		message_neccessary = 1;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 8004abe:	e006      	b.n	8004ace <SyncedWakeup+0x36a>
	} else if (traptriggered == 0) {
 8004ac0:	4b6d      	ldr	r3, [pc, #436]	; (8004c78 <SyncedWakeup+0x514>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <SyncedWakeup+0x36a>
		mastertriggered_before = 0;  // if trigger gets reset while trap is still on time sync, it can be evaluated again
 8004ac8:	4b6c      	ldr	r3, [pc, #432]	; (8004c7c <SyncedWakeup+0x518>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
	}

	if (message_neccessary){
 8004ace:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80bb 	beq.w	8004c4e <SyncedWakeup+0x4ea>
		//Code for sending an SMS
		HAL_GPIO_WritePin(GSM_Switch_GPIO_Port, GSM_Switch_Pin, 1);
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ae2:	f002 fe68 	bl	80077b6 <HAL_GPIO_WritePin>

		/*!!!! Eventuell UART GSM Neuinit nötig nach Wakeup!*/

		/*String bauen für SMS*/
		char message[320] = {0}; //one SMS can only transmit 160 chars, max 2 sms allowed
 8004ae6:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8004aea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	3304      	adds	r3, #4
 8004af4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f00c fa20 	bl	8010f40 <memset>
		char strtemp[40];
		sprintf(message, "Event on Trap(s):\nMaster: ");
 8004b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b04:	495e      	ldr	r1, [pc, #376]	; (8004c80 <SyncedWakeup+0x51c>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f00c fe7e 	bl	8011808 <siprintf>
		sprintf(strtemp, "Bat: %d%%, Trig: %u\n", Akku_Prozent, traptriggered);
 8004b0c:	4b58      	ldr	r3, [pc, #352]	; (8004c70 <SyncedWakeup+0x50c>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b59      	ldr	r3, [pc, #356]	; (8004c78 <SyncedWakeup+0x514>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	1d38      	adds	r0, r7, #4
 8004b16:	495b      	ldr	r1, [pc, #364]	; (8004c84 <SyncedWakeup+0x520>)
 8004b18:	f00c fe76 	bl	8011808 <siprintf>
		strcat(message, strtemp);
 8004b1c:	1d3a      	adds	r2, r7, #4
 8004b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f00c fe8f 	bl	8011848 <strcat>
		for (i = 0; i<slaves_reg; i++){
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8004b30:	e046      	b.n	8004bc0 <SyncedWakeup+0x45c>
			if(slavestatus[i] == NOT_REACHABLE){
 8004b32:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004b36:	4a54      	ldr	r2, [pc, #336]	; (8004c88 <SyncedWakeup+0x524>)
 8004b38:	5cd3      	ldrb	r3, [r2, r3]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d10a      	bne.n	8004b54 <SyncedWakeup+0x3f0>
				sprintf(strtemp, "SlaveID: %u: not reachable\n", slaveaddrss[i]);
 8004b3e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004b42:	4a52      	ldr	r2, [pc, #328]	; (8004c8c <SyncedWakeup+0x528>)
 8004b44:	5cd3      	ldrb	r3, [r2, r3]
 8004b46:	461a      	mov	r2, r3
 8004b48:	1d3b      	adds	r3, r7, #4
 8004b4a:	4951      	ldr	r1, [pc, #324]	; (8004c90 <SyncedWakeup+0x52c>)
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f00c fe5b 	bl	8011808 <siprintf>
 8004b52:	e029      	b.n	8004ba8 <SyncedWakeup+0x444>
			}else if (slavebatterystate[i] == 255){
 8004b54:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004b58:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <SyncedWakeup+0x530>)
 8004b5a:	5cd3      	ldrb	r3, [r2, r3]
 8004b5c:	2bff      	cmp	r3, #255	; 0xff
 8004b5e:	d10e      	bne.n	8004b7e <SyncedWakeup+0x41a>
				sprintf(strtemp, "SlaveID: %u: Bat: <0%%, Trig: %u\n", slaveaddrss[i], slavetriggerstate[i]);
 8004b60:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004b64:	4a49      	ldr	r2, [pc, #292]	; (8004c8c <SyncedWakeup+0x528>)
 8004b66:	5cd3      	ldrb	r3, [r2, r3]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004b6e:	4a3d      	ldr	r2, [pc, #244]	; (8004c64 <SyncedWakeup+0x500>)
 8004b70:	5cd3      	ldrb	r3, [r2, r3]
 8004b72:	1d38      	adds	r0, r7, #4
 8004b74:	460a      	mov	r2, r1
 8004b76:	4948      	ldr	r1, [pc, #288]	; (8004c98 <SyncedWakeup+0x534>)
 8004b78:	f00c fe46 	bl	8011808 <siprintf>
 8004b7c:	e014      	b.n	8004ba8 <SyncedWakeup+0x444>
			}else{
				sprintf(strtemp, "SlaveID: %u: Bat: <%d%%, Trig: %u\n", slaveaddrss[i], slavebatterystate[i], slavetriggerstate[i]);
 8004b7e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004b82:	4a42      	ldr	r2, [pc, #264]	; (8004c8c <SyncedWakeup+0x528>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	4619      	mov	r1, r3
 8004b88:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004b8c:	4a41      	ldr	r2, [pc, #260]	; (8004c94 <SyncedWakeup+0x530>)
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	461c      	mov	r4, r3
 8004b92:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004b96:	4a33      	ldr	r2, [pc, #204]	; (8004c64 <SyncedWakeup+0x500>)
 8004b98:	5cd3      	ldrb	r3, [r2, r3]
 8004b9a:	1d38      	adds	r0, r7, #4
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	493e      	ldr	r1, [pc, #248]	; (8004c9c <SyncedWakeup+0x538>)
 8004ba4:	f00c fe30 	bl	8011808 <siprintf>
			}
			strcat(message, strtemp);
 8004ba8:	1d3a      	adds	r2, r7, #4
 8004baa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f00c fe49 	bl	8011848 <strcat>
		for (i = 0; i<slaves_reg; i++){
 8004bb6:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <SyncedWakeup+0x508>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f897 2177 	ldrb.w	r2, [r7, #375]	; 0x177
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d3b2      	bcc.n	8004b32 <SyncedWakeup+0x3ce>
		}

		/*Send SMS*/
		/*Workaround, UART2 may not wake up after Stopmode2, if not reinitialized with expicit call of the MspInit part */
		HAL_UART_MspInit(&huart2);
 8004bcc:	4834      	ldr	r0, [pc, #208]	; (8004ca0 <SyncedWakeup+0x53c>)
 8004bce:	f7fe f9f7 	bl	8002fc0 <HAL_UART_MspInit>
		MX_USART2_UART_Init();
 8004bd2:	f7fe f9a9 	bl	8002f28 <MX_USART2_UART_Init>
		HAL_Delay(20000); //Give GSM Module time to wake up
 8004bd6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004bda:	f7fd fd61 	bl	80026a0 <HAL_Delay>

		strcat(message, "\0");
		int statussms = GSMSendSMS(Parameter.Handynummer, message);  //GSMSendSMS("+4916094870875", "Hallo123TestKot");
 8004bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004be2:	4619      	mov	r1, r3
 8004be4:	482f      	ldr	r0, [pc, #188]	; (8004ca4 <SyncedWakeup+0x540>)
 8004be6:	f7fe fdab 	bl	8003740 <GSMSendSMS>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

		if (statussms == 101){
 8004bf0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004bf4:	2b65      	cmp	r3, #101	; 0x65
 8004bf6:	d10f      	bne.n	8004c18 <SyncedWakeup+0x4b4>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 1);
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bfe:	482a      	ldr	r0, [pc, #168]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c00:	f002 fdd9 	bl	80077b6 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8004c04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c08:	f7fd fd4a 	bl	80026a0 <HAL_Delay>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c12:	4825      	ldr	r0, [pc, #148]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c14:	f002 fdcf 	bl	80077b6 <HAL_GPIO_WritePin>
		}
		if (statussms == 102){
 8004c18:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004c1c:	2b66      	cmp	r3, #102	; 0x66
 8004c1e:	d10f      	bne.n	8004c40 <SyncedWakeup+0x4dc>
					HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 1);
 8004c20:	2201      	movs	r2, #1
 8004c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c26:	4820      	ldr	r0, [pc, #128]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c28:	f002 fdc5 	bl	80077b6 <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8004c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c30:	f7fd fd36 	bl	80026a0 <HAL_Delay>
					HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 8004c34:	2200      	movs	r2, #0
 8004c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c3a:	481b      	ldr	r0, [pc, #108]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c3c:	f002 fdbb 	bl	80077b6 <HAL_GPIO_WritePin>
		//strcat(message, "\r");
		//_BT_PRINT(message);


		/*Power down again*/
		HAL_GPIO_WritePin(GSM_Switch_GPIO_Port, GSM_Switch_Pin, 0);
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c4a:	f002 fdb4 	bl	80077b6 <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 1);
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2120      	movs	r1, #32
 8004c52:	4815      	ldr	r0, [pc, #84]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c54:	f002 fdaf 	bl	80077b6 <HAL_GPIO_WritePin>

}
 8004c58:	bf00      	nop
 8004c5a:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd90      	pop	{r4, r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200009fc 	.word	0x200009fc
 8004c68:	20000a0c 	.word	0x20000a0c
 8004c6c:	200009e0 	.word	0x200009e0
 8004c70:	20000968 	.word	0x20000968
 8004c74:	20000a1a 	.word	0x20000a1a
 8004c78:	2000096d 	.word	0x2000096d
 8004c7c:	20000a19 	.word	0x20000a19
 8004c80:	08015048 	.word	0x08015048
 8004c84:	08015064 	.word	0x08015064
 8004c88:	200009ec 	.word	0x200009ec
 8004c8c:	200009e4 	.word	0x200009e4
 8004c90:	0801507c 	.word	0x0801507c
 8004c94:	200009f4 	.word	0x200009f4
 8004c98:	08015098 	.word	0x08015098
 8004c9c:	080150bc 	.word	0x080150bc
 8004ca0:	20000598 	.word	0x20000598
 8004ca4:	20000010 	.word	0x20000010
 8004ca8:	48000400 	.word	0x48000400

08004cac <BatteryReadout>:

static void BatteryReadout(void){
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	/*Read out Voltage and Percent*/
	_BT_PRINT("Reading Battery Voltage...\r");
 8004cb0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004cb4:	221b      	movs	r2, #27
 8004cb6:	493c      	ldr	r1, [pc, #240]	; (8004da8 <BatteryReadout+0xfc>)
 8004cb8:	483c      	ldr	r0, [pc, #240]	; (8004dac <BatteryReadout+0x100>)
 8004cba:	f005 fa12 	bl	800a0e2 <HAL_UART_Transmit>
	Akkuspannung = Berechnung_Akkustand(R9, R8);
 8004cbe:	f24b 21e8 	movw	r1, #45800	; 0xb2e8
 8004cc2:	f643 2098 	movw	r0, #15000	; 0x3a98
 8004cc6:	f7fc fcef 	bl	80016a8 <Berechnung_Akkustand>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <BatteryReadout+0x104>)
 8004cce:	6013      	str	r3, [r2, #0]
	Akku_Prozent = Ausgabe_Akkustand(Akkuspannung);
 8004cd0:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <BatteryReadout+0x104>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fc fd43 	bl	8001760 <Ausgabe_Akkustand>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4a35      	ldr	r2, [pc, #212]	; (8004db4 <BatteryReadout+0x108>)
 8004cde:	6013      	str	r3, [r2, #0]
	sprintf(printstr, "Battery-Voltage: %.4fV\r", Akkuspannung);
 8004ce0:	4b33      	ldr	r3, [pc, #204]	; (8004db0 <BatteryReadout+0x104>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fb fc07 	bl	80004f8 <__aeabi_f2d>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4932      	ldr	r1, [pc, #200]	; (8004db8 <BatteryReadout+0x10c>)
 8004cf0:	4832      	ldr	r0, [pc, #200]	; (8004dbc <BatteryReadout+0x110>)
 8004cf2:	f00c fd89 	bl	8011808 <siprintf>
	_BT_PRINT(printstr);
 8004cf6:	4831      	ldr	r0, [pc, #196]	; (8004dbc <BatteryReadout+0x110>)
 8004cf8:	f7fb fa42 	bl	8000180 <strlen>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d04:	492d      	ldr	r1, [pc, #180]	; (8004dbc <BatteryReadout+0x110>)
 8004d06:	4829      	ldr	r0, [pc, #164]	; (8004dac <BatteryReadout+0x100>)
 8004d08:	f005 f9eb 	bl	800a0e2 <HAL_UART_Transmit>
	HAL_Delay(300);
 8004d0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004d10:	f7fd fcc6 	bl	80026a0 <HAL_Delay>
	if (Akku_Prozent == 255){
 8004d14:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <BatteryReadout+0x108>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2bff      	cmp	r3, #255	; 0xff
 8004d1a:	d10d      	bne.n	8004d38 <BatteryReadout+0x8c>
		_BT_PRINT("Extreme low battery\r");
 8004d1c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d20:	2214      	movs	r2, #20
 8004d22:	4927      	ldr	r1, [pc, #156]	; (8004dc0 <BatteryReadout+0x114>)
 8004d24:	4821      	ldr	r0, [pc, #132]	; (8004dac <BatteryReadout+0x100>)
 8004d26:	f005 f9dc 	bl	800a0e2 <HAL_UART_Transmit>
		battery_OK = 0;
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <BatteryReadout+0x118>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004d30:	2000      	movs	r0, #0
 8004d32:	f000 fc05 	bl	8005540 <indicateLED_return>
		sprintf(printstr, "That's around %d %%\n\r", Akku_Prozent);
		_BT_PRINT(printstr);
		battery_OK = 1;
		indicateLED_return(1);
	}
}
 8004d36:	e034      	b.n	8004da2 <BatteryReadout+0xf6>
	else if (Akku_Prozent == 20) {
 8004d38:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <BatteryReadout+0x108>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b14      	cmp	r3, #20
 8004d3e:	d118      	bne.n	8004d72 <BatteryReadout+0xc6>
		sprintf(printstr, "That's less than %d %%, please charge\r", Akku_Prozent);
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <BatteryReadout+0x108>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	4920      	ldr	r1, [pc, #128]	; (8004dc8 <BatteryReadout+0x11c>)
 8004d48:	481c      	ldr	r0, [pc, #112]	; (8004dbc <BatteryReadout+0x110>)
 8004d4a:	f00c fd5d 	bl	8011808 <siprintf>
		_BT_PRINT(printstr);
 8004d4e:	481b      	ldr	r0, [pc, #108]	; (8004dbc <BatteryReadout+0x110>)
 8004d50:	f7fb fa16 	bl	8000180 <strlen>
 8004d54:	4603      	mov	r3, r0
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d5c:	4917      	ldr	r1, [pc, #92]	; (8004dbc <BatteryReadout+0x110>)
 8004d5e:	4813      	ldr	r0, [pc, #76]	; (8004dac <BatteryReadout+0x100>)
 8004d60:	f005 f9bf 	bl	800a0e2 <HAL_UART_Transmit>
		battery_OK = 0;
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <BatteryReadout+0x118>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f000 fbe8 	bl	8005540 <indicateLED_return>
}
 8004d70:	e017      	b.n	8004da2 <BatteryReadout+0xf6>
		sprintf(printstr, "That's around %d %%\n\r", Akku_Prozent);
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <BatteryReadout+0x108>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	4914      	ldr	r1, [pc, #80]	; (8004dcc <BatteryReadout+0x120>)
 8004d7a:	4810      	ldr	r0, [pc, #64]	; (8004dbc <BatteryReadout+0x110>)
 8004d7c:	f00c fd44 	bl	8011808 <siprintf>
		_BT_PRINT(printstr);
 8004d80:	480e      	ldr	r0, [pc, #56]	; (8004dbc <BatteryReadout+0x110>)
 8004d82:	f7fb f9fd 	bl	8000180 <strlen>
 8004d86:	4603      	mov	r3, r0
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d8e:	490b      	ldr	r1, [pc, #44]	; (8004dbc <BatteryReadout+0x110>)
 8004d90:	4806      	ldr	r0, [pc, #24]	; (8004dac <BatteryReadout+0x100>)
 8004d92:	f005 f9a6 	bl	800a0e2 <HAL_UART_Transmit>
		battery_OK = 1;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <BatteryReadout+0x118>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
		indicateLED_return(1);
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f000 fbcf 	bl	8005540 <indicateLED_return>
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	080150e0 	.word	0x080150e0
 8004dac:	20000478 	.word	0x20000478
 8004db0:	20000964 	.word	0x20000964
 8004db4:	20000968 	.word	0x20000968
 8004db8:	080150fc 	.word	0x080150fc
 8004dbc:	20000970 	.word	0x20000970
 8004dc0:	08015114 	.word	0x08015114
 8004dc4:	2000096c 	.word	0x2000096c
 8004dc8:	0801512c 	.word	0x0801512c
 8004dcc:	08015154 	.word	0x08015154

08004dd0 <GSMTest>:

static void GSMTest(void){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0

	/*Variables*/
	uint8_t statusAT = 255;
 8004dd6:	23ff      	movs	r3, #255	; 0xff
 8004dd8:	73fb      	strb	r3, [r7, #15]
	uint8_t statusSIMCard = 255;
 8004dda:	23ff      	movs	r3, #255	; 0xff
 8004ddc:	73bb      	strb	r3, [r7, #14]
	uint8_t statusReg = 255;
 8004dde:	23ff      	movs	r3, #255	; 0xff
 8004de0:	737b      	strb	r3, [r7, #13]
	uint8_t signalRSSI = 255;
 8004de2:	23ff      	movs	r3, #255	; 0xff
 8004de4:	733b      	strb	r3, [r7, #12]
	uint8_t statusGSMBattery = 255;
 8004de6:	23ff      	movs	r3, #255	; 0xff
 8004de8:	72fb      	strb	r3, [r7, #11]
	uint16_t statusGSMBatteryVOLT = 255;
 8004dea:	23ff      	movs	r3, #255	; 0xff
 8004dec:	813b      	strh	r3, [r7, #8]
	//static uint8_t statusGSMSendSMS = 255;

	/*Workaround, UART2 may not wake up after Stopmode2, if not reinitialized with expicit call of the MspInit part */
	HAL_UART_MspInit(&huart2);
 8004dee:	48a6      	ldr	r0, [pc, #664]	; (8005088 <GSMTest+0x2b8>)
 8004df0:	f7fe f8e6 	bl	8002fc0 <HAL_UART_MspInit>
	MX_USART2_UART_Init();
 8004df4:	f7fe f898 	bl	8002f28 <MX_USART2_UART_Init>
	if (buttonpressdone){
 8004df8:	4ba4      	ldr	r3, [pc, #656]	; (800508c <GSMTest+0x2bc>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <GSMTest+0x40>
		_BT_PRINT("GSM Test Button pressed\r");
 8004e00:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e04:	2218      	movs	r2, #24
 8004e06:	49a2      	ldr	r1, [pc, #648]	; (8005090 <GSMTest+0x2c0>)
 8004e08:	48a2      	ldr	r0, [pc, #648]	; (8005094 <GSMTest+0x2c4>)
 8004e0a:	f005 f96a 	bl	800a0e2 <HAL_UART_Transmit>
 8004e0e:	e006      	b.n	8004e1e <GSMTest+0x4e>
	}else{
		_BT_PRINT("GSM-Test started. Please wait...\r");
 8004e10:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e14:	2221      	movs	r2, #33	; 0x21
 8004e16:	49a0      	ldr	r1, [pc, #640]	; (8005098 <GSMTest+0x2c8>)
 8004e18:	489e      	ldr	r0, [pc, #632]	; (8005094 <GSMTest+0x2c4>)
 8004e1a:	f005 f962 	bl	800a0e2 <HAL_UART_Transmit>
	}
	gsmtest_OK = 0;
 8004e1e:	4b9f      	ldr	r3, [pc, #636]	; (800509c <GSMTest+0x2cc>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	701a      	strb	r2, [r3, #0]

	if (strncmp(Parameter.Handynummer, "+", 1) == 0 && digits_only(Parameter.Handynummer+1) == 1){
 8004e24:	4b9e      	ldr	r3, [pc, #632]	; (80050a0 <GSMTest+0x2d0>)
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	4b9e      	ldr	r3, [pc, #632]	; (80050a4 <GSMTest+0x2d4>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d120      	bne.n	8004e74 <GSMTest+0xa4>
 8004e32:	4b9d      	ldr	r3, [pc, #628]	; (80050a8 <GSMTest+0x2d8>)
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fc21 	bl	800567c <digits_only>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d119      	bne.n	8004e74 <GSMTest+0xa4>
		_BT_PRINT("Stored Mobile-Nr to send SMS to: ");
 8004e40:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e44:	2221      	movs	r2, #33	; 0x21
 8004e46:	4999      	ldr	r1, [pc, #612]	; (80050ac <GSMTest+0x2dc>)
 8004e48:	4892      	ldr	r0, [pc, #584]	; (8005094 <GSMTest+0x2c4>)
 8004e4a:	f005 f94a 	bl	800a0e2 <HAL_UART_Transmit>
		_BT_PRINT(Parameter.Handynummer);
 8004e4e:	4894      	ldr	r0, [pc, #592]	; (80050a0 <GSMTest+0x2d0>)
 8004e50:	f7fb f996 	bl	8000180 <strlen>
 8004e54:	4603      	mov	r3, r0
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e5c:	4990      	ldr	r1, [pc, #576]	; (80050a0 <GSMTest+0x2d0>)
 8004e5e:	488d      	ldr	r0, [pc, #564]	; (8005094 <GSMTest+0x2c4>)
 8004e60:	f005 f93f 	bl	800a0e2 <HAL_UART_Transmit>
		_BT_PRINT("\r");
 8004e64:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e68:	2201      	movs	r2, #1
 8004e6a:	4991      	ldr	r1, [pc, #580]	; (80050b0 <GSMTest+0x2e0>)
 8004e6c:	4889      	ldr	r0, [pc, #548]	; (8005094 <GSMTest+0x2c4>)
 8004e6e:	f005 f938 	bl	800a0e2 <HAL_UART_Transmit>
 8004e72:	e006      	b.n	8004e82 <GSMTest+0xb2>
	}
	else{
		_BT_PRINT("No valid Mobile-Nr to send SMS to was set. Please specifiy a Number starting with +49..\r");
 8004e74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e78:	2258      	movs	r2, #88	; 0x58
 8004e7a:	498e      	ldr	r1, [pc, #568]	; (80050b4 <GSMTest+0x2e4>)
 8004e7c:	4885      	ldr	r0, [pc, #532]	; (8005094 <GSMTest+0x2c4>)
 8004e7e:	f005 f930 	bl	800a0e2 <HAL_UART_Transmit>
	}

	/*GSM Module must be turned on for at least 15s, because it needs time to register to cellular network*/
	while (gsm_configmode_timeover == 0);
 8004e82:	bf00      	nop
 8004e84:	4b8c      	ldr	r3, [pc, #560]	; (80050b8 <GSMTest+0x2e8>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0fb      	beq.n	8004e84 <GSMTest+0xb4>
	GSMSimpleAT(); //first command is for autobauding of sim module, response is often bullshit
 8004e8c:	f7fe fac0 	bl	8003410 <GSMSimpleAT>
	HAL_Delay(500);
 8004e90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e94:	f7fd fc04 	bl	80026a0 <HAL_Delay>
	GSMSimpleAT();
 8004e98:	f7fe faba 	bl	8003410 <GSMSimpleAT>
	HAL_Delay(500);
 8004e9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ea0:	f7fd fbfe 	bl	80026a0 <HAL_Delay>
	/*Test simple AT answer*/
	statusAT = GSMSimpleAT();
 8004ea4:	f7fe fab4 	bl	8003410 <GSMSimpleAT>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	73fb      	strb	r3, [r7, #15]
	if (statusAT != 1){
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d00d      	beq.n	8004ece <GSMTest+0xfe>
		_BT_PRINT("Error: No valid answer from GSM Module. GSM-Test failed...\r");
 8004eb2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004eb6:	223b      	movs	r2, #59	; 0x3b
 8004eb8:	4980      	ldr	r1, [pc, #512]	; (80050bc <GSMTest+0x2ec>)
 8004eba:	4876      	ldr	r0, [pc, #472]	; (8005094 <GSMTest+0x2c4>)
 8004ebc:	f005 f911 	bl	800a0e2 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004ec0:	4b76      	ldr	r3, [pc, #472]	; (800509c <GSMTest+0x2cc>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	f000 fb3a 	bl	8005540 <indicateLED_return>
		return;
 8004ecc:	e13b      	b.n	8005146 <GSMTest+0x376>
	}
	HAL_Delay(500);
 8004ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ed2:	f7fd fbe5 	bl	80026a0 <HAL_Delay>

	/*Check SIM-Card Insertion*/
	statusSIMCard = GSMCheckSimInsert();
 8004ed6:	f7fe fad9 	bl	800348c <GSMCheckSimInsert>
 8004eda:	4603      	mov	r3, r0
 8004edc:	73bb      	strb	r3, [r7, #14]
	if (statusSIMCard == 0){
 8004ede:	7bbb      	ldrb	r3, [r7, #14]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10d      	bne.n	8004f00 <GSMTest+0x130>
		_BT_PRINT("Error: No Sim Card inserted. GSM-Test failed...\r");
 8004ee4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ee8:	2230      	movs	r2, #48	; 0x30
 8004eea:	4975      	ldr	r1, [pc, #468]	; (80050c0 <GSMTest+0x2f0>)
 8004eec:	4869      	ldr	r0, [pc, #420]	; (8005094 <GSMTest+0x2c4>)
 8004eee:	f005 f8f8 	bl	800a0e2 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004ef2:	4b6a      	ldr	r3, [pc, #424]	; (800509c <GSMTest+0x2cc>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f000 fb21 	bl	8005540 <indicateLED_return>
		return;
 8004efe:	e122      	b.n	8005146 <GSMTest+0x376>
	}
	else if (statusSIMCard != 1){
 8004f00:	7bbb      	ldrb	r3, [r7, #14]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d00d      	beq.n	8004f22 <GSMTest+0x152>
		_BT_PRINT("Error: No valid answer from GSM Module. GSM-Test failed...\r");
 8004f06:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f0a:	223b      	movs	r2, #59	; 0x3b
 8004f0c:	496b      	ldr	r1, [pc, #428]	; (80050bc <GSMTest+0x2ec>)
 8004f0e:	4861      	ldr	r0, [pc, #388]	; (8005094 <GSMTest+0x2c4>)
 8004f10:	f005 f8e7 	bl	800a0e2 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004f14:	4b61      	ldr	r3, [pc, #388]	; (800509c <GSMTest+0x2cc>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f000 fb10 	bl	8005540 <indicateLED_return>
		return;
 8004f20:	e111      	b.n	8005146 <GSMTest+0x376>
	}
	HAL_Delay(500);
 8004f22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f26:	f7fd fbbb 	bl	80026a0 <HAL_Delay>

	/*Check Signal Strength*/
	signalRSSI = GSMGetSignalStrength();
 8004f2a:	f7fe fb43 	bl	80035b4 <GSMGetSignalStrength>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	733b      	strb	r3, [r7, #12]
	if (signalRSSI >= 99){
 8004f32:	7b3b      	ldrb	r3, [r7, #12]
 8004f34:	2b62      	cmp	r3, #98	; 0x62
 8004f36:	d90d      	bls.n	8004f54 <GSMTest+0x184>
			_BT_PRINT("Error: No valid answer from GSM Module. GSM-Test failed...\r");
 8004f38:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f3c:	223b      	movs	r2, #59	; 0x3b
 8004f3e:	495f      	ldr	r1, [pc, #380]	; (80050bc <GSMTest+0x2ec>)
 8004f40:	4854      	ldr	r0, [pc, #336]	; (8005094 <GSMTest+0x2c4>)
 8004f42:	f005 f8ce 	bl	800a0e2 <HAL_UART_Transmit>
			gsmtest_OK = 0;
 8004f46:	4b55      	ldr	r3, [pc, #340]	; (800509c <GSMTest+0x2cc>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
			indicateLED_return(0);
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f000 faf7 	bl	8005540 <indicateLED_return>
			return;
 8004f52:	e0f8      	b.n	8005146 <GSMTest+0x376>
	}
	else if (signalRSSI == 0){
 8004f54:	7b3b      	ldrb	r3, [r7, #12]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d107      	bne.n	8004f6a <GSMTest+0x19a>
			_BT_PRINT("GSM signal strength: very bad - consider another location\r");
 8004f5a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f5e:	223a      	movs	r2, #58	; 0x3a
 8004f60:	4958      	ldr	r1, [pc, #352]	; (80050c4 <GSMTest+0x2f4>)
 8004f62:	484c      	ldr	r0, [pc, #304]	; (8005094 <GSMTest+0x2c4>)
 8004f64:	f005 f8bd 	bl	800a0e2 <HAL_UART_Transmit>
 8004f68:	e022      	b.n	8004fb0 <GSMTest+0x1e0>
	}
	else if (signalRSSI == 1){
 8004f6a:	7b3b      	ldrb	r3, [r7, #12]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d107      	bne.n	8004f80 <GSMTest+0x1b0>
			_BT_PRINT("GSM signal strength: low but enough\r");
 8004f70:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f74:	2224      	movs	r2, #36	; 0x24
 8004f76:	4954      	ldr	r1, [pc, #336]	; (80050c8 <GSMTest+0x2f8>)
 8004f78:	4846      	ldr	r0, [pc, #280]	; (8005094 <GSMTest+0x2c4>)
 8004f7a:	f005 f8b2 	bl	800a0e2 <HAL_UART_Transmit>
 8004f7e:	e017      	b.n	8004fb0 <GSMTest+0x1e0>
	}
	else if (signalRSSI >= 2 && signalRSSI < 31){
 8004f80:	7b3b      	ldrb	r3, [r7, #12]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d90a      	bls.n	8004f9c <GSMTest+0x1cc>
 8004f86:	7b3b      	ldrb	r3, [r7, #12]
 8004f88:	2b1e      	cmp	r3, #30
 8004f8a:	d807      	bhi.n	8004f9c <GSMTest+0x1cc>
			_BT_PRINT("GSM signal strength: OK\r");
 8004f8c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f90:	2218      	movs	r2, #24
 8004f92:	494e      	ldr	r1, [pc, #312]	; (80050cc <GSMTest+0x2fc>)
 8004f94:	483f      	ldr	r0, [pc, #252]	; (8005094 <GSMTest+0x2c4>)
 8004f96:	f005 f8a4 	bl	800a0e2 <HAL_UART_Transmit>
 8004f9a:	e009      	b.n	8004fb0 <GSMTest+0x1e0>
	}
	else if (signalRSSI == 31){
 8004f9c:	7b3b      	ldrb	r3, [r7, #12]
 8004f9e:	2b1f      	cmp	r3, #31
 8004fa0:	d106      	bne.n	8004fb0 <GSMTest+0x1e0>
			_BT_PRINT("GSM signal strength: Very Good\r");
 8004fa2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004fa6:	221f      	movs	r2, #31
 8004fa8:	4949      	ldr	r1, [pc, #292]	; (80050d0 <GSMTest+0x300>)
 8004faa:	483a      	ldr	r0, [pc, #232]	; (8005094 <GSMTest+0x2c4>)
 8004fac:	f005 f899 	bl	800a0e2 <HAL_UART_Transmit>
	}
	HAL_Delay(500);
 8004fb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fb4:	f7fd fb74 	bl	80026a0 <HAL_Delay>

	/*Check Network Registration*/
	statusReg = GSMGetRegState();
 8004fb8:	f7fe fab2 	bl	8003520 <GSMGetRegState>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	737b      	strb	r3, [r7, #13]
	if (statusReg == 0 || statusReg == 2 || statusReg == 3 || statusReg == 4){
 8004fc0:	7b7b      	ldrb	r3, [r7, #13]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <GSMTest+0x208>
 8004fc6:	7b7b      	ldrb	r3, [r7, #13]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d005      	beq.n	8004fd8 <GSMTest+0x208>
 8004fcc:	7b7b      	ldrb	r3, [r7, #13]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d002      	beq.n	8004fd8 <GSMTest+0x208>
 8004fd2:	7b7b      	ldrb	r3, [r7, #13]
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d10d      	bne.n	8004ff4 <GSMTest+0x224>
		_BT_PRINT("Error: GSM Module not registered in cellular network. GSM-Test failed...\r");
 8004fd8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004fdc:	2249      	movs	r2, #73	; 0x49
 8004fde:	493d      	ldr	r1, [pc, #244]	; (80050d4 <GSMTest+0x304>)
 8004fe0:	482c      	ldr	r0, [pc, #176]	; (8005094 <GSMTest+0x2c4>)
 8004fe2:	f005 f87e 	bl	800a0e2 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004fe6:	4b2d      	ldr	r3, [pc, #180]	; (800509c <GSMTest+0x2cc>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004fec:	2000      	movs	r0, #0
 8004fee:	f000 faa7 	bl	8005540 <indicateLED_return>
		return;
 8004ff2:	e0a8      	b.n	8005146 <GSMTest+0x376>
	}
	else if (statusReg != 1){
 8004ff4:	7b7b      	ldrb	r3, [r7, #13]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d00d      	beq.n	8005016 <GSMTest+0x246>
		_BT_PRINT("Error: No valid answer from GSM Module. GSM-Test failed...\r");
 8004ffa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ffe:	223b      	movs	r2, #59	; 0x3b
 8005000:	492e      	ldr	r1, [pc, #184]	; (80050bc <GSMTest+0x2ec>)
 8005002:	4824      	ldr	r0, [pc, #144]	; (8005094 <GSMTest+0x2c4>)
 8005004:	f005 f86d 	bl	800a0e2 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8005008:	4b24      	ldr	r3, [pc, #144]	; (800509c <GSMTest+0x2cc>)
 800500a:	2200      	movs	r2, #0
 800500c:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 800500e:	2000      	movs	r0, #0
 8005010:	f000 fa96 	bl	8005540 <indicateLED_return>
		return;
 8005014:	e097      	b.n	8005146 <GSMTest+0x376>
	}
	else if (statusReg == 1){
 8005016:	7b7b      	ldrb	r3, [r7, #13]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d106      	bne.n	800502a <GSMTest+0x25a>
		_BT_PRINT("GSM Module successfully registered to GSM Network\r");
 800501c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005020:	2232      	movs	r2, #50	; 0x32
 8005022:	492d      	ldr	r1, [pc, #180]	; (80050d8 <GSMTest+0x308>)
 8005024:	481b      	ldr	r0, [pc, #108]	; (8005094 <GSMTest+0x2c4>)
 8005026:	f005 f85c 	bl	800a0e2 <HAL_UART_Transmit>
	}
	HAL_Delay(500);
 800502a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800502e:	f7fd fb37 	bl	80026a0 <HAL_Delay>


	//
	uint16_t balance_cent = 0;
 8005032:	2300      	movs	r3, #0
 8005034:	80fb      	strh	r3, [r7, #6]
	if (GSMGetBalance(&balance_cent) < 101){
 8005036:	1dbb      	adds	r3, r7, #6
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe fcaf 	bl	800399c <GSMGetBalance>
 800503e:	4603      	mov	r3, r0
 8005040:	2b64      	cmp	r3, #100	; 0x64
 8005042:	d851      	bhi.n	80050e8 <GSMTest+0x318>
		sprintf(printstr, "Balance: %u,%u EUR\r", balance_cent / 100, balance_cent % 100);
 8005044:	88fb      	ldrh	r3, [r7, #6]
 8005046:	4a25      	ldr	r2, [pc, #148]	; (80050dc <GSMTest+0x30c>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	b29b      	uxth	r3, r3
 8005050:	4618      	mov	r0, r3
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	4a21      	ldr	r2, [pc, #132]	; (80050dc <GSMTest+0x30c>)
 8005056:	fba2 1203 	umull	r1, r2, r2, r3
 800505a:	0952      	lsrs	r2, r2, #5
 800505c:	2164      	movs	r1, #100	; 0x64
 800505e:	fb01 f202 	mul.w	r2, r1, r2
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	b29b      	uxth	r3, r3
 8005066:	4602      	mov	r2, r0
 8005068:	491d      	ldr	r1, [pc, #116]	; (80050e0 <GSMTest+0x310>)
 800506a:	481e      	ldr	r0, [pc, #120]	; (80050e4 <GSMTest+0x314>)
 800506c:	f00c fbcc 	bl	8011808 <siprintf>
		_BT_PRINT(printstr);
 8005070:	481c      	ldr	r0, [pc, #112]	; (80050e4 <GSMTest+0x314>)
 8005072:	f7fb f885 	bl	8000180 <strlen>
 8005076:	4603      	mov	r3, r0
 8005078:	b29a      	uxth	r2, r3
 800507a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800507e:	4919      	ldr	r1, [pc, #100]	; (80050e4 <GSMTest+0x314>)
 8005080:	4804      	ldr	r0, [pc, #16]	; (8005094 <GSMTest+0x2c4>)
 8005082:	f005 f82e 	bl	800a0e2 <HAL_UART_Transmit>
 8005086:	e036      	b.n	80050f6 <GSMTest+0x326>
 8005088:	20000598 	.word	0x20000598
 800508c:	20000961 	.word	0x20000961
 8005090:	0801516c 	.word	0x0801516c
 8005094:	20000478 	.word	0x20000478
 8005098:	08015188 	.word	0x08015188
 800509c:	20000963 	.word	0x20000963
 80050a0:	20000010 	.word	0x20000010
 80050a4:	08014dcc 	.word	0x08014dcc
 80050a8:	20000011 	.word	0x20000011
 80050ac:	080151ac 	.word	0x080151ac
 80050b0:	08014e14 	.word	0x08014e14
 80050b4:	08014e3c 	.word	0x08014e3c
 80050b8:	20000962 	.word	0x20000962
 80050bc:	080151d0 	.word	0x080151d0
 80050c0:	0801520c 	.word	0x0801520c
 80050c4:	08015240 	.word	0x08015240
 80050c8:	0801527c 	.word	0x0801527c
 80050cc:	080152a4 	.word	0x080152a4
 80050d0:	080152c0 	.word	0x080152c0
 80050d4:	080152e0 	.word	0x080152e0
 80050d8:	0801532c 	.word	0x0801532c
 80050dc:	51eb851f 	.word	0x51eb851f
 80050e0:	08015360 	.word	0x08015360
 80050e4:	20000970 	.word	0x20000970
	}
	else{
		_BT_PRINT("Prepaid balance could not be requested\r");
 80050e8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80050ec:	2227      	movs	r2, #39	; 0x27
 80050ee:	4917      	ldr	r1, [pc, #92]	; (800514c <GSMTest+0x37c>)
 80050f0:	4817      	ldr	r0, [pc, #92]	; (8005150 <GSMTest+0x380>)
 80050f2:	f004 fff6 	bl	800a0e2 <HAL_UART_Transmit>
	}


	/*Short Battery-Test from GSM Module*/
	statusGSMBattery = GSMGetBatteryCharge(&statusGSMBatteryVOLT);
 80050f6:	f107 0308 	add.w	r3, r7, #8
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fe faaa 	bl	8003654 <GSMGetBatteryCharge>
 8005100:	4603      	mov	r3, r0
 8005102:	72fb      	strb	r3, [r7, #11]
	if (statusGSMBattery < 101){
 8005104:	7afb      	ldrb	r3, [r7, #11]
 8005106:	2b64      	cmp	r3, #100	; 0x64
 8005108:	d810      	bhi.n	800512c <GSMTest+0x35c>
		sprintf(printstr, "Battery measurement of GSM-Module: %u%%\r", statusGSMBattery);
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	461a      	mov	r2, r3
 800510e:	4911      	ldr	r1, [pc, #68]	; (8005154 <GSMTest+0x384>)
 8005110:	4811      	ldr	r0, [pc, #68]	; (8005158 <GSMTest+0x388>)
 8005112:	f00c fb79 	bl	8011808 <siprintf>
		_BT_PRINT(printstr);
 8005116:	4810      	ldr	r0, [pc, #64]	; (8005158 <GSMTest+0x388>)
 8005118:	f7fb f832 	bl	8000180 <strlen>
 800511c:	4603      	mov	r3, r0
 800511e:	b29a      	uxth	r2, r3
 8005120:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005124:	490c      	ldr	r1, [pc, #48]	; (8005158 <GSMTest+0x388>)
 8005126:	480a      	ldr	r0, [pc, #40]	; (8005150 <GSMTest+0x380>)
 8005128:	f004 ffdb 	bl	800a0e2 <HAL_UART_Transmit>
	}

	/*If code proceeds until here without return, GSM Check was successful*/
	gsmtest_OK = 1;
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <GSMTest+0x38c>)
 800512e:	2201      	movs	r2, #1
 8005130:	701a      	strb	r2, [r3, #0]
	_BT_PRINT("-> GSM-Test successful\r");
 8005132:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005136:	2217      	movs	r2, #23
 8005138:	4909      	ldr	r1, [pc, #36]	; (8005160 <GSMTest+0x390>)
 800513a:	4805      	ldr	r0, [pc, #20]	; (8005150 <GSMTest+0x380>)
 800513c:	f004 ffd1 	bl	800a0e2 <HAL_UART_Transmit>
	/*Indicate on Green LED and then start Config mode idle LED again*/
	indicateLED_return(1);
 8005140:	2001      	movs	r0, #1
 8005142:	f000 f9fd 	bl	8005540 <indicateLED_return>

}
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	08015374 	.word	0x08015374
 8005150:	20000478 	.word	0x20000478
 8005154:	0801539c 	.word	0x0801539c
 8005158:	20000970 	.word	0x20000970
 800515c:	20000963 	.word	0x20000963
 8005160:	080153c8 	.word	0x080153c8

08005164 <LoRa_FindSync>:

static void LoRa_FindSync(void){
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af02      	add	r7, sp, #8

	  /*Delete already registered slaves*/
	  slaves_reg = 0;
 800516a:	4b6e      	ldr	r3, [pc, #440]	; (8005324 <LoRa_FindSync+0x1c0>)
 800516c:	2200      	movs	r2, #0
 800516e:	701a      	strb	r2, [r3, #0]
	  memset(slaveaddrss, 0x0, MAXSLAVES);
 8005170:	2205      	movs	r2, #5
 8005172:	2100      	movs	r1, #0
 8005174:	486c      	ldr	r0, [pc, #432]	; (8005328 <LoRa_FindSync+0x1c4>)
 8005176:	f00b fee3 	bl	8010f40 <memset>

	  _BT_PRINT("Searching LoRa Slave devices, please wait...\r")
 800517a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800517e:	222d      	movs	r2, #45	; 0x2d
 8005180:	496a      	ldr	r1, [pc, #424]	; (800532c <LoRa_FindSync+0x1c8>)
 8005182:	486b      	ldr	r0, [pc, #428]	; (8005330 <LoRa_FindSync+0x1cc>)
 8005184:	f004 ffad 	bl	800a0e2 <HAL_UART_Transmit>
	  /*fills tx buffer*/
	  memset(BufferTx, 0x0, PAYLOAD_LEN);
 8005188:	2208      	movs	r2, #8
 800518a:	2100      	movs	r1, #0
 800518c:	4869      	ldr	r0, [pc, #420]	; (8005334 <LoRa_FindSync+0x1d0>)
 800518e:	f00b fed7 	bl	8010f40 <memset>
	  BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 8005192:	4b68      	ldr	r3, [pc, #416]	; (8005334 <LoRa_FindSync+0x1d0>)
 8005194:	22fa      	movs	r2, #250	; 0xfa
 8005196:	701a      	strb	r2, [r3, #0]
	  BufferTx[1] = 0x81; //Function -> Message from Master, Try to sync and register slaves
 8005198:	4b66      	ldr	r3, [pc, #408]	; (8005334 <LoRa_FindSync+0x1d0>)
 800519a:	2281      	movs	r2, #129	; 0x81
 800519c:	705a      	strb	r2, [r3, #1]
	  BufferTx[2] = 0x00; //Slave IDs unknown so far
 800519e:	4b65      	ldr	r3, [pc, #404]	; (8005334 <LoRa_FindSync+0x1d0>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	709a      	strb	r2, [r3, #2]
	  /*Data*/

	  uint32_t tempWakeup = (uint32_t)Parameter.Wakeup; //cast is ok because nr is limited by app
 80051a4:	4b64      	ldr	r3, [pc, #400]	; (8005338 <LoRa_FindSync+0x1d4>)
 80051a6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051aa:	4613      	mov	r3, r2
 80051ac:	603b      	str	r3, [r7, #0]
	  memcpy(BufferTx+3, &tempWakeup, 4);
 80051ae:	4a63      	ldr	r2, [pc, #396]	; (800533c <LoRa_FindSync+0x1d8>)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	6013      	str	r3, [r2, #0]
	  BufferTx[7] = 0x00;
 80051b4:	4b5f      	ldr	r3, [pc, #380]	; (8005334 <LoRa_FindSync+0x1d0>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	71da      	strb	r2, [r3, #7]

	  /*Send Broadcast*/
	  State = NONE;
 80051ba:	4b61      	ldr	r3, [pc, #388]	; (8005340 <LoRa_FindSync+0x1dc>)
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
	  Radio.Send(BufferTx, PAYLOAD_LEN);
 80051c0:	4b60      	ldr	r3, [pc, #384]	; (8005344 <LoRa_FindSync+0x1e0>)
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	2108      	movs	r1, #8
 80051c6:	485b      	ldr	r0, [pc, #364]	; (8005334 <LoRa_FindSync+0x1d0>)
 80051c8:	4798      	blx	r3

	  /*Wait until LoRa module has done someting*/
	  while (State != TX && State != TX_TIMEOUT);
 80051ca:	bf00      	nop
 80051cc:	4b5c      	ldr	r3, [pc, #368]	; (8005340 <LoRa_FindSync+0x1dc>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d003      	beq.n	80051dc <LoRa_FindSync+0x78>
 80051d4:	4b5a      	ldr	r3, [pc, #360]	; (8005340 <LoRa_FindSync+0x1dc>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d1f7      	bne.n	80051cc <LoRa_FindSync+0x68>

	  if (State == TX_TIMEOUT){
 80051dc:	4b58      	ldr	r3, [pc, #352]	; (8005340 <LoRa_FindSync+0x1dc>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d10d      	bne.n	8005200 <LoRa_FindSync+0x9c>
		  _BT_PRINT("LoRa TX Error, syncing process stopped\r");
 80051e4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80051e8:	2227      	movs	r2, #39	; 0x27
 80051ea:	4957      	ldr	r1, [pc, #348]	; (8005348 <LoRa_FindSync+0x1e4>)
 80051ec:	4850      	ldr	r0, [pc, #320]	; (8005330 <LoRa_FindSync+0x1cc>)
 80051ee:	f004 ff78 	bl	800a0e2 <HAL_UART_Transmit>
		  Radio.Sleep();
 80051f2:	4b54      	ldr	r3, [pc, #336]	; (8005344 <LoRa_FindSync+0x1e0>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f6:	4798      	blx	r3
		  indicateLED_return(0);
 80051f8:	2000      	movs	r0, #0
 80051fa:	f000 f9a1 	bl	8005540 <indicateLED_return>
 80051fe:	e08e      	b.n	800531e <LoRa_FindSync+0x1ba>
		  return;
	  }

	  /*Start Reception*/
	  Radio.Rx(0);
 8005200:	4b50      	ldr	r3, [pc, #320]	; (8005344 <LoRa_FindSync+0x1e0>)
 8005202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005204:	2000      	movs	r0, #0
 8005206:	4798      	blx	r3
	   * Slaves answer multiple times with a random generated delay each,
	   * so each active slave in range has a chance to get registered by the master
	   * and none gets ignored accidently, if another one answers at the same time.
	   * On Air time with SF=12, BW=125KHz, 8 Bit Payload is ca. 1s -> Reception window should be active several seconds.
	   */
	  UTIL_TIMER_Create(&timerLoraSync, 30000, UTIL_TIMER_ONESHOT, OnSyncOverEvent, NULL);
 8005208:	2300      	movs	r3, #0
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	4b4f      	ldr	r3, [pc, #316]	; (800534c <LoRa_FindSync+0x1e8>)
 800520e:	2200      	movs	r2, #0
 8005210:	f247 5130 	movw	r1, #30000	; 0x7530
 8005214:	484e      	ldr	r0, [pc, #312]	; (8005350 <LoRa_FindSync+0x1ec>)
 8005216:	f00b f971 	bl	80104fc <UTIL_TIMER_Create>
	  UTIL_TIMER_Start(&timerLoraSync);
 800521a:	484d      	ldr	r0, [pc, #308]	; (8005350 <LoRa_FindSync+0x1ec>)
 800521c:	f00b f9a4 	bl	8010568 <UTIL_TIMER_Start>
	  syncover = false;
 8005220:	4b4c      	ldr	r3, [pc, #304]	; (8005354 <LoRa_FindSync+0x1f0>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
	  /*Wait for Slaves to answer*/
	  State = NONE;
 8005226:	4b46      	ldr	r3, [pc, #280]	; (8005340 <LoRa_FindSync+0x1dc>)
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
	  while(!syncover) {
 800522c:	e04f      	b.n	80052ce <LoRa_FindSync+0x16a>
		  if (State == RX_ERROR || State == RX_TIMEOUT){
 800522e:	4b44      	ldr	r3, [pc, #272]	; (8005340 <LoRa_FindSync+0x1dc>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d003      	beq.n	800523e <LoRa_FindSync+0xda>
 8005236:	4b42      	ldr	r3, [pc, #264]	; (8005340 <LoRa_FindSync+0x1dc>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d106      	bne.n	800524c <LoRa_FindSync+0xe8>
			  //_BT_PRINT("LoRa message reception error. Continuing to receive... \r");
			  /*Reset State for next receive*/
			  State = NONE;
 800523e:	4b40      	ldr	r3, [pc, #256]	; (8005340 <LoRa_FindSync+0x1dc>)
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
			  Radio.Rx(0);
 8005244:	4b3f      	ldr	r3, [pc, #252]	; (8005344 <LoRa_FindSync+0x1e0>)
 8005246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005248:	2000      	movs	r0, #0
 800524a:	4798      	blx	r3
		  }
		  if (State == RX){
 800524c:	4b3c      	ldr	r3, [pc, #240]	; (8005340 <LoRa_FindSync+0x1dc>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d13c      	bne.n	80052ce <LoRa_FindSync+0x16a>
			  /* save new slave address(=ID)*/
			  uint8_t currentslaveid = RxBuffer[2] >> 4;
 8005254:	4b40      	ldr	r3, [pc, #256]	; (8005358 <LoRa_FindSync+0x1f4>)
 8005256:	789b      	ldrb	r3, [r3, #2]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	71fb      	strb	r3, [r7, #7]
			  if (alreadyRegistered(currentslaveid) == 0 && slaves_reg<= MAXSLAVES){
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f950 	bl	8005504 <alreadyRegistered>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12a      	bne.n	80052c0 <LoRa_FindSync+0x15c>
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <LoRa_FindSync+0x1c0>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b05      	cmp	r3, #5
 8005270:	d826      	bhi.n	80052c0 <LoRa_FindSync+0x15c>
				  slaveaddrss[slaves_reg++] = currentslaveid;
 8005272:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <LoRa_FindSync+0x1c0>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	b2d1      	uxtb	r1, r2
 800527a:	4a2a      	ldr	r2, [pc, #168]	; (8005324 <LoRa_FindSync+0x1c0>)
 800527c:	7011      	strb	r1, [r2, #0]
 800527e:	4619      	mov	r1, r3
 8005280:	4a29      	ldr	r2, [pc, #164]	; (8005328 <LoRa_FindSync+0x1c4>)
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	5453      	strb	r3, [r2, r1]
				  sprintf(printstr, "New slave device registered with ID: %u, RSSI: %ddBm, SNR: %ddB and Battery: %u%%\r", currentslaveid, RssiValue, SnrValue, RxBuffer[3]);
 8005286:	79fa      	ldrb	r2, [r7, #7]
 8005288:	4b34      	ldr	r3, [pc, #208]	; (800535c <LoRa_FindSync+0x1f8>)
 800528a:	f993 3000 	ldrsb.w	r3, [r3]
 800528e:	4618      	mov	r0, r3
 8005290:	4b33      	ldr	r3, [pc, #204]	; (8005360 <LoRa_FindSync+0x1fc>)
 8005292:	f993 3000 	ldrsb.w	r3, [r3]
 8005296:	4619      	mov	r1, r3
 8005298:	4b2f      	ldr	r3, [pc, #188]	; (8005358 <LoRa_FindSync+0x1f4>)
 800529a:	78db      	ldrb	r3, [r3, #3]
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	9100      	str	r1, [sp, #0]
 80052a0:	4603      	mov	r3, r0
 80052a2:	4930      	ldr	r1, [pc, #192]	; (8005364 <LoRa_FindSync+0x200>)
 80052a4:	4830      	ldr	r0, [pc, #192]	; (8005368 <LoRa_FindSync+0x204>)
 80052a6:	f00c faaf 	bl	8011808 <siprintf>
				  _BT_PRINT(printstr);
 80052aa:	482f      	ldr	r0, [pc, #188]	; (8005368 <LoRa_FindSync+0x204>)
 80052ac:	f7fa ff68 	bl	8000180 <strlen>
 80052b0:	4603      	mov	r3, r0
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80052b8:	492b      	ldr	r1, [pc, #172]	; (8005368 <LoRa_FindSync+0x204>)
 80052ba:	481d      	ldr	r0, [pc, #116]	; (8005330 <LoRa_FindSync+0x1cc>)
 80052bc:	f004 ff11 	bl	800a0e2 <HAL_UART_Transmit>
			  }
			  /*Reset State for next receive*/
			  State = NONE;
 80052c0:	4b1f      	ldr	r3, [pc, #124]	; (8005340 <LoRa_FindSync+0x1dc>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]
			  Radio.Rx(0);
 80052c6:	4b1f      	ldr	r3, [pc, #124]	; (8005344 <LoRa_FindSync+0x1e0>)
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	2000      	movs	r0, #0
 80052cc:	4798      	blx	r3
	  while(!syncover) {
 80052ce:	4b21      	ldr	r3, [pc, #132]	; (8005354 <LoRa_FindSync+0x1f0>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ab      	beq.n	800522e <LoRa_FindSync+0xca>
		  }
	  }
	  Radio.Sleep();
 80052d6:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <LoRa_FindSync+0x1e0>)
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	4798      	blx	r3

	  if (slaves_reg == 0){
 80052dc:	4b11      	ldr	r3, [pc, #68]	; (8005324 <LoRa_FindSync+0x1c0>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <LoRa_FindSync+0x190>
		  _BT_PRINT("Registration process completed: No slave devices found.\r");
 80052e4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80052e8:	2238      	movs	r2, #56	; 0x38
 80052ea:	4920      	ldr	r1, [pc, #128]	; (800536c <LoRa_FindSync+0x208>)
 80052ec:	4810      	ldr	r0, [pc, #64]	; (8005330 <LoRa_FindSync+0x1cc>)
 80052ee:	f004 fef8 	bl	800a0e2 <HAL_UART_Transmit>
 80052f2:	e011      	b.n	8005318 <LoRa_FindSync+0x1b4>
	  }
	  else{
		  sprintf(printstr, "Registration process completed: Successfully registered %u slave devices.\r", slaves_reg);
 80052f4:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <LoRa_FindSync+0x1c0>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	491d      	ldr	r1, [pc, #116]	; (8005370 <LoRa_FindSync+0x20c>)
 80052fc:	481a      	ldr	r0, [pc, #104]	; (8005368 <LoRa_FindSync+0x204>)
 80052fe:	f00c fa83 	bl	8011808 <siprintf>
		  _BT_PRINT(printstr);
 8005302:	4819      	ldr	r0, [pc, #100]	; (8005368 <LoRa_FindSync+0x204>)
 8005304:	f7fa ff3c 	bl	8000180 <strlen>
 8005308:	4603      	mov	r3, r0
 800530a:	b29a      	uxth	r2, r3
 800530c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005310:	4915      	ldr	r1, [pc, #84]	; (8005368 <LoRa_FindSync+0x204>)
 8005312:	4807      	ldr	r0, [pc, #28]	; (8005330 <LoRa_FindSync+0x1cc>)
 8005314:	f004 fee5 	bl	800a0e2 <HAL_UART_Transmit>
	  }
	  indicateLED_return(1);
 8005318:	2001      	movs	r0, #1
 800531a:	f000 f911 	bl	8005540 <indicateLED_return>

}
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	200009e0 	.word	0x200009e0
 8005328:	200009e4 	.word	0x200009e4
 800532c:	080153e0 	.word	0x080153e0
 8005330:	20000478 	.word	0x20000478
 8005334:	20000a20 	.word	0x20000a20
 8005338:	20000010 	.word	0x20000010
 800533c:	20000a23 	.word	0x20000a23
 8005340:	20000a1c 	.word	0x20000a1c
 8005344:	08015758 	.word	0x08015758
 8005348:	08015410 	.word	0x08015410
 800534c:	0800559d 	.word	0x0800559d
 8005350:	20000930 	.word	0x20000930
 8005354:	20000a1b 	.word	0x20000a1b
 8005358:	20000a2c 	.word	0x20000a2c
 800535c:	20000a2a 	.word	0x20000a2a
 8005360:	20000a2b 	.word	0x20000a2b
 8005364:	08015438 	.word	0x08015438
 8005368:	20000970 	.word	0x20000970
 800536c:	0801548c 	.word	0x0801548c
 8005370:	080154c8 	.word	0x080154c8

08005374 <LoRa_StartSleep>:

static uint8_t LoRa_StartSleep(void){
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
	 /*fills tx buffer*/
	  memset(BufferTx, 0x0, PAYLOAD_LEN);
 800537a:	2208      	movs	r2, #8
 800537c:	2100      	movs	r1, #0
 800537e:	4856      	ldr	r0, [pc, #344]	; (80054d8 <LoRa_StartSleep+0x164>)
 8005380:	f00b fdde 	bl	8010f40 <memset>
	  BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 8005384:	4b54      	ldr	r3, [pc, #336]	; (80054d8 <LoRa_StartSleep+0x164>)
 8005386:	22fa      	movs	r2, #250	; 0xfa
 8005388:	701a      	strb	r2, [r3, #0]
	  BufferTx[1] = 0x88; //Function -> Message from Master, Send Slaves to sleep
 800538a:	4b53      	ldr	r3, [pc, #332]	; (80054d8 <LoRa_StartSleep+0x164>)
 800538c:	2288      	movs	r2, #136	; 0x88
 800538e:	705a      	strb	r2, [r3, #1]
	  /*Data*/
	  uint32_t tempWakeup = (uint32_t)Parameter.Wakeup; //cast is ok because nr is limited by app
 8005390:	4b52      	ldr	r3, [pc, #328]	; (80054dc <LoRa_StartSleep+0x168>)
 8005392:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005396:	4613      	mov	r3, r2
 8005398:	603b      	str	r3, [r7, #0]
	  memcpy(BufferTx+3, &tempWakeup, 4);
 800539a:	4a51      	ldr	r2, [pc, #324]	; (80054e0 <LoRa_StartSleep+0x16c>)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	6013      	str	r3, [r2, #0]
	  BufferTx[7] = 0x00;
 80053a0:	4b4d      	ldr	r3, [pc, #308]	; (80054d8 <LoRa_StartSleep+0x164>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	71da      	strb	r2, [r3, #7]

	  for (uint8_t i = 0; i<slaves_reg; i++){
 80053a6:	2300      	movs	r3, #0
 80053a8:	71fb      	strb	r3, [r7, #7]
 80053aa:	e072      	b.n	8005492 <LoRa_StartSleep+0x11e>
		  /*Send to slaves*/
		  BufferTx[2] = slaveaddrss[i]<<4; //SlaveID
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	4a4d      	ldr	r2, [pc, #308]	; (80054e4 <LoRa_StartSleep+0x170>)
 80053b0:	5cd3      	ldrb	r3, [r2, r3]
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	4b48      	ldr	r3, [pc, #288]	; (80054d8 <LoRa_StartSleep+0x164>)
 80053b8:	709a      	strb	r2, [r3, #2]
		  State = NONE;
 80053ba:	4b4b      	ldr	r3, [pc, #300]	; (80054e8 <LoRa_StartSleep+0x174>)
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
		  slavestatus[i] = NON;
 80053c0:	79fb      	ldrb	r3, [r7, #7]
 80053c2:	4a4a      	ldr	r2, [pc, #296]	; (80054ec <LoRa_StartSleep+0x178>)
 80053c4:	2100      	movs	r1, #0
 80053c6:	54d1      	strb	r1, [r2, r3]
		  Radio.Send(BufferTx, PAYLOAD_LEN);
 80053c8:	4b49      	ldr	r3, [pc, #292]	; (80054f0 <LoRa_StartSleep+0x17c>)
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	2108      	movs	r1, #8
 80053ce:	4842      	ldr	r0, [pc, #264]	; (80054d8 <LoRa_StartSleep+0x164>)
 80053d0:	4798      	blx	r3
		  /*Wait until LoRa module has done something*/
		  while (State != TX && State != TX_TIMEOUT);
 80053d2:	bf00      	nop
 80053d4:	4b44      	ldr	r3, [pc, #272]	; (80054e8 <LoRa_StartSleep+0x174>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b04      	cmp	r3, #4
 80053da:	d003      	beq.n	80053e4 <LoRa_StartSleep+0x70>
 80053dc:	4b42      	ldr	r3, [pc, #264]	; (80054e8 <LoRa_StartSleep+0x174>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b05      	cmp	r3, #5
 80053e2:	d1f7      	bne.n	80053d4 <LoRa_StartSleep+0x60>
		  if (State == TX_TIMEOUT){
 80053e4:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <LoRa_StartSleep+0x174>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b05      	cmp	r3, #5
 80053ea:	d10f      	bne.n	800540c <LoRa_StartSleep+0x98>
			  _BT_PRINT("LoRa TX Error\r");
 80053ec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80053f0:	220e      	movs	r2, #14
 80053f2:	4940      	ldr	r1, [pc, #256]	; (80054f4 <LoRa_StartSleep+0x180>)
 80053f4:	4840      	ldr	r0, [pc, #256]	; (80054f8 <LoRa_StartSleep+0x184>)
 80053f6:	f004 fe74 	bl	800a0e2 <HAL_UART_Transmit>
			  Radio.Sleep();
 80053fa:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <LoRa_StartSleep+0x17c>)
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	4798      	blx	r3
			  slavestatus[i] = ERROR_BEFORE_SLEEP;
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	4a3a      	ldr	r2, [pc, #232]	; (80054ec <LoRa_StartSleep+0x178>)
 8005404:	2102      	movs	r1, #2
 8005406:	54d1      	strb	r1, [r2, r3]
			  return 0;
 8005408:	2300      	movs	r3, #0
 800540a:	e060      	b.n	80054ce <LoRa_StartSleep+0x15a>
		  }
		  /*Start Reception with timeout*/
		  State = NONE;
 800540c:	4b36      	ldr	r3, [pc, #216]	; (80054e8 <LoRa_StartSleep+0x174>)
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
		  Radio.Rx(6000);
 8005412:	4b37      	ldr	r3, [pc, #220]	; (80054f0 <LoRa_StartSleep+0x17c>)
 8005414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005416:	f241 7070 	movw	r0, #6000	; 0x1770
 800541a:	4798      	blx	r3
		  /*Wait until something happens*/
		  while(State != RX && State != RX_ERROR && State != RX_TIMEOUT);
 800541c:	bf00      	nop
 800541e:	4b32      	ldr	r3, [pc, #200]	; (80054e8 <LoRa_StartSleep+0x174>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d007      	beq.n	8005436 <LoRa_StartSleep+0xc2>
 8005426:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <LoRa_StartSleep+0x174>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d003      	beq.n	8005436 <LoRa_StartSleep+0xc2>
 800542e:	4b2e      	ldr	r3, [pc, #184]	; (80054e8 <LoRa_StartSleep+0x174>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d1f3      	bne.n	800541e <LoRa_StartSleep+0xaa>
		  if (State == RX_ERROR || State == RX_TIMEOUT){
 8005436:	4b2c      	ldr	r3, [pc, #176]	; (80054e8 <LoRa_StartSleep+0x174>)
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d003      	beq.n	8005446 <LoRa_StartSleep+0xd2>
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <LoRa_StartSleep+0x174>)
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b02      	cmp	r3, #2
 8005444:	d103      	bne.n	800544e <LoRa_StartSleep+0xda>
			  slavestatus[i] = ERROR_BEFORE_SLEEP;
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	4a28      	ldr	r2, [pc, #160]	; (80054ec <LoRa_StartSleep+0x178>)
 800544a:	2102      	movs	r1, #2
 800544c:	54d1      	strb	r1, [r2, r3]
		  }
		  if (State == RX){
 800544e:	4b26      	ldr	r3, [pc, #152]	; (80054e8 <LoRa_StartSleep+0x174>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d11a      	bne.n	800548c <LoRa_StartSleep+0x118>
			  /* check if slave with current address answered with acknowledge*/
			  uint8_t currentslaveid = RxBuffer[2] >> 4;
 8005456:	4b29      	ldr	r3, [pc, #164]	; (80054fc <LoRa_StartSleep+0x188>)
 8005458:	789b      	ldrb	r3, [r3, #2]
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	717b      	strb	r3, [r7, #5]
			  uint8_t ackcommand = RxBuffer[1] & 0x0F;
 800545e:	4b27      	ldr	r3, [pc, #156]	; (80054fc <LoRa_StartSleep+0x188>)
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	713b      	strb	r3, [r7, #4]
			  if (currentslaveid == slaveaddrss[i] && ackcommand == 0x02){
 8005468:	79fb      	ldrb	r3, [r7, #7]
 800546a:	4a1e      	ldr	r2, [pc, #120]	; (80054e4 <LoRa_StartSleep+0x170>)
 800546c:	5cd3      	ldrb	r3, [r2, r3]
 800546e:	797a      	ldrb	r2, [r7, #5]
 8005470:	429a      	cmp	r2, r3
 8005472:	d107      	bne.n	8005484 <LoRa_StartSleep+0x110>
 8005474:	793b      	ldrb	r3, [r7, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d104      	bne.n	8005484 <LoRa_StartSleep+0x110>
				  slavestatus[i] = ACK;
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <LoRa_StartSleep+0x178>)
 800547e:	2101      	movs	r1, #1
 8005480:	54d1      	strb	r1, [r2, r3]
 8005482:	e003      	b.n	800548c <LoRa_StartSleep+0x118>
			  }else {
				  slavestatus[i] = ERROR_BEFORE_SLEEP;
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	4a19      	ldr	r2, [pc, #100]	; (80054ec <LoRa_StartSleep+0x178>)
 8005488:	2102      	movs	r1, #2
 800548a:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = 0; i<slaves_reg; i++){
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	3301      	adds	r3, #1
 8005490:	71fb      	strb	r3, [r7, #7]
 8005492:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <LoRa_StartSleep+0x18c>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	79fa      	ldrb	r2, [r7, #7]
 8005498:	429a      	cmp	r2, r3
 800549a:	d387      	bcc.n	80053ac <LoRa_StartSleep+0x38>
			  }
		  }
	  }
	  State = NONE;
 800549c:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <LoRa_StartSleep+0x174>)
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
	  Radio.Sleep();
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <LoRa_StartSleep+0x17c>)
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	4798      	blx	r3

	  for (uint8_t i = 0; i < slaves_reg; i++){
 80054a8:	2300      	movs	r3, #0
 80054aa:	71bb      	strb	r3, [r7, #6]
 80054ac:	e009      	b.n	80054c2 <LoRa_StartSleep+0x14e>
		  if (slavestatus[i] == ERROR_BEFORE_SLEEP)
 80054ae:	79bb      	ldrb	r3, [r7, #6]
 80054b0:	4a0e      	ldr	r2, [pc, #56]	; (80054ec <LoRa_StartSleep+0x178>)
 80054b2:	5cd3      	ldrb	r3, [r2, r3]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d101      	bne.n	80054bc <LoRa_StartSleep+0x148>
			 return 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e008      	b.n	80054ce <LoRa_StartSleep+0x15a>
	  for (uint8_t i = 0; i < slaves_reg; i++){
 80054bc:	79bb      	ldrb	r3, [r7, #6]
 80054be:	3301      	adds	r3, #1
 80054c0:	71bb      	strb	r3, [r7, #6]
 80054c2:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <LoRa_StartSleep+0x18c>)
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	79ba      	ldrb	r2, [r7, #6]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d3f0      	bcc.n	80054ae <LoRa_StartSleep+0x13a>
	  }
	  return 1;
 80054cc:	2301      	movs	r3, #1
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20000a20 	.word	0x20000a20
 80054dc:	20000010 	.word	0x20000010
 80054e0:	20000a23 	.word	0x20000a23
 80054e4:	200009e4 	.word	0x200009e4
 80054e8:	20000a1c 	.word	0x20000a1c
 80054ec:	200009ec 	.word	0x200009ec
 80054f0:	08015758 	.word	0x08015758
 80054f4:	08015514 	.word	0x08015514
 80054f8:	20000478 	.word	0x20000478
 80054fc:	20000a2c 	.word	0x20000a2c
 8005500:	200009e0 	.word	0x200009e0

08005504 <alreadyRegistered>:

static uint8_t alreadyRegistered(uint8_t slaveid){
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i<MAXSLAVES; i++ ){
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
 8005512:	e00a      	b.n	800552a <alreadyRegistered+0x26>
		if (slaveaddrss[i] == slaveid)
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <alreadyRegistered+0x38>)
 8005518:	5cd3      	ldrb	r3, [r2, r3]
 800551a:	79fa      	ldrb	r2, [r7, #7]
 800551c:	429a      	cmp	r2, r3
 800551e:	d101      	bne.n	8005524 <alreadyRegistered+0x20>
			return 1;
 8005520:	2301      	movs	r3, #1
 8005522:	e006      	b.n	8005532 <alreadyRegistered+0x2e>
	for (i = 0; i<MAXSLAVES; i++ ){
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	3301      	adds	r3, #1
 8005528:	73fb      	strb	r3, [r7, #15]
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b04      	cmp	r3, #4
 800552e:	d9f1      	bls.n	8005514 <alreadyRegistered+0x10>
	}
	return 0;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	200009e4 	.word	0x200009e4

08005540 <indicateLED_return>:

/* param: 1: good, 0: bad*/
static void indicateLED_return(uint8_t good_bad){
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af02      	add	r7, sp, #8
 8005546:	4603      	mov	r3, r0
 8005548:	71fb      	strb	r3, [r7, #7]
	if (good_bad == 1) {
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d111      	bne.n	8005574 <indicateLED_return+0x34>
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 1);
 8005550:	2201      	movs	r2, #1
 8005552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005556:	480d      	ldr	r0, [pc, #52]	; (800558c <indicateLED_return+0x4c>)
 8005558:	f002 f92d 	bl	80077b6 <HAL_GPIO_WritePin>
		UTIL_TIMER_Create(&timerLedFeedback, 500, UTIL_TIMER_ONESHOT, OnledFeedbackEventGood, NULL);
 800555c:	2300      	movs	r3, #0
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <indicateLED_return+0x50>)
 8005562:	2200      	movs	r2, #0
 8005564:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005568:	480a      	ldr	r0, [pc, #40]	; (8005594 <indicateLED_return+0x54>)
 800556a:	f00a ffc7 	bl	80104fc <UTIL_TIMER_Create>
		UTIL_TIMER_Start(&timerLedFeedback);
 800556e:	4809      	ldr	r0, [pc, #36]	; (8005594 <indicateLED_return+0x54>)
 8005570:	f00a fffa 	bl	8010568 <UTIL_TIMER_Start>

	}
	/*Start config mode LED Indication again*/
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); /* LED_Red*/
 8005574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005578:	4804      	ldr	r0, [pc, #16]	; (800558c <indicateLED_return+0x4c>)
 800557a:	f002 f933 	bl	80077e4 <HAL_GPIO_TogglePin>
	UTIL_TIMER_Start(&timerLedIdleConf);
 800557e:	4806      	ldr	r0, [pc, #24]	; (8005598 <indicateLED_return+0x58>)
 8005580:	f00a fff2 	bl	8010568 <UTIL_TIMER_Start>
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	48000400 	.word	0x48000400
 8005590:	080055fd 	.word	0x080055fd
 8005594:	20000948 	.word	0x20000948
 8005598:	200008e8 	.word	0x200008e8

0800559c <OnSyncOverEvent>:

/*Timer callbacks*/
static void OnSyncOverEvent(void *context){
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  syncover = true;
 80055a4:	4b03      	ldr	r3, [pc, #12]	; (80055b4 <OnSyncOverEvent+0x18>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr
 80055b4:	20000a1b 	.word	0x20000a1b

080055b8 <OnledConfIdleEvent>:

static void OnledConfIdleEvent(void *context){
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); /* LED_Red*/
 80055c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055c4:	4804      	ldr	r0, [pc, #16]	; (80055d8 <OnledConfIdleEvent+0x20>)
 80055c6:	f002 f90d 	bl	80077e4 <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLedIdleConf);
 80055ca:	4804      	ldr	r0, [pc, #16]	; (80055dc <OnledConfIdleEvent+0x24>)
 80055cc:	f00a ffcc 	bl	8010568 <UTIL_TIMER_Start>
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	48000400 	.word	0x48000400
 80055dc:	200008e8 	.word	0x200008e8

080055e0 <OnGSMConfTimeEvent>:

static void OnGSMConfTimeEvent(void *context){
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  gsm_configmode_timeover = true;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <OnGSMConfTimeEvent+0x18>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	701a      	strb	r2, [r3, #0]
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	20000962 	.word	0x20000962

080055fc <OnledFeedbackEventGood>:

static void OnledFeedbackEventGood(void *context){
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 8005604:	2200      	movs	r2, #0
 8005606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800560a:	4803      	ldr	r0, [pc, #12]	; (8005618 <OnledFeedbackEventGood+0x1c>)
 800560c:	f002 f8d3 	bl	80077b6 <HAL_GPIO_WritePin>
}
 8005610:	bf00      	nop
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	48000400 	.word	0x48000400

0800561c <timerSleepWakeupEvent>:


static void timerSleepWakeupEvent(void *context){
 800561c:	b5b0      	push	{r4, r5, r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	mins_passed++;
 8005624:	4b12      	ldr	r3, [pc, #72]	; (8005670 <timerSleepWakeupEvent+0x54>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	1c54      	adds	r4, r2, #1
 800562c:	f143 0500 	adc.w	r5, r3, #0
 8005630:	4b0f      	ldr	r3, [pc, #60]	; (8005670 <timerSleepWakeupEvent+0x54>)
 8005632:	e9c3 4500 	strd	r4, r5, [r3]
	/*Start timer right again, same as in slaves.
	*because this way wakeup time interval will stay
	*the same most likely, independent from different amout of code
	*done during waked up process  */
	UTIL_TIMER_Start(&timerSleepWakeup);
 8005636:	480f      	ldr	r0, [pc, #60]	; (8005674 <timerSleepWakeupEvent+0x58>)
 8005638:	f00a ff96 	bl	8010568 <UTIL_TIMER_Start>
	if (mins_passed >= Parameter.Wakeup){
 800563c:	4b0e      	ldr	r3, [pc, #56]	; (8005678 <timerSleepWakeupEvent+0x5c>)
 800563e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005642:	490b      	ldr	r1, [pc, #44]	; (8005670 <timerSleepWakeupEvent+0x54>)
 8005644:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005648:	4290      	cmp	r0, r2
 800564a:	eb71 0303 	sbcs.w	r3, r1, r3
 800564e:	d30a      	bcc.n	8005666 <timerSleepWakeupEvent+0x4a>
		mins_passed = 0;
 8005650:	4907      	ldr	r1, [pc, #28]	; (8005670 <timerSleepWakeupEvent+0x54>)
 8005652:	f04f 0200 	mov.w	r2, #0
 8005656:	f04f 0300 	mov.w	r3, #0
 800565a:	e9c1 2300 	strd	r2, r3, [r1]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SyncedWakeup), CFG_SEQ_Prio_0);
 800565e:	2100      	movs	r1, #0
 8005660:	2008      	movs	r0, #8
 8005662:	f00a fe57 	bl	8010314 <UTIL_SEQ_SetTask>
	}
}
 8005666:	bf00      	nop
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bdb0      	pop	{r4, r5, r7, pc}
 800566e:	bf00      	nop
 8005670:	200009d8 	.word	0x200009d8
 8005674:	20000918 	.word	0x20000918
 8005678:	20000010 	.word	0x20000010

0800567c <digits_only>:


/*Helper*/
int digits_only(const char *s)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
    while (*s) {
 8005684:	e00d      	b.n	80056a2 <digits_only+0x26>
        if (isdigit((unsigned char)*s++) == 0) return 0;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	3301      	adds	r3, #1
 8005690:	4a09      	ldr	r2, [pc, #36]	; (80056b8 <digits_only+0x3c>)
 8005692:	4413      	add	r3, r2
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <digits_only+0x26>
 800569e:	2300      	movs	r3, #0
 80056a0:	e004      	b.n	80056ac <digits_only+0x30>
    while (*s) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1ed      	bne.n	8005686 <digits_only+0xa>
    }

    return 1;
 80056aa:	2301      	movs	r3, #1
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	080158a4 	.word	0x080158a4

080056bc <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 80056c0:	f000 f83e 	bl	8005740 <BSP_RADIO_Init>
 80056c4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	bd80      	pop	{r7, pc}

080056ca <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	4603      	mov	r3, r0
 80056d2:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f866 	bl	80057a8 <BSP_RADIO_ConfigRFSwitch>
 80056dc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 80056ea:	f000 f8ab 	bl	8005844 <BSP_RADIO_GetTxConfig>
 80056ee:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80056f8:	f000 f8ab 	bl	8005852 <BSP_RADIO_IsTCXO>
 80056fc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80056fe:	4618      	mov	r0, r3
 8005700:	bd80      	pop	{r7, pc}

08005702 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 8005706:	f000 f8ab 	bl	8005860 <BSP_RADIO_IsDCDC>
 800570a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}

08005710 <LL_AHB2_GRP1_EnableClock>:
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800571e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4313      	orrs	r3, r2
 8005726:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005734:	68fb      	ldr	r3, [r7, #12]
}
 8005736:	bf00      	nop
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	60da      	str	r2, [r3, #12]
 8005752:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 8005754:	2001      	movs	r0, #1
 8005756:	f7ff ffdb 	bl	8005710 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800575a:	2310      	movs	r3, #16
 800575c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800575e:	2301      	movs	r3, #1
 8005760:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005766:	2303      	movs	r3, #3
 8005768:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800576a:	1d3b      	adds	r3, r7, #4
 800576c:	4619      	mov	r1, r3
 800576e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005772:	f001 fddb 	bl	800732c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8005776:	2320      	movs	r3, #32
 8005778:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800577a:	1d3b      	adds	r3, r7, #4
 800577c:	4619      	mov	r1, r3
 800577e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005782:	f001 fdd3 	bl	800732c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8005786:	2200      	movs	r2, #0
 8005788:	2120      	movs	r1, #32
 800578a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800578e:	f002 f812 	bl	80077b6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8005792:	2200      	movs	r2, #0
 8005794:	2110      	movs	r1, #16
 8005796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800579a:	f002 f80c 	bl	80077b6 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d83f      	bhi.n	8005838 <BSP_RADIO_ConfigRFSwitch+0x90>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057eb 	.word	0x080057eb
 80057c8:	08005805 	.word	0x08005805
 80057cc:	0800581f 	.word	0x0800581f
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80057d0:	2200      	movs	r2, #0
 80057d2:	2110      	movs	r1, #16
 80057d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057d8:	f001 ffed 	bl	80077b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80057dc:	2200      	movs	r2, #0
 80057de:	2120      	movs	r1, #32
 80057e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057e4:	f001 ffe7 	bl	80077b6 <HAL_GPIO_WritePin>
      break;      
 80057e8:	e027      	b.n	800583a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80057ea:	2201      	movs	r2, #1
 80057ec:	2110      	movs	r1, #16
 80057ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057f2:	f001 ffe0 	bl	80077b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80057f6:	2200      	movs	r2, #0
 80057f8:	2120      	movs	r1, #32
 80057fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057fe:	f001 ffda 	bl	80077b6 <HAL_GPIO_WritePin>
      break;
 8005802:	e01a      	b.n	800583a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8005804:	2201      	movs	r2, #1
 8005806:	2110      	movs	r1, #16
 8005808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800580c:	f001 ffd3 	bl	80077b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8005810:	2201      	movs	r2, #1
 8005812:	2120      	movs	r1, #32
 8005814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005818:	f001 ffcd 	bl	80077b6 <HAL_GPIO_WritePin>
      break;
 800581c:	e00d      	b.n	800583a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800581e:	2200      	movs	r2, #0
 8005820:	2110      	movs	r1, #16
 8005822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005826:	f001 ffc6 	bl	80077b6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800582a:	2201      	movs	r2, #1
 800582c:	2120      	movs	r1, #32
 800582e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005832:	f001 ffc0 	bl	80077b6 <HAL_GPIO_WritePin>
      break;
 8005836:	e000      	b.n	800583a <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8005838:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8005848:	2302      	movs	r3, #2
}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8005856:	2301      	movs	r3, #1
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	bc80      	pop	{r7}
 800585e:	4770      	bx	lr

08005860 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8005864:	2301      	movs	r3, #1
}
 8005866:	4618      	mov	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr

0800586e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8005872:	bf00      	nop
 8005874:	46bd      	mov	sp, r7
 8005876:	bc80      	pop	{r7}
 8005878:	4770      	bx	lr
	...

0800587c <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	4a03      	ldr	r2, [pc, #12]	; (8005894 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	6053      	str	r3, [r2, #4]
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr
 8005894:	e0042000 	.word	0xe0042000

08005898 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800589c:	4b04      	ldr	r3, [pc, #16]	; (80058b0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a03      	ldr	r2, [pc, #12]	; (80058b0 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 80058a2:	f023 0302 	bic.w	r3, r3, #2
 80058a6:	6053      	str	r3, [r2, #4]
}
 80058a8:	bf00      	nop
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bc80      	pop	{r7}
 80058ae:	4770      	bx	lr
 80058b0:	e0042000 	.word	0xe0042000

080058b4 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80058b8:	4b04      	ldr	r3, [pc, #16]	; (80058cc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4a03      	ldr	r2, [pc, #12]	; (80058cc <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80058be:	f023 0304 	bic.w	r3, r3, #4
 80058c2:	6053      	str	r3, [r2, #4]
}
 80058c4:	bf00      	nop
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	e0042000 	.word	0xe0042000

080058d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058da:	2003      	movs	r0, #3
 80058dc:	f000 fec8 	bl	8006670 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058e0:	f003 f85e 	bl	80089a0 <HAL_RCC_GetHCLKFreq>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4a09      	ldr	r2, [pc, #36]	; (800590c <HAL_Init+0x3c>)
 80058e8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058ea:	200f      	movs	r0, #15
 80058ec:	f7fc feba 	bl	8002664 <HAL_InitTick>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	71fb      	strb	r3, [r7, #7]
 80058fa:	e001      	b.n	8005900 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058fc:	f7fc fd55 	bl	80023aa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005900:	79fb      	ldrb	r3, [r7, #7]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000040 	.word	0x20000040

08005910 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005914:	4b04      	ldr	r3, [pc, #16]	; (8005928 <HAL_SuspendTick+0x18>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a03      	ldr	r2, [pc, #12]	; (8005928 <HAL_SuspendTick+0x18>)
 800591a:	f023 0302 	bic.w	r3, r3, #2
 800591e:	6013      	str	r3, [r2, #0]
}
 8005920:	bf00      	nop
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr
 8005928:	e000e010 	.word	0xe000e010

0800592c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005930:	4b04      	ldr	r3, [pc, #16]	; (8005944 <HAL_ResumeTick+0x18>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a03      	ldr	r2, [pc, #12]	; (8005944 <HAL_ResumeTick+0x18>)
 8005936:	f043 0302 	orr.w	r3, r3, #2
 800593a:	6013      	str	r3, [r2, #0]
}
 800593c:	bf00      	nop
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	e000e010 	.word	0xe000e010

08005948 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 800594c:	f7ff ff96 	bl	800587c <LL_DBGMCU_DisableDBGSleepMode>
}
 8005950:	bf00      	nop
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8005958:	f7ff ff9e 	bl	8005898 <LL_DBGMCU_DisableDBGStopMode>
}
 800595c:	bf00      	nop
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8005964:	f7ff ffa6 	bl	80058b4 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8005968:	bf00      	nop
 800596a:	bd80      	pop	{r7, pc}

0800596c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	431a      	orrs	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr

08005990 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	60f8      	str	r0, [r7, #12]
 80059b2:	60b9      	str	r1, [r7, #8]
 80059b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2107      	movs	r1, #7
 80059c2:	fa01 f303 	lsl.w	r3, r1, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	401a      	ands	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	431a      	orrs	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2107      	movs	r1, #7
 80059fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005a00:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	60f8      	str	r0, [r7, #12]
 8005a42:	60b9      	str	r1, [r7, #8]
 8005a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f003 031f 	and.w	r3, r3, #31
 8005a50:	210f      	movs	r1, #15
 8005a52:	fa01 f303 	lsl.w	r3, r1, r3
 8005a56:	43db      	mvns	r3, r3
 8005a58:	401a      	ands	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	0e9b      	lsrs	r3, r3, #26
 8005a5e:	f003 010f 	and.w	r1, r3, #15
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a72:	bf00      	nop
 8005a74:	3714      	adds	r7, #20
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bc80      	pop	{r7}
 8005a9e:	4770      	bx	lr

08005aa0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bc80      	pop	{r7}
 8005ac4:	4770      	bx	lr

08005ac6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b085      	sub	sp, #20
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	43db      	mvns	r3, r3
 8005adc:	401a      	ands	r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	0219      	lsls	r1, r3, #8
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005af4:	bf00      	nop
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b0e:	f023 0317 	bic.w	r3, r3, #23
 8005b12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b38:	d101      	bne.n	8005b3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e000      	b.n	8005b40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr

08005b4a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b5a:	f023 0317 	bic.w	r3, r3, #23
 8005b5e:	f043 0201 	orr.w	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr

08005b70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <LL_ADC_IsEnabled+0x18>
 8005b84:	2301      	movs	r3, #1
 8005b86:	e000      	b.n	8005b8a <LL_ADC_IsEnabled+0x1a>
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ba4:	f023 0317 	bic.w	r3, r3, #23
 8005ba8:	f043 0204 	orr.w	r2, r3, #4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bc80      	pop	{r7}
 8005bb8:	4770      	bx	lr

08005bba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d101      	bne.n	8005bd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bc80      	pop	{r7}
 8005bdc:	4770      	bx	lr
	...

08005be0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b088      	sub	sp, #32
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e19e      	b.n	8005f40 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fb fd1d 	bl	8001650 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff ff7b 	bl	8005b24 <LL_ADC_IsInternalRegulatorEnabled>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d115      	bne.n	8005c60 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff ff60 	bl	8005afe <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c3e:	4b99      	ldr	r3, [pc, #612]	; (8005ea4 <HAL_ADC_Init+0x2c4>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	099b      	lsrs	r3, r3, #6
 8005c44:	4a98      	ldr	r2, [pc, #608]	; (8005ea8 <HAL_ADC_Init+0x2c8>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	099b      	lsrs	r3, r3, #6
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c52:	e002      	b.n	8005c5a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f9      	bne.n	8005c54 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ff5d 	bl	8005b24 <LL_ADC_IsInternalRegulatorEnabled>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10d      	bne.n	8005c8c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	f043 0210 	orr.w	r2, r3, #16
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c80:	f043 0201 	orr.w	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ff92 	bl	8005bba <LL_ADC_REG_IsConversionOngoing>
 8005c96:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f040 8144 	bne.w	8005f2e <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 8140 	bne.w	8005f2e <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005cb6:	f043 0202 	orr.w	r2, r3, #2
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7ff ff54 	bl	8005b70 <LL_ADC_IsEnabled>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f040 80a7 	bne.w	8005e1e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	7e1b      	ldrb	r3, [r3, #24]
 8005cd8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005cda:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	7e5b      	ldrb	r3, [r3, #25]
 8005ce0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005ce2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	7e9b      	ldrb	r3, [r3, #26]
 8005ce8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005cea:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_ADC_Init+0x11a>
 8005cf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cf8:	e000      	b.n	8005cfc <HAL_ADC_Init+0x11c>
 8005cfa:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005cfc:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005d02:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da04      	bge.n	8005d16 <HAL_ADC_Init+0x136>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d14:	e001      	b.n	8005d1a <HAL_ADC_Init+0x13a>
 8005d16:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8005d1a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d22:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005d24:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d114      	bne.n	8005d60 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	7e9b      	ldrb	r3, [r3, #26]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e00b      	b.n	8005d60 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	f043 0220 	orr.w	r2, r3, #32
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d58:	f043 0201 	orr.w	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005d74:	4313      	orrs	r3, r2
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8005d86:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	69b9      	ldr	r1, [r7, #24]
 8005d90:	430b      	orrs	r3, r1
 8005d92:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005da0:	4313      	orrs	r3, r2
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d111      	bne.n	8005dd6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005dbe:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005dc4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005dca:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	4b33      	ldr	r3, [pc, #204]	; (8005eac <HAL_ADC_Init+0x2cc>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	6979      	ldr	r1, [r7, #20]
 8005de6:	430b      	orrs	r3, r1
 8005de8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005df2:	d014      	beq.n	8005e1e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfc:	d00f      	beq.n	8005e1e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e06:	d00a      	beq.n	8005e1e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8005e08:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <HAL_ADC_Init+0x2d0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005e18:	4925      	ldr	r1, [pc, #148]	; (8005eb0 <HAL_ADC_Init+0x2d0>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6818      	ldr	r0, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e26:	461a      	mov	r2, r3
 8005e28:	2100      	movs	r1, #0
 8005e2a:	f7ff fdbe 	bl	80059aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	461a      	mov	r2, r3
 8005e38:	491e      	ldr	r1, [pc, #120]	; (8005eb4 <HAL_ADC_Init+0x2d4>)
 8005e3a:	f7ff fdb6 	bl	80059aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d108      	bne.n	8005e58 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f062 020f 	orn	r2, r2, #15
 8005e54:	629a      	str	r2, [r3, #40]	; 0x28
 8005e56:	e042      	b.n	8005ede <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e60:	d13d      	bne.n	8005ede <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005e62:	2300      	movs	r3, #0
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	e00c      	b.n	8005e82 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	2b0f      	cmp	r3, #15
 8005e7a:	d006      	beq.n	8005e8a <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b07      	cmp	r3, #7
 8005e86:	d9ef      	bls.n	8005e68 <HAL_ADC_Init+0x288>
 8005e88:	e000      	b.n	8005e8c <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8005e8a:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d112      	bne.n	8005eb8 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f062 020f 	orn	r2, r2, #15
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
 8005ea2:	e01c      	b.n	8005ede <HAL_ADC_Init+0x2fe>
 8005ea4:	20000040 	.word	0x20000040
 8005ea8:	053e2d63 	.word	0x053e2d63
 8005eac:	1ffffc02 	.word	0x1ffffc02
 8005eb0:	40012708 	.word	0x40012708
 8005eb4:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	f003 031c 	and.w	r3, r3, #28
 8005eca:	f06f 020f 	mvn.w	r2, #15
 8005ece:	fa02 f103 	lsl.w	r1, r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff fd7e 	bl	80059e6 <LL_ADC_GetSamplingTimeCommonChannels>
 8005eea:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d10b      	bne.n	8005f0c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efe:	f023 0303 	bic.w	r3, r3, #3
 8005f02:	f043 0201 	orr.w	r2, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f0a:	e018      	b.n	8005f3e <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f10:	f023 0312 	bic.w	r3, r3, #18
 8005f14:	f043 0210 	orr.w	r2, r3, #16
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f20:	f043 0201 	orr.w	r2, r3, #1
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f2c:	e007      	b.n	8005f3e <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	f043 0210 	orr.w	r2, r3, #16
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8005f3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3720      	adds	r7, #32
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fe30 	bl	8005bba <LL_ADC_REG_IsConversionOngoing>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d132      	bne.n	8005fc6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_ADC_Start+0x26>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e02e      	b.n	8005fcc <HAL_ADC_Start+0x84>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa08 	bl	800638c <ADC_Enable>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d11a      	bne.n	8005fbc <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f8e:	f023 0301 	bic.w	r3, r3, #1
 8005f92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	221c      	movs	r2, #28
 8005fa6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fded 	bl	8005b94 <LL_ADC_REG_StartConversion>
 8005fba:	e006      	b.n	8005fca <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005fc4:	e001      	b.n	8005fca <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d102      	bne.n	8005fec <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8005fe6:	2308      	movs	r3, #8
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e010      	b.n	800600e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d007      	beq.n	800600a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffe:	f043 0220 	orr.w	r2, r3, #32
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e077      	b.n	80060fa <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800600a:	2304      	movs	r3, #4
 800600c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800600e:	f7fc fb33 	bl	8002678 <HAL_GetTick>
 8006012:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006014:	e021      	b.n	800605a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d01d      	beq.n	800605a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800601e:	f7fc fb2b 	bl	8002678 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <HAL_ADC_PollForConversion+0x60>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d112      	bne.n	800605a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4013      	ands	r3, r2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10b      	bne.n	800605a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006046:	f043 0204 	orr.w	r2, r3, #4
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e04f      	b.n	80060fa <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4013      	ands	r3, r2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0d6      	beq.n	8006016 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fccc 	bl	8005a16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d031      	beq.n	80060e8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	7e9b      	ldrb	r3, [r3, #26]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d12d      	bne.n	80060e8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b08      	cmp	r3, #8
 8006098:	d126      	bne.n	80060e8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fd8b 	bl	8005bba <LL_ADC_REG_IsConversionOngoing>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d112      	bne.n	80060d0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 020c 	bic.w	r2, r2, #12
 80060b8:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	f043 0201 	orr.w	r2, r3, #1
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	659a      	str	r2, [r3, #88]	; 0x58
 80060ce:	e00b      	b.n	80060e8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e0:	f043 0201 	orr.w	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	7e1b      	ldrb	r3, [r3, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	220c      	movs	r2, #12
 80060f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}

08006102 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr
	...

0800611c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x28>
 8006140:	2302      	movs	r3, #2
 8006142:	e110      	b.n	8006366 <HAL_ADC_ConfigChannel+0x24a>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fd32 	bl	8005bba <LL_ADC_REG_IsConversionOngoing>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	f040 80f7 	bne.w	800634c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2b02      	cmp	r3, #2
 8006164:	f000 80b1 	beq.w	80062ca <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006170:	d004      	beq.n	800617c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006176:	4a7e      	ldr	r2, [pc, #504]	; (8006370 <HAL_ADC_ConfigChannel+0x254>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d108      	bne.n	800618e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4619      	mov	r1, r3
 8006186:	4610      	mov	r0, r2
 8006188:	f7ff fc78 	bl	8005a7c <LL_ADC_REG_SetSequencerChAdd>
 800618c:	e041      	b.n	8006212 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f003 031f 	and.w	r3, r3, #31
 800619a:	210f      	movs	r1, #15
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <HAL_ADC_ConfigChannel+0xa0>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	0e9b      	lsrs	r3, r3, #26
 80061b6:	f003 031f 	and.w	r3, r3, #31
 80061ba:	e011      	b.n	80061e0 <HAL_ADC_ConfigChannel+0xc4>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	fa93 f3a3 	rbit	r3, r3
 80061c8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80061d4:	2320      	movs	r3, #32
 80061d6:	e003      	b.n	80061e0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	fab3 f383 	clz	r3, r3
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	6839      	ldr	r1, [r7, #0]
 80061e2:	6849      	ldr	r1, [r1, #4]
 80061e4:	f001 011f 	and.w	r1, r1, #31
 80061e8:	408b      	lsls	r3, r1
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	089b      	lsrs	r3, r3, #2
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d808      	bhi.n	8006212 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	6859      	ldr	r1, [r3, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	461a      	mov	r2, r3
 800620e:	f7ff fc14 	bl	8005a3a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6819      	ldr	r1, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	461a      	mov	r2, r3
 8006220:	f7ff fc51 	bl	8005ac6 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f280 8097 	bge.w	800635c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800622e:	4851      	ldr	r0, [pc, #324]	; (8006374 <HAL_ADC_ConfigChannel+0x258>)
 8006230:	f7ff fbae 	bl	8005990 <LL_ADC_GetCommonPathInternalCh>
 8006234:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a4f      	ldr	r2, [pc, #316]	; (8006378 <HAL_ADC_ConfigChannel+0x25c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d120      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006246:	2b00      	cmp	r3, #0
 8006248:	d11b      	bne.n	8006282 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006250:	4619      	mov	r1, r3
 8006252:	4848      	ldr	r0, [pc, #288]	; (8006374 <HAL_ADC_ConfigChannel+0x258>)
 8006254:	f7ff fb8a 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006258:	4b48      	ldr	r3, [pc, #288]	; (800637c <HAL_ADC_ConfigChannel+0x260>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	099b      	lsrs	r3, r3, #6
 800625e:	4a48      	ldr	r2, [pc, #288]	; (8006380 <HAL_ADC_ConfigChannel+0x264>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	099b      	lsrs	r3, r3, #6
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	4613      	mov	r3, r2
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4413      	add	r3, r2
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006272:	e002      	b.n	800627a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	3b01      	subs	r3, #1
 8006278:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f9      	bne.n	8006274 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006280:	e06c      	b.n	800635c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a3f      	ldr	r2, [pc, #252]	; (8006384 <HAL_ADC_ConfigChannel+0x268>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d10c      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x18a>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800629c:	4619      	mov	r1, r3
 800629e:	4835      	ldr	r0, [pc, #212]	; (8006374 <HAL_ADC_ConfigChannel+0x258>)
 80062a0:	f7ff fb64 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 80062a4:	e05a      	b.n	800635c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a37      	ldr	r2, [pc, #220]	; (8006388 <HAL_ADC_ConfigChannel+0x26c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d155      	bne.n	800635c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d150      	bne.n	800635c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062c0:	4619      	mov	r1, r3
 80062c2:	482c      	ldr	r0, [pc, #176]	; (8006374 <HAL_ADC_ConfigChannel+0x258>)
 80062c4:	f7ff fb52 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 80062c8:	e048      	b.n	800635c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062d2:	d004      	beq.n	80062de <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062d8:	4a25      	ldr	r2, [pc, #148]	; (8006370 <HAL_ADC_ConfigChannel+0x254>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d107      	bne.n	80062ee <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f7ff fbd9 	bl	8005aa0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da32      	bge.n	800635c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062f6:	481f      	ldr	r0, [pc, #124]	; (8006374 <HAL_ADC_ConfigChannel+0x258>)
 80062f8:	f7ff fb4a 	bl	8005990 <LL_ADC_GetCommonPathInternalCh>
 80062fc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <HAL_ADC_ConfigChannel+0x25c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d107      	bne.n	8006318 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800630e:	4619      	mov	r1, r3
 8006310:	4818      	ldr	r0, [pc, #96]	; (8006374 <HAL_ADC_ConfigChannel+0x258>)
 8006312:	f7ff fb2b 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 8006316:	e021      	b.n	800635c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a19      	ldr	r2, [pc, #100]	; (8006384 <HAL_ADC_ConfigChannel+0x268>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d107      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006328:	4619      	mov	r1, r3
 800632a:	4812      	ldr	r0, [pc, #72]	; (8006374 <HAL_ADC_ConfigChannel+0x258>)
 800632c:	f7ff fb1e 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 8006330:	e014      	b.n	800635c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <HAL_ADC_ConfigChannel+0x26c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d10f      	bne.n	800635c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006342:	4619      	mov	r1, r3
 8006344:	480b      	ldr	r0, [pc, #44]	; (8006374 <HAL_ADC_ConfigChannel+0x258>)
 8006346:	f7ff fb11 	bl	800596c <LL_ADC_SetCommonPathInternalCh>
 800634a:	e007      	b.n	800635c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006350:	f043 0220 	orr.w	r2, r3, #32
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006364:	7ffb      	ldrb	r3, [r7, #31]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	80000004 	.word	0x80000004
 8006374:	40012708 	.word	0x40012708
 8006378:	b0001000 	.word	0xb0001000
 800637c:	20000040 	.word	0x20000040
 8006380:	053e2d63 	.word	0x053e2d63
 8006384:	b8004000 	.word	0xb8004000
 8006388:	b4002000 	.word	0xb4002000

0800638c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006394:	2300      	movs	r3, #0
 8006396:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4618      	mov	r0, r3
 800639e:	f7ff fbe7 	bl	8005b70 <LL_ADC_IsEnabled>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d169      	bne.n	800647c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	4b36      	ldr	r3, [pc, #216]	; (8006488 <ADC_Enable+0xfc>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00d      	beq.n	80063d2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ba:	f043 0210 	orr.w	r2, r3, #16
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c6:	f043 0201 	orr.w	r2, r3, #1
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e055      	b.n	800647e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7ff fbb7 	bl	8005b4a <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80063dc:	482b      	ldr	r0, [pc, #172]	; (800648c <ADC_Enable+0x100>)
 80063de:	f7ff fad7 	bl	8005990 <LL_ADC_GetCommonPathInternalCh>
 80063e2:	4603      	mov	r3, r0
 80063e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00f      	beq.n	800640c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063ec:	4b28      	ldr	r3, [pc, #160]	; (8006490 <ADC_Enable+0x104>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	099b      	lsrs	r3, r3, #6
 80063f2:	4a28      	ldr	r2, [pc, #160]	; (8006494 <ADC_Enable+0x108>)
 80063f4:	fba2 2303 	umull	r2, r3, r2, r3
 80063f8:	099b      	lsrs	r3, r3, #6
 80063fa:	3301      	adds	r3, #1
 80063fc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80063fe:	e002      	b.n	8006406 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	3b01      	subs	r3, #1
 8006404:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f9      	bne.n	8006400 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7e5b      	ldrb	r3, [r3, #25]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d033      	beq.n	800647c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006414:	f7fc f930 	bl	8002678 <HAL_GetTick>
 8006418:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800641a:	e028      	b.n	800646e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f7ff fba5 	bl	8005b70 <LL_ADC_IsEnabled>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d104      	bne.n	8006436 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fb8a 	bl	8005b4a <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006436:	f7fc f91f 	bl	8002678 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d914      	bls.n	800646e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b01      	cmp	r3, #1
 8006450:	d00d      	beq.n	800646e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006456:	f043 0210 	orr.w	r2, r3, #16
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006462:	f043 0201 	orr.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e007      	b.n	800647e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	d1cf      	bne.n	800641c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	80000017 	.word	0x80000017
 800648c:	40012708 	.word	0x40012708
 8006490:	20000040 	.word	0x20000040
 8006494:	053e2d63 	.word	0x053e2d63

08006498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f003 0307 	and.w	r3, r3, #7
 80064a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064a8:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <__NVIC_SetPriorityGrouping+0x44>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064b4:	4013      	ands	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064ca:	4a04      	ldr	r2, [pc, #16]	; (80064dc <__NVIC_SetPriorityGrouping+0x44>)
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	60d3      	str	r3, [r2, #12]
}
 80064d0:	bf00      	nop
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	e000ed00 	.word	0xe000ed00

080064e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064e4:	4b04      	ldr	r3, [pc, #16]	; (80064f8 <__NVIC_GetPriorityGrouping+0x18>)
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	0a1b      	lsrs	r3, r3, #8
 80064ea:	f003 0307 	and.w	r3, r3, #7
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	e000ed00 	.word	0xe000ed00

080064fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650a:	2b00      	cmp	r3, #0
 800650c:	db0b      	blt.n	8006526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	f003 021f 	and.w	r2, r3, #31
 8006514:	4906      	ldr	r1, [pc, #24]	; (8006530 <__NVIC_EnableIRQ+0x34>)
 8006516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	2001      	movs	r0, #1
 800651e:	fa00 f202 	lsl.w	r2, r0, r2
 8006522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr
 8006530:	e000e100 	.word	0xe000e100

08006534 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800653e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006542:	2b00      	cmp	r3, #0
 8006544:	db12      	blt.n	800656c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	f003 021f 	and.w	r2, r3, #31
 800654c:	490a      	ldr	r1, [pc, #40]	; (8006578 <__NVIC_DisableIRQ+0x44>)
 800654e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	2001      	movs	r0, #1
 8006556:	fa00 f202 	lsl.w	r2, r0, r2
 800655a:	3320      	adds	r3, #32
 800655c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006560:	f3bf 8f4f 	dsb	sy
}
 8006564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006566:	f3bf 8f6f 	isb	sy
}
 800656a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	bc80      	pop	{r7}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	e000e100 	.word	0xe000e100

0800657c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658a:	2b00      	cmp	r3, #0
 800658c:	db0c      	blt.n	80065a8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	f003 021f 	and.w	r2, r3, #31
 8006594:	4907      	ldr	r1, [pc, #28]	; (80065b4 <__NVIC_ClearPendingIRQ+0x38>)
 8006596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	2001      	movs	r0, #1
 800659e:	fa00 f202 	lsl.w	r2, r0, r2
 80065a2:	3360      	adds	r3, #96	; 0x60
 80065a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	e000e100 	.word	0xe000e100

080065b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	4603      	mov	r3, r0
 80065c0:	6039      	str	r1, [r7, #0]
 80065c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	db0a      	blt.n	80065e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	490c      	ldr	r1, [pc, #48]	; (8006604 <__NVIC_SetPriority+0x4c>)
 80065d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d6:	0112      	lsls	r2, r2, #4
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	440b      	add	r3, r1
 80065dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065e0:	e00a      	b.n	80065f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	4908      	ldr	r1, [pc, #32]	; (8006608 <__NVIC_SetPriority+0x50>)
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	3b04      	subs	r3, #4
 80065f0:	0112      	lsls	r2, r2, #4
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	440b      	add	r3, r1
 80065f6:	761a      	strb	r2, [r3, #24]
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bc80      	pop	{r7}
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	e000e100 	.word	0xe000e100
 8006608:	e000ed00 	.word	0xe000ed00

0800660c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800660c:	b480      	push	{r7}
 800660e:	b089      	sub	sp, #36	; 0x24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f1c3 0307 	rsb	r3, r3, #7
 8006626:	2b04      	cmp	r3, #4
 8006628:	bf28      	it	cs
 800662a:	2304      	movcs	r3, #4
 800662c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	3304      	adds	r3, #4
 8006632:	2b06      	cmp	r3, #6
 8006634:	d902      	bls.n	800663c <NVIC_EncodePriority+0x30>
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	3b03      	subs	r3, #3
 800663a:	e000      	b.n	800663e <NVIC_EncodePriority+0x32>
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006640:	f04f 32ff 	mov.w	r2, #4294967295
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	43da      	mvns	r2, r3
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	401a      	ands	r2, r3
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006654:	f04f 31ff 	mov.w	r1, #4294967295
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	fa01 f303 	lsl.w	r3, r1, r3
 800665e:	43d9      	mvns	r1, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006664:	4313      	orrs	r3, r2
         );
}
 8006666:	4618      	mov	r0, r3
 8006668:	3724      	adds	r7, #36	; 0x24
 800666a:	46bd      	mov	sp, r7
 800666c:	bc80      	pop	{r7}
 800666e:	4770      	bx	lr

08006670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b082      	sub	sp, #8
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff ff0d 	bl	8006498 <__NVIC_SetPriorityGrouping>
}
 800667e:	bf00      	nop
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b086      	sub	sp, #24
 800668a:	af00      	add	r7, sp, #0
 800668c:	4603      	mov	r3, r0
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006694:	f7ff ff24 	bl	80064e0 <__NVIC_GetPriorityGrouping>
 8006698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	6978      	ldr	r0, [r7, #20]
 80066a0:	f7ff ffb4 	bl	800660c <NVIC_EncodePriority>
 80066a4:	4602      	mov	r2, r0
 80066a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff ff83 	bl	80065b8 <__NVIC_SetPriority>
}
 80066b2:	bf00      	nop
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	4603      	mov	r3, r0
 80066c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff ff17 	bl	80064fc <__NVIC_EnableIRQ>
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	4603      	mov	r3, r0
 80066de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80066e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff ff25 	bl	8006534 <__NVIC_DisableIRQ>
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	4603      	mov	r3, r0
 80066fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80066fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff ff3b 	bl	800657c <__NVIC_ClearPendingIRQ>
}
 8006706:	bf00      	nop
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e08e      	b.n	8006840 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	4b47      	ldr	r3, [pc, #284]	; (8006848 <HAL_DMA_Init+0x138>)
 800672a:	429a      	cmp	r2, r3
 800672c:	d80f      	bhi.n	800674e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	4b45      	ldr	r3, [pc, #276]	; (800684c <HAL_DMA_Init+0x13c>)
 8006736:	4413      	add	r3, r2
 8006738:	4a45      	ldr	r2, [pc, #276]	; (8006850 <HAL_DMA_Init+0x140>)
 800673a:	fba2 2303 	umull	r2, r3, r2, r3
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	009a      	lsls	r2, r3, #2
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a42      	ldr	r2, [pc, #264]	; (8006854 <HAL_DMA_Init+0x144>)
 800674a:	641a      	str	r2, [r3, #64]	; 0x40
 800674c:	e00e      	b.n	800676c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	461a      	mov	r2, r3
 8006754:	4b40      	ldr	r3, [pc, #256]	; (8006858 <HAL_DMA_Init+0x148>)
 8006756:	4413      	add	r3, r2
 8006758:	4a3d      	ldr	r2, [pc, #244]	; (8006850 <HAL_DMA_Init+0x140>)
 800675a:	fba2 2303 	umull	r2, r3, r2, r3
 800675e:	091b      	lsrs	r3, r3, #4
 8006760:	009a      	lsls	r2, r3, #2
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a3c      	ldr	r2, [pc, #240]	; (800685c <HAL_DMA_Init+0x14c>)
 800676a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6819      	ldr	r1, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fb2e 	bl	8006e20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067cc:	d102      	bne.n	80067d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <HAL_DMA_Init+0x106>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	2b04      	cmp	r3, #4
 80067fa:	d80c      	bhi.n	8006816 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fb57 	bl	8006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006812:	605a      	str	r2, [r3, #4]
 8006814:	e008      	b.n	8006828 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40020407 	.word	0x40020407
 800684c:	bffdfff8 	.word	0xbffdfff8
 8006850:	cccccccd 	.word	0xcccccccd
 8006854:	40020000 	.word	0x40020000
 8006858:	bffdfbf8 	.word	0xbffdfbf8
 800685c:	40020400 	.word	0x40020400

08006860 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e07b      	b.n	800696a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	4b3a      	ldr	r3, [pc, #232]	; (8006974 <HAL_DMA_DeInit+0x114>)
 800688a:	429a      	cmp	r2, r3
 800688c:	d80f      	bhi.n	80068ae <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	4b38      	ldr	r3, [pc, #224]	; (8006978 <HAL_DMA_DeInit+0x118>)
 8006896:	4413      	add	r3, r2
 8006898:	4a38      	ldr	r2, [pc, #224]	; (800697c <HAL_DMA_DeInit+0x11c>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	009a      	lsls	r2, r3, #2
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a35      	ldr	r2, [pc, #212]	; (8006980 <HAL_DMA_DeInit+0x120>)
 80068aa:	641a      	str	r2, [r3, #64]	; 0x40
 80068ac:	e00e      	b.n	80068cc <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	4b33      	ldr	r3, [pc, #204]	; (8006984 <HAL_DMA_DeInit+0x124>)
 80068b6:	4413      	add	r3, r2
 80068b8:	4a30      	ldr	r2, [pc, #192]	; (800697c <HAL_DMA_DeInit+0x11c>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	009a      	lsls	r2, r3, #2
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2f      	ldr	r2, [pc, #188]	; (8006988 <HAL_DMA_DeInit+0x128>)
 80068ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d8:	f003 021c 	and.w	r2, r3, #28
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	2101      	movs	r1, #1
 80068e2:	fa01 f202 	lsl.w	r2, r1, r2
 80068e6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fa99 	bl	8006e20 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80068fe:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00f      	beq.n	8006928 <HAL_DMA_DeInit+0xc8>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b04      	cmp	r3, #4
 800690e:	d80b      	bhi.n	8006928 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 facd 	bl	8006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006926:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	40020407 	.word	0x40020407
 8006978:	bffdfff8 	.word	0xbffdfff8
 800697c:	cccccccd 	.word	0xcccccccd
 8006980:	40020000 	.word	0x40020000
 8006984:	bffdfbf8 	.word	0xbffdfbf8
 8006988:	40020400 	.word	0x40020400

0800698c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_DMA_Start_IT+0x20>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e069      	b.n	8006a80 <HAL_DMA_Start_IT+0xf4>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d155      	bne.n	8006a6c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0201 	bic.w	r2, r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f9de 	bl	8006da6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d008      	beq.n	8006a04 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f042 020e 	orr.w	r2, r2, #14
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e00f      	b.n	8006a24 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 0204 	bic.w	r2, r2, #4
 8006a12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 020a 	orr.w	r2, r2, #10
 8006a22:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d007      	beq.n	8006a42 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a40:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a58:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f042 0201 	orr.w	r2, r2, #1
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e008      	b.n	8006a7e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2280      	movs	r2, #128	; 0x80
 8006a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e04f      	b.n	8006b3a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d008      	beq.n	8006ab8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2204      	movs	r2, #4
 8006aaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e040      	b.n	8006b3a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f022 020e 	bic.w	r2, r2, #14
 8006ac6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ad6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0201 	bic.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aec:	f003 021c 	and.w	r2, r3, #28
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	2101      	movs	r1, #1
 8006af6:	fa01 f202 	lsl.w	r2, r1, r2
 8006afa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006b04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00c      	beq.n	8006b28 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr

08006b44 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d005      	beq.n	8006b68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	73fb      	strb	r3, [r7, #15]
 8006b66:	e047      	b.n	8006bf8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f022 020e 	bic.w	r2, r2, #14
 8006b76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b9c:	f003 021c 	and.w	r2, r3, #28
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	fa01 f202 	lsl.w	r2, r1, r2
 8006baa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006bb4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00c      	beq.n	8006bd8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bcc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006bd6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
    }
  }
  return status;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c20:	f003 031c 	and.w	r3, r3, #28
 8006c24:	2204      	movs	r2, #4
 8006c26:	409a      	lsls	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d027      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x7c>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f003 0304 	and.w	r3, r3, #4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d022      	beq.n	8006c80 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d107      	bne.n	8006c58 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0204 	bic.w	r2, r2, #4
 8006c56:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5c:	f003 021c 	and.w	r2, r3, #28
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	2104      	movs	r1, #4
 8006c66:	fa01 f202 	lsl.w	r2, r1, r2
 8006c6a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 8081 	beq.w	8006d78 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006c7e:	e07b      	b.n	8006d78 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c84:	f003 031c 	and.w	r3, r3, #28
 8006c88:	2202      	movs	r2, #2
 8006c8a:	409a      	lsls	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d03d      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x10c>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d038      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 020a 	bic.w	r2, r2, #10
 8006cba:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	4b2e      	ldr	r3, [pc, #184]	; (8006d84 <HAL_DMA_IRQHandler+0x180>)
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d909      	bls.n	8006ce4 <HAL_DMA_IRQHandler+0xe0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd4:	f003 031c 	and.w	r3, r3, #28
 8006cd8:	4a2b      	ldr	r2, [pc, #172]	; (8006d88 <HAL_DMA_IRQHandler+0x184>)
 8006cda:	2102      	movs	r1, #2
 8006cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce0:	6053      	str	r3, [r2, #4]
 8006ce2:	e008      	b.n	8006cf6 <HAL_DMA_IRQHandler+0xf2>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce8:	f003 031c 	and.w	r3, r3, #28
 8006cec:	4a27      	ldr	r2, [pc, #156]	; (8006d8c <HAL_DMA_IRQHandler+0x188>)
 8006cee:	2102      	movs	r1, #2
 8006cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d038      	beq.n	8006d78 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006d0e:	e033      	b.n	8006d78 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d14:	f003 031c 	and.w	r3, r3, #28
 8006d18:	2208      	movs	r2, #8
 8006d1a:	409a      	lsls	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d02a      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x176>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d025      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 020e 	bic.w	r2, r2, #14
 8006d3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	f003 021c 	and.w	r2, r3, #28
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
}
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40020080 	.word	0x40020080
 8006d88:	40020400 	.word	0x40020400
 8006d8c:	40020000 	.word	0x40020000

08006d90 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bc80      	pop	{r7}
 8006da4:	4770      	bx	lr

08006da6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006dbc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d004      	beq.n	8006dd0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006dce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd4:	f003 021c 	and.w	r2, r3, #28
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	2101      	movs	r1, #1
 8006dde:	fa01 f202 	lsl.w	r2, r1, r2
 8006de2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	2b10      	cmp	r3, #16
 8006df2:	d108      	bne.n	8006e06 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006e04:	e007      	b.n	8006e16 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	60da      	str	r2, [r3, #12]
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bc80      	pop	{r7}
 8006e1e:	4770      	bx	lr

08006e20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d813      	bhi.n	8006e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e38:	089b      	lsrs	r3, r3, #2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e40:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	3b08      	subs	r3, #8
 8006e50:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006e52:	fba2 2303 	umull	r2, r3, r2, r3
 8006e56:	091b      	lsrs	r3, r3, #4
 8006e58:	60fb      	str	r3, [r7, #12]
 8006e5a:	e011      	b.n	8006e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e60:	089b      	lsrs	r3, r3, #2
 8006e62:	009a      	lsls	r2, r3, #2
 8006e64:	4b10      	ldr	r3, [pc, #64]	; (8006ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006e66:	4413      	add	r3, r2
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	3b08      	subs	r3, #8
 8006e74:	4a0b      	ldr	r2, [pc, #44]	; (8006ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006e76:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7a:	091b      	lsrs	r3, r3, #4
 8006e7c:	3307      	adds	r3, #7
 8006e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8006e84:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f003 031f 	and.w	r3, r3, #31
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	409a      	lsls	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e94:	bf00      	nop
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bc80      	pop	{r7}
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40020407 	.word	0x40020407
 8006ea4:	cccccccd 	.word	0xcccccccd
 8006ea8:	4002081c 	.word	0x4002081c
 8006eac:	40020880 	.word	0x40020880

08006eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006ec6:	4413      	add	r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	461a      	mov	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006ed4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	2201      	movs	r2, #1
 8006ee0:	409a      	lsls	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006ee6:	bf00      	nop
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bc80      	pop	{r7}
 8006eee:	4770      	bx	lr
 8006ef0:	1000823f 	.word	0x1000823f
 8006ef4:	40020940 	.word	0x40020940

08006ef8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006f06:	4b1b      	ldr	r3, [pc, #108]	; (8006f74 <HAL_FLASH_Program+0x7c>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d101      	bne.n	8006f12 <HAL_FLASH_Program+0x1a>
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e02c      	b.n	8006f6c <HAL_FLASH_Program+0x74>
 8006f12:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <HAL_FLASH_Program+0x7c>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f18:	4b16      	ldr	r3, [pc, #88]	; (8006f74 <HAL_FLASH_Program+0x7c>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f22:	f000 f869 	bl	8006ff8 <FLASH_WaitForLastOperation>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d119      	bne.n	8006f64 <HAL_FLASH_Program+0x6c>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d105      	bne.n	8006f42 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006f36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f3a:	68b8      	ldr	r0, [r7, #8]
 8006f3c:	f000 f8be 	bl	80070bc <FLASH_Program_DoubleWord>
 8006f40:	e004      	b.n	8006f4c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	4619      	mov	r1, r3
 8006f46:	68b8      	ldr	r0, [r7, #8]
 8006f48:	f000 f8de 	bl	8007108 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(500000);
 8006f4c:	480a      	ldr	r0, [pc, #40]	; (8006f78 <HAL_FLASH_Program+0x80>)
 8006f4e:	f000 f853 	bl	8006ff8 <FLASH_WaitForLastOperation>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006f56:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <HAL_FLASH_Program+0x84>)
 8006f58:	695a      	ldr	r2, [r3, #20]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	4907      	ldr	r1, [pc, #28]	; (8006f7c <HAL_FLASH_Program+0x84>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006f64:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <HAL_FLASH_Program+0x7c>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20000a40 	.word	0x20000a40
 8006f78:	0007a120 	.word	0x0007a120
 8006f7c:	58004000 	.word	0x58004000

08006f80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <HAL_FLASH_Unlock+0x38>)
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	da0b      	bge.n	8006faa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006f92:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <HAL_FLASH_Unlock+0x38>)
 8006f94:	4a09      	ldr	r2, [pc, #36]	; (8006fbc <HAL_FLASH_Unlock+0x3c>)
 8006f96:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006f98:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <HAL_FLASH_Unlock+0x38>)
 8006f9a:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <HAL_FLASH_Unlock+0x40>)
 8006f9c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006f9e:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <HAL_FLASH_Unlock+0x38>)
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	da01      	bge.n	8006faa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006faa:	79fb      	ldrb	r3, [r7, #7]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bc80      	pop	{r7}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	58004000 	.word	0x58004000
 8006fbc:	45670123 	.word	0x45670123
 8006fc0:	cdef89ab 	.word	0xcdef89ab

08006fc4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006fce:	4b09      	ldr	r3, [pc, #36]	; (8006ff4 <HAL_FLASH_Lock+0x30>)
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	4a08      	ldr	r2, [pc, #32]	; (8006ff4 <HAL_FLASH_Lock+0x30>)
 8006fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fd8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_FLASH_Lock+0x30>)
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	db01      	blt.n	8006fe6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bc80      	pop	{r7}
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	58004000 	.word	0x58004000

08006ff8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8007000:	f7fb fb3a 	bl	8002678 <HAL_GetTick>
 8007004:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007006:	e009      	b.n	800701c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8007008:	f7fb fb36 	bl	8002678 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	d801      	bhi.n	800701c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e047      	b.n	80070ac <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800701c:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <FLASH_WaitForLastOperation+0xbc>)
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007028:	d0ee      	beq.n	8007008 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800702a:	4b22      	ldr	r3, [pc, #136]	; (80070b4 <FLASH_WaitForLastOperation+0xbc>)
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800703a:	4b1e      	ldr	r3, [pc, #120]	; (80070b4 <FLASH_WaitForLastOperation+0xbc>)
 800703c:	2201      	movs	r2, #1
 800703e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8007046:	4013      	ands	r3, r2
 8007048:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d007      	beq.n	8007064 <FLASH_WaitForLastOperation+0x6c>
 8007054:	4b17      	ldr	r3, [pc, #92]	; (80070b4 <FLASH_WaitForLastOperation+0xbc>)
 8007056:	699a      	ldr	r2, [r3, #24]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800705e:	4915      	ldr	r1, [pc, #84]	; (80070b4 <FLASH_WaitForLastOperation+0xbc>)
 8007060:	4313      	orrs	r3, r2
 8007062:	618b      	str	r3, [r1, #24]
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <FLASH_WaitForLastOperation+0x80>
 800706e:	4a11      	ldr	r2, [pc, #68]	; (80070b4 <FLASH_WaitForLastOperation+0xbc>)
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007076:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00e      	beq.n	800709c <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800707e:	4a0e      	ldr	r2, [pc, #56]	; (80070b8 <FLASH_WaitForLastOperation+0xc0>)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e011      	b.n	80070ac <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8007088:	f7fb faf6 	bl	8002678 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	d801      	bhi.n	800709c <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e007      	b.n	80070ac <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <FLASH_WaitForLastOperation+0xbc>)
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070a8:	d0ee      	beq.n	8007088 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	58004000 	.word	0x58004000
 80070b8:	20000a40 	.word	0x20000a40

080070bc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80070c8:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <FLASH_Program_DoubleWord+0x48>)
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <FLASH_Program_DoubleWord+0x48>)
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80070da:	f3bf 8f6f 	isb	sy
}
 80070de:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80070e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	f04f 0300 	mov.w	r3, #0
 80070ec:	000a      	movs	r2, r1
 80070ee:	2300      	movs	r3, #0
 80070f0:	68f9      	ldr	r1, [r7, #12]
 80070f2:	3104      	adds	r1, #4
 80070f4:	4613      	mov	r3, r2
 80070f6:	600b      	str	r3, [r1, #0]
}
 80070f8:	bf00      	nop
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bc80      	pop	{r7}
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	58004000 	.word	0x58004000

08007108 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8007108:	b480      	push	{r7}
 800710a:	b089      	sub	sp, #36	; 0x24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007112:	2340      	movs	r3, #64	; 0x40
 8007114:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800711e:	4b18      	ldr	r3, [pc, #96]	; (8007180 <FLASH_Program_Fast+0x78>)
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	4a17      	ldr	r2, [pc, #92]	; (8007180 <FLASH_Program_Fast+0x78>)
 8007124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007128:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800712a:	f3ef 8310 	mrs	r3, PRIMASK
 800712e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007130:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8007132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007134:	b672      	cpsid	i
}
 8007136:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	3304      	adds	r3, #4
 8007144:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	3304      	adds	r3, #4
 800714a:	617b      	str	r3, [r7, #20]
    row_index--;
 800714c:	7ffb      	ldrb	r3, [r7, #31]
 800714e:	3b01      	subs	r3, #1
 8007150:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007152:	7ffb      	ldrb	r3, [r7, #31]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1ef      	bne.n	8007138 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8007158:	bf00      	nop
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <FLASH_Program_Fast+0x78>)
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007166:	d0f8      	beq.n	800715a <FLASH_Program_Fast+0x52>
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	f383 8810 	msr	PRIMASK, r3
}
 8007172:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007174:	bf00      	nop
 8007176:	3724      	adds	r7, #36	; 0x24
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	58004000 	.word	0x58004000

08007184 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800718e:	4b28      	ldr	r3, [pc, #160]	; (8007230 <HAL_FLASHEx_Erase+0xac>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b01      	cmp	r3, #1
 8007194:	d101      	bne.n	800719a <HAL_FLASHEx_Erase+0x16>
 8007196:	2302      	movs	r3, #2
 8007198:	e046      	b.n	8007228 <HAL_FLASHEx_Erase+0xa4>
 800719a:	4b25      	ldr	r3, [pc, #148]	; (8007230 <HAL_FLASHEx_Erase+0xac>)
 800719c:	2201      	movs	r2, #1
 800719e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80071a0:	4b23      	ldr	r3, [pc, #140]	; (8007230 <HAL_FLASHEx_Erase+0xac>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071aa:	f7ff ff25 	bl	8006ff8 <FLASH_WaitForLastOperation>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d133      	bne.n	8007220 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d108      	bne.n	80071d2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80071c0:	f000 f838 	bl	8007234 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071c8:	f7ff ff16 	bl	8006ff8 <FLASH_WaitForLastOperation>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]
 80071d0:	e024      	b.n	800721c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	e012      	b.n	8007208 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80071e2:	68b8      	ldr	r0, [r7, #8]
 80071e4:	f000 f836 	bl	8007254 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071ec:	f7ff ff04 	bl	8006ff8 <FLASH_WaitForLastOperation>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	601a      	str	r2, [r3, #0]
          break;
 8007200:	e00a      	b.n	8007218 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	3301      	adds	r3, #1
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4413      	add	r3, r2
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	429a      	cmp	r2, r3
 8007216:	d3e4      	bcc.n	80071e2 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8007218:	f000 f878 	bl	800730c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800721c:	f000 f832 	bl	8007284 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007220:	4b03      	ldr	r3, [pc, #12]	; (8007230 <HAL_FLASHEx_Erase+0xac>)
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]

  return status;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20000a40 	.word	0x20000a40

08007234 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8007238:	4b05      	ldr	r3, [pc, #20]	; (8007250 <FLASH_MassErase+0x1c>)
 800723a:	695b      	ldr	r3, [r3, #20]
 800723c:	4a04      	ldr	r2, [pc, #16]	; (8007250 <FLASH_MassErase+0x1c>)
 800723e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007242:	f043 0304 	orr.w	r3, r3, #4
 8007246:	6153      	str	r3, [r2, #20]
#endif
}
 8007248:	bf00      	nop
 800724a:	46bd      	mov	sp, r7
 800724c:	bc80      	pop	{r7}
 800724e:	4770      	bx	lr
 8007250:	58004000 	.word	0x58004000

08007254 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800725c:	4b08      	ldr	r3, [pc, #32]	; (8007280 <FLASH_PageErase+0x2c>)
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	00db      	lsls	r3, r3, #3
 8007268:	4313      	orrs	r3, r2
 800726a:	4a05      	ldr	r2, [pc, #20]	; (8007280 <FLASH_PageErase+0x2c>)
 800726c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007270:	f043 0302 	orr.w	r3, r3, #2
 8007274:	6153      	str	r3, [r2, #20]
#endif
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr
 8007280:	58004000 	.word	0x58004000

08007284 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8007288:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <FLASH_FlushCaches+0x84>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007290:	2b01      	cmp	r3, #1
 8007292:	d117      	bne.n	80072c4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007294:	4b1c      	ldr	r3, [pc, #112]	; (8007308 <FLASH_FlushCaches+0x84>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <FLASH_FlushCaches+0x84>)
 800729a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800729e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80072a0:	4b19      	ldr	r3, [pc, #100]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a18      	ldr	r2, [pc, #96]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	4b16      	ldr	r3, [pc, #88]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a15      	ldr	r2, [pc, #84]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072b8:	4b13      	ldr	r3, [pc, #76]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a12      	ldr	r2, [pc, #72]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072c2:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80072c4:	4b10      	ldr	r3, [pc, #64]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d117      	bne.n	8007300 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80072d0:	4b0d      	ldr	r3, [pc, #52]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a0c      	ldr	r2, [pc, #48]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072da:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80072dc:	4b0a      	ldr	r3, [pc, #40]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a09      	ldr	r2, [pc, #36]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	4b07      	ldr	r3, [pc, #28]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a06      	ldr	r2, [pc, #24]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072f2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80072f4:	4b04      	ldr	r3, [pc, #16]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a03      	ldr	r2, [pc, #12]	; (8007308 <FLASH_FlushCaches+0x84>)
 80072fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072fe:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8007300:	bf00      	nop
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr
 8007308:	58004000 	.word	0x58004000

0800730c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <FLASH_AcknowledgePageErase+0x1c>)
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	4a04      	ldr	r2, [pc, #16]	; (8007328 <FLASH_AcknowledgePageErase+0x1c>)
 8007316:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800731a:	f023 0302 	bic.w	r3, r3, #2
 800731e:	6153      	str	r3, [r2, #20]
#endif
}
 8007320:	bf00      	nop
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr
 8007328:	58004000 	.word	0x58004000

0800732c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800733a:	e140      	b.n	80075be <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	2101      	movs	r1, #1
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	fa01 f303 	lsl.w	r3, r1, r3
 8007348:	4013      	ands	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 8132 	beq.w	80075b8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	2b01      	cmp	r3, #1
 800735e:	d005      	beq.n	800736c <HAL_GPIO_Init+0x40>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d130      	bne.n	80073ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	2203      	movs	r2, #3
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	43db      	mvns	r3, r3
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4013      	ands	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073a2:	2201      	movs	r2, #1
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	fa02 f303 	lsl.w	r3, r2, r3
 80073aa:	43db      	mvns	r3, r3
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4013      	ands	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	091b      	lsrs	r3, r3, #4
 80073b8:	f003 0201 	and.w	r2, r3, #1
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	fa02 f303 	lsl.w	r3, r2, r3
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d017      	beq.n	800740a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	2203      	movs	r2, #3
 80073e6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ea:	43db      	mvns	r3, r3
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4013      	ands	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	4313      	orrs	r3, r2
 8007402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d123      	bne.n	800745e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	08da      	lsrs	r2, r3, #3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3208      	adds	r2, #8
 800741e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	220f      	movs	r2, #15
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	43db      	mvns	r3, r3
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4013      	ands	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	691a      	ldr	r2, [r3, #16]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	08da      	lsrs	r2, r3, #3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3208      	adds	r2, #8
 8007458:	6939      	ldr	r1, [r7, #16]
 800745a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	005b      	lsls	r3, r3, #1
 8007468:	2203      	movs	r2, #3
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4013      	ands	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f003 0203 	and.w	r2, r3, #3
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	fa02 f303 	lsl.w	r3, r2, r3
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4313      	orrs	r3, r2
 800748a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 808c 	beq.w	80075b8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80074a0:	4a4e      	ldr	r2, [pc, #312]	; (80075dc <HAL_GPIO_Init+0x2b0>)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	089b      	lsrs	r3, r3, #2
 80074a6:	3302      	adds	r3, #2
 80074a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f003 0303 	and.w	r3, r3, #3
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	2207      	movs	r2, #7
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	43db      	mvns	r3, r3
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4013      	ands	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80074ca:	d00d      	beq.n	80074e8 <HAL_GPIO_Init+0x1bc>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a44      	ldr	r2, [pc, #272]	; (80075e0 <HAL_GPIO_Init+0x2b4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <HAL_GPIO_Init+0x1b8>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a43      	ldr	r2, [pc, #268]	; (80075e4 <HAL_GPIO_Init+0x2b8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d101      	bne.n	80074e0 <HAL_GPIO_Init+0x1b4>
 80074dc:	2302      	movs	r3, #2
 80074de:	e004      	b.n	80074ea <HAL_GPIO_Init+0x1be>
 80074e0:	2307      	movs	r3, #7
 80074e2:	e002      	b.n	80074ea <HAL_GPIO_Init+0x1be>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <HAL_GPIO_Init+0x1be>
 80074e8:	2300      	movs	r3, #0
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	f002 0203 	and.w	r2, r2, #3
 80074f0:	0092      	lsls	r2, r2, #2
 80074f2:	4093      	lsls	r3, r2
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80074fa:	4938      	ldr	r1, [pc, #224]	; (80075dc <HAL_GPIO_Init+0x2b0>)
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	089b      	lsrs	r3, r3, #2
 8007500:	3302      	adds	r3, #2
 8007502:	693a      	ldr	r2, [r7, #16]
 8007504:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007508:	4b37      	ldr	r3, [pc, #220]	; (80075e8 <HAL_GPIO_Init+0x2bc>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	43db      	mvns	r3, r3
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	4013      	ands	r3, r2
 8007516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800752c:	4a2e      	ldr	r2, [pc, #184]	; (80075e8 <HAL_GPIO_Init+0x2bc>)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007532:	4b2d      	ldr	r3, [pc, #180]	; (80075e8 <HAL_GPIO_Init+0x2bc>)
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	43db      	mvns	r3, r3
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4013      	ands	r3, r2
 8007540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007556:	4a24      	ldr	r2, [pc, #144]	; (80075e8 <HAL_GPIO_Init+0x2bc>)
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800755c:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <HAL_GPIO_Init+0x2bc>)
 800755e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007562:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	43db      	mvns	r3, r3
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4013      	ands	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8007582:	4a19      	ldr	r2, [pc, #100]	; (80075e8 <HAL_GPIO_Init+0x2bc>)
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800758a:	4b17      	ldr	r3, [pc, #92]	; (80075e8 <HAL_GPIO_Init+0x2bc>)
 800758c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007590:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	43db      	mvns	r3, r3
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4013      	ands	r3, r2
 800759a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80075b0:	4a0d      	ldr	r2, [pc, #52]	; (80075e8 <HAL_GPIO_Init+0x2bc>)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3301      	adds	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	fa22 f303 	lsr.w	r3, r2, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f47f aeb7 	bne.w	800733c <HAL_GPIO_Init+0x10>
  }
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40010000 	.word	0x40010000
 80075e0:	48000400 	.word	0x48000400
 80075e4:	48000800 	.word	0x48000800
 80075e8:	58000800 	.word	0x58000800

080075ec <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b087      	sub	sp, #28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80075fa:	e0af      	b.n	800775c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80075fc:	2201      	movs	r2, #1
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	4013      	ands	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 80a2 	beq.w	8007756 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007612:	4a59      	ldr	r2, [pc, #356]	; (8007778 <HAL_GPIO_DeInit+0x18c>)
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	089b      	lsrs	r3, r3, #2
 8007618:	3302      	adds	r3, #2
 800761a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800761e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	2207      	movs	r2, #7
 800762a:	fa02 f303 	lsl.w	r3, r2, r3
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4013      	ands	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800763a:	d00d      	beq.n	8007658 <HAL_GPIO_DeInit+0x6c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a4f      	ldr	r2, [pc, #316]	; (800777c <HAL_GPIO_DeInit+0x190>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d007      	beq.n	8007654 <HAL_GPIO_DeInit+0x68>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a4e      	ldr	r2, [pc, #312]	; (8007780 <HAL_GPIO_DeInit+0x194>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d101      	bne.n	8007650 <HAL_GPIO_DeInit+0x64>
 800764c:	2302      	movs	r3, #2
 800764e:	e004      	b.n	800765a <HAL_GPIO_DeInit+0x6e>
 8007650:	2307      	movs	r3, #7
 8007652:	e002      	b.n	800765a <HAL_GPIO_DeInit+0x6e>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <HAL_GPIO_DeInit+0x6e>
 8007658:	2300      	movs	r3, #0
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	f002 0203 	and.w	r2, r2, #3
 8007660:	0092      	lsls	r2, r2, #2
 8007662:	4093      	lsls	r3, r2
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	429a      	cmp	r2, r3
 8007668:	d136      	bne.n	80076d8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800766a:	4b46      	ldr	r3, [pc, #280]	; (8007784 <HAL_GPIO_DeInit+0x198>)
 800766c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	43db      	mvns	r3, r3
 8007674:	4943      	ldr	r1, [pc, #268]	; (8007784 <HAL_GPIO_DeInit+0x198>)
 8007676:	4013      	ands	r3, r2
 8007678:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800767c:	4b41      	ldr	r3, [pc, #260]	; (8007784 <HAL_GPIO_DeInit+0x198>)
 800767e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	43db      	mvns	r3, r3
 8007686:	493f      	ldr	r1, [pc, #252]	; (8007784 <HAL_GPIO_DeInit+0x198>)
 8007688:	4013      	ands	r3, r2
 800768a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800768e:	4b3d      	ldr	r3, [pc, #244]	; (8007784 <HAL_GPIO_DeInit+0x198>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	43db      	mvns	r3, r3
 8007696:	493b      	ldr	r1, [pc, #236]	; (8007784 <HAL_GPIO_DeInit+0x198>)
 8007698:	4013      	ands	r3, r2
 800769a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800769c:	4b39      	ldr	r3, [pc, #228]	; (8007784 <HAL_GPIO_DeInit+0x198>)
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	43db      	mvns	r3, r3
 80076a4:	4937      	ldr	r1, [pc, #220]	; (8007784 <HAL_GPIO_DeInit+0x198>)
 80076a6:	4013      	ands	r3, r2
 80076a8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f003 0303 	and.w	r3, r3, #3
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	2207      	movs	r2, #7
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80076ba:	4a2f      	ldr	r2, [pc, #188]	; (8007778 <HAL_GPIO_DeInit+0x18c>)
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	089b      	lsrs	r3, r3, #2
 80076c0:	3302      	adds	r3, #2
 80076c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	43da      	mvns	r2, r3
 80076ca:	482b      	ldr	r0, [pc, #172]	; (8007778 <HAL_GPIO_DeInit+0x18c>)
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	089b      	lsrs	r3, r3, #2
 80076d0:	400a      	ands	r2, r1
 80076d2:	3302      	adds	r3, #2
 80076d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	2103      	movs	r1, #3
 80076e2:	fa01 f303 	lsl.w	r3, r1, r3
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	08da      	lsrs	r2, r3, #3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3208      	adds	r2, #8
 80076f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	220f      	movs	r2, #15
 8007702:	fa02 f303 	lsl.w	r3, r2, r3
 8007706:	43db      	mvns	r3, r3
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	08d2      	lsrs	r2, r2, #3
 800770c:	4019      	ands	r1, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3208      	adds	r2, #8
 8007712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	2103      	movs	r1, #3
 8007720:	fa01 f303 	lsl.w	r3, r1, r3
 8007724:	43db      	mvns	r3, r3
 8007726:	401a      	ands	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	2101      	movs	r1, #1
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	fa01 f303 	lsl.w	r3, r1, r3
 8007738:	43db      	mvns	r3, r3
 800773a:	401a      	ands	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	2103      	movs	r1, #3
 800774a:	fa01 f303 	lsl.w	r3, r1, r3
 800774e:	43db      	mvns	r3, r3
 8007750:	401a      	ands	r2, r3
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60da      	str	r2, [r3, #12]
    }

    position++;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	3301      	adds	r3, #1
 800775a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	fa22 f303 	lsr.w	r3, r2, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	f47f af49 	bne.w	80075fc <HAL_GPIO_DeInit+0x10>
  }
}
 800776a:	bf00      	nop
 800776c:	bf00      	nop
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	40010000 	.word	0x40010000
 800777c:	48000400 	.word	0x48000400
 8007780:	48000800 	.word	0x48000800
 8007784:	58000800 	.word	0x58000800

08007788 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	887b      	ldrh	r3, [r7, #2]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
 80077a4:	e001      	b.n	80077aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr

080077b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	460b      	mov	r3, r1
 80077c0:	807b      	strh	r3, [r7, #2]
 80077c2:	4613      	mov	r3, r2
 80077c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077c6:	787b      	ldrb	r3, [r7, #1]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d003      	beq.n	80077d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80077cc:	887a      	ldrh	r2, [r7, #2]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80077d2:	e002      	b.n	80077da <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80077d4:	887a      	ldrh	r2, [r7, #2]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr

080077e4 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80077f6:	887a      	ldrh	r2, [r7, #2]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4013      	ands	r3, r2
 80077fc:	041a      	lsls	r2, r3, #16
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	43d9      	mvns	r1, r3
 8007802:	887b      	ldrh	r3, [r7, #2]
 8007804:	400b      	ands	r3, r1
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	619a      	str	r2, [r3, #24]
}
 800780c:	bf00      	nop
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr
	...

08007818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007822:	4b08      	ldr	r3, [pc, #32]	; (8007844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	88fb      	ldrh	r3, [r7, #6]
 8007828:	4013      	ands	r3, r2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d006      	beq.n	800783c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800782e:	4a05      	ldr	r2, [pc, #20]	; (8007844 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007834:	88fb      	ldrh	r3, [r7, #6]
 8007836:	4618      	mov	r0, r3
 8007838:	f7fa f9a6 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	58000800 	.word	0x58000800

08007848 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007848:	b480      	push	{r7}
 800784a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800784c:	4b04      	ldr	r3, [pc, #16]	; (8007860 <HAL_PWR_EnableBkUpAccess+0x18>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a03      	ldr	r2, [pc, #12]	; (8007860 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007856:	6013      	str	r3, [r2, #0]
}
 8007858:	bf00      	nop
 800785a:	46bd      	mov	sp, r7
 800785c:	bc80      	pop	{r7}
 800785e:	4770      	bx	lr
 8007860:	58000400 	.word	0x58000400

08007864 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	460b      	mov	r3, r1
 800786e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10c      	bne.n	8007890 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8007876:	4b13      	ldr	r3, [pc, #76]	; (80078c4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800787e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007882:	d10d      	bne.n	80078a0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8007884:	f000 f83c 	bl	8007900 <HAL_PWREx_DisableLowPowerRunMode>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d008      	beq.n	80078a0 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800788e:	e015      	b.n	80078bc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <HAL_PWR_EnterSLEEPMode+0x60>)
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800789c:	f000 f822 	bl	80078e4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80078a0:	4b09      	ldr	r3, [pc, #36]	; (80078c8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80078a6:	f023 0304 	bic.w	r3, r3, #4
 80078aa:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80078b2:	bf30      	wfi
 80078b4:	e002      	b.n	80078bc <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80078b6:	bf40      	sev
    __WFE();
 80078b8:	bf20      	wfe
    __WFE();
 80078ba:	bf20      	wfe
  }
}
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	58000400 	.word	0x58000400
 80078c8:	e000ed00 	.word	0xe000ed00

080078cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80078d0:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <HAL_PWREx_GetVoltageRange+0x14>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	bc80      	pop	{r7}
 80078de:	4770      	bx	lr
 80078e0:	58000400 	.word	0x58000400

080078e4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a03      	ldr	r2, [pc, #12]	; (80078fc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80078ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f2:	6013      	str	r3, [r2, #0]
}
 80078f4:	bf00      	nop
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr
 80078fc:	58000400 	.word	0x58000400

08007900 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8007906:	4b16      	ldr	r3, [pc, #88]	; (8007960 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800790c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007910:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2232      	movs	r2, #50	; 0x32
 8007918:	fb02 f303 	mul.w	r3, r2, r3
 800791c:	4a12      	ldr	r2, [pc, #72]	; (8007968 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800791e:	fba2 2303 	umull	r2, r3, r2, r3
 8007922:	0c9b      	lsrs	r3, r3, #18
 8007924:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007926:	e002      	b.n	800792e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	3b01      	subs	r3, #1
 800792c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800792e:	4b0c      	ldr	r3, [pc, #48]	; (8007960 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793a:	d102      	bne.n	8007942 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1f2      	bne.n	8007928 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8007942:	4b07      	ldr	r3, [pc, #28]	; (8007960 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800794a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794e:	d101      	bne.n	8007954 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e000      	b.n	8007956 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	bc80      	pop	{r7}
 800795e:	4770      	bx	lr
 8007960:	58000400 	.word	0x58000400
 8007964:	20000040 	.word	0x20000040
 8007968:	431bde83 	.word	0x431bde83

0800796c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8007976:	4b10      	ldr	r3, [pc, #64]	; (80079b8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f023 0307 	bic.w	r3, r3, #7
 800797e:	4a0e      	ldr	r2, [pc, #56]	; (80079b8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8007980:	f043 0302 	orr.w	r3, r3, #2
 8007984:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007986:	4b0d      	ldr	r3, [pc, #52]	; (80079bc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	4a0c      	ldr	r2, [pc, #48]	; (80079bc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800798c:	f043 0304 	orr.w	r3, r3, #4
 8007990:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d101      	bne.n	800799c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007998:	bf30      	wfi
 800799a:	e002      	b.n	80079a2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800799c:	bf40      	sev
    __WFE();
 800799e:	bf20      	wfe
    __WFE();
 80079a0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80079a2:	4b06      	ldr	r3, [pc, #24]	; (80079bc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	4a05      	ldr	r2, [pc, #20]	; (80079bc <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80079a8:	f023 0304 	bic.w	r3, r3, #4
 80079ac:	6113      	str	r3, [r2, #16]
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bc80      	pop	{r7}
 80079b6:	4770      	bx	lr
 80079b8:	58000400 	.word	0x58000400
 80079bc:	e000ed00 	.word	0xe000ed00

080079c0 <LL_PWR_IsEnabledBkUpAccess>:
{
 80079c0:	b480      	push	{r7}
 80079c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80079c4:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d0:	d101      	bne.n	80079d6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	bc80      	pop	{r7}
 80079de:	4770      	bx	lr
 80079e0:	58000400 	.word	0x58000400

080079e4 <LL_RCC_HSE_EnableTcxo>:
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80079e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079f6:	6013      	str	r3, [r2, #0]
}
 80079f8:	bf00      	nop
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bc80      	pop	{r7}
 80079fe:	4770      	bx	lr

08007a00 <LL_RCC_HSE_DisableTcxo>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8007a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a12:	6013      	str	r3, [r2, #0]
}
 8007a14:	bf00      	nop
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bc80      	pop	{r7}
 8007a1a:	4770      	bx	lr

08007a1c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a2e:	d101      	bne.n	8007a34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bc80      	pop	{r7}
 8007a3c:	4770      	bx	lr

08007a3e <LL_RCC_HSE_Enable>:
{
 8007a3e:	b480      	push	{r7}
 8007a40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a50:	6013      	str	r3, [r2, #0]
}
 8007a52:	bf00      	nop
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bc80      	pop	{r7}
 8007a58:	4770      	bx	lr

08007a5a <LL_RCC_HSE_Disable>:
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a6c:	6013      	str	r3, [r2, #0]
}
 8007a6e:	bf00      	nop
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr

08007a76 <LL_RCC_HSE_IsReady>:
{
 8007a76:	b480      	push	{r7}
 8007a78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a88:	d101      	bne.n	8007a8e <LL_RCC_HSE_IsReady+0x18>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <LL_RCC_HSE_IsReady+0x1a>
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr

08007a98 <LL_RCC_HSI_Enable>:
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aaa:	6013      	str	r3, [r2, #0]
}
 8007aac:	bf00      	nop
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bc80      	pop	{r7}
 8007ab2:	4770      	bx	lr

08007ab4 <LL_RCC_HSI_Disable>:
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ac2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac6:	6013      	str	r3, [r2, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr

08007ad0 <LL_RCC_HSI_IsReady>:
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae2:	d101      	bne.n	8007ae8 <LL_RCC_HSI_IsReady+0x18>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <LL_RCC_HSI_IsReady+0x1a>
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	604b      	str	r3, [r1, #4]
}
 8007b10:	bf00      	nop
 8007b12:	370c      	adds	r7, #12
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bc80      	pop	{r7}
 8007b18:	4770      	bx	lr

08007b1a <LL_RCC_LSE_IsReady>:
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d101      	bne.n	8007b32 <LL_RCC_LSE_IsReady+0x18>
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <LL_RCC_LSE_IsReady+0x1a>
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bc80      	pop	{r7}
 8007b3a:	4770      	bx	lr

08007b3c <LL_RCC_LSI_Enable>:
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8007b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b4c:	f043 0301 	orr.w	r3, r3, #1
 8007b50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007b54:	bf00      	nop
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr

08007b5c <LL_RCC_LSI_Disable>:
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007b74:	bf00      	nop
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr

08007b7c <LL_RCC_LSI_IsReady>:
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b88:	f003 0302 	and.w	r3, r3, #2
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d101      	bne.n	8007b94 <LL_RCC_LSI_IsReady+0x18>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <LL_RCC_LSI_IsReady+0x1a>
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <LL_RCC_MSI_Enable>:
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bac:	f043 0301 	orr.w	r3, r3, #1
 8007bb0:	6013      	str	r3, [r2, #0]
}
 8007bb2:	bf00      	nop
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bc80      	pop	{r7}
 8007bb8:	4770      	bx	lr

08007bba <LL_RCC_MSI_Disable>:
{
 8007bba:	b480      	push	{r7}
 8007bbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bc8:	f023 0301 	bic.w	r3, r3, #1
 8007bcc:	6013      	str	r3, [r2, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bc80      	pop	{r7}
 8007bd4:	4770      	bx	lr

08007bd6 <LL_RCC_MSI_IsReady>:
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d101      	bne.n	8007bec <LL_RCC_MSI_IsReady+0x16>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <LL_RCC_MSI_IsReady+0x18>
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr

08007bf6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b08      	cmp	r3, #8
 8007c06:	d101      	bne.n	8007c0c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e000      	b.n	8007c0e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr

08007c16 <LL_RCC_MSI_GetRange>:
{
 8007c16:	b480      	push	{r7}
 8007c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bc80      	pop	{r7}
 8007c2a:	4770      	bx	lr

08007c2c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bc80      	pop	{r7}
 8007c42:	4770      	bx	lr

08007c44 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	604b      	str	r3, [r1, #4]
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bc80      	pop	{r7}
 8007c6a:	4770      	bx	lr

08007c6c <LL_RCC_SetSysClkSource>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f023 0203 	bic.w	r2, r3, #3
 8007c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	608b      	str	r3, [r1, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <LL_RCC_GetSysClkSource>:
{
 8007c92:	b480      	push	{r7}
 8007c94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 030c 	and.w	r3, r3, #12
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bc80      	pop	{r7}
 8007ca6:	4770      	bx	lr

08007ca8 <LL_RCC_SetAHBPrescaler>:
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	608b      	str	r3, [r1, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bc80      	pop	{r7}
 8007ccc:	4770      	bx	lr

08007cce <LL_RCC_SetAHB3Prescaler>:
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b083      	sub	sp, #12
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007cde:	f023 020f 	bic.w	r2, r3, #15
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	091b      	lsrs	r3, r3, #4
 8007ce6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cea:	4313      	orrs	r3, r2
 8007cec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bc80      	pop	{r7}
 8007cf8:	4770      	bx	lr

08007cfa <LL_RCC_SetAPB1Prescaler>:
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	608b      	str	r3, [r1, #8]
}
 8007d16:	bf00      	nop
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr

08007d20 <LL_RCC_SetAPB2Prescaler>:
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	608b      	str	r3, [r1, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bc80      	pop	{r7}
 8007d44:	4770      	bx	lr

08007d46 <LL_RCC_GetAHBPrescaler>:
{
 8007d46:	b480      	push	{r7}
 8007d48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr

08007d5c <LL_RCC_GetAHB3Prescaler>:
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr

08007d76 <LL_RCC_GetAPB1Prescaler>:
{
 8007d76:	b480      	push	{r7}
 8007d78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr

08007d8c <LL_RCC_GetAPB2Prescaler>:
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bc80      	pop	{r7}
 8007da0:	4770      	bx	lr

08007da2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007da2:	b480      	push	{r7}
 8007da4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007db4:	6013      	str	r3, [r2, #0]
}
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr

08007dbe <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dd0:	6013      	str	r3, [r2, #0]
}
 8007dd2:	bf00      	nop
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bc80      	pop	{r7}
 8007dd8:	4770      	bx	lr

08007dda <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007dda:	b480      	push	{r7}
 8007ddc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007de8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dec:	d101      	bne.n	8007df2 <LL_RCC_PLL_IsReady+0x18>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <LL_RCC_PLL_IsReady+0x1a>
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bc80      	pop	{r7}
 8007dfa:	4770      	bx	lr

08007dfc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	0a1b      	lsrs	r3, r3, #8
 8007e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr

08007e14 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bc80      	pop	{r7}
 8007e28:	4770      	bx	lr

08007e2a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bc80      	pop	{r7}
 8007e3e:	4770      	bx	lr

08007e40 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 0303 	and.w	r3, r3, #3
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bc80      	pop	{r7}
 8007e54:	4770      	bx	lr

08007e56 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007e56:	b480      	push	{r7}
 8007e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e68:	d101      	bne.n	8007e6e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bc80      	pop	{r7}
 8007e76:	4770      	bx	lr

08007e78 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e8c:	d101      	bne.n	8007e92 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e000      	b.n	8007e94 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bc80      	pop	{r7}
 8007e9a:	4770      	bx	lr

08007e9c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eae:	d101      	bne.n	8007eb4 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bc80      	pop	{r7}
 8007ebc:	4770      	bx	lr

08007ebe <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ed0:	d101      	bne.n	8007ed6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e000      	b.n	8007ed8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bc80      	pop	{r7}
 8007ede:	4770      	bx	lr

08007ee0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e38b      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ef2:	f7ff fece 	bl	8007c92 <LL_RCC_GetSysClkSource>
 8007ef6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ef8:	f7ff ffa2 	bl	8007e40 <LL_RCC_PLL_GetMainSource>
 8007efc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0320 	and.w	r3, r3, #32
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80c9 	beq.w	800809e <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d005      	beq.n	8007f1e <HAL_RCC_OscConfig+0x3e>
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	2b0c      	cmp	r3, #12
 8007f16:	d17b      	bne.n	8008010 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d178      	bne.n	8008010 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f1e:	f7ff fe5a 	bl	8007bd6 <LL_RCC_MSI_IsReady>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_RCC_OscConfig+0x54>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e36a      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <HAL_RCC_OscConfig+0x72>
 8007f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f50:	e006      	b.n	8007f60 <HAL_RCC_OscConfig+0x80>
 8007f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f5a:	091b      	lsrs	r3, r3, #4
 8007f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d222      	bcs.n	8007faa <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fd51 	bl	8008a10 <RCC_SetFlashLatencyFromMSIRange>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e348      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f82:	f043 0308 	orr.w	r3, r3, #8
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff fe4e 	bl	8007c44 <LL_RCC_MSI_SetCalibTrimming>
 8007fa8:	e021      	b.n	8007fee <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fb4:	f043 0308 	orr.w	r3, r3, #8
 8007fb8:	6013      	str	r3, [r2, #0]
 8007fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7ff fe35 	bl	8007c44 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fd16 	bl	8008a10 <RCC_SetFlashLatencyFromMSIRange>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e30d      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007fee:	f000 fcd7 	bl	80089a0 <HAL_RCC_GetHCLKFreq>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4aa1      	ldr	r2, [pc, #644]	; (800827c <HAL_RCC_OscConfig+0x39c>)
 8007ff6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007ff8:	4ba1      	ldr	r3, [pc, #644]	; (8008280 <HAL_RCC_OscConfig+0x3a0>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7fa fb31 	bl	8002664 <HAL_InitTick>
 8008002:	4603      	mov	r3, r0
 8008004:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8008006:	7cfb      	ldrb	r3, [r7, #19]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d047      	beq.n	800809c <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 800800c:	7cfb      	ldrb	r3, [r7, #19]
 800800e:	e2fc      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d02c      	beq.n	8008072 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008018:	f7ff fdc1 	bl	8007b9e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800801c:	f7fa fb2c 	bl	8002678 <HAL_GetTick>
 8008020:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008022:	e008      	b.n	8008036 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008024:	f7fa fb28 	bl	8002678 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	2b02      	cmp	r3, #2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e2e9      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008036:	f7ff fdce 	bl	8007bd6 <LL_RCC_MSI_IsReady>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0f1      	beq.n	8008024 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800804a:	f043 0308 	orr.w	r3, r3, #8
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008062:	4313      	orrs	r3, r2
 8008064:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	4618      	mov	r0, r3
 800806c:	f7ff fdea 	bl	8007c44 <LL_RCC_MSI_SetCalibTrimming>
 8008070:	e015      	b.n	800809e <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008072:	f7ff fda2 	bl	8007bba <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008076:	f7fa faff 	bl	8002678 <HAL_GetTick>
 800807a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800807c:	e008      	b.n	8008090 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800807e:	f7fa fafb 	bl	8002678 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d901      	bls.n	8008090 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e2bc      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008090:	f7ff fda1 	bl	8007bd6 <LL_RCC_MSI_IsReady>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1f1      	bne.n	800807e <HAL_RCC_OscConfig+0x19e>
 800809a:	e000      	b.n	800809e <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800809c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d05f      	beq.n	800816a <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d005      	beq.n	80080bc <HAL_RCC_OscConfig+0x1dc>
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2b0c      	cmp	r3, #12
 80080b4:	d10d      	bne.n	80080d2 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b03      	cmp	r3, #3
 80080ba:	d10a      	bne.n	80080d2 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080bc:	f7ff fcdb 	bl	8007a76 <LL_RCC_HSE_IsReady>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d050      	beq.n	8008168 <HAL_RCC_OscConfig+0x288>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d14c      	bne.n	8008168 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e29b      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80080d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080e4:	4313      	orrs	r3, r2
 80080e6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f0:	d102      	bne.n	80080f8 <HAL_RCC_OscConfig+0x218>
 80080f2:	f7ff fca4 	bl	8007a3e <LL_RCC_HSE_Enable>
 80080f6:	e00d      	b.n	8008114 <HAL_RCC_OscConfig+0x234>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008100:	d104      	bne.n	800810c <HAL_RCC_OscConfig+0x22c>
 8008102:	f7ff fc6f 	bl	80079e4 <LL_RCC_HSE_EnableTcxo>
 8008106:	f7ff fc9a 	bl	8007a3e <LL_RCC_HSE_Enable>
 800810a:	e003      	b.n	8008114 <HAL_RCC_OscConfig+0x234>
 800810c:	f7ff fca5 	bl	8007a5a <LL_RCC_HSE_Disable>
 8008110:	f7ff fc76 	bl	8007a00 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d012      	beq.n	8008142 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811c:	f7fa faac 	bl	8002678 <HAL_GetTick>
 8008120:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008122:	e008      	b.n	8008136 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008124:	f7fa faa8 	bl	8002678 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	2b64      	cmp	r3, #100	; 0x64
 8008130:	d901      	bls.n	8008136 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e269      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008136:	f7ff fc9e 	bl	8007a76 <LL_RCC_HSE_IsReady>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0f1      	beq.n	8008124 <HAL_RCC_OscConfig+0x244>
 8008140:	e013      	b.n	800816a <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008142:	f7fa fa99 	bl	8002678 <HAL_GetTick>
 8008146:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008148:	e008      	b.n	800815c <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800814a:	f7fa fa95 	bl	8002678 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b64      	cmp	r3, #100	; 0x64
 8008156:	d901      	bls.n	800815c <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e256      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 800815c:	f7ff fc8b 	bl	8007a76 <LL_RCC_HSE_IsReady>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1f1      	bne.n	800814a <HAL_RCC_OscConfig+0x26a>
 8008166:	e000      	b.n	800816a <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008168:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b00      	cmp	r3, #0
 8008174:	d04b      	beq.n	800820e <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	2b04      	cmp	r3, #4
 800817a:	d005      	beq.n	8008188 <HAL_RCC_OscConfig+0x2a8>
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	2b0c      	cmp	r3, #12
 8008180:	d113      	bne.n	80081aa <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d110      	bne.n	80081aa <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008188:	f7ff fca2 	bl	8007ad0 <LL_RCC_HSI_IsReady>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_RCC_OscConfig+0x2be>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e235      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fca5 	bl	8007af2 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081a8:	e031      	b.n	800820e <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	691b      	ldr	r3, [r3, #16]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d019      	beq.n	80081e6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081b2:	f7ff fc71 	bl	8007a98 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b6:	f7fa fa5f 	bl	8002678 <HAL_GetTick>
 80081ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80081bc:	e008      	b.n	80081d0 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081be:	f7fa fa5b 	bl	8002678 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d901      	bls.n	80081d0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e21c      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80081d0:	f7ff fc7e 	bl	8007ad0 <LL_RCC_HSI_IsReady>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0f1      	beq.n	80081be <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff fc87 	bl	8007af2 <LL_RCC_HSI_SetCalibTrimming>
 80081e4:	e013      	b.n	800820e <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081e6:	f7ff fc65 	bl	8007ab4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081ea:	f7fa fa45 	bl	8002678 <HAL_GetTick>
 80081ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80081f0:	e008      	b.n	8008204 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081f2:	f7fa fa41 	bl	8002678 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	1ad3      	subs	r3, r2, r3
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d901      	bls.n	8008204 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e202      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008204:	f7ff fc64 	bl	8007ad0 <LL_RCC_HSI_IsReady>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1f1      	bne.n	80081f2 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d06f      	beq.n	80082fa <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d057      	beq.n	80082d2 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8008222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800822a:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f003 0310 	and.w	r3, r3, #16
 8008236:	429a      	cmp	r2, r3
 8008238:	d036      	beq.n	80082a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b00      	cmp	r3, #0
 8008242:	d006      	beq.n	8008252 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800824a:	2b00      	cmp	r3, #0
 800824c:	d101      	bne.n	8008252 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e1db      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d018      	beq.n	800828e <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 800825c:	f7ff fc7e 	bl	8007b5c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008260:	f7fa fa0a 	bl	8002678 <HAL_GetTick>
 8008264:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8008266:	e00d      	b.n	8008284 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008268:	f7fa fa06 	bl	8002678 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b11      	cmp	r3, #17
 8008274:	d906      	bls.n	8008284 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e1c7      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
 800827a:	bf00      	nop
 800827c:	20000040 	.word	0x20000040
 8008280:	20000044 	.word	0x20000044
          while (LL_RCC_LSI_IsReady() != 0U)
 8008284:	f7ff fc7a 	bl	8007b7c <LL_RCC_LSI_IsReady>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1ec      	bne.n	8008268 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800828e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008296:	f023 0210 	bic.w	r2, r3, #16
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80082a8:	f7ff fc48 	bl	8007b3c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ac:	f7fa f9e4 	bl	8002678 <HAL_GetTick>
 80082b0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082b4:	f7fa f9e0 	bl	8002678 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b11      	cmp	r3, #17
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e1a1      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80082c6:	f7ff fc59 	bl	8007b7c <LL_RCC_LSI_IsReady>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d0f1      	beq.n	80082b4 <HAL_RCC_OscConfig+0x3d4>
 80082d0:	e013      	b.n	80082fa <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082d2:	f7ff fc43 	bl	8007b5c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d6:	f7fa f9cf 	bl	8002678 <HAL_GetTick>
 80082da:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80082dc:	e008      	b.n	80082f0 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082de:	f7fa f9cb 	bl	8002678 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b11      	cmp	r3, #17
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e18c      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80082f0:	f7ff fc44 	bl	8007b7c <LL_RCC_LSI_IsReady>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1f1      	bne.n	80082de <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0304 	and.w	r3, r3, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 80d8 	beq.w	80084b8 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008308:	f7ff fb5a 	bl	80079c0 <LL_PWR_IsEnabledBkUpAccess>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d113      	bne.n	800833a <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008312:	f7ff fa99 	bl	8007848 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008316:	f7fa f9af 	bl	8002678 <HAL_GetTick>
 800831a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800831e:	f7fa f9ab 	bl	8002678 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e16c      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008330:	f7ff fb46 	bl	80079c0 <LL_PWR_IsEnabledBkUpAccess>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0f1      	beq.n	800831e <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d07b      	beq.n	800843a <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	2b85      	cmp	r3, #133	; 0x85
 8008348:	d003      	beq.n	8008352 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	2b05      	cmp	r3, #5
 8008350:	d109      	bne.n	8008366 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800835e:	f043 0304 	orr.w	r3, r3, #4
 8008362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008366:	f7fa f987 	bl	8002678 <HAL_GetTick>
 800836a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800836c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008380:	e00a      	b.n	8008398 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008382:	f7fa f979 	bl	8002678 <HAL_GetTick>
 8008386:	4602      	mov	r2, r0
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	1ad3      	subs	r3, r2, r3
 800838c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008390:	4293      	cmp	r3, r2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e138      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008398:	f7ff fbbf 	bl	8007b1a <LL_RCC_LSE_IsReady>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0ef      	beq.n	8008382 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2b81      	cmp	r3, #129	; 0x81
 80083a8:	d003      	beq.n	80083b2 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	2b85      	cmp	r3, #133	; 0x85
 80083b0:	d121      	bne.n	80083f6 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083b2:	f7fa f961 	bl	8002678 <HAL_GetTick>
 80083b6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80083b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80083cc:	e00a      	b.n	80083e4 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ce:	f7fa f953 	bl	8002678 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083dc:	4293      	cmp	r3, r2
 80083de:	d901      	bls.n	80083e4 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e112      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80083e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0ec      	beq.n	80083ce <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80083f4:	e060      	b.n	80084b8 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f6:	f7fa f93f 	bl	8002678 <HAL_GetTick>
 80083fa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80083fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800840c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008410:	e00a      	b.n	8008428 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008412:	f7fa f931 	bl	8002678 <HAL_GetTick>
 8008416:	4602      	mov	r2, r0
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008420:	4293      	cmp	r3, r2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e0f0      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800842c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1ec      	bne.n	8008412 <HAL_RCC_OscConfig+0x532>
 8008438:	e03e      	b.n	80084b8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800843a:	f7fa f91d 	bl	8002678 <HAL_GetTick>
 800843e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800844c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008454:	e00a      	b.n	800846c <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008456:	f7fa f90f 	bl	8002678 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	f241 3288 	movw	r2, #5000	; 0x1388
 8008464:	4293      	cmp	r3, r2
 8008466:	d901      	bls.n	800846c <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8008468:	2303      	movs	r3, #3
 800846a:	e0ce      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800846c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1ec      	bne.n	8008456 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800847c:	f7fa f8fc 	bl	8002678 <HAL_GetTick>
 8008480:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800848e:	f023 0301 	bic.w	r3, r3, #1
 8008492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008496:	e00a      	b.n	80084ae <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008498:	f7fa f8ee 	bl	8002678 <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d901      	bls.n	80084ae <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e0ad      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80084ae:	f7ff fb34 	bl	8007b1a <LL_RCC_LSE_IsReady>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1ef      	bne.n	8008498 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80a3 	beq.w	8008608 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	2b0c      	cmp	r3, #12
 80084c6:	d076      	beq.n	80085b6 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d14b      	bne.n	8008568 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d0:	f7ff fc75 	bl	8007dbe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d4:	f7fa f8d0 	bl	8002678 <HAL_GetTick>
 80084d8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80084da:	e008      	b.n	80084ee <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084dc:	f7fa f8cc 	bl	8002678 <HAL_GetTick>
 80084e0:	4602      	mov	r2, r0
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	1ad3      	subs	r3, r2, r3
 80084e6:	2b0a      	cmp	r3, #10
 80084e8:	d901      	bls.n	80084ee <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80084ea:	2303      	movs	r3, #3
 80084ec:	e08d      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80084ee:	f7ff fc74 	bl	8007dda <LL_RCC_PLL_IsReady>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f1      	bne.n	80084dc <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fc:	68da      	ldr	r2, [r3, #12]
 80084fe:	4b45      	ldr	r3, [pc, #276]	; (8008614 <HAL_RCC_OscConfig+0x734>)
 8008500:	4013      	ands	r3, r2
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800850a:	4311      	orrs	r1, r2
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008510:	0212      	lsls	r2, r2, #8
 8008512:	4311      	orrs	r1, r2
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008518:	4311      	orrs	r1, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800851e:	4311      	orrs	r1, r2
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008524:	430a      	orrs	r2, r1
 8008526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800852a:	4313      	orrs	r3, r2
 800852c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800852e:	f7ff fc38 	bl	8007da2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800853c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008540:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008542:	f7fa f899 	bl	8002678 <HAL_GetTick>
 8008546:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008548:	e008      	b.n	800855c <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800854a:	f7fa f895 	bl	8002678 <HAL_GetTick>
 800854e:	4602      	mov	r2, r0
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	2b0a      	cmp	r3, #10
 8008556:	d901      	bls.n	800855c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e056      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 800855c:	f7ff fc3d 	bl	8007dda <LL_RCC_PLL_IsReady>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0f1      	beq.n	800854a <HAL_RCC_OscConfig+0x66a>
 8008566:	e04f      	b.n	8008608 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008568:	f7ff fc29 	bl	8007dbe <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800856c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008576:	f023 0303 	bic.w	r3, r3, #3
 800857a:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 800857c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008586:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800858a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800858e:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fa f872 	bl	8002678 <HAL_GetTick>
 8008594:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008598:	f7fa f86e 	bl	8002678 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b0a      	cmp	r3, #10
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e02f      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80085aa:	f7ff fc16 	bl	8007dda <LL_RCC_PLL_IsReady>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1f1      	bne.n	8008598 <HAL_RCC_OscConfig+0x6b8>
 80085b4:	e028      	b.n	8008608 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d101      	bne.n	80085c2 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e023      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	f003 0203 	and.w	r2, r3, #3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d115      	bne.n	8008604 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d10e      	bne.n	8008604 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	021b      	lsls	r3, r3, #8
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d106      	bne.n	8008604 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008600:	429a      	cmp	r2, r3
 8008602:	d001      	beq.n	8008608 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e000      	b.n	800860a <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3720      	adds	r7, #32
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	11c1808c 	.word	0x11c1808c

08008618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e10f      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800862c:	4b89      	ldr	r3, [pc, #548]	; (8008854 <HAL_RCC_ClockConfig+0x23c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d91b      	bls.n	8008672 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800863a:	4b86      	ldr	r3, [pc, #536]	; (8008854 <HAL_RCC_ClockConfig+0x23c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f023 0207 	bic.w	r2, r3, #7
 8008642:	4984      	ldr	r1, [pc, #528]	; (8008854 <HAL_RCC_ClockConfig+0x23c>)
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	4313      	orrs	r3, r2
 8008648:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800864a:	f7fa f815 	bl	8002678 <HAL_GetTick>
 800864e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008650:	e008      	b.n	8008664 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008652:	f7fa f811 	bl	8002678 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	2b02      	cmp	r3, #2
 800865e:	d901      	bls.n	8008664 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e0f3      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008664:	4b7b      	ldr	r3, [pc, #492]	; (8008854 <HAL_RCC_ClockConfig+0x23c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d1ef      	bne.n	8008652 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d016      	beq.n	80086ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff fb10 	bl	8007ca8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008688:	f7f9 fff6 	bl	8002678 <HAL_GetTick>
 800868c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800868e:	e008      	b.n	80086a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008690:	f7f9 fff2 	bl	8002678 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e0d4      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80086a2:	f7ff fbd8 	bl	8007e56 <LL_RCC_IsActiveFlag_HPRE>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0f1      	beq.n	8008690 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d016      	beq.n	80086e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	695b      	ldr	r3, [r3, #20]
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fb06 	bl	8007cce <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80086c2:	f7f9 ffd9 	bl	8002678 <HAL_GetTick>
 80086c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80086c8:	e008      	b.n	80086dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80086ca:	f7f9 ffd5 	bl	8002678 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d901      	bls.n	80086dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80086d8:	2303      	movs	r3, #3
 80086da:	e0b7      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80086dc:	f7ff fbcc 	bl	8007e78 <LL_RCC_IsActiveFlag_SHDHPRE>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d0f1      	beq.n	80086ca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d016      	beq.n	8008720 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff faff 	bl	8007cfa <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80086fc:	f7f9 ffbc 	bl	8002678 <HAL_GetTick>
 8008700:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008702:	e008      	b.n	8008716 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008704:	f7f9 ffb8 	bl	8002678 <HAL_GetTick>
 8008708:	4602      	mov	r2, r0
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	2b02      	cmp	r3, #2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e09a      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008716:	f7ff fbc1 	bl	8007e9c <LL_RCC_IsActiveFlag_PPRE1>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d0f1      	beq.n	8008704 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0308 	and.w	r3, r3, #8
 8008728:	2b00      	cmp	r3, #0
 800872a:	d017      	beq.n	800875c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff faf4 	bl	8007d20 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008738:	f7f9 ff9e 	bl	8002678 <HAL_GetTick>
 800873c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800873e:	e008      	b.n	8008752 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008740:	f7f9 ff9a 	bl	8002678 <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e07c      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008752:	f7ff fbb4 	bl	8007ebe <LL_RCC_IsActiveFlag_PPRE2>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d0f1      	beq.n	8008740 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b00      	cmp	r3, #0
 8008766:	d043      	beq.n	80087f0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d106      	bne.n	800877e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008770:	f7ff f981 	bl	8007a76 <LL_RCC_HSE_IsReady>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d11e      	bne.n	80087b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e066      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2b03      	cmp	r3, #3
 8008784:	d106      	bne.n	8008794 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008786:	f7ff fb28 	bl	8007dda <LL_RCC_PLL_IsReady>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d113      	bne.n	80087b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e05b      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800879c:	f7ff fa1b 	bl	8007bd6 <LL_RCC_MSI_IsReady>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d108      	bne.n	80087b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e050      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80087aa:	f7ff f991 	bl	8007ad0 <LL_RCC_HSI_IsReady>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e049      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	4618      	mov	r0, r3
 80087be:	f7ff fa55 	bl	8007c6c <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087c2:	f7f9 ff59 	bl	8002678 <HAL_GetTick>
 80087c6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087c8:	e00a      	b.n	80087e0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087ca:	f7f9 ff55 	bl	8002678 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087d8:	4293      	cmp	r3, r2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e035      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087e0:	f7ff fa57 	bl	8007c92 <LL_RCC_GetSysClkSource>
 80087e4:	4602      	mov	r2, r0
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d1ec      	bne.n	80087ca <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087f0:	4b18      	ldr	r3, [pc, #96]	; (8008854 <HAL_RCC_ClockConfig+0x23c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0307 	and.w	r3, r3, #7
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d21b      	bcs.n	8008836 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087fe:	4b15      	ldr	r3, [pc, #84]	; (8008854 <HAL_RCC_ClockConfig+0x23c>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f023 0207 	bic.w	r2, r3, #7
 8008806:	4913      	ldr	r1, [pc, #76]	; (8008854 <HAL_RCC_ClockConfig+0x23c>)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	4313      	orrs	r3, r2
 800880c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800880e:	f7f9 ff33 	bl	8002678 <HAL_GetTick>
 8008812:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008814:	e008      	b.n	8008828 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008816:	f7f9 ff2f 	bl	8002678 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	2b02      	cmp	r3, #2
 8008822:	d901      	bls.n	8008828 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e011      	b.n	800884c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008828:	4b0a      	ldr	r3, [pc, #40]	; (8008854 <HAL_RCC_ClockConfig+0x23c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d1ef      	bne.n	8008816 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008836:	f000 f8b3 	bl	80089a0 <HAL_RCC_GetHCLKFreq>
 800883a:	4603      	mov	r3, r0
 800883c:	4a06      	ldr	r2, [pc, #24]	; (8008858 <HAL_RCC_ClockConfig+0x240>)
 800883e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008840:	4b06      	ldr	r3, [pc, #24]	; (800885c <HAL_RCC_ClockConfig+0x244>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4618      	mov	r0, r3
 8008846:	f7f9 ff0d 	bl	8002664 <HAL_InitTick>
 800884a:	4603      	mov	r3, r0
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	58004000 	.word	0x58004000
 8008858:	20000040 	.word	0x20000040
 800885c:	20000044 	.word	0x20000044

08008860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800886e:	f7ff fa10 	bl	8007c92 <LL_RCC_GetSysClkSource>
 8008872:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008874:	f7ff fae4 	bl	8007e40 <LL_RCC_PLL_GetMainSource>
 8008878:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <HAL_RCC_GetSysClockFreq+0x2c>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b0c      	cmp	r3, #12
 8008884:	d139      	bne.n	80088fa <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d136      	bne.n	80088fa <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800888c:	f7ff f9b3 	bl	8007bf6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d115      	bne.n	80088c2 <HAL_RCC_GetSysClockFreq+0x62>
 8008896:	f7ff f9ae 	bl	8007bf6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800889a:	4603      	mov	r3, r0
 800889c:	2b01      	cmp	r3, #1
 800889e:	d106      	bne.n	80088ae <HAL_RCC_GetSysClockFreq+0x4e>
 80088a0:	f7ff f9b9 	bl	8007c16 <LL_RCC_MSI_GetRange>
 80088a4:	4603      	mov	r3, r0
 80088a6:	0a1b      	lsrs	r3, r3, #8
 80088a8:	f003 030f 	and.w	r3, r3, #15
 80088ac:	e005      	b.n	80088ba <HAL_RCC_GetSysClockFreq+0x5a>
 80088ae:	f7ff f9bd 	bl	8007c2c <LL_RCC_MSI_GetRangeAfterStandby>
 80088b2:	4603      	mov	r3, r0
 80088b4:	0a1b      	lsrs	r3, r3, #8
 80088b6:	f003 030f 	and.w	r3, r3, #15
 80088ba:	4a36      	ldr	r2, [pc, #216]	; (8008994 <HAL_RCC_GetSysClockFreq+0x134>)
 80088bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c0:	e014      	b.n	80088ec <HAL_RCC_GetSysClockFreq+0x8c>
 80088c2:	f7ff f998 	bl	8007bf6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d106      	bne.n	80088da <HAL_RCC_GetSysClockFreq+0x7a>
 80088cc:	f7ff f9a3 	bl	8007c16 <LL_RCC_MSI_GetRange>
 80088d0:	4603      	mov	r3, r0
 80088d2:	091b      	lsrs	r3, r3, #4
 80088d4:	f003 030f 	and.w	r3, r3, #15
 80088d8:	e005      	b.n	80088e6 <HAL_RCC_GetSysClockFreq+0x86>
 80088da:	f7ff f9a7 	bl	8007c2c <LL_RCC_MSI_GetRangeAfterStandby>
 80088de:	4603      	mov	r3, r0
 80088e0:	091b      	lsrs	r3, r3, #4
 80088e2:	f003 030f 	and.w	r3, r3, #15
 80088e6:	4a2b      	ldr	r2, [pc, #172]	; (8008994 <HAL_RCC_GetSysClockFreq+0x134>)
 80088e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ec:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d115      	bne.n	8008920 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80088f8:	e012      	b.n	8008920 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d102      	bne.n	8008906 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008900:	4b25      	ldr	r3, [pc, #148]	; (8008998 <HAL_RCC_GetSysClockFreq+0x138>)
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	e00c      	b.n	8008920 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b08      	cmp	r3, #8
 800890a:	d109      	bne.n	8008920 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800890c:	f7ff f886 	bl	8007a1c <LL_RCC_HSE_IsEnabledDiv2>
 8008910:	4603      	mov	r3, r0
 8008912:	2b01      	cmp	r3, #1
 8008914:	d102      	bne.n	800891c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008916:	4b20      	ldr	r3, [pc, #128]	; (8008998 <HAL_RCC_GetSysClockFreq+0x138>)
 8008918:	617b      	str	r3, [r7, #20]
 800891a:	e001      	b.n	8008920 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800891c:	4b1f      	ldr	r3, [pc, #124]	; (800899c <HAL_RCC_GetSysClockFreq+0x13c>)
 800891e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008920:	f7ff f9b7 	bl	8007c92 <LL_RCC_GetSysClkSource>
 8008924:	4603      	mov	r3, r0
 8008926:	2b0c      	cmp	r3, #12
 8008928:	d12f      	bne.n	800898a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800892a:	f7ff fa89 	bl	8007e40 <LL_RCC_PLL_GetMainSource>
 800892e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d003      	beq.n	800893e <HAL_RCC_GetSysClockFreq+0xde>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b03      	cmp	r3, #3
 800893a:	d003      	beq.n	8008944 <HAL_RCC_GetSysClockFreq+0xe4>
 800893c:	e00d      	b.n	800895a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800893e:	4b16      	ldr	r3, [pc, #88]	; (8008998 <HAL_RCC_GetSysClockFreq+0x138>)
 8008940:	60fb      	str	r3, [r7, #12]
        break;
 8008942:	e00d      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008944:	f7ff f86a 	bl	8007a1c <LL_RCC_HSE_IsEnabledDiv2>
 8008948:	4603      	mov	r3, r0
 800894a:	2b01      	cmp	r3, #1
 800894c:	d102      	bne.n	8008954 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <HAL_RCC_GetSysClockFreq+0x138>)
 8008950:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008952:	e005      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008954:	4b11      	ldr	r3, [pc, #68]	; (800899c <HAL_RCC_GetSysClockFreq+0x13c>)
 8008956:	60fb      	str	r3, [r7, #12]
        break;
 8008958:	e002      	b.n	8008960 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	60fb      	str	r3, [r7, #12]
        break;
 800895e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008960:	f7ff fa4c 	bl	8007dfc <LL_RCC_PLL_GetN>
 8008964:	4602      	mov	r2, r0
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	fb03 f402 	mul.w	r4, r3, r2
 800896c:	f7ff fa5d 	bl	8007e2a <LL_RCC_PLL_GetDivider>
 8008970:	4603      	mov	r3, r0
 8008972:	091b      	lsrs	r3, r3, #4
 8008974:	3301      	adds	r3, #1
 8008976:	fbb4 f4f3 	udiv	r4, r4, r3
 800897a:	f7ff fa4b 	bl	8007e14 <LL_RCC_PLL_GetR>
 800897e:	4603      	mov	r3, r0
 8008980:	0f5b      	lsrs	r3, r3, #29
 8008982:	3301      	adds	r3, #1
 8008984:	fbb4 f3f3 	udiv	r3, r4, r3
 8008988:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800898a:	697b      	ldr	r3, [r7, #20]
}
 800898c:	4618      	mov	r0, r3
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	bd90      	pop	{r4, r7, pc}
 8008994:	080156f0 	.word	0x080156f0
 8008998:	00f42400 	.word	0x00f42400
 800899c:	01e84800 	.word	0x01e84800

080089a0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089a0:	b598      	push	{r3, r4, r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80089a4:	f7ff ff5c 	bl	8008860 <HAL_RCC_GetSysClockFreq>
 80089a8:	4604      	mov	r4, r0
 80089aa:	f7ff f9cc 	bl	8007d46 <LL_RCC_GetAHBPrescaler>
 80089ae:	4603      	mov	r3, r0
 80089b0:	091b      	lsrs	r3, r3, #4
 80089b2:	f003 030f 	and.w	r3, r3, #15
 80089b6:	4a03      	ldr	r2, [pc, #12]	; (80089c4 <HAL_RCC_GetHCLKFreq+0x24>)
 80089b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089bc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	bd98      	pop	{r3, r4, r7, pc}
 80089c4:	08015690 	.word	0x08015690

080089c8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089c8:	b598      	push	{r3, r4, r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80089cc:	f7ff ffe8 	bl	80089a0 <HAL_RCC_GetHCLKFreq>
 80089d0:	4604      	mov	r4, r0
 80089d2:	f7ff f9d0 	bl	8007d76 <LL_RCC_GetAPB1Prescaler>
 80089d6:	4603      	mov	r3, r0
 80089d8:	0a1b      	lsrs	r3, r3, #8
 80089da:	4a03      	ldr	r2, [pc, #12]	; (80089e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80089dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	bd98      	pop	{r3, r4, r7, pc}
 80089e8:	080156d0 	.word	0x080156d0

080089ec <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089ec:	b598      	push	{r3, r4, r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80089f0:	f7ff ffd6 	bl	80089a0 <HAL_RCC_GetHCLKFreq>
 80089f4:	4604      	mov	r4, r0
 80089f6:	f7ff f9c9 	bl	8007d8c <LL_RCC_GetAPB2Prescaler>
 80089fa:	4603      	mov	r3, r0
 80089fc:	0adb      	lsrs	r3, r3, #11
 80089fe:	4a03      	ldr	r2, [pc, #12]	; (8008a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a04:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	bd98      	pop	{r3, r4, r7, pc}
 8008a0c:	080156d0 	.word	0x080156d0

08008a10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008a10:	b590      	push	{r4, r7, lr}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	091b      	lsrs	r3, r3, #4
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	4a10      	ldr	r2, [pc, #64]	; (8008a64 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8008a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a26:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8008a28:	f7ff f998 	bl	8007d5c <LL_RCC_GetAHB3Prescaler>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	091b      	lsrs	r3, r3, #4
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	4a0c      	ldr	r2, [pc, #48]	; (8008a68 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8008a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a40:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	4a09      	ldr	r2, [pc, #36]	; (8008a6c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8008a46:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4a:	0c9c      	lsrs	r4, r3, #18
 8008a4c:	f7fe ff3e 	bl	80078cc <HAL_PWREx_GetVoltageRange>
 8008a50:	4603      	mov	r3, r0
 8008a52:	4619      	mov	r1, r3
 8008a54:	4620      	mov	r0, r4
 8008a56:	f000 f80b 	bl	8008a70 <RCC_SetFlashLatency>
 8008a5a:	4603      	mov	r3, r0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd90      	pop	{r4, r7, pc}
 8008a64:	080156f0 	.word	0x080156f0
 8008a68:	08015690 	.word	0x08015690
 8008a6c:	431bde83 	.word	0x431bde83

08008a70 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08e      	sub	sp, #56	; 0x38
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8008a7a:	4a3a      	ldr	r2, [pc, #232]	; (8008b64 <RCC_SetFlashLatency+0xf4>)
 8008a7c:	f107 0320 	add.w	r3, r7, #32
 8008a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a84:	6018      	str	r0, [r3, #0]
 8008a86:	3304      	adds	r3, #4
 8008a88:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8008a8a:	4a37      	ldr	r2, [pc, #220]	; (8008b68 <RCC_SetFlashLatency+0xf8>)
 8008a8c:	f107 0318 	add.w	r3, r7, #24
 8008a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a94:	6018      	str	r0, [r3, #0]
 8008a96:	3304      	adds	r3, #4
 8008a98:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8008a9a:	4a34      	ldr	r2, [pc, #208]	; (8008b6c <RCC_SetFlashLatency+0xfc>)
 8008a9c:	f107 030c 	add.w	r3, r7, #12
 8008aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8008aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ab0:	d11b      	bne.n	8008aea <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ab6:	e014      	b.n	8008ae2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	3338      	adds	r3, #56	; 0x38
 8008abe:	443b      	add	r3, r7
 8008ac0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d807      	bhi.n	8008adc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	3338      	adds	r3, #56	; 0x38
 8008ad2:	443b      	add	r3, r7
 8008ad4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ada:	e021      	b.n	8008b20 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ade:	3301      	adds	r3, #1
 8008ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8008ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d9e7      	bls.n	8008ab8 <RCC_SetFlashLatency+0x48>
 8008ae8:	e01a      	b.n	8008b20 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008aea:	2300      	movs	r3, #0
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aee:	e014      	b.n	8008b1a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	3338      	adds	r3, #56	; 0x38
 8008af6:	443b      	add	r3, r7
 8008af8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008afc:	461a      	mov	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d807      	bhi.n	8008b14 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	3338      	adds	r3, #56	; 0x38
 8008b0a:	443b      	add	r3, r7
 8008b0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b12:	e005      	b.n	8008b20 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	3301      	adds	r3, #1
 8008b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d9e7      	bls.n	8008af0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008b20:	4b13      	ldr	r3, [pc, #76]	; (8008b70 <RCC_SetFlashLatency+0x100>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f023 0207 	bic.w	r2, r3, #7
 8008b28:	4911      	ldr	r1, [pc, #68]	; (8008b70 <RCC_SetFlashLatency+0x100>)
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b30:	f7f9 fda2 	bl	8002678 <HAL_GetTick>
 8008b34:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008b36:	e008      	b.n	8008b4a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b38:	f7f9 fd9e 	bl	8002678 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d901      	bls.n	8008b4a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e007      	b.n	8008b5a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008b4a:	4b09      	ldr	r3, [pc, #36]	; (8008b70 <RCC_SetFlashLatency+0x100>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d1ef      	bne.n	8008b38 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3738      	adds	r7, #56	; 0x38
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	08015524 	.word	0x08015524
 8008b68:	0801552c 	.word	0x0801552c
 8008b6c:	08015534 	.word	0x08015534
 8008b70:	58004000 	.word	0x58004000

08008b74 <LL_RCC_LSE_IsReady>:
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d101      	bne.n	8008b8c <LL_RCC_LSE_IsReady+0x18>
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e000      	b.n	8008b8e <LL_RCC_LSE_IsReady+0x1a>
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr

08008b96 <LL_RCC_SetUSARTClockSource>:
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ba2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	0c1b      	lsrs	r3, r3, #16
 8008baa:	43db      	mvns	r3, r3
 8008bac:	401a      	ands	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bc80      	pop	{r7}
 8008bc4:	4770      	bx	lr

08008bc6 <LL_RCC_SetI2SClockSource>:
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bc80      	pop	{r7}
 8008bee:	4770      	bx	lr

08008bf0 <LL_RCC_SetLPUARTClockSource>:
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bc80      	pop	{r7}
 8008c18:	4770      	bx	lr

08008c1a <LL_RCC_SetI2CClockSource>:
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	091b      	lsrs	r3, r3, #4
 8008c2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008c32:	43db      	mvns	r3, r3
 8008c34:	401a      	ands	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c42:	4313      	orrs	r3, r2
 8008c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bc80      	pop	{r7}
 8008c50:	4770      	bx	lr

08008c52 <LL_RCC_SetLPTIMClockSource>:
{
 8008c52:	b480      	push	{r7}
 8008c54:	b083      	sub	sp, #12
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	0c1b      	lsrs	r3, r3, #16
 8008c66:	041b      	lsls	r3, r3, #16
 8008c68:	43db      	mvns	r3, r3
 8008c6a:	401a      	ands	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	041b      	lsls	r3, r3, #16
 8008c70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c74:	4313      	orrs	r3, r2
 8008c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bc80      	pop	{r7}
 8008c82:	4770      	bx	lr

08008c84 <LL_RCC_SetRNGClockSource>:
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c94:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008c98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008ca4:	bf00      	nop
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bc80      	pop	{r7}
 8008cac:	4770      	bx	lr

08008cae <LL_RCC_SetADCClockSource>:
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008cce:	bf00      	nop
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bc80      	pop	{r7}
 8008cd6:	4770      	bx	lr

08008cd8 <LL_RCC_SetRTCClockSource>:
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr

08008d02 <LL_RCC_GetRTCClockSource>:
{
 8008d02:	b480      	push	{r7}
 8008d04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr

08008d1a <LL_RCC_ForceBackupDomainReset>:
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008d32:	bf00      	nop
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr

08008d3a <LL_RCC_ReleaseBackupDomainReset>:
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008d52:	bf00      	nop
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr
	...

08008d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008d68:	2300      	movs	r3, #0
 8008d6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d058      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008d7c:	f7fe fd64 	bl	8007848 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d80:	f7f9 fc7a 	bl	8002678 <HAL_GetTick>
 8008d84:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008d86:	e009      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d88:	f7f9 fc76 	bl	8002678 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d902      	bls.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	74fb      	strb	r3, [r7, #19]
        break;
 8008d9a:	e006      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008d9c:	4b7b      	ldr	r3, [pc, #492]	; (8008f8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008da8:	d1ee      	bne.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008daa:	7cfb      	ldrb	r3, [r7, #19]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d13c      	bne.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008db0:	f7ff ffa7 	bl	8008d02 <LL_RCC_GetRTCClockSource>
 8008db4:	4602      	mov	r2, r0
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d00f      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008dcc:	f7ff ffa5 	bl	8008d1a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dd0:	f7ff ffb3 	bl	8008d3a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f003 0302 	and.w	r3, r3, #2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d014      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7f9 fc46 	bl	8002678 <HAL_GetTick>
 8008dec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008dee:	e00b      	b.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008df0:	f7f9 fc42 	bl	8002678 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d902      	bls.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	74fb      	strb	r3, [r7, #19]
            break;
 8008e06:	e004      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008e08:	f7ff feb4 	bl	8008b74 <LL_RCC_LSE_IsReady>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d1ee      	bne.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8008e12:	7cfb      	ldrb	r3, [r7, #19]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d105      	bne.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff ff5b 	bl	8008cd8 <LL_RCC_SetRTCClockSource>
 8008e22:	e004      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e24:	7cfb      	ldrb	r3, [r7, #19]
 8008e26:	74bb      	strb	r3, [r7, #18]
 8008e28:	e001      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2a:	7cfb      	ldrb	r3, [r7, #19]
 8008e2c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d004      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7ff fea9 	bl	8008b96 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d004      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fe9e 	bl	8008b96 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0320 	and.w	r3, r3, #32
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d004      	beq.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f7ff fec0 	bl	8008bf0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a1b      	ldr	r3, [r3, #32]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f7ff fee6 	bl	8008c52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d004      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7ff fedb 	bl	8008c52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d004      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7ff fed0 	bl	8008c52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d004      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7ff fea9 	bl	8008c1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d004      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fe9e 	bl	8008c1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d004      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff fe93 	bl	8008c1a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0310 	and.w	r3, r3, #16
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d011      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7ff fe5e 	bl	8008bc6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f12:	d107      	bne.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d010      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff fea5 	bl	8008c84 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d107      	bne.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d011      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fea3 	bl	8008cae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f70:	d107      	bne.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f80:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008f82:	7cbb      	ldrb	r3, [r7, #18]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	58000400 	.word	0x58000400

08008f90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d068      	beq.n	8009074 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7f9 f980 	bl	80022bc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fc4:	4b2e      	ldr	r3, [pc, #184]	; (8009080 <HAL_RTC_Init+0xf0>)
 8008fc6:	22ca      	movs	r2, #202	; 0xca
 8008fc8:	625a      	str	r2, [r3, #36]	; 0x24
 8008fca:	4b2d      	ldr	r3, [pc, #180]	; (8009080 <HAL_RTC_Init+0xf0>)
 8008fcc:	2253      	movs	r2, #83	; 0x53
 8008fce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fa0f 	bl	80093f4 <RTC_EnterInitMode>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d13f      	bne.n	8009060 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008fe0:	4b27      	ldr	r3, [pc, #156]	; (8009080 <HAL_RTC_Init+0xf0>)
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	4a26      	ldr	r2, [pc, #152]	; (8009080 <HAL_RTC_Init+0xf0>)
 8008fe6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fee:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008ff0:	4b23      	ldr	r3, [pc, #140]	; (8009080 <HAL_RTC_Init+0xf0>)
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6859      	ldr	r1, [r3, #4]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	4319      	orrs	r1, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	699b      	ldr	r3, [r3, #24]
 8009002:	430b      	orrs	r3, r1
 8009004:	491e      	ldr	r1, [pc, #120]	; (8009080 <HAL_RTC_Init+0xf0>)
 8009006:	4313      	orrs	r3, r2
 8009008:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68da      	ldr	r2, [r3, #12]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	041b      	lsls	r3, r3, #16
 8009014:	491a      	ldr	r1, [pc, #104]	; (8009080 <HAL_RTC_Init+0xf0>)
 8009016:	4313      	orrs	r3, r2
 8009018:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800901a:	4b19      	ldr	r3, [pc, #100]	; (8009080 <HAL_RTC_Init+0xf0>)
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	430b      	orrs	r3, r1
 800902c:	4914      	ldr	r1, [pc, #80]	; (8009080 <HAL_RTC_Init+0xf0>)
 800902e:	4313      	orrs	r3, r2
 8009030:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fa12 	bl	800945c <RTC_ExitInitMode>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10e      	bne.n	8009060 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8009042:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <HAL_RTC_Init+0xf0>)
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6a19      	ldr	r1, [r3, #32]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	4319      	orrs	r1, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	430b      	orrs	r3, r1
 800905a:	4909      	ldr	r1, [pc, #36]	; (8009080 <HAL_RTC_Init+0xf0>)
 800905c:	4313      	orrs	r3, r2
 800905e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009060:	4b07      	ldr	r3, [pc, #28]	; (8009080 <HAL_RTC_Init+0xf0>)
 8009062:	22ff      	movs	r2, #255	; 0xff
 8009064:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	40002800 	.word	0x40002800

08009084 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009084:	b590      	push	{r4, r7, lr}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800909a:	2b01      	cmp	r3, #1
 800909c:	d101      	bne.n	80090a2 <HAL_RTC_SetAlarm_IT+0x1e>
 800909e:	2302      	movs	r3, #2
 80090a0:	e0f3      	b.n	800928a <HAL_RTC_SetAlarm_IT+0x206>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2202      	movs	r2, #2
 80090ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80090b2:	4b78      	ldr	r3, [pc, #480]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ba:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090c2:	d06a      	beq.n	800919a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d13a      	bne.n	8009140 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80090ca:	4b72      	ldr	r3, [pc, #456]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d102      	bne.n	80090dc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2200      	movs	r2, #0
 80090da:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f9f5 	bl	80094d8 <RTC_ByteToBcd2>
 80090ee:	4603      	mov	r3, r0
 80090f0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f9ee 	bl	80094d8 <RTC_ByteToBcd2>
 80090fc:	4603      	mov	r3, r0
 80090fe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009100:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	789b      	ldrb	r3, [r3, #2]
 8009106:	4618      	mov	r0, r3
 8009108:	f000 f9e6 	bl	80094d8 <RTC_ByteToBcd2>
 800910c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800910e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	78db      	ldrb	r3, [r3, #3]
 8009116:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009118:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f9d8 	bl	80094d8 <RTC_ByteToBcd2>
 8009128:	4603      	mov	r3, r0
 800912a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800912c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009134:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800913a:	4313      	orrs	r3, r2
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	e02c      	b.n	800919a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8009148:	d00d      	beq.n	8009166 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009152:	d008      	beq.n	8009166 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009154:	4b4f      	ldr	r3, [pc, #316]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	2200      	movs	r2, #0
 8009164:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	785b      	ldrb	r3, [r3, #1]
 8009170:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009172:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009178:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	78db      	ldrb	r3, [r3, #3]
 800917e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009180:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009188:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800918a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009190:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800919a:	4b3e      	ldr	r3, [pc, #248]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 800919c:	22ca      	movs	r2, #202	; 0xca
 800919e:	625a      	str	r2, [r3, #36]	; 0x24
 80091a0:	4b3c      	ldr	r3, [pc, #240]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091a2:	2253      	movs	r2, #83	; 0x53
 80091a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ae:	d12c      	bne.n	800920a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80091b0:	4b38      	ldr	r3, [pc, #224]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	4a37      	ldr	r2, [pc, #220]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80091ba:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80091bc:	4b35      	ldr	r3, [pc, #212]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091be:	2201      	movs	r2, #1
 80091c0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c8:	d107      	bne.n	80091da <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	699a      	ldr	r2, [r3, #24]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	4930      	ldr	r1, [pc, #192]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	644b      	str	r3, [r1, #68]	; 0x44
 80091d8:	e006      	b.n	80091e8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80091da:	4a2e      	ldr	r2, [pc, #184]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80091e0:	4a2c      	ldr	r2, [pc, #176]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80091e8:	4a2a      	ldr	r2, [pc, #168]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f4:	f043 0201 	orr.w	r2, r3, #1
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80091fc:	4b25      	ldr	r3, [pc, #148]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	4a24      	ldr	r2, [pc, #144]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 8009202:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8009206:	6193      	str	r3, [r2, #24]
 8009208:	e02b      	b.n	8009262 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800920a:	4b22      	ldr	r3, [pc, #136]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	4a21      	ldr	r2, [pc, #132]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 8009210:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009214:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009216:	4b1f      	ldr	r3, [pc, #124]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 8009218:	2202      	movs	r2, #2
 800921a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009222:	d107      	bne.n	8009234 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	699a      	ldr	r2, [r3, #24]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	4919      	ldr	r1, [pc, #100]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 800922e:	4313      	orrs	r3, r2
 8009230:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009232:	e006      	b.n	8009242 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009234:	4a17      	ldr	r2, [pc, #92]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800923a:	4a16      	ldr	r2, [pc, #88]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8009242:	4a14      	ldr	r2, [pc, #80]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	f043 0202 	orr.w	r2, r3, #2
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009256:	4b0f      	ldr	r3, [pc, #60]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	4a0e      	ldr	r2, [pc, #56]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 800925c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8009260:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009262:	4b0d      	ldr	r3, [pc, #52]	; (8009298 <HAL_RTC_SetAlarm_IT+0x214>)
 8009264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009268:	4a0b      	ldr	r2, [pc, #44]	; (8009298 <HAL_RTC_SetAlarm_IT+0x214>)
 800926a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800926e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009272:	4b08      	ldr	r3, [pc, #32]	; (8009294 <HAL_RTC_SetAlarm_IT+0x210>)
 8009274:	22ff      	movs	r2, #255	; 0xff
 8009276:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	371c      	adds	r7, #28
 800928e:	46bd      	mov	sp, r7
 8009290:	bd90      	pop	{r4, r7, pc}
 8009292:	bf00      	nop
 8009294:	40002800 	.word	0x40002800
 8009298:	58000800 	.word	0x58000800

0800929c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d101      	bne.n	80092b4 <HAL_RTC_DeactivateAlarm+0x18>
 80092b0:	2302      	movs	r3, #2
 80092b2:	e048      	b.n	8009346 <HAL_RTC_DeactivateAlarm+0xaa>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092c4:	4b22      	ldr	r3, [pc, #136]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092c6:	22ca      	movs	r2, #202	; 0xca
 80092c8:	625a      	str	r2, [r3, #36]	; 0x24
 80092ca:	4b21      	ldr	r3, [pc, #132]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092cc:	2253      	movs	r2, #83	; 0x53
 80092ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d6:	d115      	bne.n	8009304 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80092d8:	4b1d      	ldr	r3, [pc, #116]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	4a1c      	ldr	r2, [pc, #112]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80092e2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80092e4:	4b1a      	ldr	r3, [pc, #104]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e8:	4a19      	ldr	r2, [pc, #100]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092ee:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f4:	f023 0201 	bic.w	r2, r3, #1
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80092fc:	4b14      	ldr	r3, [pc, #80]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092fe:	2201      	movs	r2, #1
 8009300:	65da      	str	r2, [r3, #92]	; 0x5c
 8009302:	e014      	b.n	800932e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009304:	4b12      	ldr	r3, [pc, #72]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	4a11      	ldr	r2, [pc, #68]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 800930a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800930e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009310:	4b0f      	ldr	r3, [pc, #60]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009314:	4a0e      	ldr	r2, [pc, #56]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800931a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	f023 0202 	bic.w	r2, r3, #2
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009328:	4b09      	ldr	r3, [pc, #36]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 800932a:	2202      	movs	r2, #2
 800932c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800932e:	4b08      	ldr	r3, [pc, #32]	; (8009350 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009330:	22ff      	movs	r2, #255	; 0xff
 8009332:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	370c      	adds	r7, #12
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr
 8009350:	40002800 	.word	0x40002800

08009354 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800935c:	4b11      	ldr	r3, [pc, #68]	; (80093a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800935e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009364:	4013      	ands	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d005      	beq.n	800937e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009374:	2201      	movs	r2, #1
 8009376:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7f9 fbc4 	bl	8002b06 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f003 0302 	and.w	r3, r3, #2
 8009384:	2b00      	cmp	r3, #0
 8009386:	d005      	beq.n	8009394 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009388:	4b06      	ldr	r3, [pc, #24]	; (80093a4 <HAL_RTC_AlarmIRQHandler+0x50>)
 800938a:	2202      	movs	r2, #2
 800938c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f94a 	bl	8009628 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800939c:	bf00      	nop
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	40002800 	.word	0x40002800

080093a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80093b0:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <HAL_RTC_WaitForSynchro+0x48>)
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	4a0e      	ldr	r2, [pc, #56]	; (80093f0 <HAL_RTC_WaitForSynchro+0x48>)
 80093b6:	f023 0320 	bic.w	r3, r3, #32
 80093ba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80093bc:	f7f9 f95c 	bl	8002678 <HAL_GetTick>
 80093c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093c2:	e009      	b.n	80093d8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093c4:	f7f9 f958 	bl	8002678 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093d2:	d901      	bls.n	80093d8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e006      	b.n	80093e6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <HAL_RTC_WaitForSynchro+0x48>)
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	f003 0320 	and.w	r3, r3, #32
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0ef      	beq.n	80093c4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	40002800 	.word	0x40002800

080093f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009400:	4b15      	ldr	r3, [pc, #84]	; (8009458 <RTC_EnterInitMode+0x64>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009408:	2b00      	cmp	r3, #0
 800940a:	d120      	bne.n	800944e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800940c:	4b12      	ldr	r3, [pc, #72]	; (8009458 <RTC_EnterInitMode+0x64>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4a11      	ldr	r2, [pc, #68]	; (8009458 <RTC_EnterInitMode+0x64>)
 8009412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009416:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009418:	f7f9 f92e 	bl	8002678 <HAL_GetTick>
 800941c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800941e:	e00d      	b.n	800943c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009420:	f7f9 f92a 	bl	8002678 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800942e:	d905      	bls.n	800943c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2203      	movs	r2, #3
 8009438:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800943c:	4b06      	ldr	r3, [pc, #24]	; (8009458 <RTC_EnterInitMode+0x64>)
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009444:	2b00      	cmp	r3, #0
 8009446:	d102      	bne.n	800944e <RTC_EnterInitMode+0x5a>
 8009448:	7bfb      	ldrb	r3, [r7, #15]
 800944a:	2b03      	cmp	r3, #3
 800944c:	d1e8      	bne.n	8009420 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800944e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	40002800 	.word	0x40002800

0800945c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009468:	4b1a      	ldr	r3, [pc, #104]	; (80094d4 <RTC_ExitInitMode+0x78>)
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	4a19      	ldr	r2, [pc, #100]	; (80094d4 <RTC_ExitInitMode+0x78>)
 800946e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009472:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009474:	4b17      	ldr	r3, [pc, #92]	; (80094d4 <RTC_ExitInitMode+0x78>)
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	f003 0320 	and.w	r3, r3, #32
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10c      	bne.n	800949a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7ff ff91 	bl	80093a8 <HAL_RTC_WaitForSynchro>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01e      	beq.n	80094ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2203      	movs	r2, #3
 8009490:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009494:	2303      	movs	r3, #3
 8009496:	73fb      	strb	r3, [r7, #15]
 8009498:	e017      	b.n	80094ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800949a:	4b0e      	ldr	r3, [pc, #56]	; (80094d4 <RTC_ExitInitMode+0x78>)
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	4a0d      	ldr	r2, [pc, #52]	; (80094d4 <RTC_ExitInitMode+0x78>)
 80094a0:	f023 0320 	bic.w	r3, r3, #32
 80094a4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7ff ff7e 	bl	80093a8 <HAL_RTC_WaitForSynchro>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d005      	beq.n	80094be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2203      	movs	r2, #3
 80094b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <RTC_ExitInitMode+0x78>)
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	4a04      	ldr	r2, [pc, #16]	; (80094d4 <RTC_ExitInitMode+0x78>)
 80094c4:	f043 0320 	orr.w	r3, r3, #32
 80094c8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	40002800 	.word	0x40002800

080094d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80094ea:	e005      	b.n	80094f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80094f2:	7afb      	ldrb	r3, [r7, #11]
 80094f4:	3b0a      	subs	r3, #10
 80094f6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80094f8:	7afb      	ldrb	r3, [r7, #11]
 80094fa:	2b09      	cmp	r3, #9
 80094fc:	d8f6      	bhi.n	80094ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	b2db      	uxtb	r3, r3
 8009502:	011b      	lsls	r3, r3, #4
 8009504:	b2da      	uxtb	r2, r3
 8009506:	7afb      	ldrb	r3, [r7, #11]
 8009508:	4313      	orrs	r3, r2
 800950a:	b2db      	uxtb	r3, r3
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr
	...

08009518 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_RTCEx_EnableBypassShadow+0x16>
 800952a:	2302      	movs	r3, #2
 800952c:	e01f      	b.n	800956e <HAL_RTCEx_EnableBypassShadow+0x56>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2202      	movs	r2, #2
 800953a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800953e:	4b0e      	ldr	r3, [pc, #56]	; (8009578 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009540:	22ca      	movs	r2, #202	; 0xca
 8009542:	625a      	str	r2, [r3, #36]	; 0x24
 8009544:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009546:	2253      	movs	r2, #83	; 0x53
 8009548:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800954a:	4b0b      	ldr	r3, [pc, #44]	; (8009578 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009550:	f043 0320 	orr.w	r3, r3, #32
 8009554:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009558:	22ff      	movs	r2, #255	; 0xff
 800955a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	bc80      	pop	{r7}
 8009576:	4770      	bx	lr
 8009578:	40002800 	.word	0x40002800

0800957c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_RTCEx_SetSSRU_IT+0x16>
 800958e:	2302      	movs	r3, #2
 8009590:	e027      	b.n	80095e2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2202      	movs	r2, #2
 800959e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80095a4:	22ca      	movs	r2, #202	; 0xca
 80095a6:	625a      	str	r2, [r3, #36]	; 0x24
 80095a8:	4b10      	ldr	r3, [pc, #64]	; (80095ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80095aa:	2253      	movs	r2, #83	; 0x53
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80095ae:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	4a0e      	ldr	r2, [pc, #56]	; (80095ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80095b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80095ba:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80095bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c0:	4a0b      	ldr	r2, [pc, #44]	; (80095f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80095c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095ca:	4b08      	ldr	r3, [pc, #32]	; (80095ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80095cc:	22ff      	movs	r2, #255	; 0xff
 80095ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr
 80095ec:	40002800 	.word	0x40002800
 80095f0:	58000800 	.word	0x58000800

080095f4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80095fc:	4b09      	ldr	r3, [pc, #36]	; (8009624 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80095fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8009608:	4b06      	ldr	r3, [pc, #24]	; (8009624 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800960a:	2240      	movs	r2, #64	; 0x40
 800960c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7f9 fa83 	bl	8002b1a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	40002800 	.word	0x40002800

08009628 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr
	...

0800963c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009648:	4b07      	ldr	r3, [pc, #28]	; (8009668 <HAL_RTCEx_BKUPWrite+0x2c>)
 800964a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	4413      	add	r3, r2
 8009654:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	601a      	str	r2, [r3, #0]
}
 800965c:	bf00      	nop
 800965e:	371c      	adds	r7, #28
 8009660:	46bd      	mov	sp, r7
 8009662:	bc80      	pop	{r7}
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	4000b100 	.word	0x4000b100

0800966c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800966c:	b480      	push	{r7}
 800966e:	b085      	sub	sp, #20
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8009676:	4b07      	ldr	r3, [pc, #28]	; (8009694 <HAL_RTCEx_BKUPRead+0x28>)
 8009678:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4413      	add	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	bc80      	pop	{r7}
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	4000b100 	.word	0x4000b100

08009698 <LL_PWR_SetRadioBusyTrigger>:
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80096a0:	4b06      	ldr	r3, [pc, #24]	; (80096bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80096a8:	4904      	ldr	r1, [pc, #16]	; (80096bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	608b      	str	r3, [r1, #8]
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bc80      	pop	{r7}
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	58000400 	.word	0x58000400

080096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80096c0:	b480      	push	{r7}
 80096c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80096c4:	4b05      	ldr	r3, [pc, #20]	; (80096dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80096c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ca:	4a04      	ldr	r2, [pc, #16]	; (80096dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80096cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80096d4:	bf00      	nop
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bc80      	pop	{r7}
 80096da:	4770      	bx	lr
 80096dc:	58000400 	.word	0x58000400

080096e0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80096e4:	4b05      	ldr	r3, [pc, #20]	; (80096fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80096e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ea:	4a04      	ldr	r2, [pc, #16]	; (80096fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80096ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80096f4:	bf00      	nop
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bc80      	pop	{r7}
 80096fa:	4770      	bx	lr
 80096fc:	58000400 	.word	0x58000400

08009700 <LL_PWR_ClearFlag_RFBUSY>:
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009704:	4b03      	ldr	r3, [pc, #12]	; (8009714 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800970a:	619a      	str	r2, [r3, #24]
}
 800970c:	bf00      	nop
 800970e:	46bd      	mov	sp, r7
 8009710:	bc80      	pop	{r7}
 8009712:	4770      	bx	lr
 8009714:	58000400 	.word	0x58000400

08009718 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8009718:	b480      	push	{r7}
 800971a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800971c:	4b06      	ldr	r3, [pc, #24]	; (8009738 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b02      	cmp	r3, #2
 8009726:	d101      	bne.n	800972c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800972c:	2300      	movs	r3, #0
}
 800972e:	4618      	mov	r0, r3
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	58000400 	.word	0x58000400

0800973c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800973c:	b480      	push	{r7}
 800973e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009740:	4b06      	ldr	r3, [pc, #24]	; (800975c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b04      	cmp	r3, #4
 800974a:	d101      	bne.n	8009750 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800974c:	2301      	movs	r3, #1
 800974e:	e000      	b.n	8009752 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	bc80      	pop	{r7}
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	58000400 	.word	0x58000400

08009760 <LL_RCC_RF_DisableReset>:
{
 8009760:	b480      	push	{r7}
 8009762:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009768:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800976c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009778:	bf00      	nop
 800977a:	46bd      	mov	sp, r7
 800977c:	bc80      	pop	{r7}
 800977e:	4770      	bx	lr

08009780 <LL_RCC_IsRFUnderReset>:
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800978c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009794:	d101      	bne.n	800979a <LL_RCC_IsRFUnderReset+0x1a>
 8009796:	2301      	movs	r3, #1
 8009798:	e000      	b.n	800979c <LL_RCC_IsRFUnderReset+0x1c>
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	46bd      	mov	sp, r7
 80097a0:	bc80      	pop	{r7}
 80097a2:	4770      	bx	lr

080097a4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80097ac:	4b06      	ldr	r3, [pc, #24]	; (80097c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80097ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80097b2:	4905      	ldr	r1, [pc, #20]	; (80097c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80097bc:	bf00      	nop
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	58000800 	.word	0x58000800

080097cc <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d103      	bne.n	80097e2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	73fb      	strb	r3, [r7, #15]
    return status;
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	e04b      	b.n	800987a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	799b      	ldrb	r3, [r3, #6]
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d105      	bne.n	80097fc <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7f8 fea2 	bl	8002540 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8009802:	f7ff ffad 	bl	8009760 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009806:	4b1f      	ldr	r3, [pc, #124]	; (8009884 <HAL_SUBGHZ_Init+0xb8>)
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	4613      	mov	r3, r2
 800980c:	00db      	lsls	r3, r3, #3
 800980e:	1a9b      	subs	r3, r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	0cdb      	lsrs	r3, r3, #19
 8009814:	2264      	movs	r2, #100	; 0x64
 8009816:	fb02 f303 	mul.w	r3, r2, r3
 800981a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d105      	bne.n	800982e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	609a      	str	r2, [r3, #8]
      break;
 800982c:	e007      	b.n	800983e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	3b01      	subs	r3, #1
 8009832:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009834:	f7ff ffa4 	bl	8009780 <LL_RCC_IsRFUnderReset>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1ee      	bne.n	800981c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800983e:	f7ff ff3f 	bl	80096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009842:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009846:	f7ff ffad 	bl	80097a4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800984a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800984e:	f7ff ff23 	bl	8009698 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009852:	f7ff ff55 	bl	8009700 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 faad 	bl	8009dc0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	719a      	strb	r2, [r3, #6]

  return status;
 8009878:	7bfb      	ldrb	r3, [r7, #15]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20000040 	.word	0x20000040

08009888 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	461a      	mov	r2, r3
 8009894:	460b      	mov	r3, r1
 8009896:	817b      	strh	r3, [r7, #10]
 8009898:	4613      	mov	r3, r2
 800989a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	799b      	ldrb	r3, [r3, #6]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d14a      	bne.n	800993c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	795b      	ldrb	r3, [r3, #5]
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e045      	b.n	800993e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2202      	movs	r2, #2
 80098bc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fb4c 	bl	8009f5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80098c4:	f7ff ff0c 	bl	80096e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80098c8:	210d      	movs	r1, #13
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f000 fa98 	bl	8009e00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80098d0:	897b      	ldrh	r3, [r7, #10]
 80098d2:	0a1b      	lsrs	r3, r3, #8
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	4619      	mov	r1, r3
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 fa90 	bl	8009e00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80098e0:	897b      	ldrh	r3, [r7, #10]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	4619      	mov	r1, r3
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 fa8a 	bl	8009e00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80098ec:	2300      	movs	r3, #0
 80098ee:	82bb      	strh	r3, [r7, #20]
 80098f0:	e00a      	b.n	8009908 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80098f2:	8abb      	ldrh	r3, [r7, #20]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	4413      	add	r3, r2
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	4619      	mov	r1, r3
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 fa7f 	bl	8009e00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009902:	8abb      	ldrh	r3, [r7, #20]
 8009904:	3301      	adds	r3, #1
 8009906:	82bb      	strh	r3, [r7, #20]
 8009908:	8aba      	ldrh	r2, [r7, #20]
 800990a:	893b      	ldrh	r3, [r7, #8]
 800990c:	429a      	cmp	r2, r3
 800990e:	d3f0      	bcc.n	80098f2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009910:	f7ff fed6 	bl	80096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f000 fb45 	bl	8009fa4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	75fb      	strb	r3, [r7, #23]
 8009926:	e001      	b.n	800992c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2201      	movs	r2, #1
 8009930:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	715a      	strb	r2, [r3, #5]

    return status;
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	e000      	b.n	800993e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800993c:	2302      	movs	r3, #2
  }
}
 800993e:	4618      	mov	r0, r3
 8009940:	3718      	adds	r7, #24
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b088      	sub	sp, #32
 800994a:	af00      	add	r7, sp, #0
 800994c:	60f8      	str	r0, [r7, #12]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	461a      	mov	r2, r3
 8009952:	460b      	mov	r3, r1
 8009954:	817b      	strh	r3, [r7, #10]
 8009956:	4613      	mov	r3, r2
 8009958:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	799b      	ldrb	r3, [r3, #6]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b01      	cmp	r3, #1
 8009966:	d14a      	bne.n	80099fe <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	795b      	ldrb	r3, [r3, #5]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d101      	bne.n	8009974 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009970:	2302      	movs	r3, #2
 8009972:	e045      	b.n	8009a00 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2201      	movs	r2, #1
 8009978:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 faee 	bl	8009f5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009980:	f7ff feae 	bl	80096e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009984:	211d      	movs	r1, #29
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 fa3a 	bl	8009e00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800998c:	897b      	ldrh	r3, [r7, #10]
 800998e:	0a1b      	lsrs	r3, r3, #8
 8009990:	b29b      	uxth	r3, r3
 8009992:	b2db      	uxtb	r3, r3
 8009994:	4619      	mov	r1, r3
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 fa32 	bl	8009e00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800999c:	897b      	ldrh	r3, [r7, #10]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	4619      	mov	r1, r3
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	f000 fa2c 	bl	8009e00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80099a8:	2100      	movs	r1, #0
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 fa28 	bl	8009e00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80099b0:	2300      	movs	r3, #0
 80099b2:	82fb      	strh	r3, [r7, #22]
 80099b4:	e009      	b.n	80099ca <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80099b6:	69b9      	ldr	r1, [r7, #24]
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 fa77 	bl	8009eac <SUBGHZSPI_Receive>
      pData++;
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	3301      	adds	r3, #1
 80099c2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80099c4:	8afb      	ldrh	r3, [r7, #22]
 80099c6:	3301      	adds	r3, #1
 80099c8:	82fb      	strh	r3, [r7, #22]
 80099ca:	8afa      	ldrh	r2, [r7, #22]
 80099cc:	893b      	ldrh	r3, [r7, #8]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d3f1      	bcc.n	80099b6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80099d2:	f7ff fe75 	bl	80096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 fae4 	bl	8009fa4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	77fb      	strb	r3, [r7, #31]
 80099e8:	e001      	b.n	80099ee <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	715a      	strb	r2, [r3, #5]

    return status;
 80099fa:	7ffb      	ldrb	r3, [r7, #31]
 80099fc:	e000      	b.n	8009a00 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80099fe:	2302      	movs	r3, #2
  }
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3720      	adds	r7, #32
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b086      	sub	sp, #24
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	607a      	str	r2, [r7, #4]
 8009a12:	461a      	mov	r2, r3
 8009a14:	460b      	mov	r3, r1
 8009a16:	72fb      	strb	r3, [r7, #11]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	799b      	ldrb	r3, [r3, #6]
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d14a      	bne.n	8009abc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	795b      	ldrb	r3, [r3, #5]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009a2e:	2302      	movs	r3, #2
 8009a30:	e045      	b.n	8009abe <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	2201      	movs	r2, #1
 8009a36:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 fa8f 	bl	8009f5c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	2b84      	cmp	r3, #132	; 0x84
 8009a42:	d002      	beq.n	8009a4a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009a44:	7afb      	ldrb	r3, [r7, #11]
 8009a46:	2b94      	cmp	r3, #148	; 0x94
 8009a48:	d103      	bne.n	8009a52 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	711a      	strb	r2, [r3, #4]
 8009a50:	e002      	b.n	8009a58 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009a58:	f7ff fe42 	bl	80096e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009a5c:	7afb      	ldrb	r3, [r7, #11]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f9cd 	bl	8009e00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009a66:	2300      	movs	r3, #0
 8009a68:	82bb      	strh	r3, [r7, #20]
 8009a6a:	e00a      	b.n	8009a82 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009a6c:	8abb      	ldrh	r3, [r7, #20]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	4413      	add	r3, r2
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	4619      	mov	r1, r3
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 f9c2 	bl	8009e00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009a7c:	8abb      	ldrh	r3, [r7, #20]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	82bb      	strh	r3, [r7, #20]
 8009a82:	8aba      	ldrh	r2, [r7, #20]
 8009a84:	893b      	ldrh	r3, [r7, #8]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d3f0      	bcc.n	8009a6c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009a8a:	f7ff fe19 	bl	80096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8009a8e:	7afb      	ldrb	r3, [r7, #11]
 8009a90:	2b84      	cmp	r3, #132	; 0x84
 8009a92:	d002      	beq.n	8009a9a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 fa85 	bl	8009fa4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75fb      	strb	r3, [r7, #23]
 8009aa6:	e001      	b.n	8009aac <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	715a      	strb	r2, [r3, #5]

    return status;
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
 8009aba:	e000      	b.n	8009abe <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009abc:	2302      	movs	r3, #2
  }
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b088      	sub	sp, #32
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	72fb      	strb	r3, [r7, #11]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	799b      	ldrb	r3, [r3, #6]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d13d      	bne.n	8009b64 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	795b      	ldrb	r3, [r3, #5]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d101      	bne.n	8009af4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009af0:	2302      	movs	r3, #2
 8009af2:	e038      	b.n	8009b66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2201      	movs	r2, #1
 8009af8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fa2e 	bl	8009f5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009b00:	f7ff fdee 	bl	80096e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	4619      	mov	r1, r3
 8009b08:	68f8      	ldr	r0, [r7, #12]
 8009b0a:	f000 f979 	bl	8009e00 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009b0e:	2100      	movs	r1, #0
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f975 	bl	8009e00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	82fb      	strh	r3, [r7, #22]
 8009b1a:	e009      	b.n	8009b30 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009b1c:	69b9      	ldr	r1, [r7, #24]
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f000 f9c4 	bl	8009eac <SUBGHZSPI_Receive>
      pData++;
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	3301      	adds	r3, #1
 8009b28:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009b2a:	8afb      	ldrh	r3, [r7, #22]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	82fb      	strh	r3, [r7, #22]
 8009b30:	8afa      	ldrh	r2, [r7, #22]
 8009b32:	893b      	ldrh	r3, [r7, #8]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d3f1      	bcc.n	8009b1c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009b38:	f7ff fdc2 	bl	80096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 fa31 	bl	8009fa4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	77fb      	strb	r3, [r7, #31]
 8009b4e:	e001      	b.n	8009b54 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2201      	movs	r2, #1
 8009b58:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	715a      	strb	r2, [r3, #5]

    return status;
 8009b60:	7ffb      	ldrb	r3, [r7, #31]
 8009b62:	e000      	b.n	8009b66 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009b64:	2302      	movs	r3, #2
  }
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	72fb      	strb	r3, [r7, #11]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	799b      	ldrb	r3, [r3, #6]
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d13e      	bne.n	8009c0a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	795b      	ldrb	r3, [r3, #5]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d101      	bne.n	8009b98 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8009b94:	2302      	movs	r3, #2
 8009b96:	e039      	b.n	8009c0c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 f9dc 	bl	8009f5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009ba4:	f7ff fd9c 	bl	80096e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8009ba8:	210e      	movs	r1, #14
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f928 	bl	8009e00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009bb0:	7afb      	ldrb	r3, [r7, #11]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f000 f923 	bl	8009e00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009bba:	2300      	movs	r3, #0
 8009bbc:	82bb      	strh	r3, [r7, #20]
 8009bbe:	e00a      	b.n	8009bd6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009bc0:	8abb      	ldrh	r3, [r7, #20]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f918 	bl	8009e00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009bd0:	8abb      	ldrh	r3, [r7, #20]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	82bb      	strh	r3, [r7, #20]
 8009bd6:	8aba      	ldrh	r2, [r7, #20]
 8009bd8:	893b      	ldrh	r3, [r7, #8]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d3f0      	bcc.n	8009bc0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009bde:	f7ff fd6f 	bl	80096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f000 f9de 	bl	8009fa4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	75fb      	strb	r3, [r7, #23]
 8009bf4:	e001      	b.n	8009bfa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	715a      	strb	r2, [r3, #5]

    return status;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
 8009c08:	e000      	b.n	8009c0c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009c0a:	2302      	movs	r3, #2
  }
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b088      	sub	sp, #32
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	607a      	str	r2, [r7, #4]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	460b      	mov	r3, r1
 8009c22:	72fb      	strb	r3, [r7, #11]
 8009c24:	4613      	mov	r3, r2
 8009c26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	799b      	ldrb	r3, [r3, #6]
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d141      	bne.n	8009cba <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	795b      	ldrb	r3, [r3, #5]
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d101      	bne.n	8009c42 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e03c      	b.n	8009cbc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 f987 	bl	8009f5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009c4e:	f7ff fd47 	bl	80096e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8009c52:	211e      	movs	r1, #30
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 f8d3 	bl	8009e00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009c5a:	7afb      	ldrb	r3, [r7, #11]
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f8ce 	bl	8009e00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009c64:	2100      	movs	r1, #0
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 f8ca 	bl	8009e00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	82fb      	strh	r3, [r7, #22]
 8009c70:	e009      	b.n	8009c86 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009c72:	69b9      	ldr	r1, [r7, #24]
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f919 	bl	8009eac <SUBGHZSPI_Receive>
      pData++;
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009c80:	8afb      	ldrh	r3, [r7, #22]
 8009c82:	3301      	adds	r3, #1
 8009c84:	82fb      	strh	r3, [r7, #22]
 8009c86:	8afa      	ldrh	r2, [r7, #22]
 8009c88:	893b      	ldrh	r3, [r7, #8]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d3f1      	bcc.n	8009c72 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009c8e:	f7ff fd17 	bl	80096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f000 f986 	bl	8009fa4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	77fb      	strb	r3, [r7, #31]
 8009ca4:	e001      	b.n	8009caa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	715a      	strb	r2, [r3, #5]

    return status;
 8009cb6:	7ffb      	ldrb	r3, [r7, #31]
 8009cb8:	e000      	b.n	8009cbc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009cba:	2302      	movs	r3, #2
  }
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3720      	adds	r7, #32
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8009ccc:	2300      	movs	r3, #0
 8009cce:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009cd0:	f107 020c 	add.w	r2, r7, #12
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	2112      	movs	r1, #18
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f7ff fef4 	bl	8009ac6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8009cde:	7b3b      	ldrb	r3, [r7, #12]
 8009ce0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8009ce2:	89fb      	ldrh	r3, [r7, #14]
 8009ce4:	021b      	lsls	r3, r3, #8
 8009ce6:	b21a      	sxth	r2, r3
 8009ce8:	7b7b      	ldrb	r3, [r7, #13]
 8009cea:	b21b      	sxth	r3, r3
 8009cec:	4313      	orrs	r3, r2
 8009cee:	b21b      	sxth	r3, r3
 8009cf0:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009cf2:	89fb      	ldrh	r3, [r7, #14]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d002      	beq.n	8009d02 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f005 fcc9 	bl	800f694 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8009d02:	89fb      	ldrh	r3, [r7, #14]
 8009d04:	085b      	lsrs	r3, r3, #1
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d002      	beq.n	8009d14 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f005 fcce 	bl	800f6b0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8009d14:	89fb      	ldrh	r3, [r7, #14]
 8009d16:	089b      	lsrs	r3, r3, #2
 8009d18:	f003 0301 	and.w	r3, r3, #1
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d002      	beq.n	8009d26 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f005 fd1d 	bl	800f760 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8009d26:	89fb      	ldrh	r3, [r7, #14]
 8009d28:	08db      	lsrs	r3, r3, #3
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f005 fd22 	bl	800f77c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8009d38:	89fb      	ldrh	r3, [r7, #14]
 8009d3a:	091b      	lsrs	r3, r3, #4
 8009d3c:	f003 0301 	and.w	r3, r3, #1
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d002      	beq.n	8009d4a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f005 fd27 	bl	800f798 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8009d4a:	89fb      	ldrh	r3, [r7, #14]
 8009d4c:	095b      	lsrs	r3, r3, #5
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f005 fcf4 	bl	800f744 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8009d5c:	89fb      	ldrh	r3, [r7, #14]
 8009d5e:	099b      	lsrs	r3, r3, #6
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f005 fcaf 	bl	800f6cc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8009d6e:	89fb      	ldrh	r3, [r7, #14]
 8009d70:	09db      	lsrs	r3, r3, #7
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d00e      	beq.n	8009d98 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8009d7a:	89fb      	ldrh	r3, [r7, #14]
 8009d7c:	0a1b      	lsrs	r3, r3, #8
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8009d86:	2101      	movs	r1, #1
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f005 fcad 	bl	800f6e8 <HAL_SUBGHZ_CADStatusCallback>
 8009d8e:	e003      	b.n	8009d98 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8009d90:	2100      	movs	r1, #0
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f005 fca8 	bl	800f6e8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8009d98:	89fb      	ldrh	r3, [r7, #14]
 8009d9a:	0a5b      	lsrs	r3, r3, #9
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f005 fcbd 	bl	800f724 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8009daa:	f107 020c 	add.w	r2, r7, #12
 8009dae:	2302      	movs	r3, #2
 8009db0:	2102      	movs	r1, #2
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7ff fe28 	bl	8009a08 <HAL_SUBGHZ_ExecSetCmd>
}
 8009db8:	bf00      	nop
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009dc8:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <SUBGHZSPI_Init+0x3c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a0b      	ldr	r2, [pc, #44]	; (8009dfc <SUBGHZSPI_Init+0x3c>)
 8009dce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dd2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8009dd4:	4a09      	ldr	r2, [pc, #36]	; (8009dfc <SUBGHZSPI_Init+0x3c>)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8009ddc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8009dde:	4b07      	ldr	r3, [pc, #28]	; (8009dfc <SUBGHZSPI_Init+0x3c>)
 8009de0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8009de4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009de6:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <SUBGHZSPI_Init+0x3c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a04      	ldr	r2, [pc, #16]	; (8009dfc <SUBGHZSPI_Init+0x3c>)
 8009dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009df0:	6013      	str	r3, [r2, #0]
}
 8009df2:	bf00      	nop
 8009df4:	370c      	adds	r7, #12
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bc80      	pop	{r7}
 8009dfa:	4770      	bx	lr
 8009dfc:	58010000 	.word	0x58010000

08009e00 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e10:	4b23      	ldr	r3, [pc, #140]	; (8009ea0 <SUBGHZSPI_Transmit+0xa0>)
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	4613      	mov	r3, r2
 8009e16:	00db      	lsls	r3, r3, #3
 8009e18:	1a9b      	subs	r3, r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	0cdb      	lsrs	r3, r3, #19
 8009e1e:	2264      	movs	r2, #100	; 0x64
 8009e20:	fb02 f303 	mul.w	r3, r2, r3
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d105      	bne.n	8009e38 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	609a      	str	r2, [r3, #8]
      break;
 8009e36:	e008      	b.n	8009e4a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009e3e:	4b19      	ldr	r3, [pc, #100]	; (8009ea4 <SUBGHZSPI_Transmit+0xa4>)
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	f003 0302 	and.w	r3, r3, #2
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d1ed      	bne.n	8009e26 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009e4a:	4b17      	ldr	r3, [pc, #92]	; (8009ea8 <SUBGHZSPI_Transmit+0xa8>)
 8009e4c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	78fa      	ldrb	r2, [r7, #3]
 8009e52:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e54:	4b12      	ldr	r3, [pc, #72]	; (8009ea0 <SUBGHZSPI_Transmit+0xa0>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	00db      	lsls	r3, r3, #3
 8009e5c:	1a9b      	subs	r3, r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	0cdb      	lsrs	r3, r3, #19
 8009e62:	2264      	movs	r2, #100	; 0x64
 8009e64:	fb02 f303 	mul.w	r3, r2, r3
 8009e68:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d105      	bne.n	8009e7c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	609a      	str	r2, [r3, #8]
      break;
 8009e7a:	e008      	b.n	8009e8e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009e82:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <SUBGHZSPI_Transmit+0xa4>)
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d1ed      	bne.n	8009e6a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8009e8e:	4b05      	ldr	r3, [pc, #20]	; (8009ea4 <SUBGHZSPI_Transmit+0xa4>)
 8009e90:	68db      	ldr	r3, [r3, #12]

  return status;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	371c      	adds	r7, #28
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20000040 	.word	0x20000040
 8009ea4:	58010000 	.word	0x58010000
 8009ea8:	5801000c 	.word	0x5801000c

08009eac <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009eba:	4b25      	ldr	r3, [pc, #148]	; (8009f50 <SUBGHZSPI_Receive+0xa4>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	00db      	lsls	r3, r3, #3
 8009ec2:	1a9b      	subs	r3, r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	0cdb      	lsrs	r3, r3, #19
 8009ec8:	2264      	movs	r2, #100	; 0x64
 8009eca:	fb02 f303 	mul.w	r3, r2, r3
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d105      	bne.n	8009ee2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	609a      	str	r2, [r3, #8]
      break;
 8009ee0:	e008      	b.n	8009ef4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009ee8:	4b1a      	ldr	r3, [pc, #104]	; (8009f54 <SUBGHZSPI_Receive+0xa8>)
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f003 0302 	and.w	r3, r3, #2
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d1ed      	bne.n	8009ed0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009ef4:	4b18      	ldr	r3, [pc, #96]	; (8009f58 <SUBGHZSPI_Receive+0xac>)
 8009ef6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	22ff      	movs	r2, #255	; 0xff
 8009efc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009efe:	4b14      	ldr	r3, [pc, #80]	; (8009f50 <SUBGHZSPI_Receive+0xa4>)
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	4613      	mov	r3, r2
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	1a9b      	subs	r3, r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	0cdb      	lsrs	r3, r3, #19
 8009f0c:	2264      	movs	r2, #100	; 0x64
 8009f0e:	fb02 f303 	mul.w	r3, r2, r3
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d105      	bne.n	8009f26 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2201      	movs	r2, #1
 8009f22:	609a      	str	r2, [r3, #8]
      break;
 8009f24:	e008      	b.n	8009f38 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3b01      	subs	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009f2c:	4b09      	ldr	r3, [pc, #36]	; (8009f54 <SUBGHZSPI_Receive+0xa8>)
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d1ed      	bne.n	8009f14 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009f38:	4b06      	ldr	r3, [pc, #24]	; (8009f54 <SUBGHZSPI_Receive+0xa8>)
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	701a      	strb	r2, [r3, #0]

  return status;
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	371c      	adds	r7, #28
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bc80      	pop	{r7}
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	20000040 	.word	0x20000040
 8009f54:	58010000 	.word	0x58010000
 8009f58:	5801000c 	.word	0x5801000c

08009f5c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	791b      	ldrb	r3, [r3, #4]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d111      	bne.n	8009f90 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8009f6c:	4b0c      	ldr	r3, [pc, #48]	; (8009fa0 <SUBGHZ_CheckDeviceReady+0x44>)
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	4613      	mov	r3, r2
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	4413      	add	r3, r2
 8009f76:	00db      	lsls	r3, r3, #3
 8009f78:	0c1b      	lsrs	r3, r3, #16
 8009f7a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f7c:	f7ff fbb0 	bl	80096e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1f9      	bne.n	8009f80 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f8c:	f7ff fb98 	bl	80096c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 f807 	bl	8009fa4 <SUBGHZ_WaitOnBusy>
 8009f96:	4603      	mov	r3, r0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	20000040 	.word	0x20000040

08009fa4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8009fb0:	4b12      	ldr	r3, [pc, #72]	; (8009ffc <SUBGHZ_WaitOnBusy+0x58>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	005b      	lsls	r3, r3, #1
 8009fb8:	4413      	add	r3, r2
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	0d1b      	lsrs	r3, r3, #20
 8009fbe:	2264      	movs	r2, #100	; 0x64
 8009fc0:	fb02 f303 	mul.w	r3, r2, r3
 8009fc4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009fc6:	f7ff fbb9 	bl	800973c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009fca:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d105      	bne.n	8009fde <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2202      	movs	r2, #2
 8009fda:	609a      	str	r2, [r3, #8]
      break;
 8009fdc:	e009      	b.n	8009ff2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009fe4:	f7ff fb98 	bl	8009718 <LL_PWR_IsActiveFlag_RFBUSYS>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	4013      	ands	r3, r2
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d0e9      	beq.n	8009fc6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8009ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	20000040 	.word	0x20000040

0800a000 <LL_RCC_GetUSARTClockSource>:
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800a008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a00c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	401a      	ands	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	041b      	lsls	r3, r3, #16
 800a018:	4313      	orrs	r3, r2
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	370c      	adds	r7, #12
 800a01e:	46bd      	mov	sp, r7
 800a020:	bc80      	pop	{r7}
 800a022:	4770      	bx	lr

0800a024 <LL_RCC_GetLPUARTClockSource>:
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a02c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a030:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4013      	ands	r3, r2
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bc80      	pop	{r7}
 800a040:	4770      	bx	lr

0800a042 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e042      	b.n	800a0da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7f8 ffaa 	bl	8002fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2224      	movs	r2, #36	; 0x24
 800a070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f022 0201 	bic.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fd91 	bl	800abac <UART_SetConfig>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d101      	bne.n	800a094 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e022      	b.n	800a0da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fff9 	bl	800b094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	685a      	ldr	r2, [r3, #4]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689a      	ldr	r2, [r3, #8]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0201 	orr.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 f87f 	bl	800b1d6 <UART_CheckIdleState>
 800a0d8:	4603      	mov	r3, r0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b08a      	sub	sp, #40	; 0x28
 800a0e6:	af02      	add	r7, sp, #8
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	60b9      	str	r1, [r7, #8]
 800a0ec:	603b      	str	r3, [r7, #0]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	f040 8083 	bne.w	800a204 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <HAL_UART_Transmit+0x28>
 800a104:	88fb      	ldrh	r3, [r7, #6]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d101      	bne.n	800a10e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e07b      	b.n	800a206 <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a114:	2b01      	cmp	r3, #1
 800a116:	d101      	bne.n	800a11c <HAL_UART_Transmit+0x3a>
 800a118:	2302      	movs	r3, #2
 800a11a:	e074      	b.n	800a206 <HAL_UART_Transmit+0x124>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2221      	movs	r2, #33	; 0x21
 800a130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a134:	f7f8 faa0 	bl	8002678 <HAL_GetTick>
 800a138:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	88fa      	ldrh	r2, [r7, #6]
 800a13e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	88fa      	ldrh	r2, [r7, #6]
 800a146:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a152:	d108      	bne.n	800a166 <HAL_UART_Transmit+0x84>
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d104      	bne.n	800a166 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	61bb      	str	r3, [r7, #24]
 800a164:	e003      	b.n	800a16e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a176:	e02c      	b.n	800a1d2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	9300      	str	r3, [sp, #0]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	2200      	movs	r2, #0
 800a180:	2180      	movs	r1, #128	; 0x80
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f001 f872 	bl	800b26c <UART_WaitOnFlagUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e039      	b.n	800a206 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10b      	bne.n	800a1b0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a1a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	3302      	adds	r3, #2
 800a1ac:	61bb      	str	r3, [r7, #24]
 800a1ae:	e007      	b.n	800a1c0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1cc      	bne.n	800a178 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	2140      	movs	r1, #64	; 0x40
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f001 f83f 	bl	800b26c <UART_WaitOnFlagUntilTimeout>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e006      	b.n	800a206 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	e000      	b.n	800a206 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a204:	2302      	movs	r3, #2
  }
}
 800a206:	4618      	mov	r0, r3
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08a      	sub	sp, #40	; 0x28
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	4613      	mov	r3, r2
 800a21c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a224:	2b20      	cmp	r3, #32
 800a226:	d142      	bne.n	800a2ae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d002      	beq.n	800a234 <HAL_UART_Receive_IT+0x24>
 800a22e:	88fb      	ldrh	r3, [r7, #6]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d101      	bne.n	800a238 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a234:	2301      	movs	r3, #1
 800a236:	e03b      	b.n	800a2b0 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d101      	bne.n	800a246 <HAL_UART_Receive_IT+0x36>
 800a242:	2302      	movs	r3, #2
 800a244:	e034      	b.n	800a2b0 <HAL_UART_Receive_IT+0xa0>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a17      	ldr	r2, [pc, #92]	; (800a2b8 <HAL_UART_Receive_IT+0xa8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d01f      	beq.n	800a29e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d018      	beq.n	800a29e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	e853 3f00 	ldrex	r3, [r3]
 800a278:	613b      	str	r3, [r7, #16]
   return(result);
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a280:	627b      	str	r3, [r7, #36]	; 0x24
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28a:	623b      	str	r3, [r7, #32]
 800a28c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28e:	69f9      	ldr	r1, [r7, #28]
 800a290:	6a3a      	ldr	r2, [r7, #32]
 800a292:	e841 2300 	strex	r3, r2, [r1]
 800a296:	61bb      	str	r3, [r7, #24]
   return(result);
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1e6      	bne.n	800a26c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a29e:	88fb      	ldrh	r3, [r7, #6]
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	68b9      	ldr	r1, [r7, #8]
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f001 f8a9 	bl	800b3fc <UART_Start_Receive_IT>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	e000      	b.n	800a2b0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a2ae:	2302      	movs	r3, #2
  }
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3728      	adds	r7, #40	; 0x28
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	40008000 	.word	0x40008000

0800a2bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08a      	sub	sp, #40	; 0x28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d17a      	bne.n	800a3ca <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <HAL_UART_Transmit_DMA+0x24>
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e073      	b.n	800a3cc <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d101      	bne.n	800a2f2 <HAL_UART_Transmit_DMA+0x36>
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	e06c      	b.n	800a3cc <HAL_UART_Transmit_DMA+0x110>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	88fa      	ldrh	r2, [r7, #6]
 800a304:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	88fa      	ldrh	r2, [r7, #6]
 800a30c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2200      	movs	r2, #0
 800a314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2221      	movs	r2, #33	; 0x21
 800a31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a324:	2b00      	cmp	r3, #0
 800a326:	d02c      	beq.n	800a382 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a32c:	4a29      	ldr	r2, [pc, #164]	; (800a3d4 <HAL_UART_Transmit_DMA+0x118>)
 800a32e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a334:	4a28      	ldr	r2, [pc, #160]	; (800a3d8 <HAL_UART_Transmit_DMA+0x11c>)
 800a336:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a33c:	4a27      	ldr	r2, [pc, #156]	; (800a3dc <HAL_UART_Transmit_DMA+0x120>)
 800a33e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a344:	2200      	movs	r2, #0
 800a346:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a350:	4619      	mov	r1, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3328      	adds	r3, #40	; 0x28
 800a358:	461a      	mov	r2, r3
 800a35a:	88fb      	ldrh	r3, [r7, #6]
 800a35c:	f7fc fb16 	bl	800698c <HAL_DMA_Start_IT>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00d      	beq.n	800a382 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2210      	movs	r2, #16
 800a36a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2220      	movs	r2, #32
 800a37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e024      	b.n	800a3cc <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2240      	movs	r2, #64	; 0x40
 800a388:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	3308      	adds	r3, #8
 800a398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b2:	623a      	str	r2, [r7, #32]
 800a3b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b6:	69f9      	ldr	r1, [r7, #28]
 800a3b8:	6a3a      	ldr	r2, [r7, #32]
 800a3ba:	e841 2300 	strex	r3, r2, [r1]
 800a3be:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1e5      	bne.n	800a392 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e000      	b.n	800a3cc <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a3ca:	2302      	movs	r3, #2
  }
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3728      	adds	r7, #40	; 0x28
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	0800b8e7 	.word	0x0800b8e7
 800a3d8:	0800b981 	.word	0x0800b981
 800a3dc:	0800bafb 	.word	0x0800bafb

0800a3e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b09a      	sub	sp, #104	; 0x68
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a3f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3fc:	667b      	str	r3, [r7, #100]	; 0x64
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a406:	657b      	str	r3, [r7, #84]	; 0x54
 800a408:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a40c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e6      	bne.n	800a3e8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	3308      	adds	r3, #8
 800a420:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a424:	e853 3f00 	ldrex	r3, [r3]
 800a428:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a430:	f023 0301 	bic.w	r3, r3, #1
 800a434:	663b      	str	r3, [r7, #96]	; 0x60
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3308      	adds	r3, #8
 800a43c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a43e:	643a      	str	r2, [r7, #64]	; 0x40
 800a440:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a442:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a444:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a446:	e841 2300 	strex	r3, r2, [r1]
 800a44a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1e3      	bne.n	800a41a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a456:	2b01      	cmp	r3, #1
 800a458:	d118      	bne.n	800a48c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	6a3b      	ldr	r3, [r7, #32]
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	61fb      	str	r3, [r7, #28]
   return(result);
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	f023 0310 	bic.w	r3, r3, #16
 800a46e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a478:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a47a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e6      	bne.n	800a45a <HAL_UART_AbortReceive+0x7a>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a496:	2b40      	cmp	r3, #64	; 0x40
 800a498:	d137      	bne.n	800a50a <HAL_UART_AbortReceive+0x12a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4ba:	61ba      	str	r2, [r7, #24]
 800a4bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	6979      	ldr	r1, [r7, #20]
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	613b      	str	r3, [r7, #16]
   return(result);
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e5      	bne.n	800a49a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d019      	beq.n	800a50a <HAL_UART_AbortReceive+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4da:	2200      	movs	r2, #0
 800a4dc:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fc fad0 	bl	8006a88 <HAL_DMA_Abort>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00d      	beq.n	800a50a <HAL_UART_AbortReceive+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fc fc4c 	bl	8006d90 <HAL_DMA_GetError>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	d105      	bne.n	800a50a <HAL_UART_AbortReceive+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2210      	movs	r2, #16
 800a502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e017      	b.n	800a53a <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	220f      	movs	r2, #15
 800a518:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	699a      	ldr	r2, [r3, #24]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f042 0208 	orr.w	r2, r2, #8
 800a528:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3768      	adds	r7, #104	; 0x68
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b0ba      	sub	sp, #232	; 0xe8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a56a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a56e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a572:	4013      	ands	r3, r2
 800a574:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a578:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d11b      	bne.n	800a5b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d015      	beq.n	800a5b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a58c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a590:	f003 0320 	and.w	r3, r3, #32
 800a594:	2b00      	cmp	r3, #0
 800a596:	d105      	bne.n	800a5a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a59c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d009      	beq.n	800a5b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 82d6 	beq.w	800ab5a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	4798      	blx	r3
      }
      return;
 800a5b6:	e2d0      	b.n	800ab5a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 811f 	beq.w	800a800 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a5c6:	4b8b      	ldr	r3, [pc, #556]	; (800a7f4 <HAL_UART_IRQHandler+0x2b0>)
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d106      	bne.n	800a5dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a5d2:	4b89      	ldr	r3, [pc, #548]	; (800a7f8 <HAL_UART_IRQHandler+0x2b4>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 8112 	beq.w	800a800 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e0:	f003 0301 	and.w	r3, r3, #1
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d011      	beq.n	800a60c <HAL_UART_IRQHandler+0xc8>
 800a5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00b      	beq.n	800a60c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a602:	f043 0201 	orr.w	r2, r3, #1
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a60c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a610:	f003 0302 	and.w	r3, r3, #2
 800a614:	2b00      	cmp	r3, #0
 800a616:	d011      	beq.n	800a63c <HAL_UART_IRQHandler+0xf8>
 800a618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00b      	beq.n	800a63c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2202      	movs	r2, #2
 800a62a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a632:	f043 0204 	orr.w	r2, r3, #4
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a63c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a640:	f003 0304 	and.w	r3, r3, #4
 800a644:	2b00      	cmp	r3, #0
 800a646:	d011      	beq.n	800a66c <HAL_UART_IRQHandler+0x128>
 800a648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00b      	beq.n	800a66c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2204      	movs	r2, #4
 800a65a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a662:	f043 0202 	orr.w	r2, r3, #2
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	2b00      	cmp	r3, #0
 800a676:	d017      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b00      	cmp	r3, #0
 800a682:	d105      	bne.n	800a690 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a684:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a688:	4b5a      	ldr	r3, [pc, #360]	; (800a7f4 <HAL_UART_IRQHandler+0x2b0>)
 800a68a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00b      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	2208      	movs	r2, #8
 800a696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a69e:	f043 0208 	orr.w	r2, r3, #8
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d012      	beq.n	800a6da <HAL_UART_IRQHandler+0x196>
 800a6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00c      	beq.n	800a6da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6d0:	f043 0220 	orr.w	r2, r3, #32
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 823c 	beq.w	800ab5e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ea:	f003 0320 	and.w	r3, r3, #32
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d013      	beq.n	800a71a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6f6:	f003 0320 	and.w	r3, r3, #32
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d105      	bne.n	800a70a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d007      	beq.n	800a71a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	689b      	ldr	r3, [r3, #8]
 800a72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72e:	2b40      	cmp	r3, #64	; 0x40
 800a730:	d005      	beq.n	800a73e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a736:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d04f      	beq.n	800a7de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 f86c 	bl	800b81c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74e:	2b40      	cmp	r3, #64	; 0x40
 800a750:	d141      	bne.n	800a7d6 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3308      	adds	r3, #8
 800a758:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a770:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	3308      	adds	r3, #8
 800a77a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a77e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a78a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1d9      	bne.n	800a752 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d013      	beq.n	800a7ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7aa:	4a14      	ldr	r2, [pc, #80]	; (800a7fc <HAL_UART_IRQHandler+0x2b8>)
 800a7ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7fc f9c6 	bl	8006b44 <HAL_DMA_Abort_IT>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d017      	beq.n	800a7ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7cc:	e00f      	b.n	800a7ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 f9e2 	bl	800ab98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d4:	e00b      	b.n	800a7ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f9de 	bl	800ab98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7dc:	e007      	b.n	800a7ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f9da 	bl	800ab98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a7ec:	e1b7      	b.n	800ab5e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7ee:	bf00      	nop
    return;
 800a7f0:	e1b5      	b.n	800ab5e <HAL_UART_IRQHandler+0x61a>
 800a7f2:	bf00      	nop
 800a7f4:	10000001 	.word	0x10000001
 800a7f8:	04000120 	.word	0x04000120
 800a7fc:	0800bb7b 	.word	0x0800bb7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a804:	2b01      	cmp	r3, #1
 800a806:	f040 814a 	bne.w	800aa9e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800a80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a80e:	f003 0310 	and.w	r3, r3, #16
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 8143 	beq.w	800aa9e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800a818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a81c:	f003 0310 	and.w	r3, r3, #16
 800a820:	2b00      	cmp	r3, #0
 800a822:	f000 813c 	beq.w	800aa9e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2210      	movs	r2, #16
 800a82c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a838:	2b40      	cmp	r3, #64	; 0x40
 800a83a:	f040 80b5 	bne.w	800a9a8 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800a84a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 8187 	beq.w	800ab62 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a85a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a85e:	429a      	cmp	r2, r3
 800a860:	f080 817f 	bcs.w	800ab62 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a86a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0320 	and.w	r3, r3, #32
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f040 8086 	bne.w	800a98c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a888:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a894:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a89c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a8ae:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a8b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a8ba:	e841 2300 	strex	r3, r2, [r1]
 800a8be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a8c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1da      	bne.n	800a880 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a8da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8dc:	f023 0301 	bic.w	r3, r3, #1
 800a8e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a8ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a8f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a8f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8fa:	e841 2300 	strex	r3, r2, [r1]
 800a8fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e1      	bne.n	800a8ca <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3308      	adds	r3, #8
 800a90c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a91c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3308      	adds	r3, #8
 800a926:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a92a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a92c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a930:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e3      	bne.n	800a906 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2220      	movs	r2, #32
 800a942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a95a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a95c:	f023 0310 	bic.w	r3, r3, #16
 800a960:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	461a      	mov	r2, r3
 800a96a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a96e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a970:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a972:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a974:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a976:	e841 2300 	strex	r3, r2, [r1]
 800a97a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1e4      	bne.n	800a94c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a986:	4618      	mov	r0, r3
 800a988:	f7fc f87e 	bl	8006a88 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a998:	b29b      	uxth	r3, r3
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7f8 fca7 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a9a6:	e0dc      	b.n	800ab62 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 80ce 	beq.w	800ab66 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800a9ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 80c9 	beq.w	800ab66 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9dc:	e853 3f00 	ldrex	r3, [r3]
 800a9e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9f6:	647b      	str	r3, [r7, #68]	; 0x44
 800a9f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e4      	bne.n	800a9d4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3308      	adds	r3, #8
 800aa10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	e853 3f00 	ldrex	r3, [r3]
 800aa18:	623b      	str	r3, [r7, #32]
   return(result);
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa20:	f023 0301 	bic.w	r3, r3, #1
 800aa24:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	3308      	adds	r3, #8
 800aa2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa32:	633a      	str	r2, [r7, #48]	; 0x30
 800aa34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa3a:	e841 2300 	strex	r3, r2, [r1]
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d1e1      	bne.n	800aa0a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2220      	movs	r2, #32
 800aa4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f023 0310 	bic.w	r3, r3, #16
 800aa6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	461a      	mov	r2, r3
 800aa78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa7c:	61fb      	str	r3, [r7, #28]
 800aa7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa80:	69b9      	ldr	r1, [r7, #24]
 800aa82:	69fa      	ldr	r2, [r7, #28]
 800aa84:	e841 2300 	strex	r3, r2, [r1]
 800aa88:	617b      	str	r3, [r7, #20]
   return(result);
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e4      	bne.n	800aa5a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa94:	4619      	mov	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7f8 fc2c 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800aa9c:	e063      	b.n	800ab66 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00e      	beq.n	800aac8 <HAL_UART_IRQHandler+0x584>
 800aaaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d008      	beq.n	800aac8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aabe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f001 fcf7 	bl	800c4b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aac6:	e051      	b.n	800ab6c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d014      	beq.n	800aafe <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d105      	bne.n	800aaec <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aae4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d008      	beq.n	800aafe <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d03a      	beq.n	800ab6a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	4798      	blx	r3
    }
    return;
 800aafc:	e035      	b.n	800ab6a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aafe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d009      	beq.n	800ab1e <HAL_UART_IRQHandler+0x5da>
 800ab0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f001 f845 	bl	800bba6 <UART_EndTransmit_IT>
    return;
 800ab1c:	e026      	b.n	800ab6c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d009      	beq.n	800ab3e <HAL_UART_IRQHandler+0x5fa>
 800ab2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab2e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f001 fcce 	bl	800c4d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab3c:	e016      	b.n	800ab6c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d010      	beq.n	800ab6c <HAL_UART_IRQHandler+0x628>
 800ab4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da0c      	bge.n	800ab6c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f001 fcb7 	bl	800c4c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab58:	e008      	b.n	800ab6c <HAL_UART_IRQHandler+0x628>
      return;
 800ab5a:	bf00      	nop
 800ab5c:	e006      	b.n	800ab6c <HAL_UART_IRQHandler+0x628>
    return;
 800ab5e:	bf00      	nop
 800ab60:	e004      	b.n	800ab6c <HAL_UART_IRQHandler+0x628>
      return;
 800ab62:	bf00      	nop
 800ab64:	e002      	b.n	800ab6c <HAL_UART_IRQHandler+0x628>
      return;
 800ab66:	bf00      	nop
 800ab68:	e000      	b.n	800ab6c <HAL_UART_IRQHandler+0x628>
    return;
 800ab6a:	bf00      	nop
  }
}
 800ab6c:	37e8      	adds	r7, #232	; 0xe8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop

0800ab74 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bc80      	pop	{r7}
 800ab84:	4770      	bx	lr

0800ab86 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab8e:	bf00      	nop
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bc80      	pop	{r7}
 800ab96:	4770      	bx	lr

0800ab98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bc80      	pop	{r7}
 800aba8:	4770      	bx	lr
	...

0800abac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abb0:	b08c      	sub	sp, #48	; 0x30
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	689a      	ldr	r2, [r3, #8]
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	431a      	orrs	r2, r3
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	695b      	ldr	r3, [r3, #20]
 800abca:	431a      	orrs	r2, r3
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	4b94      	ldr	r3, [pc, #592]	; (800ae2c <UART_SetConfig+0x280>)
 800abdc:	4013      	ands	r3, r2
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	6812      	ldr	r2, [r2, #0]
 800abe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abe4:	430b      	orrs	r3, r1
 800abe6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	68da      	ldr	r2, [r3, #12]
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	699b      	ldr	r3, [r3, #24]
 800ac02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a89      	ldr	r2, [pc, #548]	; (800ae30 <UART_SetConfig+0x284>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d004      	beq.n	800ac18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac14:	4313      	orrs	r3, r2
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ac22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	6812      	ldr	r2, [r2, #0]
 800ac2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac2c:	430b      	orrs	r3, r1
 800ac2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac36:	f023 010f 	bic.w	r1, r3, #15
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	430a      	orrs	r2, r1
 800ac44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a7a      	ldr	r2, [pc, #488]	; (800ae34 <UART_SetConfig+0x288>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d127      	bne.n	800aca0 <UART_SetConfig+0xf4>
 800ac50:	2003      	movs	r0, #3
 800ac52:	f7ff f9d5 	bl	800a000 <LL_RCC_GetUSARTClockSource>
 800ac56:	4603      	mov	r3, r0
 800ac58:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800ac5c:	2b03      	cmp	r3, #3
 800ac5e:	d81b      	bhi.n	800ac98 <UART_SetConfig+0xec>
 800ac60:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <UART_SetConfig+0xbc>)
 800ac62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac66:	bf00      	nop
 800ac68:	0800ac79 	.word	0x0800ac79
 800ac6c:	0800ac89 	.word	0x0800ac89
 800ac70:	0800ac81 	.word	0x0800ac81
 800ac74:	0800ac91 	.word	0x0800ac91
 800ac78:	2301      	movs	r3, #1
 800ac7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac7e:	e080      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ac80:	2302      	movs	r3, #2
 800ac82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac86:	e07c      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ac88:	2304      	movs	r3, #4
 800ac8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac8e:	e078      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ac90:	2308      	movs	r3, #8
 800ac92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac96:	e074      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ac98:	2310      	movs	r3, #16
 800ac9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac9e:	e070      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a64      	ldr	r2, [pc, #400]	; (800ae38 <UART_SetConfig+0x28c>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d138      	bne.n	800ad1c <UART_SetConfig+0x170>
 800acaa:	200c      	movs	r0, #12
 800acac:	f7ff f9a8 	bl	800a000 <LL_RCC_GetUSARTClockSource>
 800acb0:	4603      	mov	r3, r0
 800acb2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800acb6:	2b0c      	cmp	r3, #12
 800acb8:	d82c      	bhi.n	800ad14 <UART_SetConfig+0x168>
 800acba:	a201      	add	r2, pc, #4	; (adr r2, 800acc0 <UART_SetConfig+0x114>)
 800acbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acc0:	0800acf5 	.word	0x0800acf5
 800acc4:	0800ad15 	.word	0x0800ad15
 800acc8:	0800ad15 	.word	0x0800ad15
 800accc:	0800ad15 	.word	0x0800ad15
 800acd0:	0800ad05 	.word	0x0800ad05
 800acd4:	0800ad15 	.word	0x0800ad15
 800acd8:	0800ad15 	.word	0x0800ad15
 800acdc:	0800ad15 	.word	0x0800ad15
 800ace0:	0800acfd 	.word	0x0800acfd
 800ace4:	0800ad15 	.word	0x0800ad15
 800ace8:	0800ad15 	.word	0x0800ad15
 800acec:	0800ad15 	.word	0x0800ad15
 800acf0:	0800ad0d 	.word	0x0800ad0d
 800acf4:	2300      	movs	r3, #0
 800acf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acfa:	e042      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800acfc:	2302      	movs	r3, #2
 800acfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad02:	e03e      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad04:	2304      	movs	r3, #4
 800ad06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad0a:	e03a      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad0c:	2308      	movs	r3, #8
 800ad0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad12:	e036      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad14:	2310      	movs	r3, #16
 800ad16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad1a:	e032      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a43      	ldr	r2, [pc, #268]	; (800ae30 <UART_SetConfig+0x284>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d12a      	bne.n	800ad7c <UART_SetConfig+0x1d0>
 800ad26:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ad2a:	f7ff f97b 	bl	800a024 <LL_RCC_GetLPUARTClockSource>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad34:	d01a      	beq.n	800ad6c <UART_SetConfig+0x1c0>
 800ad36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad3a:	d81b      	bhi.n	800ad74 <UART_SetConfig+0x1c8>
 800ad3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad40:	d00c      	beq.n	800ad5c <UART_SetConfig+0x1b0>
 800ad42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad46:	d815      	bhi.n	800ad74 <UART_SetConfig+0x1c8>
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d003      	beq.n	800ad54 <UART_SetConfig+0x1a8>
 800ad4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad50:	d008      	beq.n	800ad64 <UART_SetConfig+0x1b8>
 800ad52:	e00f      	b.n	800ad74 <UART_SetConfig+0x1c8>
 800ad54:	2300      	movs	r3, #0
 800ad56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad5a:	e012      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad5c:	2302      	movs	r3, #2
 800ad5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad62:	e00e      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad64:	2304      	movs	r3, #4
 800ad66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad6a:	e00a      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad6c:	2308      	movs	r3, #8
 800ad6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad72:	e006      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad74:	2310      	movs	r3, #16
 800ad76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad7a:	e002      	b.n	800ad82 <UART_SetConfig+0x1d6>
 800ad7c:	2310      	movs	r3, #16
 800ad7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a2a      	ldr	r2, [pc, #168]	; (800ae30 <UART_SetConfig+0x284>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	f040 80a4 	bne.w	800aed6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad92:	2b08      	cmp	r3, #8
 800ad94:	d823      	bhi.n	800adde <UART_SetConfig+0x232>
 800ad96:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <UART_SetConfig+0x1f0>)
 800ad98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9c:	0800adc1 	.word	0x0800adc1
 800ada0:	0800addf 	.word	0x0800addf
 800ada4:	0800adc9 	.word	0x0800adc9
 800ada8:	0800addf 	.word	0x0800addf
 800adac:	0800adcf 	.word	0x0800adcf
 800adb0:	0800addf 	.word	0x0800addf
 800adb4:	0800addf 	.word	0x0800addf
 800adb8:	0800addf 	.word	0x0800addf
 800adbc:	0800add7 	.word	0x0800add7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adc0:	f7fd fe02 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800adc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adc6:	e010      	b.n	800adea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adc8:	4b1c      	ldr	r3, [pc, #112]	; (800ae3c <UART_SetConfig+0x290>)
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800adcc:	e00d      	b.n	800adea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adce:	f7fd fd47 	bl	8008860 <HAL_RCC_GetSysClockFreq>
 800add2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800add4:	e009      	b.n	800adea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800add6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800addc:	e005      	b.n	800adea <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ade8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	2b00      	cmp	r3, #0
 800adee:	f000 8137 	beq.w	800b060 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf6:	4a12      	ldr	r2, [pc, #72]	; (800ae40 <UART_SetConfig+0x294>)
 800adf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adfc:	461a      	mov	r2, r3
 800adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae00:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	4413      	add	r3, r2
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d305      	bcc.n	800ae22 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d910      	bls.n	800ae44 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae28:	e11a      	b.n	800b060 <UART_SetConfig+0x4b4>
 800ae2a:	bf00      	nop
 800ae2c:	cfff69f3 	.word	0xcfff69f3
 800ae30:	40008000 	.word	0x40008000
 800ae34:	40013800 	.word	0x40013800
 800ae38:	40004400 	.word	0x40004400
 800ae3c:	00f42400 	.word	0x00f42400
 800ae40:	08015730 	.word	0x08015730
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae46:	2200      	movs	r2, #0
 800ae48:	60bb      	str	r3, [r7, #8]
 800ae4a:	60fa      	str	r2, [r7, #12]
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae50:	4a8e      	ldr	r2, [pc, #568]	; (800b08c <UART_SetConfig+0x4e0>)
 800ae52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	2200      	movs	r2, #0
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	607a      	str	r2, [r7, #4]
 800ae5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae66:	f7f6 f99b 	bl	80011a0 <__aeabi_uldivmod>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4610      	mov	r0, r2
 800ae70:	4619      	mov	r1, r3
 800ae72:	f04f 0200 	mov.w	r2, #0
 800ae76:	f04f 0300 	mov.w	r3, #0
 800ae7a:	020b      	lsls	r3, r1, #8
 800ae7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae80:	0202      	lsls	r2, r0, #8
 800ae82:	6979      	ldr	r1, [r7, #20]
 800ae84:	6849      	ldr	r1, [r1, #4]
 800ae86:	0849      	lsrs	r1, r1, #1
 800ae88:	2000      	movs	r0, #0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	eb12 0804 	adds.w	r8, r2, r4
 800ae92:	eb43 0905 	adc.w	r9, r3, r5
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	469a      	mov	sl, r3
 800ae9e:	4693      	mov	fp, r2
 800aea0:	4652      	mov	r2, sl
 800aea2:	465b      	mov	r3, fp
 800aea4:	4640      	mov	r0, r8
 800aea6:	4649      	mov	r1, r9
 800aea8:	f7f6 f97a 	bl	80011a0 <__aeabi_uldivmod>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeba:	d308      	bcc.n	800aece <UART_SetConfig+0x322>
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aec2:	d204      	bcs.n	800aece <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6a3a      	ldr	r2, [r7, #32]
 800aeca:	60da      	str	r2, [r3, #12]
 800aecc:	e0c8      	b.n	800b060 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aed4:	e0c4      	b.n	800b060 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aede:	d168      	bne.n	800afb2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800aee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aee4:	2b08      	cmp	r3, #8
 800aee6:	d828      	bhi.n	800af3a <UART_SetConfig+0x38e>
 800aee8:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <UART_SetConfig+0x344>)
 800aeea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeee:	bf00      	nop
 800aef0:	0800af15 	.word	0x0800af15
 800aef4:	0800af1d 	.word	0x0800af1d
 800aef8:	0800af25 	.word	0x0800af25
 800aefc:	0800af3b 	.word	0x0800af3b
 800af00:	0800af2b 	.word	0x0800af2b
 800af04:	0800af3b 	.word	0x0800af3b
 800af08:	0800af3b 	.word	0x0800af3b
 800af0c:	0800af3b 	.word	0x0800af3b
 800af10:	0800af33 	.word	0x0800af33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af14:	f7fd fd58 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800af18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af1a:	e014      	b.n	800af46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af1c:	f7fd fd66 	bl	80089ec <HAL_RCC_GetPCLK2Freq>
 800af20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af22:	e010      	b.n	800af46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af24:	4b5a      	ldr	r3, [pc, #360]	; (800b090 <UART_SetConfig+0x4e4>)
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af28:	e00d      	b.n	800af46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af2a:	f7fd fc99 	bl	8008860 <HAL_RCC_GetSysClockFreq>
 800af2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af30:	e009      	b.n	800af46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af38:	e005      	b.n	800af46 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f000 8089 	beq.w	800b060 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af52:	4a4e      	ldr	r2, [pc, #312]	; (800b08c <UART_SetConfig+0x4e0>)
 800af54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af58:	461a      	mov	r2, r3
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af60:	005a      	lsls	r2, r3, #1
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	085b      	lsrs	r3, r3, #1
 800af68:	441a      	add	r2, r3
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af72:	b29b      	uxth	r3, r3
 800af74:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af76:	6a3b      	ldr	r3, [r7, #32]
 800af78:	2b0f      	cmp	r3, #15
 800af7a:	d916      	bls.n	800afaa <UART_SetConfig+0x3fe>
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af82:	d212      	bcs.n	800afaa <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af84:	6a3b      	ldr	r3, [r7, #32]
 800af86:	b29b      	uxth	r3, r3
 800af88:	f023 030f 	bic.w	r3, r3, #15
 800af8c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af8e:	6a3b      	ldr	r3, [r7, #32]
 800af90:	085b      	lsrs	r3, r3, #1
 800af92:	b29b      	uxth	r3, r3
 800af94:	f003 0307 	and.w	r3, r3, #7
 800af98:	b29a      	uxth	r2, r3
 800af9a:	8bfb      	ldrh	r3, [r7, #30]
 800af9c:	4313      	orrs	r3, r2
 800af9e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	8bfa      	ldrh	r2, [r7, #30]
 800afa6:	60da      	str	r2, [r3, #12]
 800afa8:	e05a      	b.n	800b060 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800afb0:	e056      	b.n	800b060 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afb6:	2b08      	cmp	r3, #8
 800afb8:	d827      	bhi.n	800b00a <UART_SetConfig+0x45e>
 800afba:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <UART_SetConfig+0x414>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afe5 	.word	0x0800afe5
 800afc4:	0800afed 	.word	0x0800afed
 800afc8:	0800aff5 	.word	0x0800aff5
 800afcc:	0800b00b 	.word	0x0800b00b
 800afd0:	0800affb 	.word	0x0800affb
 800afd4:	0800b00b 	.word	0x0800b00b
 800afd8:	0800b00b 	.word	0x0800b00b
 800afdc:	0800b00b 	.word	0x0800b00b
 800afe0:	0800b003 	.word	0x0800b003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afe4:	f7fd fcf0 	bl	80089c8 <HAL_RCC_GetPCLK1Freq>
 800afe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afea:	e014      	b.n	800b016 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afec:	f7fd fcfe 	bl	80089ec <HAL_RCC_GetPCLK2Freq>
 800aff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aff2:	e010      	b.n	800b016 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aff4:	4b26      	ldr	r3, [pc, #152]	; (800b090 <UART_SetConfig+0x4e4>)
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aff8:	e00d      	b.n	800b016 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800affa:	f7fd fc31 	bl	8008860 <HAL_RCC_GetSysClockFreq>
 800affe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b000:	e009      	b.n	800b016 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b008:	e005      	b.n	800b016 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b014:	bf00      	nop
    }

    if (pclk != 0U)
 800b016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d021      	beq.n	800b060 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b020:	4a1a      	ldr	r2, [pc, #104]	; (800b08c <UART_SetConfig+0x4e0>)
 800b022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b026:	461a      	mov	r2, r3
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	085b      	lsrs	r3, r3, #1
 800b034:	441a      	add	r2, r3
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b03e:	b29b      	uxth	r3, r3
 800b040:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	2b0f      	cmp	r3, #15
 800b046:	d908      	bls.n	800b05a <UART_SetConfig+0x4ae>
 800b048:	6a3b      	ldr	r3, [r7, #32]
 800b04a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b04e:	d204      	bcs.n	800b05a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	6a3a      	ldr	r2, [r7, #32]
 800b056:	60da      	str	r2, [r3, #12]
 800b058:	e002      	b.n	800b060 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2201      	movs	r2, #1
 800b064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2200      	movs	r2, #0
 800b074:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2200      	movs	r2, #0
 800b07a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b07c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b080:	4618      	mov	r0, r3
 800b082:	3730      	adds	r7, #48	; 0x30
 800b084:	46bd      	mov	sp, r7
 800b086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b08a:	bf00      	nop
 800b08c:	08015730 	.word	0x08015730
 800b090:	00f42400 	.word	0x00f42400

0800b094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00a      	beq.n	800b0be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	430a      	orrs	r2, r1
 800b0bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c2:	f003 0302 	and.w	r3, r3, #2
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00a      	beq.n	800b0e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0e4:	f003 0304 	and.w	r3, r3, #4
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00a      	beq.n	800b102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	430a      	orrs	r2, r1
 800b100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b106:	f003 0308 	and.w	r3, r3, #8
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d00a      	beq.n	800b124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	430a      	orrs	r2, r1
 800b122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b128:	f003 0310 	and.w	r3, r3, #16
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00a      	beq.n	800b146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	430a      	orrs	r2, r1
 800b144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b14a:	f003 0320 	and.w	r3, r3, #32
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00a      	beq.n	800b168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	430a      	orrs	r2, r1
 800b166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b170:	2b00      	cmp	r3, #0
 800b172:	d01a      	beq.n	800b1aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b192:	d10a      	bne.n	800b1aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	430a      	orrs	r2, r1
 800b1a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00a      	beq.n	800b1cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	430a      	orrs	r2, r1
 800b1ca:	605a      	str	r2, [r3, #4]
  }
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bc80      	pop	{r7}
 800b1d4:	4770      	bx	lr

0800b1d6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1d6:	b580      	push	{r7, lr}
 800b1d8:	b086      	sub	sp, #24
 800b1da:	af02      	add	r7, sp, #8
 800b1dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1e6:	f7f7 fa47 	bl	8002678 <HAL_GetTick>
 800b1ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0308 	and.w	r3, r3, #8
 800b1f6:	2b08      	cmp	r3, #8
 800b1f8:	d10e      	bne.n	800b218 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f82f 	bl	800b26c <UART_WaitOnFlagUntilTimeout>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	e025      	b.n	800b264 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 0304 	and.w	r3, r3, #4
 800b222:	2b04      	cmp	r3, #4
 800b224:	d10e      	bne.n	800b244 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f819 	bl	800b26c <UART_WaitOnFlagUntilTimeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e00f      	b.n	800b264 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2220      	movs	r2, #32
 800b248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2220      	movs	r2, #32
 800b250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2200      	movs	r2, #0
 800b258:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b09c      	sub	sp, #112	; 0x70
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	60b9      	str	r1, [r7, #8]
 800b276:	603b      	str	r3, [r7, #0]
 800b278:	4613      	mov	r3, r2
 800b27a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b27c:	e0a9      	b.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b27e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b284:	f000 80a5 	beq.w	800b3d2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b288:	f7f7 f9f6 	bl	8002678 <HAL_GetTick>
 800b28c:	4602      	mov	r2, r0
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b294:	429a      	cmp	r2, r3
 800b296:	d302      	bcc.n	800b29e <UART_WaitOnFlagUntilTimeout+0x32>
 800b298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d140      	bne.n	800b320 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a6:	e853 3f00 	ldrex	r3, [r3]
 800b2aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2b2:	667b      	str	r3, [r7, #100]	; 0x64
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2be:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2c4:	e841 2300 	strex	r3, r2, [r1]
 800b2c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b2ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1e6      	bne.n	800b29e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2da:	e853 3f00 	ldrex	r3, [r3]
 800b2de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	f023 0301 	bic.w	r3, r3, #1
 800b2e6:	663b      	str	r3, [r7, #96]	; 0x60
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3308      	adds	r3, #8
 800b2ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2f0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2f8:	e841 2300 	strex	r3, r2, [r1]
 800b2fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1e5      	bne.n	800b2d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2220      	movs	r2, #32
 800b308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2220      	movs	r2, #32
 800b310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e069      	b.n	800b3f4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d051      	beq.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	69db      	ldr	r3, [r3, #28]
 800b334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b33c:	d149      	bne.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b346:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	e853 3f00 	ldrex	r3, [r3]
 800b354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b35c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	461a      	mov	r2, r3
 800b364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b366:	637b      	str	r3, [r7, #52]	; 0x34
 800b368:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b36c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b36e:	e841 2300 	strex	r3, r2, [r1]
 800b372:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1e6      	bne.n	800b348 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	3308      	adds	r3, #8
 800b380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	e853 3f00 	ldrex	r3, [r3]
 800b388:	613b      	str	r3, [r7, #16]
   return(result);
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	f023 0301 	bic.w	r3, r3, #1
 800b390:	66bb      	str	r3, [r7, #104]	; 0x68
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	3308      	adds	r3, #8
 800b398:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b39a:	623a      	str	r2, [r7, #32]
 800b39c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39e:	69f9      	ldr	r1, [r7, #28]
 800b3a0:	6a3a      	ldr	r2, [r7, #32]
 800b3a2:	e841 2300 	strex	r3, r2, [r1]
 800b3a6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1e5      	bne.n	800b37a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2220      	movs	r2, #32
 800b3b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2220      	movs	r2, #32
 800b3ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2220      	movs	r2, #32
 800b3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e010      	b.n	800b3f4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69da      	ldr	r2, [r3, #28]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	4013      	ands	r3, r2
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	bf0c      	ite	eq
 800b3e2:	2301      	moveq	r3, #1
 800b3e4:	2300      	movne	r3, #0
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	79fb      	ldrb	r3, [r7, #7]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	f43f af46 	beq.w	800b27e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3770      	adds	r7, #112	; 0x70
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b0a3      	sub	sp, #140	; 0x8c
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	4613      	mov	r3, r2
 800b408:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	88fa      	ldrh	r2, [r7, #6]
 800b414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	88fa      	ldrh	r2, [r7, #6]
 800b41c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b42e:	d10e      	bne.n	800b44e <UART_Start_Receive_IT+0x52>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d105      	bne.n	800b444 <UART_Start_Receive_IT+0x48>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b43e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b442:	e02d      	b.n	800b4a0 <UART_Start_Receive_IT+0xa4>
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	22ff      	movs	r2, #255	; 0xff
 800b448:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b44c:	e028      	b.n	800b4a0 <UART_Start_Receive_IT+0xa4>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10d      	bne.n	800b472 <UART_Start_Receive_IT+0x76>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d104      	bne.n	800b468 <UART_Start_Receive_IT+0x6c>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	22ff      	movs	r2, #255	; 0xff
 800b462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b466:	e01b      	b.n	800b4a0 <UART_Start_Receive_IT+0xa4>
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	227f      	movs	r2, #127	; 0x7f
 800b46c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b470:	e016      	b.n	800b4a0 <UART_Start_Receive_IT+0xa4>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b47a:	d10d      	bne.n	800b498 <UART_Start_Receive_IT+0x9c>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d104      	bne.n	800b48e <UART_Start_Receive_IT+0x92>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	227f      	movs	r2, #127	; 0x7f
 800b488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b48c:	e008      	b.n	800b4a0 <UART_Start_Receive_IT+0xa4>
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	223f      	movs	r2, #63	; 0x3f
 800b492:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b496:	e003      	b.n	800b4a0 <UART_Start_Receive_IT+0xa4>
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2222      	movs	r2, #34	; 0x22
 800b4ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4ba:	e853 3f00 	ldrex	r3, [r3]
 800b4be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b4c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4c2:	f043 0301 	orr.w	r3, r3, #1
 800b4c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3308      	adds	r3, #8
 800b4d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b4d4:	673a      	str	r2, [r7, #112]	; 0x70
 800b4d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b4da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b4dc:	e841 2300 	strex	r3, r2, [r1]
 800b4e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b4e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1e3      	bne.n	800b4b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f0:	d153      	bne.n	800b59a <UART_Start_Receive_IT+0x19e>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b4f8:	88fa      	ldrh	r2, [r7, #6]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d34d      	bcc.n	800b59a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b506:	d107      	bne.n	800b518 <UART_Start_Receive_IT+0x11c>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d103      	bne.n	800b518 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	4a4a      	ldr	r2, [pc, #296]	; (800b63c <UART_Start_Receive_IT+0x240>)
 800b514:	671a      	str	r2, [r3, #112]	; 0x70
 800b516:	e002      	b.n	800b51e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4a49      	ldr	r2, [pc, #292]	; (800b640 <UART_Start_Receive_IT+0x244>)
 800b51c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d01a      	beq.n	800b564 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b53c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b53e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b550:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b552:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b556:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e4      	bne.n	800b52e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	3308      	adds	r3, #8
 800b56a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56e:	e853 3f00 	ldrex	r3, [r3]
 800b572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b57a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3308      	adds	r3, #8
 800b582:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b584:	64ba      	str	r2, [r7, #72]	; 0x48
 800b586:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b588:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b58a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b58c:	e841 2300 	strex	r3, r2, [r1]
 800b590:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e5      	bne.n	800b564 <UART_Start_Receive_IT+0x168>
 800b598:	e04a      	b.n	800b630 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	689b      	ldr	r3, [r3, #8]
 800b59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5a2:	d107      	bne.n	800b5b4 <UART_Start_Receive_IT+0x1b8>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d103      	bne.n	800b5b4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4a25      	ldr	r2, [pc, #148]	; (800b644 <UART_Start_Receive_IT+0x248>)
 800b5b0:	671a      	str	r2, [r3, #112]	; 0x70
 800b5b2:	e002      	b.n	800b5ba <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	4a24      	ldr	r2, [pc, #144]	; (800b648 <UART_Start_Receive_IT+0x24c>)
 800b5b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d019      	beq.n	800b5fe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d2:	e853 3f00 	ldrex	r3, [r3]
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b5de:	677b      	str	r3, [r7, #116]	; 0x74
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5f0:	e841 2300 	strex	r3, r2, [r1]
 800b5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d1e6      	bne.n	800b5ca <UART_Start_Receive_IT+0x1ce>
 800b5fc:	e018      	b.n	800b630 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	e853 3f00 	ldrex	r3, [r3]
 800b60a:	613b      	str	r3, [r7, #16]
   return(result);
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	f043 0320 	orr.w	r3, r3, #32
 800b612:	67bb      	str	r3, [r7, #120]	; 0x78
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	461a      	mov	r2, r3
 800b61a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b61c:	623b      	str	r3, [r7, #32]
 800b61e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b620:	69f9      	ldr	r1, [r7, #28]
 800b622:	6a3a      	ldr	r2, [r7, #32]
 800b624:	e841 2300 	strex	r3, r2, [r1]
 800b628:	61bb      	str	r3, [r7, #24]
   return(result);
 800b62a:	69bb      	ldr	r3, [r7, #24]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d1e6      	bne.n	800b5fe <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	378c      	adds	r7, #140	; 0x8c
 800b636:	46bd      	mov	sp, r7
 800b638:	bc80      	pop	{r7}
 800b63a:	4770      	bx	lr
 800b63c:	0800c1b5 	.word	0x0800c1b5
 800b640:	0800bebd 	.word	0x0800bebd
 800b644:	0800bd5d 	.word	0x0800bd5d
 800b648:	0800bbfd 	.word	0x0800bbfd

0800b64c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b096      	sub	sp, #88	; 0x58
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	4613      	mov	r3, r2
 800b658:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	88fa      	ldrh	r2, [r7, #6]
 800b664:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2200      	movs	r2, #0
 800b66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2222      	movs	r2, #34	; 0x22
 800b674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d02c      	beq.n	800b6da <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b684:	4a42      	ldr	r2, [pc, #264]	; (800b790 <UART_Start_Receive_DMA+0x144>)
 800b686:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b68c:	4a41      	ldr	r2, [pc, #260]	; (800b794 <UART_Start_Receive_DMA+0x148>)
 800b68e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b694:	4a40      	ldr	r2, [pc, #256]	; (800b798 <UART_Start_Receive_DMA+0x14c>)
 800b696:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b69c:	2200      	movs	r2, #0
 800b69e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	3324      	adds	r3, #36	; 0x24
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	88fb      	ldrh	r3, [r7, #6]
 800b6b4:	f7fb f96a 	bl	800698c <HAL_DMA_Start_IT>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00d      	beq.n	800b6da <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2210      	movs	r2, #16
 800b6c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e055      	b.n	800b786 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d018      	beq.n	800b71c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f2:	e853 3f00 	ldrex	r3, [r3]
 800b6f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6fe:	657b      	str	r3, [r7, #84]	; 0x54
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	461a      	mov	r2, r3
 800b706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b708:	64bb      	str	r3, [r7, #72]	; 0x48
 800b70a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b70e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b710:	e841 2300 	strex	r3, r2, [r1]
 800b714:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1e6      	bne.n	800b6ea <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3308      	adds	r3, #8
 800b722:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b726:	e853 3f00 	ldrex	r3, [r3]
 800b72a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72e:	f043 0301 	orr.w	r3, r3, #1
 800b732:	653b      	str	r3, [r7, #80]	; 0x50
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	3308      	adds	r3, #8
 800b73a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b73c:	637a      	str	r2, [r7, #52]	; 0x34
 800b73e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b744:	e841 2300 	strex	r3, r2, [r1]
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1e5      	bne.n	800b71c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3308      	adds	r3, #8
 800b756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	e853 3f00 	ldrex	r3, [r3]
 800b75e:	613b      	str	r3, [r7, #16]
   return(result);
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b766:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3308      	adds	r3, #8
 800b76e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b770:	623a      	str	r2, [r7, #32]
 800b772:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b774:	69f9      	ldr	r1, [r7, #28]
 800b776:	6a3a      	ldr	r2, [r7, #32]
 800b778:	e841 2300 	strex	r3, r2, [r1]
 800b77c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e5      	bne.n	800b750 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3758      	adds	r7, #88	; 0x58
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	0800b99d 	.word	0x0800b99d
 800b794:	0800bac3 	.word	0x0800bac3
 800b798:	0800bafb 	.word	0x0800bafb

0800b79c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b08f      	sub	sp, #60	; 0x3c
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	6a3b      	ldr	r3, [r7, #32]
 800b7ac:	e853 3f00 	ldrex	r3, [r3]
 800b7b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b7b8:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7c4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e6      	bne.n	800b7a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3308      	adds	r3, #8
 800b7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	e853 3f00 	ldrex	r3, [r3]
 800b7e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b7ec:	633b      	str	r3, [r7, #48]	; 0x30
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	3308      	adds	r3, #8
 800b7f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7f6:	61ba      	str	r2, [r7, #24]
 800b7f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fa:	6979      	ldr	r1, [r7, #20]
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	e841 2300 	strex	r3, r2, [r1]
 800b802:	613b      	str	r3, [r7, #16]
   return(result);
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1e5      	bne.n	800b7d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2220      	movs	r2, #32
 800b80e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b812:	bf00      	nop
 800b814:	373c      	adds	r7, #60	; 0x3c
 800b816:	46bd      	mov	sp, r7
 800b818:	bc80      	pop	{r7}
 800b81a:	4770      	bx	lr

0800b81c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b095      	sub	sp, #84	; 0x54
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82c:	e853 3f00 	ldrex	r3, [r3]
 800b830:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b842:	643b      	str	r3, [r7, #64]	; 0x40
 800b844:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b846:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b84a:	e841 2300 	strex	r3, r2, [r1]
 800b84e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1e6      	bne.n	800b824 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3308      	adds	r3, #8
 800b85c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85e:	6a3b      	ldr	r3, [r7, #32]
 800b860:	e853 3f00 	ldrex	r3, [r3]
 800b864:	61fb      	str	r3, [r7, #28]
   return(result);
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b86c:	f023 0301 	bic.w	r3, r3, #1
 800b870:	64bb      	str	r3, [r7, #72]	; 0x48
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	3308      	adds	r3, #8
 800b878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b87a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b87c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b882:	e841 2300 	strex	r3, r2, [r1]
 800b886:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1e3      	bne.n	800b856 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b892:	2b01      	cmp	r3, #1
 800b894:	d118      	bne.n	800b8c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	e853 3f00 	ldrex	r3, [r3]
 800b8a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f023 0310 	bic.w	r3, r3, #16
 800b8aa:	647b      	str	r3, [r7, #68]	; 0x44
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b4:	61bb      	str	r3, [r7, #24]
 800b8b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	6979      	ldr	r1, [r7, #20]
 800b8ba:	69ba      	ldr	r2, [r7, #24]
 800b8bc:	e841 2300 	strex	r3, r2, [r1]
 800b8c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e6      	bne.n	800b896 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b8dc:	bf00      	nop
 800b8de:	3754      	adds	r7, #84	; 0x54
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr

0800b8e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b090      	sub	sp, #64	; 0x40
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 0320 	and.w	r3, r3, #32
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d137      	bne.n	800b972 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b904:	2200      	movs	r2, #0
 800b906:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3308      	adds	r3, #8
 800b910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	e853 3f00 	ldrex	r3, [r3]
 800b918:	623b      	str	r3, [r7, #32]
   return(result);
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b920:	63bb      	str	r3, [r7, #56]	; 0x38
 800b922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3308      	adds	r3, #8
 800b928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b92a:	633a      	str	r2, [r7, #48]	; 0x30
 800b92c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e5      	bne.n	800b90a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b952:	637b      	str	r3, [r7, #52]	; 0x34
 800b954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	461a      	mov	r2, r3
 800b95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b960:	69b9      	ldr	r1, [r7, #24]
 800b962:	69fa      	ldr	r2, [r7, #28]
 800b964:	e841 2300 	strex	r3, r2, [r1]
 800b968:	617b      	str	r3, [r7, #20]
   return(result);
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d1e6      	bne.n	800b93e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b970:	e002      	b.n	800b978 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b972:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b974:	f7f8 fa54 	bl	8003e20 <HAL_UART_TxCpltCallback>
}
 800b978:	bf00      	nop
 800b97a:	3740      	adds	r7, #64	; 0x40
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b98e:	68f8      	ldr	r0, [r7, #12]
 800b990:	f7ff f8f0 	bl	800ab74 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b994:	bf00      	nop
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b09c      	sub	sp, #112	; 0x70
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0320 	and.w	r3, r3, #32
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d171      	bne.n	800ba9c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9c8:	e853 3f00 	ldrex	r3, [r3]
 800b9cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	461a      	mov	r2, r3
 800b9dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9de:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9e6:	e841 2300 	strex	r3, r2, [r1]
 800b9ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1e6      	bne.n	800b9c0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3308      	adds	r3, #8
 800b9f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fc:	e853 3f00 	ldrex	r3, [r3]
 800ba00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ba02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba04:	f023 0301 	bic.w	r3, r3, #1
 800ba08:	667b      	str	r3, [r7, #100]	; 0x64
 800ba0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	3308      	adds	r3, #8
 800ba10:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba12:	647a      	str	r2, [r7, #68]	; 0x44
 800ba14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba1a:	e841 2300 	strex	r3, r2, [r1]
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d1e5      	bne.n	800b9f2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	3308      	adds	r3, #8
 800ba2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba30:	e853 3f00 	ldrex	r3, [r3]
 800ba34:	623b      	str	r3, [r7, #32]
   return(result);
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba3c:	663b      	str	r3, [r7, #96]	; 0x60
 800ba3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3308      	adds	r3, #8
 800ba44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba46:	633a      	str	r2, [r7, #48]	; 0x30
 800ba48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba4e:	e841 2300 	strex	r3, r2, [r1]
 800ba52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e5      	bne.n	800ba26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba5c:	2220      	movs	r2, #32
 800ba5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d118      	bne.n	800ba9c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	e853 3f00 	ldrex	r3, [r3]
 800ba76:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	f023 0310 	bic.w	r3, r3, #16
 800ba7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	461a      	mov	r2, r3
 800ba86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba88:	61fb      	str	r3, [r7, #28]
 800ba8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8c:	69b9      	ldr	r1, [r7, #24]
 800ba8e:	69fa      	ldr	r2, [r7, #28]
 800ba90:	e841 2300 	strex	r3, r2, [r1]
 800ba94:	617b      	str	r3, [r7, #20]
   return(result);
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1e6      	bne.n	800ba6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d107      	bne.n	800bab4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800baa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800baaa:	4619      	mov	r1, r3
 800baac:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800baae:	f7f7 fc21 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bab2:	e002      	b.n	800baba <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800bab4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800bab6:	f7f8 f9c9 	bl	8003e4c <HAL_UART_RxCpltCallback>
}
 800baba:	bf00      	nop
 800babc:	3770      	adds	r7, #112	; 0x70
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b084      	sub	sp, #16
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bace:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d109      	bne.n	800baec <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bade:	085b      	lsrs	r3, r3, #1
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	4619      	mov	r1, r3
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f7f7 fc05 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800baea:	e002      	b.n	800baf2 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f7ff f84a 	bl	800ab86 <HAL_UART_RxHalfCpltCallback>
}
 800baf2:	bf00      	nop
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b086      	sub	sp, #24
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb06:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb0e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb16:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb22:	2b80      	cmp	r3, #128	; 0x80
 800bb24:	d109      	bne.n	800bb3a <UART_DMAError+0x40>
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	2b21      	cmp	r3, #33	; 0x21
 800bb2a:	d106      	bne.n	800bb3a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bb34:	6978      	ldr	r0, [r7, #20]
 800bb36:	f7ff fe31 	bl	800b79c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb44:	2b40      	cmp	r3, #64	; 0x40
 800bb46:	d109      	bne.n	800bb5c <UART_DMAError+0x62>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b22      	cmp	r3, #34	; 0x22
 800bb4c:	d106      	bne.n	800bb5c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bb56:	6978      	ldr	r0, [r7, #20]
 800bb58:	f7ff fe60 	bl	800b81c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb62:	f043 0210 	orr.w	r2, r3, #16
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb6c:	6978      	ldr	r0, [r7, #20]
 800bb6e:	f7ff f813 	bl	800ab98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb72:	bf00      	nop
 800bb74:	3718      	adds	r7, #24
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}

0800bb7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb7a:	b580      	push	{r7, lr}
 800bb7c:	b084      	sub	sp, #16
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7fe fffd 	bl	800ab98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb9e:	bf00      	nop
 800bba0:	3710      	adds	r7, #16
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bba6:	b580      	push	{r7, lr}
 800bba8:	b088      	sub	sp, #32
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	e853 3f00 	ldrex	r3, [r3]
 800bbba:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbc2:	61fb      	str	r3, [r7, #28]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	61bb      	str	r3, [r7, #24]
 800bbce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd0:	6979      	ldr	r1, [r7, #20]
 800bbd2:	69ba      	ldr	r2, [r7, #24]
 800bbd4:	e841 2300 	strex	r3, r2, [r1]
 800bbd8:	613b      	str	r3, [r7, #16]
   return(result);
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e6      	bne.n	800bbae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2220      	movs	r2, #32
 800bbe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7f8 f916 	bl	8003e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbf4:	bf00      	nop
 800bbf6:	3720      	adds	r7, #32
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b096      	sub	sp, #88	; 0x58
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc0a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc14:	2b22      	cmp	r3, #34	; 0x22
 800bc16:	f040 8095 	bne.w	800bd44 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc20:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc24:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc28:	b2d9      	uxtb	r1, r3
 800bc2a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bc2e:	b2da      	uxtb	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc34:	400a      	ands	r2, r1
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc3e:	1c5a      	adds	r2, r3, #1
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d178      	bne.n	800bd54 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6a:	e853 3f00 	ldrex	r3, [r3]
 800bc6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc76:	653b      	str	r3, [r7, #80]	; 0x50
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc80:	647b      	str	r3, [r7, #68]	; 0x44
 800bc82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc88:	e841 2300 	strex	r3, r2, [r1]
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e6      	bne.n	800bc62 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3308      	adds	r3, #8
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	e853 3f00 	ldrex	r3, [r3]
 800bca2:	623b      	str	r3, [r7, #32]
   return(result);
 800bca4:	6a3b      	ldr	r3, [r7, #32]
 800bca6:	f023 0301 	bic.w	r3, r3, #1
 800bcaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	3308      	adds	r3, #8
 800bcb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcb4:	633a      	str	r2, [r7, #48]	; 0x30
 800bcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcbc:	e841 2300 	strex	r3, r2, [r1]
 800bcc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1e5      	bne.n	800bc94 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2220      	movs	r2, #32
 800bccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d12e      	bne.n	800bd3c <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	e853 3f00 	ldrex	r3, [r3]
 800bcf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f023 0310 	bic.w	r3, r3, #16
 800bcf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	461a      	mov	r2, r3
 800bd00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd02:	61fb      	str	r3, [r7, #28]
 800bd04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd06:	69b9      	ldr	r1, [r7, #24]
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	e841 2300 	strex	r3, r2, [r1]
 800bd0e:	617b      	str	r3, [r7, #20]
   return(result);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1e6      	bne.n	800bce4 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	f003 0310 	and.w	r3, r3, #16
 800bd20:	2b10      	cmp	r3, #16
 800bd22:	d103      	bne.n	800bd2c <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2210      	movs	r2, #16
 800bd2a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd32:	4619      	mov	r1, r3
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f7f7 fadd 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd3a:	e00b      	b.n	800bd54 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f7f8 f885 	bl	8003e4c <HAL_UART_RxCpltCallback>
}
 800bd42:	e007      	b.n	800bd54 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	699a      	ldr	r2, [r3, #24]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f042 0208 	orr.w	r2, r2, #8
 800bd52:	619a      	str	r2, [r3, #24]
}
 800bd54:	bf00      	nop
 800bd56:	3758      	adds	r7, #88	; 0x58
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b096      	sub	sp, #88	; 0x58
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd6a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd74:	2b22      	cmp	r3, #34	; 0x22
 800bd76:	f040 8095 	bne.w	800bea4 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd80:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd88:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bd8a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bd8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bd92:	4013      	ands	r3, r2
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9e:	1c9a      	adds	r2, r3, #2
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	3b01      	subs	r3, #1
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdbc:	b29b      	uxth	r3, r3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d178      	bne.n	800beb4 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	e853 3f00 	ldrex	r3, [r3]
 800bdce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	461a      	mov	r2, r3
 800bdde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde0:	643b      	str	r3, [r7, #64]	; 0x40
 800bde2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bde6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bde8:	e841 2300 	strex	r3, r2, [r1]
 800bdec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1e6      	bne.n	800bdc2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	3308      	adds	r3, #8
 800bdfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfc:	6a3b      	ldr	r3, [r7, #32]
 800bdfe:	e853 3f00 	ldrex	r3, [r3]
 800be02:	61fb      	str	r3, [r7, #28]
   return(result);
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	f023 0301 	bic.w	r3, r3, #1
 800be0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3308      	adds	r3, #8
 800be12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be1c:	e841 2300 	strex	r3, r2, [r1]
 800be20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1e5      	bne.n	800bdf4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2220      	movs	r2, #32
 800be2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d12e      	bne.n	800be9c <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	e853 3f00 	ldrex	r3, [r3]
 800be50:	60bb      	str	r3, [r7, #8]
   return(result);
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	f023 0310 	bic.w	r3, r3, #16
 800be58:	647b      	str	r3, [r7, #68]	; 0x44
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be62:	61bb      	str	r3, [r7, #24]
 800be64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be66:	6979      	ldr	r1, [r7, #20]
 800be68:	69ba      	ldr	r2, [r7, #24]
 800be6a:	e841 2300 	strex	r3, r2, [r1]
 800be6e:	613b      	str	r3, [r7, #16]
   return(result);
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d1e6      	bne.n	800be44 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	f003 0310 	and.w	r3, r3, #16
 800be80:	2b10      	cmp	r3, #16
 800be82:	d103      	bne.n	800be8c <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2210      	movs	r2, #16
 800be8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be92:	4619      	mov	r1, r3
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7f7 fa2d 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be9a:	e00b      	b.n	800beb4 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7f7 ffd5 	bl	8003e4c <HAL_UART_RxCpltCallback>
}
 800bea2:	e007      	b.n	800beb4 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	699a      	ldr	r2, [r3, #24]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f042 0208 	orr.w	r2, r2, #8
 800beb2:	619a      	str	r2, [r3, #24]
}
 800beb4:	bf00      	nop
 800beb6:	3758      	adds	r7, #88	; 0x58
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b0a6      	sub	sp, #152	; 0x98
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800beca:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	69db      	ldr	r3, [r3, #28]
 800bed4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef2:	2b22      	cmp	r3, #34	; 0x22
 800bef4:	f040 814f 	bne.w	800c196 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800befe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf02:	e0f6      	b.n	800c0f2 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf0a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf0e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bf12:	b2d9      	uxtb	r1, r3
 800bf14:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf1e:	400a      	ands	r2, r1
 800bf20:	b2d2      	uxtb	r2, r2
 800bf22:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	3b01      	subs	r3, #1
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bf4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf4e:	f003 0307 	and.w	r3, r3, #7
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d053      	beq.n	800bffe <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf5a:	f003 0301 	and.w	r3, r3, #1
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d011      	beq.n	800bf86 <UART_RxISR_8BIT_FIFOEN+0xca>
 800bf62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00b      	beq.n	800bf86 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2201      	movs	r2, #1
 800bf74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf7c:	f043 0201 	orr.w	r2, r3, #1
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf8a:	f003 0302 	and.w	r3, r3, #2
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d011      	beq.n	800bfb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bf92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf96:	f003 0301 	and.w	r3, r3, #1
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00b      	beq.n	800bfb6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfac:	f043 0204 	orr.w	r2, r3, #4
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bfba:	f003 0304 	and.w	r3, r3, #4
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d011      	beq.n	800bfe6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bfc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00b      	beq.n	800bfe6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2204      	movs	r2, #4
 800bfd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfdc:	f043 0202 	orr.w	r2, r3, #2
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d006      	beq.n	800bffe <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7fe fdd1 	bl	800ab98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2200      	movs	r2, #0
 800bffa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c004:	b29b      	uxth	r3, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d173      	bne.n	800c0f2 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c012:	e853 3f00 	ldrex	r3, [r3]
 800c016:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c018:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c01a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c01e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	461a      	mov	r2, r3
 800c028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c02c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c02e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c030:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c032:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c034:	e841 2300 	strex	r3, r2, [r1]
 800c038:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c03a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1e4      	bne.n	800c00a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	3308      	adds	r3, #8
 800c046:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c04a:	e853 3f00 	ldrex	r3, [r3]
 800c04e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c050:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c056:	f023 0301 	bic.w	r3, r3, #1
 800c05a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	3308      	adds	r3, #8
 800c062:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c064:	657a      	str	r2, [r7, #84]	; 0x54
 800c066:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c068:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c06a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c06c:	e841 2300 	strex	r3, r2, [r1]
 800c070:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e3      	bne.n	800c040 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2220      	movs	r2, #32
 800c07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d12e      	bne.n	800c0ec <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	f023 0310 	bic.w	r3, r3, #16
 800c0a8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0b2:	643b      	str	r3, [r7, #64]	; 0x40
 800c0b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0ba:	e841 2300 	strex	r3, r2, [r1]
 800c0be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1e6      	bne.n	800c094 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	69db      	ldr	r3, [r3, #28]
 800c0cc:	f003 0310 	and.w	r3, r3, #16
 800c0d0:	2b10      	cmp	r3, #16
 800c0d2:	d103      	bne.n	800c0dc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2210      	movs	r2, #16
 800c0da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7f7 f905 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
 800c0ea:	e002      	b.n	800c0f2 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7f7 fead 	bl	8003e4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c0f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d006      	beq.n	800c108 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c0fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0fe:	f003 0320 	and.w	r3, r3, #32
 800c102:	2b00      	cmp	r3, #0
 800c104:	f47f aefe 	bne.w	800bf04 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c10e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c112:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c116:	2b00      	cmp	r3, #0
 800c118:	d045      	beq.n	800c1a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c120:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c124:	429a      	cmp	r2, r3
 800c126:	d23e      	bcs.n	800c1a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3308      	adds	r3, #8
 800c12e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	e853 3f00 	ldrex	r3, [r3]
 800c136:	61fb      	str	r3, [r7, #28]
   return(result);
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c13e:	673b      	str	r3, [r7, #112]	; 0x70
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	3308      	adds	r3, #8
 800c146:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c148:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c14a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c14c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c14e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c150:	e841 2300 	strex	r3, r2, [r1]
 800c154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1e5      	bne.n	800c128 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a14      	ldr	r2, [pc, #80]	; (800c1b0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c160:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	e853 3f00 	ldrex	r3, [r3]
 800c16e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f043 0320 	orr.w	r3, r3, #32
 800c176:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	461a      	mov	r2, r3
 800c17e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c180:	61bb      	str	r3, [r7, #24]
 800c182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c184:	6979      	ldr	r1, [r7, #20]
 800c186:	69ba      	ldr	r2, [r7, #24]
 800c188:	e841 2300 	strex	r3, r2, [r1]
 800c18c:	613b      	str	r3, [r7, #16]
   return(result);
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d1e6      	bne.n	800c162 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c194:	e007      	b.n	800c1a6 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	699a      	ldr	r2, [r3, #24]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f042 0208 	orr.w	r2, r2, #8
 800c1a4:	619a      	str	r2, [r3, #24]
}
 800c1a6:	bf00      	nop
 800c1a8:	3798      	adds	r7, #152	; 0x98
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	0800bbfd 	.word	0x0800bbfd

0800c1b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b0a8      	sub	sp, #160	; 0xa0
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1c2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	69db      	ldr	r3, [r3, #28]
 800c1cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1ea:	2b22      	cmp	r3, #34	; 0x22
 800c1ec:	f040 8153 	bne.w	800c496 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1f6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1fa:	e0fa      	b.n	800c3f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c202:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c20a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c20e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c212:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c216:	4013      	ands	r3, r2
 800c218:	b29a      	uxth	r2, r3
 800c21a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c21e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c224:	1c9a      	adds	r2, r3, #2
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c230:	b29b      	uxth	r3, r3
 800c232:	3b01      	subs	r3, #1
 800c234:	b29a      	uxth	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	69db      	ldr	r3, [r3, #28]
 800c242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c24a:	f003 0307 	and.w	r3, r3, #7
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d053      	beq.n	800c2fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c252:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d011      	beq.n	800c282 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c25e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00b      	beq.n	800c282 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2201      	movs	r2, #1
 800c270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c278:	f043 0201 	orr.w	r2, r3, #1
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c282:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c286:	f003 0302 	and.w	r3, r3, #2
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d011      	beq.n	800c2b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c28e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00b      	beq.n	800c2b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a8:	f043 0204 	orr.w	r2, r3, #4
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2b6:	f003 0304 	and.w	r3, r3, #4
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d011      	beq.n	800c2e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c2be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d00b      	beq.n	800c2e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2d8:	f043 0202 	orr.w	r2, r3, #2
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d006      	beq.n	800c2fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f7fe fc53 	bl	800ab98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c300:	b29b      	uxth	r3, r3
 800c302:	2b00      	cmp	r3, #0
 800c304:	d175      	bne.n	800c3f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c30e:	e853 3f00 	ldrex	r3, [r3]
 800c312:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c31a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c328:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c32a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c32e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c330:	e841 2300 	strex	r3, r2, [r1]
 800c334:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1e4      	bne.n	800c306 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	3308      	adds	r3, #8
 800c342:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c346:	e853 3f00 	ldrex	r3, [r3]
 800c34a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c34c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c34e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c352:	f023 0301 	bic.w	r3, r3, #1
 800c356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3308      	adds	r3, #8
 800c360:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c364:	65ba      	str	r2, [r7, #88]	; 0x58
 800c366:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c368:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c36a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c36c:	e841 2300 	strex	r3, r2, [r1]
 800c370:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1e1      	bne.n	800c33c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2220      	movs	r2, #32
 800c37c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d12e      	bne.n	800c3ec <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2200      	movs	r2, #0
 800c392:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39c:	e853 3f00 	ldrex	r3, [r3]
 800c3a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a4:	f023 0310 	bic.w	r3, r3, #16
 800c3a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800c3b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3ba:	e841 2300 	strex	r3, r2, [r1]
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e6      	bne.n	800c394 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	69db      	ldr	r3, [r3, #28]
 800c3cc:	f003 0310 	and.w	r3, r3, #16
 800c3d0:	2b10      	cmp	r3, #16
 800c3d2:	d103      	bne.n	800c3dc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2210      	movs	r2, #16
 800c3da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7f6 ff85 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
 800c3ea:	e002      	b.n	800c3f2 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f7f7 fd2d 	bl	8003e4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3f2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d006      	beq.n	800c408 <UART_RxISR_16BIT_FIFOEN+0x254>
 800c3fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3fe:	f003 0320 	and.w	r3, r3, #32
 800c402:	2b00      	cmp	r3, #0
 800c404:	f47f aefa 	bne.w	800c1fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c40e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c412:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c416:	2b00      	cmp	r3, #0
 800c418:	d045      	beq.n	800c4a6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c420:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c424:	429a      	cmp	r2, r3
 800c426:	d23e      	bcs.n	800c4a6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3308      	adds	r3, #8
 800c42e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c432:	e853 3f00 	ldrex	r3, [r3]
 800c436:	623b      	str	r3, [r7, #32]
   return(result);
 800c438:	6a3b      	ldr	r3, [r7, #32]
 800c43a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c43e:	677b      	str	r3, [r7, #116]	; 0x74
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3308      	adds	r3, #8
 800c446:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c448:	633a      	str	r2, [r7, #48]	; 0x30
 800c44a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c44e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c450:	e841 2300 	strex	r3, r2, [r1]
 800c454:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e5      	bne.n	800c428 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a14      	ldr	r2, [pc, #80]	; (800c4b0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c460:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f043 0320 	orr.w	r3, r3, #32
 800c476:	673b      	str	r3, [r7, #112]	; 0x70
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	461a      	mov	r2, r3
 800c47e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c480:	61fb      	str	r3, [r7, #28]
 800c482:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c484:	69b9      	ldr	r1, [r7, #24]
 800c486:	69fa      	ldr	r2, [r7, #28]
 800c488:	e841 2300 	strex	r3, r2, [r1]
 800c48c:	617b      	str	r3, [r7, #20]
   return(result);
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e6      	bne.n	800c462 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c494:	e007      	b.n	800c4a6 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	699a      	ldr	r2, [r3, #24]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f042 0208 	orr.w	r2, r2, #8
 800c4a4:	619a      	str	r2, [r3, #24]
}
 800c4a6:	bf00      	nop
 800c4a8:	37a0      	adds	r7, #160	; 0xa0
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	0800bd5d 	.word	0x0800bd5d

0800c4b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bc80      	pop	{r7}
 800c4c4:	4770      	bx	lr

0800c4c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4c6:	b480      	push	{r7}
 800c4c8:	b083      	sub	sp, #12
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4ce:	bf00      	nop
 800c4d0:	370c      	adds	r7, #12
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bc80      	pop	{r7}
 800c4d6:	4770      	bx	lr

0800c4d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4e0:	bf00      	nop
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bc80      	pop	{r7}
 800c4e8:	4770      	bx	lr

0800c4ea <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b088      	sub	sp, #32
 800c4ee:	af02      	add	r7, sp, #8
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	1d3b      	adds	r3, r7, #4
 800c4f4:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c502:	2b01      	cmp	r3, #1
 800c504:	d101      	bne.n	800c50a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c506:	2302      	movs	r3, #2
 800c508:	e046      	b.n	800c598 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2224      	movs	r2, #36	; 0x24
 800c516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f022 0201 	bic.w	r2, r2, #1
 800c528:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	689b      	ldr	r3, [r3, #8]
 800c530:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d105      	bne.n	800c550 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c544:	1d3b      	adds	r3, r7, #4
 800c546:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f000 f96d 	bl	800c82a <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	681a      	ldr	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f042 0201 	orr.w	r2, r2, #1
 800c55e:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c560:	f7f6 f88a 	bl	8002678 <HAL_GetTick>
 800c564:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c566:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c56a:	9300      	str	r3, [sp, #0]
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	2200      	movs	r2, #0
 800c570:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7fe fe79 	bl	800b26c <UART_WaitOnFlagUntilTimeout>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	75fb      	strb	r3, [r7, #23]
 800c584:	e003      	b.n	800c58e <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2220      	movs	r2, #32
 800c58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2200      	movs	r2, #0
 800c592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800c596:	7dfb      	ldrb	r3, [r7, #23]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3718      	adds	r7, #24
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b089      	sub	sp, #36	; 0x24
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d101      	bne.n	800c5b6 <HAL_UARTEx_EnableStopMode+0x16>
 800c5b2:	2302      	movs	r3, #2
 800c5b4:	e021      	b.n	800c5fa <HAL_UARTEx_EnableStopMode+0x5a>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	f043 0302 	orr.w	r3, r3, #2
 800c5d2:	61fb      	str	r3, [r7, #28]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	61bb      	str	r3, [r7, #24]
 800c5de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e0:	6979      	ldr	r1, [r7, #20]
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	e841 2300 	strex	r3, r2, [r1]
 800c5e8:	613b      	str	r3, [r7, #16]
   return(result);
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e6      	bne.n	800c5be <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3724      	adds	r7, #36	; 0x24
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bc80      	pop	{r7}
 800c602:	4770      	bx	lr

0800c604 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c612:	2b01      	cmp	r3, #1
 800c614:	d101      	bne.n	800c61a <HAL_UARTEx_EnableFifoMode+0x16>
 800c616:	2302      	movs	r3, #2
 800c618:	e02b      	b.n	800c672 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2201      	movs	r2, #1
 800c61e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2224      	movs	r2, #36	; 0x24
 800c626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f022 0201 	bic.w	r2, r2, #1
 800c640:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c648:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c650:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f908 	bl	800c870 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2220      	movs	r2, #32
 800c664:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3710      	adds	r7, #16
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d101      	bne.n	800c692 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c68e:	2302      	movs	r3, #2
 800c690:	e02d      	b.n	800c6ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2201      	movs	r2, #1
 800c696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2224      	movs	r2, #36	; 0x24
 800c69e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f022 0201 	bic.w	r2, r2, #1
 800c6b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	430a      	orrs	r2, r1
 800c6cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f8ce 	bl	800c870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2220      	movs	r2, #32
 800c6e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3710      	adds	r7, #16
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b084      	sub	sp, #16
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
 800c6fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c706:	2b01      	cmp	r3, #1
 800c708:	d101      	bne.n	800c70e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c70a:	2302      	movs	r3, #2
 800c70c:	e02d      	b.n	800c76a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2224      	movs	r2, #36	; 0x24
 800c71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f022 0201 	bic.w	r2, r2, #1
 800c734:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	683a      	ldr	r2, [r7, #0]
 800c746:	430a      	orrs	r2, r1
 800c748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 f890 	bl	800c870 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68fa      	ldr	r2, [r7, #12]
 800c756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2220      	movs	r2, #32
 800c75c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b08c      	sub	sp, #48	; 0x30
 800c776:	af00      	add	r7, sp, #0
 800c778:	60f8      	str	r0, [r7, #12]
 800c77a:	60b9      	str	r1, [r7, #8]
 800c77c:	4613      	mov	r3, r2
 800c77e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c786:	2b20      	cmp	r3, #32
 800c788:	d14a      	bne.n	800c820 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c790:	88fb      	ldrh	r3, [r7, #6]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e043      	b.n	800c822 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d101      	bne.n	800c7a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	e03c      	b.n	800c822 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c7b6:	88fb      	ldrh	r3, [r7, #6]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	68b9      	ldr	r1, [r7, #8]
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f7fe ff45 	bl	800b64c <UART_Start_Receive_DMA>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c7c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d124      	bne.n	800c81a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d11d      	bne.n	800c814 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2210      	movs	r2, #16
 800c7de:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	e853 3f00 	ldrex	r3, [r3]
 800c7ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f043 0310 	orr.w	r3, r3, #16
 800c7f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	627b      	str	r3, [r7, #36]	; 0x24
 800c800:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c802:	6a39      	ldr	r1, [r7, #32]
 800c804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c806:	e841 2300 	strex	r3, r2, [r1]
 800c80a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e6      	bne.n	800c7e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800c812:	e002      	b.n	800c81a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c814:	2301      	movs	r3, #1
 800c816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800c81a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c81e:	e000      	b.n	800c822 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c820:	2302      	movs	r3, #2
  }
}
 800c822:	4618      	mov	r0, r3
 800c824:	3730      	adds	r7, #48	; 0x30
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c82a:	b480      	push	{r7}
 800c82c:	b085      	sub	sp, #20
 800c82e:	af00      	add	r7, sp, #0
 800c830:	60f8      	str	r0, [r7, #12]
 800c832:	1d3b      	adds	r3, r7, #4
 800c834:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	f023 0210 	bic.w	r2, r3, #16
 800c842:	893b      	ldrh	r3, [r7, #8]
 800c844:	4619      	mov	r1, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	430a      	orrs	r2, r1
 800c84c:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800c858:	7abb      	ldrb	r3, [r7, #10]
 800c85a:	061a      	lsls	r2, r3, #24
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	430a      	orrs	r2, r1
 800c862:	605a      	str	r2, [r3, #4]
}
 800c864:	bf00      	nop
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	bc80      	pop	{r7}
 800c86c:	4770      	bx	lr
	...

0800c870 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d108      	bne.n	800c892 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c890:	e031      	b.n	800c8f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c892:	2308      	movs	r3, #8
 800c894:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c896:	2308      	movs	r3, #8
 800c898:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	0e5b      	lsrs	r3, r3, #25
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0307 	and.w	r3, r3, #7
 800c8a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	0f5b      	lsrs	r3, r3, #29
 800c8b2:	b2db      	uxtb	r3, r3
 800c8b4:	f003 0307 	and.w	r3, r3, #7
 800c8b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8ba:	7bbb      	ldrb	r3, [r7, #14]
 800c8bc:	7b3a      	ldrb	r2, [r7, #12]
 800c8be:	4910      	ldr	r1, [pc, #64]	; (800c900 <UARTEx_SetNbDataToProcess+0x90>)
 800c8c0:	5c8a      	ldrb	r2, [r1, r2]
 800c8c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8c6:	7b3a      	ldrb	r2, [r7, #12]
 800c8c8:	490e      	ldr	r1, [pc, #56]	; (800c904 <UARTEx_SetNbDataToProcess+0x94>)
 800c8ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8d0:	b29a      	uxth	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	7b7a      	ldrb	r2, [r7, #13]
 800c8dc:	4908      	ldr	r1, [pc, #32]	; (800c900 <UARTEx_SetNbDataToProcess+0x90>)
 800c8de:	5c8a      	ldrb	r2, [r1, r2]
 800c8e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8e4:	7b7a      	ldrb	r2, [r7, #13]
 800c8e6:	4907      	ldr	r1, [pc, #28]	; (800c904 <UARTEx_SetNbDataToProcess+0x94>)
 800c8e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8ea:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8f6:	bf00      	nop
 800c8f8:	3714      	adds	r7, #20
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bc80      	pop	{r7}
 800c8fe:	4770      	bx	lr
 800c900:	08015748 	.word	0x08015748
 800c904:	08015750 	.word	0x08015750

0800c908 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af02      	add	r7, sp, #8
 800c90e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800c910:	4a21      	ldr	r2, [pc, #132]	; (800c998 <RadioInit+0x90>)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800c916:	4b21      	ldr	r3, [pc, #132]	; (800c99c <RadioInit+0x94>)
 800c918:	2200      	movs	r2, #0
 800c91a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800c91c:	4b1f      	ldr	r3, [pc, #124]	; (800c99c <RadioInit+0x94>)
 800c91e:	2200      	movs	r2, #0
 800c920:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800c922:	4b1e      	ldr	r3, [pc, #120]	; (800c99c <RadioInit+0x94>)
 800c924:	2200      	movs	r2, #0
 800c926:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 800c928:	481d      	ldr	r0, [pc, #116]	; (800c9a0 <RadioInit+0x98>)
 800c92a:	f001 feb7 	bl	800e69c <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 800c92e:	2000      	movs	r0, #0
 800c930:	f001 f81e 	bl	800d970 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 800c934:	f002 f948 	bl	800ebc8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800c938:	2100      	movs	r1, #0
 800c93a:	2000      	movs	r0, #0
 800c93c:	f002 fca8 	bl	800f290 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800c940:	2204      	movs	r2, #4
 800c942:	2100      	movs	r1, #0
 800c944:	2001      	movs	r0, #1
 800c946:	f002 facd 	bl	800eee4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800c94a:	2300      	movs	r3, #0
 800c94c:	2200      	movs	r2, #0
 800c94e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c952:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c956:	f002 f9fd 	bl	800ed54 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800c95a:	f000 fe9b 	bl	800d694 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800c95e:	2300      	movs	r3, #0
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	4b10      	ldr	r3, [pc, #64]	; (800c9a4 <RadioInit+0x9c>)
 800c964:	2200      	movs	r2, #0
 800c966:	f04f 31ff 	mov.w	r1, #4294967295
 800c96a:	480f      	ldr	r0, [pc, #60]	; (800c9a8 <RadioInit+0xa0>)
 800c96c:	f003 fdc6 	bl	80104fc <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800c970:	2300      	movs	r3, #0
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	4b0d      	ldr	r3, [pc, #52]	; (800c9ac <RadioInit+0xa4>)
 800c976:	2200      	movs	r2, #0
 800c978:	f04f 31ff 	mov.w	r1, #4294967295
 800c97c:	480c      	ldr	r0, [pc, #48]	; (800c9b0 <RadioInit+0xa8>)
 800c97e:	f003 fdbd 	bl	80104fc <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800c982:	4809      	ldr	r0, [pc, #36]	; (800c9a8 <RadioInit+0xa0>)
 800c984:	f003 fe5e 	bl	8010644 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800c988:	4809      	ldr	r0, [pc, #36]	; (800c9b0 <RadioInit+0xa8>)
 800c98a:	f003 fe5b 	bl	8010644 <UTIL_TIMER_Stop>
}
 800c98e:	bf00      	nop
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	20000b58 	.word	0x20000b58
 800c99c:	20000b5c 	.word	0x20000b5c
 800c9a0:	0800da55 	.word	0x0800da55
 800c9a4:	0800d9dd 	.word	0x0800d9dd
 800c9a8:	20000bb4 	.word	0x20000bb4
 800c9ac:	0800d9f1 	.word	0x0800d9f1
 800c9b0:	20000bcc 	.word	0x20000bcc

0800c9b4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800c9b8:	f001 feb2 	bl	800e720 <SUBGRF_GetOperatingMode>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b07      	cmp	r3, #7
 800c9c0:	d00a      	beq.n	800c9d8 <RadioGetStatus+0x24>
 800c9c2:	2b07      	cmp	r3, #7
 800c9c4:	dc0a      	bgt.n	800c9dc <RadioGetStatus+0x28>
 800c9c6:	2b04      	cmp	r3, #4
 800c9c8:	d002      	beq.n	800c9d0 <RadioGetStatus+0x1c>
 800c9ca:	2b05      	cmp	r3, #5
 800c9cc:	d002      	beq.n	800c9d4 <RadioGetStatus+0x20>
 800c9ce:	e005      	b.n	800c9dc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	e004      	b.n	800c9de <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e002      	b.n	800c9de <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e000      	b.n	800c9de <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800c9dc:	2300      	movs	r3, #0
    }
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	bd80      	pop	{r7, pc}
	...

0800c9e4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800c9ee:	4a25      	ldr	r2, [pc, #148]	; (800ca84 <RadioSetModem+0xa0>)
 800c9f0:	79fb      	ldrb	r3, [r7, #7]
 800c9f2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 800c9f4:	79fb      	ldrb	r3, [r7, #7]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f003 f80d 	bl	800fa16 <RFW_SetRadioModem>
    switch( modem )
 800c9fc:	79fb      	ldrb	r3, [r7, #7]
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	d80b      	bhi.n	800ca1c <RadioSetModem+0x38>
 800ca04:	a201      	add	r2, pc, #4	; (adr r2, 800ca0c <RadioSetModem+0x28>)
 800ca06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca0a:	bf00      	nop
 800ca0c:	0800ca2b 	.word	0x0800ca2b
 800ca10:	0800ca51 	.word	0x0800ca51
 800ca14:	0800ca5f 	.word	0x0800ca5f
 800ca18:	0800ca6d 	.word	0x0800ca6d
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	f002 fa3b 	bl	800ee98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ca22:	4b18      	ldr	r3, [pc, #96]	; (800ca84 <RadioSetModem+0xa0>)
 800ca24:	2200      	movs	r2, #0
 800ca26:	735a      	strb	r2, [r3, #13]
        break;
 800ca28:	e028      	b.n	800ca7c <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800ca2a:	2001      	movs	r0, #1
 800ca2c:	f002 fa34 	bl	800ee98 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800ca30:	4b14      	ldr	r3, [pc, #80]	; (800ca84 <RadioSetModem+0xa0>)
 800ca32:	7b5a      	ldrb	r2, [r3, #13]
 800ca34:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <RadioSetModem+0xa0>)
 800ca36:	7b1b      	ldrb	r3, [r3, #12]
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d01e      	beq.n	800ca7a <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800ca3c:	4b11      	ldr	r3, [pc, #68]	; (800ca84 <RadioSetModem+0xa0>)
 800ca3e:	7b1a      	ldrb	r2, [r3, #12]
 800ca40:	4b10      	ldr	r3, [pc, #64]	; (800ca84 <RadioSetModem+0xa0>)
 800ca42:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800ca44:	4b0f      	ldr	r3, [pc, #60]	; (800ca84 <RadioSetModem+0xa0>)
 800ca46:	7b5b      	ldrb	r3, [r3, #13]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f000 ff91 	bl	800d970 <RadioSetPublicNetwork>
        }
        break;
 800ca4e:	e014      	b.n	800ca7a <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ca50:	2002      	movs	r0, #2
 800ca52:	f002 fa21 	bl	800ee98 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ca56:	4b0b      	ldr	r3, [pc, #44]	; (800ca84 <RadioSetModem+0xa0>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	735a      	strb	r2, [r3, #13]
        break;
 800ca5c:	e00e      	b.n	800ca7c <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ca5e:	2002      	movs	r0, #2
 800ca60:	f002 fa1a 	bl	800ee98 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ca64:	4b07      	ldr	r3, [pc, #28]	; (800ca84 <RadioSetModem+0xa0>)
 800ca66:	2200      	movs	r2, #0
 800ca68:	735a      	strb	r2, [r3, #13]
        break;
 800ca6a:	e007      	b.n	800ca7c <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	f002 fa13 	bl	800ee98 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ca72:	4b04      	ldr	r3, [pc, #16]	; (800ca84 <RadioSetModem+0xa0>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	735a      	strb	r2, [r3, #13]
        break;
 800ca78:	e000      	b.n	800ca7c <RadioSetModem+0x98>
        break;
 800ca7a:	bf00      	nop
    }
}
 800ca7c:	bf00      	nop
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20000b5c 	.word	0x20000b5c

0800ca88 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f002 f9bb 	bl	800ee0c <SUBGRF_SetRfFrequency>
}
 800ca96:	bf00      	nop
 800ca98:	3708      	adds	r7, #8
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b090      	sub	sp, #64	; 0x40
 800caa2:	af0a      	add	r7, sp, #40	; 0x28
 800caa4:	60f8      	str	r0, [r7, #12]
 800caa6:	60b9      	str	r1, [r7, #8]
 800caa8:	603b      	str	r3, [r7, #0]
 800caaa:	4613      	mov	r3, r2
 800caac:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800caae:	2301      	movs	r3, #1
 800cab0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800cab2:	2300      	movs	r3, #0
 800cab4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800cab6:	2300      	movs	r3, #0
 800cab8:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800caba:	f000 fdfe 	bl	800d6ba <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 800cabe:	2000      	movs	r0, #0
 800cac0:	f7ff ff90 	bl	800c9e4 <RadioSetModem>

    RadioSetChannel( freq );
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f7ff ffdf 	bl	800ca88 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800caca:	2301      	movs	r3, #1
 800cacc:	9309      	str	r3, [sp, #36]	; 0x24
 800cace:	2300      	movs	r3, #0
 800cad0:	9308      	str	r3, [sp, #32]
 800cad2:	2300      	movs	r3, #0
 800cad4:	9307      	str	r3, [sp, #28]
 800cad6:	2300      	movs	r3, #0
 800cad8:	9306      	str	r3, [sp, #24]
 800cada:	2300      	movs	r3, #0
 800cadc:	9305      	str	r3, [sp, #20]
 800cade:	2300      	movs	r3, #0
 800cae0:	9304      	str	r3, [sp, #16]
 800cae2:	2300      	movs	r3, #0
 800cae4:	9303      	str	r3, [sp, #12]
 800cae6:	2300      	movs	r3, #0
 800cae8:	9302      	str	r3, [sp, #8]
 800caea:	2303      	movs	r3, #3
 800caec:	9301      	str	r3, [sp, #4]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	9300      	str	r3, [sp, #0]
 800caf2:	2300      	movs	r3, #0
 800caf4:	f44f 7216 	mov.w	r2, #600	; 0x258
 800caf8:	68b9      	ldr	r1, [r7, #8]
 800cafa:	2000      	movs	r0, #0
 800cafc:	f000 f840 	bl	800cb80 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800cb00:	2000      	movs	r0, #0
 800cb02:	f000 fde1 	bl	800d6c8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800cb06:	f000 ff61 	bl	800d9cc <RadioGetWakeupTime>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f7f5 fdc7 	bl	80026a0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800cb12:	f003 feb1 	bl	8010878 <UTIL_TIMER_GetCurrentTime>
 800cb16:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800cb18:	e00d      	b.n	800cb36 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	f000 fea6 	bl	800d86c <RadioRssi>
 800cb20:	4603      	mov	r3, r0
 800cb22:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800cb24:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800cb28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	dd02      	ble.n	800cb36 <RadioIsChannelFree+0x98>
        {
            status = false;
 800cb30:	2300      	movs	r3, #0
 800cb32:	75fb      	strb	r3, [r7, #23]
            break;
 800cb34:	e006      	b.n	800cb44 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800cb36:	6938      	ldr	r0, [r7, #16]
 800cb38:	f003 feb0 	bl	801089c <UTIL_TIMER_GetElapsedTime>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d8ea      	bhi.n	800cb1a <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800cb44:	f000 fdb9 	bl	800d6ba <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b082      	sub	sp, #8
 800cb56:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 800cb5c:	2001      	movs	r0, #1
 800cb5e:	f7ff ff41 	bl	800c9e4 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800cb62:	2300      	movs	r3, #0
 800cb64:	2200      	movs	r2, #0
 800cb66:	2100      	movs	r1, #0
 800cb68:	2000      	movs	r0, #0
 800cb6a:	f002 f8f3 	bl	800ed54 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800cb6e:	f001 fea8 	bl	800e8c2 <SUBGRF_GetRandom>
 800cb72:	6078      	str	r0, [r7, #4]

    return rnd;
 800cb74:	687b      	ldr	r3, [r7, #4]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08a      	sub	sp, #40	; 0x28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	607a      	str	r2, [r7, #4]
 800cb8a:	461a      	mov	r2, r3
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
 800cb90:	4613      	mov	r3, r2
 800cb92:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 800cb94:	4abd      	ldr	r2, [pc, #756]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cb96:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cb9a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800cb9c:	f002 fef9 	bl	800f992 <RFW_DeInit>
    if( rxContinuous == true )
 800cba0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d001      	beq.n	800cbac <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800cbac:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d004      	beq.n	800cbbe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800cbb4:	4ab6      	ldr	r2, [pc, #728]	; (800ce90 <RadioSetRxConfig+0x310>)
 800cbb6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cbba:	7013      	strb	r3, [r2, #0]
 800cbbc:	e002      	b.n	800cbc4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800cbbe:	4bb4      	ldr	r3, [pc, #720]	; (800ce90 <RadioSetRxConfig+0x310>)
 800cbc0:	22ff      	movs	r2, #255	; 0xff
 800cbc2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	2b04      	cmp	r3, #4
 800cbc8:	d009      	beq.n	800cbde <RadioSetRxConfig+0x5e>
 800cbca:	2b04      	cmp	r3, #4
 800cbcc:	f300 81da 	bgt.w	800cf84 <RadioSetRxConfig+0x404>
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 80bf 	beq.w	800cd54 <RadioSetRxConfig+0x1d4>
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	f000 812c 	beq.w	800ce34 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800cbdc:	e1d2      	b.n	800cf84 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800cbde:	2001      	movs	r0, #1
 800cbe0:	f001 ffb4 	bl	800eb4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cbe4:	4ba9      	ldr	r3, [pc, #676]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800cbec:	4aa7      	ldr	r2, [pc, #668]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800cbf2:	4ba6      	ldr	r3, [pc, #664]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cbf4:	2209      	movs	r2, #9
 800cbf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800cbfa:	4ba4      	ldr	r3, [pc, #656]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cbfc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cc00:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cc02:	68b8      	ldr	r0, [r7, #8]
 800cc04:	f002 fdf8 	bl	800f7f8 <SUBGRF_GetFskBandwidthRegValue>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	4b9f      	ldr	r3, [pc, #636]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cc12:	4b9e      	ldr	r3, [pc, #632]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc14:	2200      	movs	r2, #0
 800cc16:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800cc18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	b29a      	uxth	r2, r3
 800cc1e:	4b9b      	ldr	r3, [pc, #620]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc20:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800cc22:	4b9a      	ldr	r3, [pc, #616]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800cc28:	4b98      	ldr	r3, [pc, #608]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc2a:	2210      	movs	r2, #16
 800cc2c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800cc2e:	4b97      	ldr	r3, [pc, #604]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800cc34:	4b95      	ldr	r3, [pc, #596]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800cc3a:	4b95      	ldr	r3, [pc, #596]	; (800ce90 <RadioSetRxConfig+0x310>)
 800cc3c:	781a      	ldrb	r2, [r3, #0]
 800cc3e:	4b93      	ldr	r3, [pc, #588]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc40:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800cc42:	4b92      	ldr	r3, [pc, #584]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc44:	2201      	movs	r2, #1
 800cc46:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800cc48:	4b90      	ldr	r3, [pc, #576]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800cc4e:	2004      	movs	r0, #4
 800cc50:	f7ff fec8 	bl	800c9e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cc54:	488f      	ldr	r0, [pc, #572]	; (800ce94 <RadioSetRxConfig+0x314>)
 800cc56:	f002 f9ab 	bl	800efb0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cc5a:	488f      	ldr	r0, [pc, #572]	; (800ce98 <RadioSetRxConfig+0x318>)
 800cc5c:	f002 fa7a 	bl	800f154 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800cc60:	4a8e      	ldr	r2, [pc, #568]	; (800ce9c <RadioSetRxConfig+0x31c>)
 800cc62:	f107 031c 	add.w	r3, r7, #28
 800cc66:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc6a:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc6e:	f107 031c 	add.w	r3, r7, #28
 800cc72:	4618      	mov	r0, r3
 800cc74:	f001 fda3 	bl	800e7be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800cc78:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cc7c:	f001 fdee 	bl	800e85c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800cc80:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800cc84:	f000 fe11 	bl	800d8aa <RadioRead>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800cc8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc92:	f023 0310 	bic.w	r3, r3, #16
 800cc96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 800cc9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc9e:	4619      	mov	r1, r3
 800cca0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800cca4:	f000 fdef 	bl	800d886 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800cca8:	2104      	movs	r1, #4
 800ccaa:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800ccae:	f000 fdea 	bl	800d886 <RadioWrite>
            modReg= RadioRead(0x89b);
 800ccb2:	f640 009b 	movw	r0, #2203	; 0x89b
 800ccb6:	f000 fdf8 	bl	800d8aa <RadioRead>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800ccc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc4:	f023 031c 	bic.w	r3, r3, #28
 800ccc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800cccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccd0:	f043 0308 	orr.w	r3, r3, #8
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	f640 009b 	movw	r0, #2203	; 0x89b
 800ccdc:	f000 fdd3 	bl	800d886 <RadioWrite>
            modReg= RadioRead(0x6d1);
 800cce0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800cce4:	f000 fde1 	bl	800d8aa <RadioRead>
 800cce8:	4603      	mov	r3, r0
 800ccea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800ccee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf2:	f023 0318 	bic.w	r3, r3, #24
 800ccf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800ccfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccfe:	f043 0318 	orr.w	r3, r3, #24
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	4619      	mov	r1, r3
 800cd06:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800cd0a:	f000 fdbc 	bl	800d886 <RadioWrite>
            modReg= RadioRead(0x6ac);
 800cd0e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800cd12:	f000 fdca 	bl	800d8aa <RadioRead>
 800cd16:	4603      	mov	r3, r0
 800cd18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800cd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800cd28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd2c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	4619      	mov	r1, r3
 800cd34:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800cd38:	f000 fda5 	bl	800d886 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800cd3c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cd3e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cd42:	fb02 f303 	mul.w	r3, r2, r3
 800cd46:	461a      	mov	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd4e:	4a4f      	ldr	r2, [pc, #316]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd50:	6093      	str	r3, [r2, #8]
            break;
 800cd52:	e118      	b.n	800cf86 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800cd54:	2000      	movs	r0, #0
 800cd56:	f001 fef9 	bl	800eb4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cd5a:	4b4c      	ldr	r3, [pc, #304]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800cd62:	4a4a      	ldr	r2, [pc, #296]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800cd68:	4b48      	ldr	r3, [pc, #288]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd6a:	220b      	movs	r2, #11
 800cd6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cd70:	68b8      	ldr	r0, [r7, #8]
 800cd72:	f002 fd41 	bl	800f7f8 <SUBGRF_GetFskBandwidthRegValue>
 800cd76:	4603      	mov	r3, r0
 800cd78:	461a      	mov	r2, r3
 800cd7a:	4b44      	ldr	r3, [pc, #272]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cd80:	4b42      	ldr	r3, [pc, #264]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800cd86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	4b3f      	ldr	r3, [pc, #252]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd8e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800cd90:	4b3e      	ldr	r3, [pc, #248]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd92:	2204      	movs	r2, #4
 800cd94:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800cd96:	4b3d      	ldr	r3, [pc, #244]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd98:	2218      	movs	r2, #24
 800cd9a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800cd9c:	4b3b      	ldr	r3, [pc, #236]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cd9e:	2200      	movs	r2, #0
 800cda0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800cda2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cda6:	f083 0301 	eor.w	r3, r3, #1
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	461a      	mov	r2, r3
 800cdae:	4b37      	ldr	r3, [pc, #220]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cdb0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800cdb2:	4b37      	ldr	r3, [pc, #220]	; (800ce90 <RadioSetRxConfig+0x310>)
 800cdb4:	781a      	ldrb	r2, [r3, #0]
 800cdb6:	4b35      	ldr	r3, [pc, #212]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cdb8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800cdba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d003      	beq.n	800cdca <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800cdc2:	4b32      	ldr	r3, [pc, #200]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cdc4:	22f2      	movs	r2, #242	; 0xf2
 800cdc6:	75da      	strb	r2, [r3, #23]
 800cdc8:	e002      	b.n	800cdd0 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800cdca:	4b30      	ldr	r3, [pc, #192]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800cdd0:	4b2e      	ldr	r3, [pc, #184]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800cdd6:	f000 fc70 	bl	800d6ba <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800cdda:	4b2c      	ldr	r3, [pc, #176]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800cddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	bf14      	ite	ne
 800cde4:	2301      	movne	r3, #1
 800cde6:	2300      	moveq	r3, #0
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff fdfa 	bl	800c9e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cdf0:	4828      	ldr	r0, [pc, #160]	; (800ce94 <RadioSetRxConfig+0x314>)
 800cdf2:	f002 f8dd 	bl	800efb0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cdf6:	4828      	ldr	r0, [pc, #160]	; (800ce98 <RadioSetRxConfig+0x318>)
 800cdf8:	f002 f9ac 	bl	800f154 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800cdfc:	4a28      	ldr	r2, [pc, #160]	; (800cea0 <RadioSetRxConfig+0x320>)
 800cdfe:	f107 0314 	add.w	r3, r7, #20
 800ce02:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce06:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce0a:	f107 0314 	add.w	r3, r7, #20
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f001 fcd5 	bl	800e7be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800ce14:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ce18:	f001 fd20 	bl	800e85c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800ce1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ce1e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ce22:	fb02 f303 	mul.w	r3, r2, r3
 800ce26:	461a      	mov	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce2e:	4a17      	ldr	r2, [pc, #92]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800ce30:	6093      	str	r3, [r2, #8]
            break;
 800ce32:	e0a8      	b.n	800cf86 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800ce34:	2000      	movs	r0, #0
 800ce36:	f001 fe89 	bl	800eb4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ce3a:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	4b11      	ldr	r3, [pc, #68]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800ce48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800ce4c:	4a15      	ldr	r2, [pc, #84]	; (800cea4 <RadioSetRxConfig+0x324>)
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	4413      	add	r3, r2
 800ce52:	781a      	ldrb	r2, [r3, #0]
 800ce54:	4b0d      	ldr	r3, [pc, #52]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800ce56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800ce5a:	4a0c      	ldr	r2, [pc, #48]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
 800ce5e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d105      	bne.n	800ce74 <RadioSetRxConfig+0x2f4>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b0b      	cmp	r3, #11
 800ce6c:	d008      	beq.n	800ce80 <RadioSetRxConfig+0x300>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b0c      	cmp	r3, #12
 800ce72:	d005      	beq.n	800ce80 <RadioSetRxConfig+0x300>
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d116      	bne.n	800cea8 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b0c      	cmp	r3, #12
 800ce7e:	d113      	bne.n	800cea8 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800ce80:	4b02      	ldr	r3, [pc, #8]	; (800ce8c <RadioSetRxConfig+0x30c>)
 800ce82:	2201      	movs	r2, #1
 800ce84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800ce88:	e012      	b.n	800ceb0 <RadioSetRxConfig+0x330>
 800ce8a:	bf00      	nop
 800ce8c:	20000b5c 	.word	0x20000b5c
 800ce90:	20000048 	.word	0x20000048
 800ce94:	20000b94 	.word	0x20000b94
 800ce98:	20000b6a 	.word	0x20000b6a
 800ce9c:	08015540 	.word	0x08015540
 800cea0:	08015548 	.word	0x08015548
 800cea4:	080157dc 	.word	0x080157dc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800cea8:	4b39      	ldr	r3, [pc, #228]	; (800cf90 <RadioSetRxConfig+0x410>)
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800ceb0:	4b37      	ldr	r3, [pc, #220]	; (800cf90 <RadioSetRxConfig+0x410>)
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800ceb6:	4b36      	ldr	r3, [pc, #216]	; (800cf90 <RadioSetRxConfig+0x410>)
 800ceb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cebc:	2b05      	cmp	r3, #5
 800cebe:	d004      	beq.n	800ceca <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800cec0:	4b33      	ldr	r3, [pc, #204]	; (800cf90 <RadioSetRxConfig+0x410>)
 800cec2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800cec6:	2b06      	cmp	r3, #6
 800cec8:	d10a      	bne.n	800cee0 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 800ceca:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cecc:	2b0b      	cmp	r3, #11
 800cece:	d803      	bhi.n	800ced8 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800ced0:	4b2f      	ldr	r3, [pc, #188]	; (800cf90 <RadioSetRxConfig+0x410>)
 800ced2:	220c      	movs	r2, #12
 800ced4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800ced6:	e006      	b.n	800cee6 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800ced8:	4a2d      	ldr	r2, [pc, #180]	; (800cf90 <RadioSetRxConfig+0x410>)
 800ceda:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cedc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800cede:	e002      	b.n	800cee6 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800cee0:	4a2b      	ldr	r2, [pc, #172]	; (800cf90 <RadioSetRxConfig+0x410>)
 800cee2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cee4:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800cee6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800ceea:	4b29      	ldr	r3, [pc, #164]	; (800cf90 <RadioSetRxConfig+0x410>)
 800ceec:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800ceee:	4b29      	ldr	r3, [pc, #164]	; (800cf94 <RadioSetRxConfig+0x414>)
 800cef0:	781a      	ldrb	r2, [r3, #0]
 800cef2:	4b27      	ldr	r3, [pc, #156]	; (800cf90 <RadioSetRxConfig+0x410>)
 800cef4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800cef6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800cefa:	4b25      	ldr	r3, [pc, #148]	; (800cf90 <RadioSetRxConfig+0x410>)
 800cefc:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800cf00:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800cf04:	4b22      	ldr	r3, [pc, #136]	; (800cf90 <RadioSetRxConfig+0x410>)
 800cf06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800cf0a:	f000 fbd6 	bl	800d6ba <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800cf0e:	4b20      	ldr	r3, [pc, #128]	; (800cf90 <RadioSetRxConfig+0x410>)
 800cf10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	bf14      	ite	ne
 800cf18:	2301      	movne	r3, #1
 800cf1a:	2300      	moveq	r3, #0
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff fd60 	bl	800c9e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cf24:	481c      	ldr	r0, [pc, #112]	; (800cf98 <RadioSetRxConfig+0x418>)
 800cf26:	f002 f843 	bl	800efb0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cf2a:	481c      	ldr	r0, [pc, #112]	; (800cf9c <RadioSetRxConfig+0x41c>)
 800cf2c:	f002 f912 	bl	800f154 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800cf30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	4618      	mov	r0, r3
 800cf36:	f001 fe18 	bl	800eb6a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800cf3a:	4b15      	ldr	r3, [pc, #84]	; (800cf90 <RadioSetRxConfig+0x410>)
 800cf3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d10d      	bne.n	800cf60 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800cf44:	f240 7036 	movw	r0, #1846	; 0x736
 800cf48:	f002 fa60 	bl	800f40c <SUBGRF_ReadRegister>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	f023 0304 	bic.w	r3, r3, #4
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	4619      	mov	r1, r3
 800cf56:	f240 7036 	movw	r0, #1846	; 0x736
 800cf5a:	f002 fa43 	bl	800f3e4 <SUBGRF_WriteRegister>
 800cf5e:	e00c      	b.n	800cf7a <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800cf60:	f240 7036 	movw	r0, #1846	; 0x736
 800cf64:	f002 fa52 	bl	800f40c <SUBGRF_ReadRegister>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f043 0304 	orr.w	r3, r3, #4
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	4619      	mov	r1, r3
 800cf72:	f240 7036 	movw	r0, #1846	; 0x736
 800cf76:	f002 fa35 	bl	800f3e4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800cf7a:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <RadioSetRxConfig+0x410>)
 800cf7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf80:	609a      	str	r2, [r3, #8]
            break;
 800cf82:	e000      	b.n	800cf86 <RadioSetRxConfig+0x406>
            break;
 800cf84:	bf00      	nop
    }
}
 800cf86:	bf00      	nop
 800cf88:	3728      	adds	r7, #40	; 0x28
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}
 800cf8e:	bf00      	nop
 800cf90:	20000b5c 	.word	0x20000b5c
 800cf94:	20000048 	.word	0x20000048
 800cf98:	20000b94 	.word	0x20000b94
 800cf9c:	20000b6a 	.word	0x20000b6a

0800cfa0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b086      	sub	sp, #24
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	60ba      	str	r2, [r7, #8]
 800cfa8:	607b      	str	r3, [r7, #4]
 800cfaa:	4603      	mov	r3, r0
 800cfac:	73fb      	strb	r3, [r7, #15]
 800cfae:	460b      	mov	r3, r1
 800cfb0:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800cfb2:	f002 fcee 	bl	800f992 <RFW_DeInit>
    switch( modem )
 800cfb6:	7bfb      	ldrb	r3, [r7, #15]
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	f000 80d7 	beq.w	800d16c <RadioSetTxConfig+0x1cc>
 800cfbe:	2b03      	cmp	r3, #3
 800cfc0:	f300 80e6 	bgt.w	800d190 <RadioSetTxConfig+0x1f0>
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <RadioSetTxConfig+0x2e>
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d061      	beq.n	800d090 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 800cfcc:	e0e0      	b.n	800d190 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cfce:	4b7c      	ldr	r3, [pc, #496]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800cfd6:	4a7a      	ldr	r2, [pc, #488]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800cfdc:	4b78      	ldr	r3, [pc, #480]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800cfde:	220b      	movs	r2, #11
 800cfe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f002 fc07 	bl	800f7f8 <SUBGRF_GetFskBandwidthRegValue>
 800cfea:	4603      	mov	r3, r0
 800cfec:	461a      	mov	r2, r3
 800cfee:	4b74      	ldr	r3, [pc, #464]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800cff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800cff4:	4a72      	ldr	r2, [pc, #456]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cffa:	4b71      	ldr	r3, [pc, #452]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800d000:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d002:	00db      	lsls	r3, r3, #3
 800d004:	b29a      	uxth	r2, r3
 800d006:	4b6e      	ldr	r3, [pc, #440]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d008:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800d00a:	4b6d      	ldr	r3, [pc, #436]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d00c:	2204      	movs	r2, #4
 800d00e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800d010:	4b6b      	ldr	r3, [pc, #428]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d012:	2218      	movs	r2, #24
 800d014:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800d016:	4b6a      	ldr	r3, [pc, #424]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d018:	2200      	movs	r2, #0
 800d01a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800d01c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d020:	f083 0301 	eor.w	r3, r3, #1
 800d024:	b2db      	uxtb	r3, r3
 800d026:	461a      	mov	r2, r3
 800d028:	4b65      	ldr	r3, [pc, #404]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d02a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800d02c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d030:	2b00      	cmp	r3, #0
 800d032:	d003      	beq.n	800d03c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800d034:	4b62      	ldr	r3, [pc, #392]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d036:	22f2      	movs	r2, #242	; 0xf2
 800d038:	75da      	strb	r2, [r3, #23]
 800d03a:	e002      	b.n	800d042 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800d03c:	4b60      	ldr	r3, [pc, #384]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d03e:	2201      	movs	r2, #1
 800d040:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800d042:	4b5f      	ldr	r3, [pc, #380]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d044:	2201      	movs	r2, #1
 800d046:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800d048:	f000 fb37 	bl	800d6ba <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800d04c:	4b5c      	ldr	r3, [pc, #368]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d04e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d052:	2b00      	cmp	r3, #0
 800d054:	bf14      	ite	ne
 800d056:	2301      	movne	r3, #1
 800d058:	2300      	moveq	r3, #0
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff fcc1 	bl	800c9e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d062:	4858      	ldr	r0, [pc, #352]	; (800d1c4 <RadioSetTxConfig+0x224>)
 800d064:	f001 ffa4 	bl	800efb0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d068:	4857      	ldr	r0, [pc, #348]	; (800d1c8 <RadioSetTxConfig+0x228>)
 800d06a:	f002 f873 	bl	800f154 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800d06e:	4a57      	ldr	r2, [pc, #348]	; (800d1cc <RadioSetTxConfig+0x22c>)
 800d070:	f107 0310 	add.w	r3, r7, #16
 800d074:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d078:	e883 0003 	stmia.w	r3, {r0, r1}
 800d07c:	f107 0310 	add.w	r3, r7, #16
 800d080:	4618      	mov	r0, r3
 800d082:	f001 fb9c 	bl	800e7be <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800d086:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d08a:	f001 fbe7 	bl	800e85c <SUBGRF_SetWhiteningSeed>
            break;
 800d08e:	e080      	b.n	800d192 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d090:	4b4b      	ldr	r3, [pc, #300]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800d098:	6a3b      	ldr	r3, [r7, #32]
 800d09a:	b2da      	uxtb	r2, r3
 800d09c:	4b48      	ldr	r3, [pc, #288]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800d0a2:	4a4b      	ldr	r2, [pc, #300]	; (800d1d0 <RadioSetTxConfig+0x230>)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4413      	add	r3, r2
 800d0a8:	781a      	ldrb	r2, [r3, #0]
 800d0aa:	4b45      	ldr	r3, [pc, #276]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d0ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800d0b0:	4a43      	ldr	r2, [pc, #268]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d0b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0b6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d105      	bne.n	800d0cc <RadioSetTxConfig+0x12c>
 800d0c0:	6a3b      	ldr	r3, [r7, #32]
 800d0c2:	2b0b      	cmp	r3, #11
 800d0c4:	d008      	beq.n	800d0d8 <RadioSetTxConfig+0x138>
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	2b0c      	cmp	r3, #12
 800d0ca:	d005      	beq.n	800d0d8 <RadioSetTxConfig+0x138>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d107      	bne.n	800d0e2 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	2b0c      	cmp	r3, #12
 800d0d6:	d104      	bne.n	800d0e2 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800d0d8:	4b39      	ldr	r3, [pc, #228]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800d0e0:	e003      	b.n	800d0ea <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800d0e2:	4b37      	ldr	r3, [pc, #220]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d0ea:	4b35      	ldr	r3, [pc, #212]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800d0f0:	4b33      	ldr	r3, [pc, #204]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d0f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0f6:	2b05      	cmp	r3, #5
 800d0f8:	d004      	beq.n	800d104 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800d0fa:	4b31      	ldr	r3, [pc, #196]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d0fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800d100:	2b06      	cmp	r3, #6
 800d102:	d10a      	bne.n	800d11a <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 800d104:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d106:	2b0b      	cmp	r3, #11
 800d108:	d803      	bhi.n	800d112 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800d10a:	4b2d      	ldr	r3, [pc, #180]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d10c:	220c      	movs	r2, #12
 800d10e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800d110:	e006      	b.n	800d120 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800d112:	4a2b      	ldr	r2, [pc, #172]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d114:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d116:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800d118:	e002      	b.n	800d120 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800d11a:	4a29      	ldr	r2, [pc, #164]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d11c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d11e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800d120:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d124:	4b26      	ldr	r3, [pc, #152]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d126:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800d128:	4b2a      	ldr	r3, [pc, #168]	; (800d1d4 <RadioSetTxConfig+0x234>)
 800d12a:	781a      	ldrb	r2, [r3, #0]
 800d12c:	4b24      	ldr	r3, [pc, #144]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d12e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800d130:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d134:	4b22      	ldr	r3, [pc, #136]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d136:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800d13a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800d13e:	4b20      	ldr	r3, [pc, #128]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800d144:	f000 fab9 	bl	800d6ba <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800d148:	4b1d      	ldr	r3, [pc, #116]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d14a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d14e:	2b00      	cmp	r3, #0
 800d150:	bf14      	ite	ne
 800d152:	2301      	movne	r3, #1
 800d154:	2300      	moveq	r3, #0
 800d156:	b2db      	uxtb	r3, r3
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff fc43 	bl	800c9e4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d15e:	4819      	ldr	r0, [pc, #100]	; (800d1c4 <RadioSetTxConfig+0x224>)
 800d160:	f001 ff26 	bl	800efb0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d164:	4818      	ldr	r0, [pc, #96]	; (800d1c8 <RadioSetTxConfig+0x228>)
 800d166:	f001 fff5 	bl	800f154 <SUBGRF_SetPacketParams>
            break;
 800d16a:	e012      	b.n	800d192 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800d16c:	2003      	movs	r0, #3
 800d16e:	f7ff fc39 	bl	800c9e4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800d172:	4b13      	ldr	r3, [pc, #76]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d174:	2202      	movs	r2, #2
 800d176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800d17a:	4a11      	ldr	r2, [pc, #68]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d17c:	6a3b      	ldr	r3, [r7, #32]
 800d17e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800d180:	4b0f      	ldr	r3, [pc, #60]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d182:	2216      	movs	r2, #22
 800d184:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d188:	480e      	ldr	r0, [pc, #56]	; (800d1c4 <RadioSetTxConfig+0x224>)
 800d18a:	f001 ff11 	bl	800efb0 <SUBGRF_SetModulationParams>
            break;
 800d18e:	e000      	b.n	800d192 <RadioSetTxConfig+0x1f2>
            break;
 800d190:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800d192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d196:	4618      	mov	r0, r3
 800d198:	f002 fa40 	bl	800f61c <SUBGRF_SetRfTxPower>
 800d19c:	4603      	mov	r3, r0
 800d19e:	461a      	mov	r2, r3
 800d1a0:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d1a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800d1a6:	4b06      	ldr	r3, [pc, #24]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d1a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f002 fc04 	bl	800f9ba <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800d1b2:	4a03      	ldr	r2, [pc, #12]	; (800d1c0 <RadioSetTxConfig+0x220>)
 800d1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1b6:	6053      	str	r3, [r2, #4]
}
 800d1b8:	bf00      	nop
 800d1ba:	3718      	adds	r7, #24
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}
 800d1c0:	20000b5c 	.word	0x20000b5c
 800d1c4:	20000b94 	.word	0x20000b94
 800d1c8:	20000b6a 	.word	0x20000b6a
 800d1cc:	08015548 	.word	0x08015548
 800d1d0:	080157dc 	.word	0x080157dc
 800d1d4:	20000048 	.word	0x20000048

0800d1d8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
    return true;
 800d1e0:	2301      	movs	r3, #1
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bc80      	pop	{r7}
 800d1ea:	4770      	bx	lr

0800d1ec <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800d1fa:	79fb      	ldrb	r3, [r7, #7]
 800d1fc:	2b0a      	cmp	r3, #10
 800d1fe:	d83e      	bhi.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
 800d200:	a201      	add	r2, pc, #4	; (adr r2, 800d208 <RadioGetLoRaBandwidthInHz+0x1c>)
 800d202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d206:	bf00      	nop
 800d208:	0800d235 	.word	0x0800d235
 800d20c:	0800d245 	.word	0x0800d245
 800d210:	0800d255 	.word	0x0800d255
 800d214:	0800d265 	.word	0x0800d265
 800d218:	0800d26d 	.word	0x0800d26d
 800d21c:	0800d273 	.word	0x0800d273
 800d220:	0800d279 	.word	0x0800d279
 800d224:	0800d27f 	.word	0x0800d27f
 800d228:	0800d23d 	.word	0x0800d23d
 800d22c:	0800d24d 	.word	0x0800d24d
 800d230:	0800d25d 	.word	0x0800d25d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800d234:	f641 6384 	movw	r3, #7812	; 0x1e84
 800d238:	60fb      	str	r3, [r7, #12]
        break;
 800d23a:	e020      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800d23c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800d240:	60fb      	str	r3, [r7, #12]
        break;
 800d242:	e01c      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800d244:	f643 5309 	movw	r3, #15625	; 0x3d09
 800d248:	60fb      	str	r3, [r7, #12]
        break;
 800d24a:	e018      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800d24c:	f245 1361 	movw	r3, #20833	; 0x5161
 800d250:	60fb      	str	r3, [r7, #12]
        break;
 800d252:	e014      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800d254:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d258:	60fb      	str	r3, [r7, #12]
        break;
 800d25a:	e010      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800d25c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800d260:	60fb      	str	r3, [r7, #12]
        break;
 800d262:	e00c      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800d264:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d268:	60fb      	str	r3, [r7, #12]
        break;
 800d26a:	e008      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800d26c:	4b07      	ldr	r3, [pc, #28]	; (800d28c <RadioGetLoRaBandwidthInHz+0xa0>)
 800d26e:	60fb      	str	r3, [r7, #12]
        break;
 800d270:	e005      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800d272:	4b07      	ldr	r3, [pc, #28]	; (800d290 <RadioGetLoRaBandwidthInHz+0xa4>)
 800d274:	60fb      	str	r3, [r7, #12]
        break;
 800d276:	e002      	b.n	800d27e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800d278:	4b06      	ldr	r3, [pc, #24]	; (800d294 <RadioGetLoRaBandwidthInHz+0xa8>)
 800d27a:	60fb      	str	r3, [r7, #12]
        break;
 800d27c:	bf00      	nop
    }

    return bandwidthInHz;
 800d27e:	68fb      	ldr	r3, [r7, #12]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	bc80      	pop	{r7}
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	0001e848 	.word	0x0001e848
 800d290:	0003d090 	.word	0x0003d090
 800d294:	0007a120 	.word	0x0007a120

0800d298 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	4608      	mov	r0, r1
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	70fb      	strb	r3, [r7, #3]
 800d2aa:	460b      	mov	r3, r1
 800d2ac:	803b      	strh	r3, [r7, #0]
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800d2b2:	883b      	ldrh	r3, [r7, #0]
 800d2b4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d2b6:	78ba      	ldrb	r2, [r7, #2]
 800d2b8:	f082 0201 	eor.w	r2, r2, #1
 800d2bc:	b2d2      	uxtb	r2, r2
 800d2be:	2a00      	cmp	r2, #0
 800d2c0:	d001      	beq.n	800d2c6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800d2c2:	2208      	movs	r2, #8
 800d2c4:	e000      	b.n	800d2c8 <RadioGetGfskTimeOnAirNumerator+0x30>
 800d2c6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800d2c8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d2ca:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800d2ce:	7c3b      	ldrb	r3, [r7, #16]
 800d2d0:	7d39      	ldrb	r1, [r7, #20]
 800d2d2:	2900      	cmp	r1, #0
 800d2d4:	d001      	beq.n	800d2da <RadioGetGfskTimeOnAirNumerator+0x42>
 800d2d6:	2102      	movs	r1, #2
 800d2d8:	e000      	b.n	800d2dc <RadioGetGfskTimeOnAirNumerator+0x44>
 800d2da:	2100      	movs	r1, #0
 800d2dc:	440b      	add	r3, r1
 800d2de:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d2e0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	370c      	adds	r7, #12
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bc80      	pop	{r7}
 800d2ea:	4770      	bx	lr

0800d2ec <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b08b      	sub	sp, #44	; 0x2c
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	4611      	mov	r1, r2
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	71fb      	strb	r3, [r7, #7]
 800d2fe:	4613      	mov	r3, r2
 800d300:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800d302:	79fb      	ldrb	r3, [r7, #7]
 800d304:	3304      	adds	r3, #4
 800d306:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800d308:	2300      	movs	r3, #0
 800d30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	2b05      	cmp	r3, #5
 800d312:	d002      	beq.n	800d31a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	2b06      	cmp	r3, #6
 800d318:	d104      	bne.n	800d324 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800d31a:	88bb      	ldrh	r3, [r7, #4]
 800d31c:	2b0b      	cmp	r3, #11
 800d31e:	d801      	bhi.n	800d324 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800d320:	230c      	movs	r3, #12
 800d322:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d105      	bne.n	800d336 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	2b0b      	cmp	r3, #11
 800d32e:	d008      	beq.n	800d342 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	2b0c      	cmp	r3, #12
 800d334:	d005      	beq.n	800d342 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d105      	bne.n	800d348 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2b0c      	cmp	r3, #12
 800d340:	d102      	bne.n	800d348 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800d342:	2301      	movs	r3, #1
 800d344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d348:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d34c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800d34e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d352:	2a00      	cmp	r2, #0
 800d354:	d001      	beq.n	800d35a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800d356:	2210      	movs	r2, #16
 800d358:	e000      	b.n	800d35c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800d35a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d35c:	4413      	add	r3, r2
 800d35e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800d364:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800d366:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d36a:	2a00      	cmp	r2, #0
 800d36c:	d001      	beq.n	800d372 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800d36e:	2200      	movs	r2, #0
 800d370:	e000      	b.n	800d374 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800d372:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800d374:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d376:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b06      	cmp	r3, #6
 800d37c:	d803      	bhi.n	800d386 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	623b      	str	r3, [r7, #32]
 800d384:	e00e      	b.n	800d3a4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	3308      	adds	r3, #8
 800d38a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800d38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d390:	2b00      	cmp	r3, #0
 800d392:	d004      	beq.n	800d39e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	3b02      	subs	r3, #2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	623b      	str	r3, [r7, #32]
 800d39c:	e002      	b.n	800d3a4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	da01      	bge.n	800d3ae <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800d3ae:	69fa      	ldr	r2, [r7, #28]
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	4413      	add	r3, r2
 800d3b4:	1e5a      	subs	r2, r3, #1
 800d3b6:	6a3b      	ldr	r3, [r7, #32]
 800d3b8:	fb92 f3f3 	sdiv	r3, r2, r3
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	fb03 f202 	mul.w	r2, r3, r2
 800d3c2:	88bb      	ldrh	r3, [r7, #4]
 800d3c4:	4413      	add	r3, r2
    int32_t intermediate =
 800d3c6:	330c      	adds	r3, #12
 800d3c8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	2b06      	cmp	r3, #6
 800d3ce:	d802      	bhi.n	800d3d6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	3302      	adds	r3, #2
 800d3d4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	009b      	lsls	r3, r3, #2
 800d3da:	1c5a      	adds	r2, r3, #1
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	3b02      	subs	r3, #2
 800d3e0:	fa02 f303 	lsl.w	r3, r2, r3
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	372c      	adds	r7, #44	; 0x2c
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bc80      	pop	{r7}
 800d3ec:	4770      	bx	lr
	...

0800d3f0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b08a      	sub	sp, #40	; 0x28
 800d3f4:	af04      	add	r7, sp, #16
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	607a      	str	r2, [r7, #4]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]
 800d400:	4613      	mov	r3, r2
 800d402:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800d404:	2300      	movs	r3, #0
 800d406:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800d408:	2301      	movs	r3, #1
 800d40a:	613b      	str	r3, [r7, #16]

    switch( modem )
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d002      	beq.n	800d418 <RadioTimeOnAir+0x28>
 800d412:	2b01      	cmp	r3, #1
 800d414:	d017      	beq.n	800d446 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800d416:	e035      	b.n	800d484 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800d418:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800d41c:	8c3a      	ldrh	r2, [r7, #32]
 800d41e:	7bb9      	ldrb	r1, [r7, #14]
 800d420:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d424:	9301      	str	r3, [sp, #4]
 800d426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	4603      	mov	r3, r0
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7ff ff32 	bl	800d298 <RadioGetGfskTimeOnAirNumerator>
 800d434:	4603      	mov	r3, r0
 800d436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d43a:	fb02 f303 	mul.w	r3, r2, r3
 800d43e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	613b      	str	r3, [r7, #16]
        break;
 800d444:	e01e      	b.n	800d484 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800d446:	8c39      	ldrh	r1, [r7, #32]
 800d448:	7bba      	ldrb	r2, [r7, #14]
 800d44a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d44e:	9302      	str	r3, [sp, #8]
 800d450:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d454:	9301      	str	r3, [sp, #4]
 800d456:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	460b      	mov	r3, r1
 800d45e:	6879      	ldr	r1, [r7, #4]
 800d460:	68b8      	ldr	r0, [r7, #8]
 800d462:	f7ff ff43 	bl	800d2ec <RadioGetLoRaTimeOnAirNumerator>
 800d466:	4603      	mov	r3, r0
 800d468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d46c:	fb02 f303 	mul.w	r3, r2, r3
 800d470:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800d472:	4a0a      	ldr	r2, [pc, #40]	; (800d49c <RadioTimeOnAir+0xac>)
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	4413      	add	r3, r2
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff feb6 	bl	800d1ec <RadioGetLoRaBandwidthInHz>
 800d480:	6138      	str	r0, [r7, #16]
        break;
 800d482:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800d484:	697a      	ldr	r2, [r7, #20]
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	4413      	add	r3, r2
 800d48a:	1e5a      	subs	r2, r3, #1
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	080157dc 	.word	0x080157dc

0800d4a0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f240 2101 	movw	r1, #513	; 0x201
 800d4b4:	f240 2001 	movw	r0, #513	; 0x201
 800d4b8:	f001 fc4c 	bl	800ed54 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    //DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800d4bc:	4b70      	ldr	r3, [pc, #448]	; (800d680 <RadioSend+0x1e0>)
 800d4be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d4c2:	2101      	movs	r1, #1
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f002 f881 	bl	800f5cc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800d4ca:	4b6d      	ldr	r3, [pc, #436]	; (800d680 <RadioSend+0x1e0>)
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d112      	bne.n	800d4f8 <RadioSend+0x58>
 800d4d2:	4b6b      	ldr	r3, [pc, #428]	; (800d680 <RadioSend+0x1e0>)
 800d4d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4d8:	2b06      	cmp	r3, #6
 800d4da:	d10d      	bne.n	800d4f8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800d4dc:	f640 0089 	movw	r0, #2185	; 0x889
 800d4e0:	f001 ff94 	bl	800f40c <SUBGRF_ReadRegister>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	f023 0304 	bic.w	r3, r3, #4
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	4619      	mov	r1, r3
 800d4ee:	f640 0089 	movw	r0, #2185	; 0x889
 800d4f2:	f001 ff77 	bl	800f3e4 <SUBGRF_WriteRegister>
 800d4f6:	e00c      	b.n	800d512 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800d4f8:	f640 0089 	movw	r0, #2185	; 0x889
 800d4fc:	f001 ff86 	bl	800f40c <SUBGRF_ReadRegister>
 800d500:	4603      	mov	r3, r0
 800d502:	f043 0304 	orr.w	r3, r3, #4
 800d506:	b2db      	uxtb	r3, r3
 800d508:	4619      	mov	r1, r3
 800d50a:	f640 0089 	movw	r0, #2185	; 0x889
 800d50e:	f001 ff69 	bl	800f3e4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 800d512:	4b5b      	ldr	r3, [pc, #364]	; (800d680 <RadioSend+0x1e0>)
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	2b03      	cmp	r3, #3
 800d518:	f200 80a5 	bhi.w	800d666 <RadioSend+0x1c6>
 800d51c:	a201      	add	r2, pc, #4	; (adr r2, 800d524 <RadioSend+0x84>)
 800d51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d522:	bf00      	nop
 800d524:	0800d54f 	.word	0x0800d54f
 800d528:	0800d535 	.word	0x0800d535
 800d52c:	0800d5af 	.word	0x0800d5af
 800d530:	0800d5cf 	.word	0x0800d5cf
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800d534:	4a52      	ldr	r2, [pc, #328]	; (800d680 <RadioSend+0x1e0>)
 800d536:	78fb      	ldrb	r3, [r7, #3]
 800d538:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d53a:	4852      	ldr	r0, [pc, #328]	; (800d684 <RadioSend+0x1e4>)
 800d53c:	f001 fe0a 	bl	800f154 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	2200      	movs	r2, #0
 800d544:	4619      	mov	r1, r3
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f001 f926 	bl	800e798 <SUBGRF_SendPayload>
            break;
 800d54c:	e08c      	b.n	800d668 <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800d54e:	f002 fa26 	bl	800f99e <RFW_Is_Init>
 800d552:	4603      	mov	r3, r0
 800d554:	2b01      	cmp	r3, #1
 800d556:	d11d      	bne.n	800d594 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800d558:	f107 020d 	add.w	r2, r7, #13
 800d55c:	78fb      	ldrb	r3, [r7, #3]
 800d55e:	4619      	mov	r1, r3
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f002 fa34 	bl	800f9ce <RFW_TransmitInit>
 800d566:	4603      	mov	r3, r0
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d10c      	bne.n	800d586 <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800d56c:	7b7a      	ldrb	r2, [r7, #13]
 800d56e:	4b44      	ldr	r3, [pc, #272]	; (800d680 <RadioSend+0x1e0>)
 800d570:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d572:	4844      	ldr	r0, [pc, #272]	; (800d684 <RadioSend+0x1e4>)
 800d574:	f001 fdee 	bl	800f154 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800d578:	7b7b      	ldrb	r3, [r7, #13]
 800d57a:	2200      	movs	r2, #0
 800d57c:	4619      	mov	r1, r3
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f001 f90a 	bl	800e798 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800d584:	e070      	b.n	800d668 <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800d586:	4b40      	ldr	r3, [pc, #256]	; (800d688 <RadioSend+0x1e8>)
 800d588:	2201      	movs	r2, #1
 800d58a:	2100      	movs	r1, #0
 800d58c:	2002      	movs	r0, #2
 800d58e:	f002 fa69 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
 800d592:	e072      	b.n	800d67a <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800d594:	4a3a      	ldr	r2, [pc, #232]	; (800d680 <RadioSend+0x1e0>)
 800d596:	78fb      	ldrb	r3, [r7, #3]
 800d598:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d59a:	483a      	ldr	r0, [pc, #232]	; (800d684 <RadioSend+0x1e4>)
 800d59c:	f001 fdda 	bl	800f154 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800d5a0:	78fb      	ldrb	r3, [r7, #3]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f001 f8f6 	bl	800e798 <SUBGRF_SendPayload>
            break;
 800d5ac:	e05c      	b.n	800d668 <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800d5ae:	4b34      	ldr	r3, [pc, #208]	; (800d680 <RadioSend+0x1e0>)
 800d5b0:	2202      	movs	r2, #2
 800d5b2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800d5b4:	4a32      	ldr	r2, [pc, #200]	; (800d680 <RadioSend+0x1e0>)
 800d5b6:	78fb      	ldrb	r3, [r7, #3]
 800d5b8:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d5ba:	4832      	ldr	r0, [pc, #200]	; (800d684 <RadioSend+0x1e4>)
 800d5bc:	f001 fdca 	bl	800f154 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800d5c0:	78fb      	ldrb	r3, [r7, #3]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f001 f8e6 	bl	800e798 <SUBGRF_SendPayload>
            break;
 800d5cc:	e04c      	b.n	800d668 <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800d5ce:	78fb      	ldrb	r3, [r7, #3]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	482d      	ldr	r0, [pc, #180]	; (800d68c <RadioSend+0x1ec>)
 800d5d6:	f000 fc66 	bl	800dea6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800d5da:	4b29      	ldr	r3, [pc, #164]	; (800d680 <RadioSend+0x1e0>)
 800d5dc:	2202      	movs	r2, #2
 800d5de:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800d5e0:	78fb      	ldrb	r3, [r7, #3]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	b2da      	uxtb	r2, r3
 800d5e6:	4b26      	ldr	r3, [pc, #152]	; (800d680 <RadioSend+0x1e0>)
 800d5e8:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d5ea:	4826      	ldr	r0, [pc, #152]	; (800d684 <RadioSend+0x1e4>)
 800d5ec:	f001 fdb2 	bl	800f154 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800d5f0:	2100      	movs	r1, #0
 800d5f2:	20f1      	movs	r0, #241	; 0xf1
 800d5f4:	f000 f947 	bl	800d886 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	20f0      	movs	r0, #240	; 0xf0
 800d5fc:	f000 f943 	bl	800d886 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800d600:	4b1f      	ldr	r3, [pc, #124]	; (800d680 <RadioSend+0x1e0>)
 800d602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d604:	2b64      	cmp	r3, #100	; 0x64
 800d606:	d108      	bne.n	800d61a <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800d608:	2170      	movs	r1, #112	; 0x70
 800d60a:	20f3      	movs	r0, #243	; 0xf3
 800d60c:	f000 f93b 	bl	800d886 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800d610:	211d      	movs	r1, #29
 800d612:	20f2      	movs	r0, #242	; 0xf2
 800d614:	f000 f937 	bl	800d886 <RadioWrite>
 800d618:	e007      	b.n	800d62a <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800d61a:	21e1      	movs	r1, #225	; 0xe1
 800d61c:	20f3      	movs	r0, #243	; 0xf3
 800d61e:	f000 f932 	bl	800d886 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800d622:	2104      	movs	r1, #4
 800d624:	20f2      	movs	r0, #242	; 0xf2
 800d626:	f000 f92e 	bl	800d886 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800d62a:	78fb      	ldrb	r3, [r7, #3]
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	b29b      	uxth	r3, r3
 800d632:	3302      	adds	r3, #2
 800d634:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800d636:	89fb      	ldrh	r3, [r7, #14]
 800d638:	0a1b      	lsrs	r3, r3, #8
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	4619      	mov	r1, r3
 800d640:	20f4      	movs	r0, #244	; 0xf4
 800d642:	f000 f920 	bl	800d886 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800d646:	89fb      	ldrh	r3, [r7, #14]
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	4619      	mov	r1, r3
 800d64c:	20f5      	movs	r0, #245	; 0xf5
 800d64e:	f000 f91a 	bl	800d886 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800d652:	78fb      	ldrb	r3, [r7, #3]
 800d654:	3301      	adds	r3, #1
 800d656:	b2db      	uxtb	r3, r3
 800d658:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d65c:	4619      	mov	r1, r3
 800d65e:	480b      	ldr	r0, [pc, #44]	; (800d68c <RadioSend+0x1ec>)
 800d660:	f001 f89a 	bl	800e798 <SUBGRF_SendPayload>
            break;
 800d664:	e000      	b.n	800d668 <RadioSend+0x1c8>
        }
        default:
            break;
 800d666:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800d668:	4b05      	ldr	r3, [pc, #20]	; (800d680 <RadioSend+0x1e0>)
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	4619      	mov	r1, r3
 800d66e:	4808      	ldr	r0, [pc, #32]	; (800d690 <RadioSend+0x1f0>)
 800d670:	f003 f858 	bl	8010724 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d674:	4806      	ldr	r0, [pc, #24]	; (800d690 <RadioSend+0x1f0>)
 800d676:	f002 ff77 	bl	8010568 <UTIL_TIMER_Start>
}
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	20000b5c 	.word	0x20000b5c
 800d684:	20000b6a 	.word	0x20000b6a
 800d688:	08015550 	.word	0x08015550
 800d68c:	20000a58 	.word	0x20000a58
 800d690:	20000bb4 	.word	0x20000bb4

0800d694 <RadioSleep>:

static void RadioSleep( void )
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b082      	sub	sp, #8
 800d698:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800d69a:	2300      	movs	r3, #0
 800d69c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800d69e:	793b      	ldrb	r3, [r7, #4]
 800d6a0:	f043 0304 	orr.w	r3, r3, #4
 800d6a4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800d6a6:	7938      	ldrb	r0, [r7, #4]
 800d6a8:	f001 f952 	bl	800e950 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800d6ac:	2002      	movs	r0, #2
 800d6ae:	f7f4 fff7 	bl	80026a0 <HAL_Delay>
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <RadioStandby>:

static void RadioStandby( void )
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800d6be:	2000      	movs	r0, #0
 800d6c0:	f001 f978 	bl	800e9b4 <SUBGRF_SetStandby>
}
 800d6c4:	bf00      	nop
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 800d6d0:	f002 f965 	bl	800f99e <RFW_Is_Init>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b01      	cmp	r3, #1
 800d6d8:	d102      	bne.n	800d6e0 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 800d6da:	f002 f988 	bl	800f9ee <RFW_ReceiveInit>
 800d6de:	e007      	b.n	800d6f0 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f240 2162 	movw	r1, #610	; 0x262
 800d6e8:	f240 2062 	movw	r0, #610	; 0x262
 800d6ec:	f001 fb32 	bl	800ed54 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d006      	beq.n	800d704 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	480f      	ldr	r0, [pc, #60]	; (800d738 <RadioRx+0x70>)
 800d6fa:	f003 f813 	bl	8010724 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d6fe:	480e      	ldr	r0, [pc, #56]	; (800d738 <RadioRx+0x70>)
 800d700:	f002 ff32 	bl	8010568 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    //DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d704:	4b0d      	ldr	r3, [pc, #52]	; (800d73c <RadioRx+0x74>)
 800d706:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d70a:	2100      	movs	r1, #0
 800d70c:	4618      	mov	r0, r3
 800d70e:	f001 ff5d 	bl	800f5cc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800d712:	4b0a      	ldr	r3, [pc, #40]	; (800d73c <RadioRx+0x74>)
 800d714:	785b      	ldrb	r3, [r3, #1]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d004      	beq.n	800d724 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800d71a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d71e:	f001 f985 	bl	800ea2c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800d722:	e005      	b.n	800d730 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800d724:	4b05      	ldr	r3, [pc, #20]	; (800d73c <RadioRx+0x74>)
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	019b      	lsls	r3, r3, #6
 800d72a:	4618      	mov	r0, r3
 800d72c:	f001 f97e 	bl	800ea2c <SUBGRF_SetRx>
}
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	20000bcc 	.word	0x20000bcc
 800d73c:	20000b5c 	.word	0x20000b5c

0800d740 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b082      	sub	sp, #8
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 800d748:	f002 f929 	bl	800f99e <RFW_Is_Init>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d102      	bne.n	800d758 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800d752:	f002 f94c 	bl	800f9ee <RFW_ReceiveInit>
 800d756:	e007      	b.n	800d768 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800d758:	2300      	movs	r3, #0
 800d75a:	2200      	movs	r2, #0
 800d75c:	f240 2162 	movw	r1, #610	; 0x262
 800d760:	f240 2062 	movw	r0, #610	; 0x262
 800d764:	f001 faf6 	bl	800ed54 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d006      	beq.n	800d77c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d76e:	6879      	ldr	r1, [r7, #4]
 800d770:	480f      	ldr	r0, [pc, #60]	; (800d7b0 <RadioRxBoosted+0x70>)
 800d772:	f002 ffd7 	bl	8010724 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d776:	480e      	ldr	r0, [pc, #56]	; (800d7b0 <RadioRxBoosted+0x70>)
 800d778:	f002 fef6 	bl	8010568 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d77c:	4b0d      	ldr	r3, [pc, #52]	; (800d7b4 <RadioRxBoosted+0x74>)
 800d77e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d782:	2100      	movs	r1, #0
 800d784:	4618      	mov	r0, r3
 800d786:	f001 ff21 	bl	800f5cc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800d78a:	4b0a      	ldr	r3, [pc, #40]	; (800d7b4 <RadioRxBoosted+0x74>)
 800d78c:	785b      	ldrb	r3, [r3, #1]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d004      	beq.n	800d79c <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800d792:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d796:	f001 f969 	bl	800ea6c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800d79a:	e005      	b.n	800d7a8 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800d79c:	4b05      	ldr	r3, [pc, #20]	; (800d7b4 <RadioRxBoosted+0x74>)
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	019b      	lsls	r3, r3, #6
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f001 f962 	bl	800ea6c <SUBGRF_SetRxBoosted>
}
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20000bcc 	.word	0x20000bcc
 800d7b4:	20000b5c 	.word	0x20000b5c

0800d7b8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d7c2:	4b07      	ldr	r3, [pc, #28]	; (800d7e0 <RadioSetRxDutyCycle+0x28>)
 800d7c4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f001 fefe 	bl	800f5cc <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f001 f96e 	bl	800eab4 <SUBGRF_SetRxDutyCycle>
}
 800d7d8:	bf00      	nop
 800d7da:	3708      	adds	r7, #8
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	20000b5c 	.word	0x20000b5c

0800d7e4 <RadioStartCad>:

static void RadioStartCad( void )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d7e8:	4b09      	ldr	r3, [pc, #36]	; (800d810 <RadioStartCad+0x2c>)
 800d7ea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f001 feeb 	bl	800f5cc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800d7fe:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800d802:	f001 faa7 	bl	800ed54 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800d806:	f001 f981 	bl	800eb0c <SUBGRF_SetCad>
}
 800d80a:	bf00      	nop
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	20000b5c 	.word	0x20000b5c

0800d814 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
 800d81c:	460b      	mov	r3, r1
 800d81e:	70fb      	strb	r3, [r7, #3]
 800d820:	4613      	mov	r3, r2
 800d822:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800d824:	883b      	ldrh	r3, [r7, #0]
 800d826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d82a:	fb02 f303 	mul.w	r3, r2, r3
 800d82e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f001 faeb 	bl	800ee0c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800d836:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f001 feee 	bl	800f61c <SUBGRF_SetRfTxPower>
 800d840:	4603      	mov	r3, r0
 800d842:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800d844:	7afb      	ldrb	r3, [r7, #11]
 800d846:	2101      	movs	r1, #1
 800d848:	4618      	mov	r0, r3
 800d84a:	f001 febf 	bl	800f5cc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800d84e:	f001 f96b 	bl	800eb28 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800d852:	68f9      	ldr	r1, [r7, #12]
 800d854:	4804      	ldr	r0, [pc, #16]	; (800d868 <RadioSetTxContinuousWave+0x54>)
 800d856:	f002 ff65 	bl	8010724 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d85a:	4803      	ldr	r0, [pc, #12]	; (800d868 <RadioSetTxContinuousWave+0x54>)
 800d85c:	f002 fe84 	bl	8010568 <UTIL_TIMER_Start>
}
 800d860:	bf00      	nop
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	20000bb4 	.word	0x20000bb4

0800d86c <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800d876:	f001 fd22 	bl	800f2be <SUBGRF_GetRssiInst>
 800d87a:	4603      	mov	r3, r0
 800d87c:	b21b      	sxth	r3, r3
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}

0800d886 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b082      	sub	sp, #8
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	4603      	mov	r3, r0
 800d88e:	460a      	mov	r2, r1
 800d890:	80fb      	strh	r3, [r7, #6]
 800d892:	4613      	mov	r3, r2
 800d894:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 800d896:	797a      	ldrb	r2, [r7, #5]
 800d898:	88fb      	ldrh	r3, [r7, #6]
 800d89a:	4611      	mov	r1, r2
 800d89c:	4618      	mov	r0, r3
 800d89e:	f001 fda1 	bl	800f3e4 <SUBGRF_WriteRegister>
}
 800d8a2:	bf00      	nop
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b082      	sub	sp, #8
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 800d8b4:	88fb      	ldrh	r3, [r7, #6]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f001 fda8 	bl	800f40c <SUBGRF_ReadRegister>
 800d8bc:	4603      	mov	r3, r0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b082      	sub	sp, #8
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	6039      	str	r1, [r7, #0]
 800d8d0:	80fb      	strh	r3, [r7, #6]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800d8d6:	797b      	ldrb	r3, [r7, #5]
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	88fb      	ldrh	r3, [r7, #6]
 800d8dc:	6839      	ldr	r1, [r7, #0]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f001 fda8 	bl	800f434 <SUBGRF_WriteRegisters>
}
 800d8e4:	bf00      	nop
 800d8e6:	3708      	adds	r7, #8
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	6039      	str	r1, [r7, #0]
 800d8f6:	80fb      	strh	r3, [r7, #6]
 800d8f8:	4613      	mov	r3, r2
 800d8fa:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800d8fc:	797b      	ldrb	r3, [r7, #5]
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	88fb      	ldrh	r3, [r7, #6]
 800d902:	6839      	ldr	r1, [r7, #0]
 800d904:	4618      	mov	r0, r3
 800d906:	f001 fdb7 	bl	800f478 <SUBGRF_ReadRegisters>
}
 800d90a:	bf00      	nop
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
	...

0800d914 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	4603      	mov	r3, r0
 800d91c:	460a      	mov	r2, r1
 800d91e:	71fb      	strb	r3, [r7, #7]
 800d920:	4613      	mov	r3, r2
 800d922:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800d924:	79fb      	ldrb	r3, [r7, #7]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d10a      	bne.n	800d940 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800d92a:	4a0e      	ldr	r2, [pc, #56]	; (800d964 <RadioSetMaxPayloadLength+0x50>)
 800d92c:	79bb      	ldrb	r3, [r7, #6]
 800d92e:	7013      	strb	r3, [r2, #0]
 800d930:	4b0c      	ldr	r3, [pc, #48]	; (800d964 <RadioSetMaxPayloadLength+0x50>)
 800d932:	781a      	ldrb	r2, [r3, #0]
 800d934:	4b0c      	ldr	r3, [pc, #48]	; (800d968 <RadioSetMaxPayloadLength+0x54>)
 800d936:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d938:	480c      	ldr	r0, [pc, #48]	; (800d96c <RadioSetMaxPayloadLength+0x58>)
 800d93a:	f001 fc0b 	bl	800f154 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800d93e:	e00d      	b.n	800d95c <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800d940:	4b09      	ldr	r3, [pc, #36]	; (800d968 <RadioSetMaxPayloadLength+0x54>)
 800d942:	7d5b      	ldrb	r3, [r3, #21]
 800d944:	2b01      	cmp	r3, #1
 800d946:	d109      	bne.n	800d95c <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800d948:	4a06      	ldr	r2, [pc, #24]	; (800d964 <RadioSetMaxPayloadLength+0x50>)
 800d94a:	79bb      	ldrb	r3, [r7, #6]
 800d94c:	7013      	strb	r3, [r2, #0]
 800d94e:	4b05      	ldr	r3, [pc, #20]	; (800d964 <RadioSetMaxPayloadLength+0x50>)
 800d950:	781a      	ldrb	r2, [r3, #0]
 800d952:	4b05      	ldr	r3, [pc, #20]	; (800d968 <RadioSetMaxPayloadLength+0x54>)
 800d954:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d956:	4805      	ldr	r0, [pc, #20]	; (800d96c <RadioSetMaxPayloadLength+0x58>)
 800d958:	f001 fbfc 	bl	800f154 <SUBGRF_SetPacketParams>
}
 800d95c:	bf00      	nop
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20000048 	.word	0x20000048
 800d968:	20000b5c 	.word	0x20000b5c
 800d96c:	20000b6a 	.word	0x20000b6a

0800d970 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	4603      	mov	r3, r0
 800d978:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800d97a:	4a13      	ldr	r2, [pc, #76]	; (800d9c8 <RadioSetPublicNetwork+0x58>)
 800d97c:	79fb      	ldrb	r3, [r7, #7]
 800d97e:	7313      	strb	r3, [r2, #12]
 800d980:	4b11      	ldr	r3, [pc, #68]	; (800d9c8 <RadioSetPublicNetwork+0x58>)
 800d982:	7b1a      	ldrb	r2, [r3, #12]
 800d984:	4b10      	ldr	r3, [pc, #64]	; (800d9c8 <RadioSetPublicNetwork+0x58>)
 800d986:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800d988:	2001      	movs	r0, #1
 800d98a:	f7ff f82b 	bl	800c9e4 <RadioSetModem>
    if( enable == true )
 800d98e:	79fb      	ldrb	r3, [r7, #7]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00a      	beq.n	800d9aa <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800d994:	2134      	movs	r1, #52	; 0x34
 800d996:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800d99a:	f001 fd23 	bl	800f3e4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800d99e:	2144      	movs	r1, #68	; 0x44
 800d9a0:	f240 7041 	movw	r0, #1857	; 0x741
 800d9a4:	f001 fd1e 	bl	800f3e4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800d9a8:	e009      	b.n	800d9be <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800d9aa:	2114      	movs	r1, #20
 800d9ac:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800d9b0:	f001 fd18 	bl	800f3e4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800d9b4:	2124      	movs	r1, #36	; 0x24
 800d9b6:	f240 7041 	movw	r0, #1857	; 0x741
 800d9ba:	f001 fd13 	bl	800f3e4 <SUBGRF_WriteRegister>
}
 800d9be:	bf00      	nop
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	20000b5c 	.word	0x20000b5c

0800d9cc <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800d9d0:	f001 fe58 	bl	800f684 <SUBGRF_GetRadioWakeUpTime>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	3303      	adds	r3, #3
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800d9e4:	f000 f80e 	bl	800da04 <RadioOnTxTimeoutProcess>
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800d9f8:	f000 f818 	bl	800da2c <RadioOnRxTimeoutProcess>
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    //DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800da08:	4b07      	ldr	r3, [pc, #28]	; (800da28 <RadioOnTxTimeoutProcess+0x24>)
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d008      	beq.n	800da22 <RadioOnTxTimeoutProcess+0x1e>
 800da10:	4b05      	ldr	r3, [pc, #20]	; (800da28 <RadioOnTxTimeoutProcess+0x24>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	685b      	ldr	r3, [r3, #4]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800da1a:	4b03      	ldr	r3, [pc, #12]	; (800da28 <RadioOnTxTimeoutProcess+0x24>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	685b      	ldr	r3, [r3, #4]
 800da20:	4798      	blx	r3
    }
}
 800da22:	bf00      	nop
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	20000b58 	.word	0x20000b58

0800da2c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    //DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800da30:	4b07      	ldr	r3, [pc, #28]	; (800da50 <RadioOnRxTimeoutProcess+0x24>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d008      	beq.n	800da4a <RadioOnRxTimeoutProcess+0x1e>
 800da38:	4b05      	ldr	r3, [pc, #20]	; (800da50 <RadioOnRxTimeoutProcess+0x24>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	68db      	ldr	r3, [r3, #12]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800da42:	4b03      	ldr	r3, [pc, #12]	; (800da50 <RadioOnRxTimeoutProcess+0x24>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	4798      	blx	r3
    }
}
 800da4a:	bf00      	nop
 800da4c:	bd80      	pop	{r7, pc}
 800da4e:	bf00      	nop
 800da50:	20000b58 	.word	0x20000b58

0800da54 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	4603      	mov	r3, r0
 800da5c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800da5e:	4a05      	ldr	r2, [pc, #20]	; (800da74 <RadioOnDioIrq+0x20>)
 800da60:	88fb      	ldrh	r3, [r7, #6]
 800da62:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800da66:	f000 f807 	bl	800da78 <RadioIrqProcess>
}
 800da6a:	bf00      	nop
 800da6c:	3708      	adds	r7, #8
 800da6e:	46bd      	mov	sp, r7
 800da70:	bd80      	pop	{r7, pc}
 800da72:	bf00      	nop
 800da74:	20000b5c 	.word	0x20000b5c

0800da78 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800da78:	b590      	push	{r4, r7, lr}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800da86:	4bb5      	ldr	r3, [pc, #724]	; (800dd5c <RadioIrqProcess+0x2e4>)
 800da88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800da8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da90:	f000 810c 	beq.w	800dcac <RadioIrqProcess+0x234>
 800da94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da98:	f300 81b5 	bgt.w	800de06 <RadioIrqProcess+0x38e>
 800da9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daa0:	f000 80f0 	beq.w	800dc84 <RadioIrqProcess+0x20c>
 800daa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daa8:	f300 81ad 	bgt.w	800de06 <RadioIrqProcess+0x38e>
 800daac:	2b80      	cmp	r3, #128	; 0x80
 800daae:	f000 80d5 	beq.w	800dc5c <RadioIrqProcess+0x1e4>
 800dab2:	2b80      	cmp	r3, #128	; 0x80
 800dab4:	f300 81a7 	bgt.w	800de06 <RadioIrqProcess+0x38e>
 800dab8:	2b20      	cmp	r3, #32
 800daba:	dc49      	bgt.n	800db50 <RadioIrqProcess+0xd8>
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	f340 81a2 	ble.w	800de06 <RadioIrqProcess+0x38e>
 800dac2:	3b01      	subs	r3, #1
 800dac4:	2b1f      	cmp	r3, #31
 800dac6:	f200 819e 	bhi.w	800de06 <RadioIrqProcess+0x38e>
 800daca:	a201      	add	r2, pc, #4	; (adr r2, 800dad0 <RadioIrqProcess+0x58>)
 800dacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad0:	0800db59 	.word	0x0800db59
 800dad4:	0800db93 	.word	0x0800db93
 800dad8:	0800de07 	.word	0x0800de07
 800dadc:	0800dd25 	.word	0x0800dd25
 800dae0:	0800de07 	.word	0x0800de07
 800dae4:	0800de07 	.word	0x0800de07
 800dae8:	0800de07 	.word	0x0800de07
 800daec:	0800dd33 	.word	0x0800dd33
 800daf0:	0800de07 	.word	0x0800de07
 800daf4:	0800de07 	.word	0x0800de07
 800daf8:	0800de07 	.word	0x0800de07
 800dafc:	0800de07 	.word	0x0800de07
 800db00:	0800de07 	.word	0x0800de07
 800db04:	0800de07 	.word	0x0800de07
 800db08:	0800de07 	.word	0x0800de07
 800db0c:	0800dd4f 	.word	0x0800dd4f
 800db10:	0800de07 	.word	0x0800de07
 800db14:	0800de07 	.word	0x0800de07
 800db18:	0800de07 	.word	0x0800de07
 800db1c:	0800de07 	.word	0x0800de07
 800db20:	0800de07 	.word	0x0800de07
 800db24:	0800de07 	.word	0x0800de07
 800db28:	0800de07 	.word	0x0800de07
 800db2c:	0800de07 	.word	0x0800de07
 800db30:	0800de07 	.word	0x0800de07
 800db34:	0800de07 	.word	0x0800de07
 800db38:	0800de07 	.word	0x0800de07
 800db3c:	0800de07 	.word	0x0800de07
 800db40:	0800de07 	.word	0x0800de07
 800db44:	0800de07 	.word	0x0800de07
 800db48:	0800de07 	.word	0x0800de07
 800db4c:	0800dd89 	.word	0x0800dd89
 800db50:	2b40      	cmp	r3, #64	; 0x40
 800db52:	f000 813a 	beq.w	800ddca <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800db56:	e156      	b.n	800de06 <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 800db58:	4881      	ldr	r0, [pc, #516]	; (800dd60 <RadioIrqProcess+0x2e8>)
 800db5a:	f002 fd73 	bl	8010644 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800db5e:	2000      	movs	r0, #0
 800db60:	f000 ff28 	bl	800e9b4 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800db64:	f001 ff22 	bl	800f9ac <RFW_Is_LongPacketModeEnabled>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b01      	cmp	r3, #1
 800db6c:	d101      	bne.n	800db72 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800db6e:	f001 ff46 	bl	800f9fe <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800db72:	4b7c      	ldr	r3, [pc, #496]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f000 8147 	beq.w	800de0a <RadioIrqProcess+0x392>
 800db7c:	4b79      	ldr	r3, [pc, #484]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	f000 8141 	beq.w	800de0a <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 800db88:	4b76      	ldr	r3, [pc, #472]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4798      	blx	r3
        break;
 800db90:	e13b      	b.n	800de0a <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 800db92:	4875      	ldr	r0, [pc, #468]	; (800dd68 <RadioIrqProcess+0x2f0>)
 800db94:	f002 fd56 	bl	8010644 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800db98:	4b70      	ldr	r3, [pc, #448]	; (800dd5c <RadioIrqProcess+0x2e4>)
 800db9a:	785b      	ldrb	r3, [r3, #1]
 800db9c:	f083 0301 	eor.w	r3, r3, #1
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d014      	beq.n	800dbd0 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800dba6:	2000      	movs	r0, #0
 800dba8:	f000 ff04 	bl	800e9b4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800dbac:	2100      	movs	r1, #0
 800dbae:	f640 1002 	movw	r0, #2306	; 0x902
 800dbb2:	f001 fc17 	bl	800f3e4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800dbb6:	f640 1044 	movw	r0, #2372	; 0x944
 800dbba:	f001 fc27 	bl	800f40c <SUBGRF_ReadRegister>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f043 0302 	orr.w	r3, r3, #2
 800dbc4:	b2db      	uxtb	r3, r3
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	f640 1044 	movw	r0, #2372	; 0x944
 800dbcc:	f001 fc0a 	bl	800f3e4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800dbd0:	1dfb      	adds	r3, r7, #7
 800dbd2:	22ff      	movs	r2, #255	; 0xff
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	4865      	ldr	r0, [pc, #404]	; (800dd6c <RadioIrqProcess+0x2f4>)
 800dbd8:	f000 fdbc 	bl	800e754 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800dbdc:	4864      	ldr	r0, [pc, #400]	; (800dd70 <RadioIrqProcess+0x2f8>)
 800dbde:	f001 fbaf 	bl	800f340 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800dbe2:	4b60      	ldr	r3, [pc, #384]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d036      	beq.n	800dc58 <RadioIrqProcess+0x1e0>
 800dbea:	4b5e      	ldr	r3, [pc, #376]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d031      	beq.n	800dc58 <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 800dbf4:	4b59      	ldr	r3, [pc, #356]	; (800dd5c <RadioIrqProcess+0x2e4>)
 800dbf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d10e      	bne.n	800dc1c <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800dbfe:	4b59      	ldr	r3, [pc, #356]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	689c      	ldr	r4, [r3, #8]
 800dc04:	79fb      	ldrb	r3, [r7, #7]
 800dc06:	b299      	uxth	r1, r3
 800dc08:	4b54      	ldr	r3, [pc, #336]	; (800dd5c <RadioIrqProcess+0x2e4>)
 800dc0a:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800dc0e:	b21a      	sxth	r2, r3
 800dc10:	4b52      	ldr	r3, [pc, #328]	; (800dd5c <RadioIrqProcess+0x2e4>)
 800dc12:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800dc16:	4855      	ldr	r0, [pc, #340]	; (800dd6c <RadioIrqProcess+0x2f4>)
 800dc18:	47a0      	blx	r4
                break;
 800dc1a:	e01e      	b.n	800dc5a <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800dc1c:	4b4f      	ldr	r3, [pc, #316]	; (800dd5c <RadioIrqProcess+0x2e4>)
 800dc1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc20:	463a      	mov	r2, r7
 800dc22:	4611      	mov	r1, r2
 800dc24:	4618      	mov	r0, r3
 800dc26:	f001 fe0f 	bl	800f848 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800dc2a:	4b4e      	ldr	r3, [pc, #312]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	689c      	ldr	r4, [r3, #8]
 800dc30:	79fb      	ldrb	r3, [r7, #7]
 800dc32:	b299      	uxth	r1, r3
 800dc34:	4b49      	ldr	r3, [pc, #292]	; (800dd5c <RadioIrqProcess+0x2e4>)
 800dc36:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800dc3a:	b218      	sxth	r0, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dc42:	4a4c      	ldr	r2, [pc, #304]	; (800dd74 <RadioIrqProcess+0x2fc>)
 800dc44:	fb82 c203 	smull	ip, r2, r2, r3
 800dc48:	1192      	asrs	r2, r2, #6
 800dc4a:	17db      	asrs	r3, r3, #31
 800dc4c:	1ad3      	subs	r3, r2, r3
 800dc4e:	b25b      	sxtb	r3, r3
 800dc50:	4602      	mov	r2, r0
 800dc52:	4846      	ldr	r0, [pc, #280]	; (800dd6c <RadioIrqProcess+0x2f4>)
 800dc54:	47a0      	blx	r4
                break;
 800dc56:	e000      	b.n	800dc5a <RadioIrqProcess+0x1e2>
        }
 800dc58:	bf00      	nop
        break;
 800dc5a:	e0e3      	b.n	800de24 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	f000 fea9 	bl	800e9b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800dc62:	4b40      	ldr	r3, [pc, #256]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f000 80d1 	beq.w	800de0e <RadioIrqProcess+0x396>
 800dc6c:	4b3d      	ldr	r3, [pc, #244]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	699b      	ldr	r3, [r3, #24]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f000 80cb 	beq.w	800de0e <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 800dc78:	4b3a      	ldr	r3, [pc, #232]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	699b      	ldr	r3, [r3, #24]
 800dc7e:	2000      	movs	r0, #0
 800dc80:	4798      	blx	r3
        break;
 800dc82:	e0c4      	b.n	800de0e <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 800dc84:	2000      	movs	r0, #0
 800dc86:	f000 fe95 	bl	800e9b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800dc8a:	4b36      	ldr	r3, [pc, #216]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 80bf 	beq.w	800de12 <RadioIrqProcess+0x39a>
 800dc94:	4b33      	ldr	r3, [pc, #204]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f000 80b9 	beq.w	800de12 <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 800dca0:	4b30      	ldr	r3, [pc, #192]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	699b      	ldr	r3, [r3, #24]
 800dca6:	2001      	movs	r0, #1
 800dca8:	4798      	blx	r3
        break;
 800dcaa:	e0b2      	b.n	800de12 <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800dcac:	4b32      	ldr	r3, [pc, #200]	; (800dd78 <RadioIrqProcess+0x300>)
 800dcae:	2201      	movs	r2, #1
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	2002      	movs	r0, #2
 800dcb4:	f001 fed6 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800dcb8:	f000 fd32 	bl	800e720 <SUBGRF_GetOperatingMode>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b04      	cmp	r3, #4
 800dcc0:	d115      	bne.n	800dcee <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 800dcc2:	4827      	ldr	r0, [pc, #156]	; (800dd60 <RadioIrqProcess+0x2e8>)
 800dcc4:	f002 fcbe 	bl	8010644 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800dcc8:	2000      	movs	r0, #0
 800dcca:	f000 fe73 	bl	800e9b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800dcce:	4b25      	ldr	r3, [pc, #148]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 809f 	beq.w	800de16 <RadioIrqProcess+0x39e>
 800dcd8:	4b22      	ldr	r3, [pc, #136]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	f000 8099 	beq.w	800de16 <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 800dce4:	4b1f      	ldr	r3, [pc, #124]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	4798      	blx	r3
        break;
 800dcec:	e093      	b.n	800de16 <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800dcee:	f000 fd17 	bl	800e720 <SUBGRF_GetOperatingMode>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b05      	cmp	r3, #5
 800dcf6:	f040 808e 	bne.w	800de16 <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 800dcfa:	481b      	ldr	r0, [pc, #108]	; (800dd68 <RadioIrqProcess+0x2f0>)
 800dcfc:	f002 fca2 	bl	8010644 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800dd00:	2000      	movs	r0, #0
 800dd02:	f000 fe57 	bl	800e9b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800dd06:	4b17      	ldr	r3, [pc, #92]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f000 8083 	beq.w	800de16 <RadioIrqProcess+0x39e>
 800dd10:	4b14      	ldr	r3, [pc, #80]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d07d      	beq.n	800de16 <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 800dd1a:	4b12      	ldr	r3, [pc, #72]	; (800dd64 <RadioIrqProcess+0x2ec>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	4798      	blx	r3
        break;
 800dd22:	e078      	b.n	800de16 <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800dd24:	4b15      	ldr	r3, [pc, #84]	; (800dd7c <RadioIrqProcess+0x304>)
 800dd26:	2201      	movs	r2, #1
 800dd28:	2100      	movs	r1, #0
 800dd2a:	2002      	movs	r0, #2
 800dd2c:	f001 fe9a 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800dd30:	e078      	b.n	800de24 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800dd32:	4b13      	ldr	r3, [pc, #76]	; (800dd80 <RadioIrqProcess+0x308>)
 800dd34:	2201      	movs	r2, #1
 800dd36:	2100      	movs	r1, #0
 800dd38:	2002      	movs	r0, #2
 800dd3a:	f001 fe93 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800dd3e:	f001 fe2e 	bl	800f99e <RFW_Is_Init>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	d168      	bne.n	800de1a <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 800dd48:	f001 fe5f 	bl	800fa0a <RFW_ReceivePayload>
        break;
 800dd4c:	e065      	b.n	800de1a <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800dd4e:	4b0d      	ldr	r3, [pc, #52]	; (800dd84 <RadioIrqProcess+0x30c>)
 800dd50:	2201      	movs	r2, #1
 800dd52:	2100      	movs	r1, #0
 800dd54:	2002      	movs	r0, #2
 800dd56:	f001 fe85 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800dd5a:	e063      	b.n	800de24 <RadioIrqProcess+0x3ac>
 800dd5c:	20000b5c 	.word	0x20000b5c
 800dd60:	20000bb4 	.word	0x20000bb4
 800dd64:	20000b58 	.word	0x20000b58
 800dd68:	20000bcc 	.word	0x20000bcc
 800dd6c:	20000a58 	.word	0x20000a58
 800dd70:	20000b80 	.word	0x20000b80
 800dd74:	10624dd3 	.word	0x10624dd3
 800dd78:	08015568 	.word	0x08015568
 800dd7c:	0801557c 	.word	0x0801557c
 800dd80:	08015588 	.word	0x08015588
 800dd84:	08015594 	.word	0x08015594
        TimerStop( &RxTimeoutTimer );
 800dd88:	4828      	ldr	r0, [pc, #160]	; (800de2c <RadioIrqProcess+0x3b4>)
 800dd8a:	f002 fc5b 	bl	8010644 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800dd8e:	4b28      	ldr	r3, [pc, #160]	; (800de30 <RadioIrqProcess+0x3b8>)
 800dd90:	785b      	ldrb	r3, [r3, #1]
 800dd92:	f083 0301 	eor.w	r3, r3, #1
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d002      	beq.n	800dda2 <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 800dd9c:	2000      	movs	r0, #0
 800dd9e:	f000 fe09 	bl	800e9b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800dda2:	4b24      	ldr	r3, [pc, #144]	; (800de34 <RadioIrqProcess+0x3bc>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d039      	beq.n	800de1e <RadioIrqProcess+0x3a6>
 800ddaa:	4b22      	ldr	r3, [pc, #136]	; (800de34 <RadioIrqProcess+0x3bc>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d034      	beq.n	800de1e <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 800ddb4:	4b1f      	ldr	r3, [pc, #124]	; (800de34 <RadioIrqProcess+0x3bc>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800ddbc:	4b1e      	ldr	r3, [pc, #120]	; (800de38 <RadioIrqProcess+0x3c0>)
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	2002      	movs	r0, #2
 800ddc4:	f001 fe4e 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ddc8:	e029      	b.n	800de1e <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800ddca:	4b1c      	ldr	r3, [pc, #112]	; (800de3c <RadioIrqProcess+0x3c4>)
 800ddcc:	2201      	movs	r2, #1
 800ddce:	2100      	movs	r1, #0
 800ddd0:	2002      	movs	r0, #2
 800ddd2:	f001 fe47 	bl	800fa64 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800ddd6:	4b16      	ldr	r3, [pc, #88]	; (800de30 <RadioIrqProcess+0x3b8>)
 800ddd8:	785b      	ldrb	r3, [r3, #1]
 800ddda:	f083 0301 	eor.w	r3, r3, #1
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 800dde4:	2000      	movs	r0, #0
 800dde6:	f000 fde5 	bl	800e9b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ddea:	4b12      	ldr	r3, [pc, #72]	; (800de34 <RadioIrqProcess+0x3bc>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d017      	beq.n	800de22 <RadioIrqProcess+0x3aa>
 800ddf2:	4b10      	ldr	r3, [pc, #64]	; (800de34 <RadioIrqProcess+0x3bc>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d012      	beq.n	800de22 <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 800ddfc:	4b0d      	ldr	r3, [pc, #52]	; (800de34 <RadioIrqProcess+0x3bc>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	4798      	blx	r3
        break;
 800de04:	e00d      	b.n	800de22 <RadioIrqProcess+0x3aa>
        break;
 800de06:	bf00      	nop
 800de08:	e00c      	b.n	800de24 <RadioIrqProcess+0x3ac>
        break;
 800de0a:	bf00      	nop
 800de0c:	e00a      	b.n	800de24 <RadioIrqProcess+0x3ac>
        break;
 800de0e:	bf00      	nop
 800de10:	e008      	b.n	800de24 <RadioIrqProcess+0x3ac>
        break;
 800de12:	bf00      	nop
 800de14:	e006      	b.n	800de24 <RadioIrqProcess+0x3ac>
        break;
 800de16:	bf00      	nop
 800de18:	e004      	b.n	800de24 <RadioIrqProcess+0x3ac>
        break;
 800de1a:	bf00      	nop
 800de1c:	e002      	b.n	800de24 <RadioIrqProcess+0x3ac>
        break;
 800de1e:	bf00      	nop
 800de20:	e000      	b.n	800de24 <RadioIrqProcess+0x3ac>
        break;
 800de22:	bf00      	nop
  }
}
 800de24:	bf00      	nop
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd90      	pop	{r4, r7, pc}
 800de2c:	20000bcc 	.word	0x20000bcc
 800de30:	20000b5c 	.word	0x20000b5c
 800de34:	20000b58 	.word	0x20000b58
 800de38:	080155a0 	.word	0x080155a0
 800de3c:	080155ac 	.word	0x080155ac

0800de40 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800de44:	4b09      	ldr	r3, [pc, #36]	; (800de6c <RadioTxPrbs+0x2c>)
 800de46:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800de4a:	2101      	movs	r1, #1
 800de4c:	4618      	mov	r0, r3
 800de4e:	f001 fbbd 	bl	800f5cc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800de52:	4b07      	ldr	r3, [pc, #28]	; (800de70 <RadioTxPrbs+0x30>)
 800de54:	212d      	movs	r1, #45	; 0x2d
 800de56:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800de5a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800de5c:	f000 fe6d 	bl	800eb3a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800de60:	4804      	ldr	r0, [pc, #16]	; (800de74 <RadioTxPrbs+0x34>)
 800de62:	f000 fdc3 	bl	800e9ec <SUBGRF_SetTx>
}
 800de66:	bf00      	nop
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	20000b5c 	.word	0x20000b5c
 800de70:	0800d887 	.word	0x0800d887
 800de74:	000fffff 	.word	0x000fffff

0800de78 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	4603      	mov	r3, r0
 800de80:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800de82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de86:	4618      	mov	r0, r3
 800de88:	f001 fbc8 	bl	800f61c <SUBGRF_SetRfTxPower>
 800de8c:	4603      	mov	r3, r0
 800de8e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800de90:	7bfb      	ldrb	r3, [r7, #15]
 800de92:	2101      	movs	r1, #1
 800de94:	4618      	mov	r0, r3
 800de96:	f001 fb99 	bl	800f5cc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800de9a:	f000 fe45 	bl	800eb28 <SUBGRF_SetTxContinuousWave>
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}

0800dea6 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800dea6:	b480      	push	{r7}
 800dea8:	b089      	sub	sp, #36	; 0x24
 800deaa:	af00      	add	r7, sp, #0
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	60b9      	str	r1, [r7, #8]
 800deb0:	4613      	mov	r3, r2
 800deb2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800deb4:	2300      	movs	r3, #0
 800deb6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800deb8:	2300      	movs	r3, #0
 800deba:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 800debc:	2300      	movs	r3, #0
 800debe:	61bb      	str	r3, [r7, #24]
 800dec0:	e011      	b.n	800dee6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	68ba      	ldr	r2, [r7, #8]
 800dec6:	4413      	add	r3, r2
 800dec8:	781a      	ldrb	r2, [r3, #0]
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	68b9      	ldr	r1, [r7, #8]
 800dece:	440b      	add	r3, r1
 800ded0:	43d2      	mvns	r2, r2
 800ded2:	b2d2      	uxtb	r2, r2
 800ded4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	2200      	movs	r2, #0
 800dede:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	3301      	adds	r3, #1
 800dee4:	61bb      	str	r3, [r7, #24]
 800dee6:	79fb      	ldrb	r3, [r7, #7]
 800dee8:	69ba      	ldr	r2, [r7, #24]
 800deea:	429a      	cmp	r2, r3
 800deec:	dbe9      	blt.n	800dec2 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800deee:	2300      	movs	r3, #0
 800def0:	61bb      	str	r3, [r7, #24]
 800def2:	e049      	b.n	800df88 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	425a      	negs	r2, r3
 800def8:	f003 0307 	and.w	r3, r3, #7
 800defc:	f002 0207 	and.w	r2, r2, #7
 800df00:	bf58      	it	pl
 800df02:	4253      	negpl	r3, r2
 800df04:	b2db      	uxtb	r3, r3
 800df06:	f1c3 0307 	rsb	r3, r3, #7
 800df0a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	da00      	bge.n	800df14 <payload_integration+0x6e>
 800df12:	3307      	adds	r3, #7
 800df14:	10db      	asrs	r3, r3, #3
 800df16:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	3301      	adds	r3, #1
 800df1c:	425a      	negs	r2, r3
 800df1e:	f003 0307 	and.w	r3, r3, #7
 800df22:	f002 0207 	and.w	r2, r2, #7
 800df26:	bf58      	it	pl
 800df28:	4253      	negpl	r3, r2
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	f1c3 0307 	rsb	r3, r3, #7
 800df30:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	3301      	adds	r3, #1
 800df36:	2b00      	cmp	r3, #0
 800df38:	da00      	bge.n	800df3c <payload_integration+0x96>
 800df3a:	3307      	adds	r3, #7
 800df3c:	10db      	asrs	r3, r3, #3
 800df3e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800df40:	7dbb      	ldrb	r3, [r7, #22]
 800df42:	68ba      	ldr	r2, [r7, #8]
 800df44:	4413      	add	r3, r2
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	461a      	mov	r2, r3
 800df4a:	7dfb      	ldrb	r3, [r7, #23]
 800df4c:	fa42 f303 	asr.w	r3, r2, r3
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800df58:	7ffa      	ldrb	r2, [r7, #31]
 800df5a:	7cfb      	ldrb	r3, [r7, #19]
 800df5c:	4053      	eors	r3, r2
 800df5e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800df60:	7d3b      	ldrb	r3, [r7, #20]
 800df62:	68fa      	ldr	r2, [r7, #12]
 800df64:	4413      	add	r3, r2
 800df66:	781b      	ldrb	r3, [r3, #0]
 800df68:	b25a      	sxtb	r2, r3
 800df6a:	7ff9      	ldrb	r1, [r7, #31]
 800df6c:	7d7b      	ldrb	r3, [r7, #21]
 800df6e:	fa01 f303 	lsl.w	r3, r1, r3
 800df72:	b25b      	sxtb	r3, r3
 800df74:	4313      	orrs	r3, r2
 800df76:	b259      	sxtb	r1, r3
 800df78:	7d3b      	ldrb	r3, [r7, #20]
 800df7a:	68fa      	ldr	r2, [r7, #12]
 800df7c:	4413      	add	r3, r2
 800df7e:	b2ca      	uxtb	r2, r1
 800df80:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	3301      	adds	r3, #1
 800df86:	61bb      	str	r3, [r7, #24]
 800df88:	79fb      	ldrb	r3, [r7, #7]
 800df8a:	00db      	lsls	r3, r3, #3
 800df8c:	69ba      	ldr	r2, [r7, #24]
 800df8e:	429a      	cmp	r2, r3
 800df90:	dbb0      	blt.n	800def4 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800df92:	7ffb      	ldrb	r3, [r7, #31]
 800df94:	01db      	lsls	r3, r3, #7
 800df96:	b25a      	sxtb	r2, r3
 800df98:	7ffb      	ldrb	r3, [r7, #31]
 800df9a:	019b      	lsls	r3, r3, #6
 800df9c:	b25b      	sxtb	r3, r3
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	b25b      	sxtb	r3, r3
 800dfa2:	7ffa      	ldrb	r2, [r7, #31]
 800dfa4:	2a00      	cmp	r2, #0
 800dfa6:	d101      	bne.n	800dfac <payload_integration+0x106>
 800dfa8:	2220      	movs	r2, #32
 800dfaa:	e000      	b.n	800dfae <payload_integration+0x108>
 800dfac:	2200      	movs	r2, #0
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	b259      	sxtb	r1, r3
 800dfb2:	79fb      	ldrb	r3, [r7, #7]
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	b2ca      	uxtb	r2, r1
 800dfba:	701a      	strb	r2, [r3, #0]
}
 800dfbc:	bf00      	nop
 800dfbe:	3724      	adds	r7, #36	; 0x24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bc80      	pop	{r7}
 800dfc4:	4770      	bx	lr
	...

0800dfc8 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b08c      	sub	sp, #48	; 0x30
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60b9      	str	r1, [r7, #8]
 800dfd0:	607a      	str	r2, [r7, #4]
 800dfd2:	603b      	str	r3, [r7, #0]
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 800dfdc:	2300      	movs	r3, #0
 800dfde:	61fb      	str	r3, [r7, #28]
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800dfe4:	f001 fcd5 	bl	800f992 <RFW_DeInit>

    if( rxContinuous != 0 )
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800dfee:	2300      	movs	r3, #0
 800dff0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	bf14      	ite	ne
 800dff8:	2301      	movne	r3, #1
 800dffa:	2300      	moveq	r3, #0
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	4b9f      	ldr	r3, [pc, #636]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e000:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800e002:	7bfb      	ldrb	r3, [r7, #15]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d003      	beq.n	800e010 <RadioSetRxGenericConfig+0x48>
 800e008:	2b01      	cmp	r3, #1
 800e00a:	f000 80e8 	beq.w	800e1de <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800e00e:	e1a0      	b.n	800e352 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d003      	beq.n	800e020 <RadioSetRxGenericConfig+0x58>
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	691b      	ldr	r3, [r3, #16]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d102      	bne.n	800e026 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800e020:	f04f 33ff 	mov.w	r3, #4294967295
 800e024:	e196      	b.n	800e354 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	7d5b      	ldrb	r3, [r3, #21]
 800e02a:	2b08      	cmp	r3, #8
 800e02c:	d902      	bls.n	800e034 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800e02e:	f04f 33ff 	mov.w	r3, #4294967295
 800e032:	e18f      	b.n	800e354 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800e034:	2300      	movs	r3, #0
 800e036:	62bb      	str	r3, [r7, #40]	; 0x28
 800e038:	e00d      	b.n	800e056 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	699a      	ldr	r2, [r3, #24]
 800e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e040:	4413      	add	r3, r2
 800e042:	7819      	ldrb	r1, [r3, #0]
 800e044:	f107 021c 	add.w	r2, r7, #28
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04a:	4413      	add	r3, r2
 800e04c:	460a      	mov	r2, r1
 800e04e:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e052:	3301      	adds	r3, #1
 800e054:	62bb      	str	r3, [r7, #40]	; 0x28
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	7d5b      	ldrb	r3, [r3, #21]
 800e05a:	461a      	mov	r2, r3
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	4293      	cmp	r3, r2
 800e060:	dbeb      	blt.n	800e03a <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	bf14      	ite	ne
 800e06a:	2301      	movne	r3, #1
 800e06c:	2300      	moveq	r3, #0
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	4618      	mov	r0, r3
 800e072:	f000 fd6b 	bl	800eb4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e076:	4b81      	ldr	r3, [pc, #516]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e078:	2200      	movs	r2, #0
 800e07a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	68db      	ldr	r3, [r3, #12]
 800e082:	4a7e      	ldr	r2, [pc, #504]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e084:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	791a      	ldrb	r2, [r3, #4]
 800e08a:	4b7c      	ldr	r3, [pc, #496]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e08c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800e090:	68bb      	ldr	r3, [r7, #8]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	4618      	mov	r0, r3
 800e096:	f001 fbaf 	bl	800f7f8 <SUBGRF_GetFskBandwidthRegValue>
 800e09a:	4603      	mov	r3, r0
 800e09c:	461a      	mov	r2, r3
 800e09e:	4b77      	ldr	r3, [pc, #476]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e0a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e0a4:	4b75      	ldr	r3, [pc, #468]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	00db      	lsls	r3, r3, #3
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	4b71      	ldr	r3, [pc, #452]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e0b6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	7d1a      	ldrb	r2, [r3, #20]
 800e0bc:	4b6f      	ldr	r3, [pc, #444]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e0be:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	7d5b      	ldrb	r3, [r3, #21]
 800e0c4:	00db      	lsls	r3, r3, #3
 800e0c6:	b2da      	uxtb	r2, r3
 800e0c8:	4b6c      	ldr	r3, [pc, #432]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e0ca:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800e0d2:	4b6a      	ldr	r3, [pc, #424]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e0d4:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d105      	bne.n	800e0ec <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	69db      	ldr	r3, [r3, #28]
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	4b65      	ldr	r3, [pc, #404]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e0e8:	759a      	strb	r2, [r3, #22]
 800e0ea:	e00b      	b.n	800e104 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d103      	bne.n	800e0fe <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800e0f6:	4b61      	ldr	r3, [pc, #388]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e0f8:	22ff      	movs	r2, #255	; 0xff
 800e0fa:	759a      	strb	r2, [r3, #22]
 800e0fc:	e002      	b.n	800e104 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800e0fe:	4b5f      	ldr	r3, [pc, #380]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e100:	22ff      	movs	r2, #255	; 0xff
 800e102:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d004      	beq.n	800e118 <RadioSetRxGenericConfig+0x150>
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e114:	2b02      	cmp	r3, #2
 800e116:	d12d      	bne.n	800e174 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800e118:	68bb      	ldr	r3, [r7, #8]
 800e11a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e11e:	2bf1      	cmp	r3, #241	; 0xf1
 800e120:	d00c      	beq.n	800e13c <RadioSetRxGenericConfig+0x174>
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e128:	2bf2      	cmp	r3, #242	; 0xf2
 800e12a:	d007      	beq.n	800e13c <RadioSetRxGenericConfig+0x174>
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e132:	2b01      	cmp	r3, #1
 800e134:	d002      	beq.n	800e13c <RadioSetRxGenericConfig+0x174>
            return -1;
 800e136:	f04f 33ff 	mov.w	r3, #4294967295
 800e13a:	e10b      	b.n	800e354 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800e13c:	2300      	movs	r3, #0
 800e13e:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800e144:	4b4e      	ldr	r3, [pc, #312]	; (800e280 <RadioSetRxGenericConfig+0x2b8>)
 800e146:	6819      	ldr	r1, [r3, #0]
 800e148:	f107 0310 	add.w	r3, r7, #16
 800e14c:	4a4d      	ldr	r2, [pc, #308]	; (800e284 <RadioSetRxGenericConfig+0x2bc>)
 800e14e:	4618      	mov	r0, r3
 800e150:	f001 fc12 	bl	800f978 <RFW_Init>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d002      	beq.n	800e160 <RadioSetRxGenericConfig+0x198>
            return -1;
 800e15a:	f04f 33ff 	mov.w	r3, #4294967295
 800e15e:	e0f9      	b.n	800e354 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e160:	4b46      	ldr	r3, [pc, #280]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e162:	2200      	movs	r2, #0
 800e164:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800e166:	4b45      	ldr	r3, [pc, #276]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e168:	2201      	movs	r2, #1
 800e16a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e16c:	4b43      	ldr	r3, [pc, #268]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e16e:	2200      	movs	r2, #0
 800e170:	755a      	strb	r2, [r3, #21]
        {
 800e172:	e00e      	b.n	800e192 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e17a:	4b40      	ldr	r3, [pc, #256]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e17c:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e184:	4b3d      	ldr	r3, [pc, #244]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e186:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800e18e:	4b3b      	ldr	r3, [pc, #236]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e190:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800e192:	f7ff fa92 	bl	800d6ba <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800e196:	2000      	movs	r0, #0
 800e198:	f7fe fc24 	bl	800c9e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e19c:	483a      	ldr	r0, [pc, #232]	; (800e288 <RadioSetRxGenericConfig+0x2c0>)
 800e19e:	f000 ff07 	bl	800efb0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e1a2:	483a      	ldr	r0, [pc, #232]	; (800e28c <RadioSetRxGenericConfig+0x2c4>)
 800e1a4:	f000 ffd6 	bl	800f154 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e1a8:	f107 031c 	add.w	r3, r7, #28
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f000 fb06 	bl	800e7be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	8c1b      	ldrh	r3, [r3, #32]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 fb50 	bl	800e85c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f000 fb2b 	bl	800e81c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e1cc:	fb03 f202 	mul.w	r2, r3, r2
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1d8:	4a28      	ldr	r2, [pc, #160]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e1da:	6093      	str	r3, [r2, #8]
        break;
 800e1dc:	e0b9      	b.n	800e352 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d102      	bne.n	800e1ec <RadioSetRxGenericConfig+0x224>
            return -1;
 800e1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ea:	e0b3      	b.n	800e354 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d104      	bne.n	800e200 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	69db      	ldr	r3, [r3, #28]
 800e1fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e1fe:	e002      	b.n	800e206 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800e200:	23ff      	movs	r3, #255	; 0xff
 800e202:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	bf14      	ite	ne
 800e20e:	2301      	movne	r3, #1
 800e210:	2300      	moveq	r3, #0
 800e212:	b2db      	uxtb	r3, r3
 800e214:	4618      	mov	r0, r3
 800e216:	f000 fc99 	bl	800eb4c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	4618      	mov	r0, r3
 800e220:	f000 fca3 	bl	800eb6a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e224:	4b15      	ldr	r3, [pc, #84]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e226:	2201      	movs	r2, #1
 800e228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e232:	4b12      	ldr	r3, [pc, #72]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800e23e:	4b0f      	ldr	r3, [pc, #60]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e240:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800e24a:	4b0c      	ldr	r3, [pc, #48]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e24c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800e256:	2b02      	cmp	r3, #2
 800e258:	d01a      	beq.n	800e290 <RadioSetRxGenericConfig+0x2c8>
 800e25a:	2b02      	cmp	r3, #2
 800e25c:	dc2c      	bgt.n	800e2b8 <RadioSetRxGenericConfig+0x2f0>
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <RadioSetRxGenericConfig+0x2a0>
 800e262:	2b01      	cmp	r3, #1
 800e264:	d005      	beq.n	800e272 <RadioSetRxGenericConfig+0x2aa>
            break;
 800e266:	e027      	b.n	800e2b8 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e268:	4b04      	ldr	r3, [pc, #16]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e26a:	2200      	movs	r2, #0
 800e26c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e270:	e023      	b.n	800e2ba <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e272:	4b02      	ldr	r3, [pc, #8]	; (800e27c <RadioSetRxGenericConfig+0x2b4>)
 800e274:	2201      	movs	r2, #1
 800e276:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e27a:	e01e      	b.n	800e2ba <RadioSetRxGenericConfig+0x2f2>
 800e27c:	20000b5c 	.word	0x20000b5c
 800e280:	20000b58 	.word	0x20000b58
 800e284:	20000bcc 	.word	0x20000bcc
 800e288:	20000b94 	.word	0x20000b94
 800e28c:	20000b6a 	.word	0x20000b6a
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800e290:	68bb      	ldr	r3, [r7, #8]
 800e292:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e296:	2b0b      	cmp	r3, #11
 800e298:	d004      	beq.n	800e2a4 <RadioSetRxGenericConfig+0x2dc>
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2a0:	2b0c      	cmp	r3, #12
 800e2a2:	d104      	bne.n	800e2ae <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e2a4:	4b2d      	ldr	r3, [pc, #180]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e2ac:	e005      	b.n	800e2ba <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e2ae:	4b2b      	ldr	r3, [pc, #172]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e2b6:	e000      	b.n	800e2ba <RadioSetRxGenericConfig+0x2f2>
            break;
 800e2b8:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e2ba:	4b28      	ldr	r3, [pc, #160]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e2bc:	2201      	movs	r2, #1
 800e2be:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800e2c4:	4b25      	ldr	r3, [pc, #148]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e2c6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800e2ce:	4b23      	ldr	r3, [pc, #140]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e2d0:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e2d2:	4a22      	ldr	r2, [pc, #136]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e2d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2d8:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800e2e0:	4b1e      	ldr	r3, [pc, #120]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e2e2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800e2ec:	4b1b      	ldr	r3, [pc, #108]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e2ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800e2f2:	f7ff f9e2 	bl	800d6ba <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800e2f6:	2001      	movs	r0, #1
 800e2f8:	f7fe fb74 	bl	800c9e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e2fc:	4818      	ldr	r0, [pc, #96]	; (800e360 <RadioSetRxGenericConfig+0x398>)
 800e2fe:	f000 fe57 	bl	800efb0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e302:	4818      	ldr	r0, [pc, #96]	; (800e364 <RadioSetRxGenericConfig+0x39c>)
 800e304:	f000 ff26 	bl	800f154 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800e308:	4b14      	ldr	r3, [pc, #80]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e30a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e30e:	2b01      	cmp	r3, #1
 800e310:	d10d      	bne.n	800e32e <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800e312:	f240 7036 	movw	r0, #1846	; 0x736
 800e316:	f001 f879 	bl	800f40c <SUBGRF_ReadRegister>
 800e31a:	4603      	mov	r3, r0
 800e31c:	f023 0304 	bic.w	r3, r3, #4
 800e320:	b2db      	uxtb	r3, r3
 800e322:	4619      	mov	r1, r3
 800e324:	f240 7036 	movw	r0, #1846	; 0x736
 800e328:	f001 f85c 	bl	800f3e4 <SUBGRF_WriteRegister>
 800e32c:	e00c      	b.n	800e348 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800e32e:	f240 7036 	movw	r0, #1846	; 0x736
 800e332:	f001 f86b 	bl	800f40c <SUBGRF_ReadRegister>
 800e336:	4603      	mov	r3, r0
 800e338:	f043 0304 	orr.w	r3, r3, #4
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	4619      	mov	r1, r3
 800e340:	f240 7036 	movw	r0, #1846	; 0x736
 800e344:	f001 f84e 	bl	800f3e4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800e348:	4b04      	ldr	r3, [pc, #16]	; (800e35c <RadioSetRxGenericConfig+0x394>)
 800e34a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e34e:	609a      	str	r2, [r3, #8]
        break;
 800e350:	bf00      	nop
    }
    return status;
 800e352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e354:	4618      	mov	r0, r3
 800e356:	3730      	adds	r7, #48	; 0x30
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20000b5c 	.word	0x20000b5c
 800e360:	20000b94 	.word	0x20000b94
 800e364:	20000b6a 	.word	0x20000b6a

0800e368 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b08a      	sub	sp, #40	; 0x28
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	60b9      	str	r1, [r7, #8]
 800e370:	607b      	str	r3, [r7, #4]
 800e372:	4603      	mov	r3, r0
 800e374:	73fb      	strb	r3, [r7, #15]
 800e376:	4613      	mov	r3, r2
 800e378:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800e37a:	2300      	movs	r3, #0
 800e37c:	61fb      	str	r3, [r7, #28]
 800e37e:	2300      	movs	r3, #0
 800e380:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800e382:	f001 fb06 	bl	800f992 <RFW_DeInit>
    switch( modem )
 800e386:	7bfb      	ldrb	r3, [r7, #15]
 800e388:	2b02      	cmp	r3, #2
 800e38a:	f000 8144 	beq.w	800e616 <RadioSetTxGenericConfig+0x2ae>
 800e38e:	2b02      	cmp	r3, #2
 800e390:	f300 8160 	bgt.w	800e654 <RadioSetTxGenericConfig+0x2ec>
 800e394:	2b00      	cmp	r3, #0
 800e396:	d003      	beq.n	800e3a0 <RadioSetTxGenericConfig+0x38>
 800e398:	2b01      	cmp	r3, #1
 800e39a:	f000 80b7 	beq.w	800e50c <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800e39e:	e159      	b.n	800e654 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	689b      	ldr	r3, [r3, #8]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d003      	beq.n	800e3b0 <RadioSetTxGenericConfig+0x48>
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d102      	bne.n	800e3b6 <RadioSetTxGenericConfig+0x4e>
            return -1;
 800e3b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b4:	e163      	b.n	800e67e <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ba:	2b08      	cmp	r3, #8
 800e3bc:	d902      	bls.n	800e3c4 <RadioSetTxGenericConfig+0x5c>
            return -1;
 800e3be:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c2:	e15c      	b.n	800e67e <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e3c8:	e00d      	b.n	800e3e6 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	699a      	ldr	r2, [r3, #24]
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d0:	4413      	add	r3, r2
 800e3d2:	7819      	ldrb	r1, [r3, #0]
 800e3d4:	f107 021c 	add.w	r2, r7, #28
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	4413      	add	r3, r2
 800e3dc:	460a      	mov	r2, r1
 800e3de:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	627b      	str	r3, [r7, #36]	; 0x24
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	dbeb      	blt.n	800e3ca <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e3f2:	4ba5      	ldr	r3, [pc, #660]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	4aa2      	ldr	r2, [pc, #648]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e400:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	781a      	ldrb	r2, [r3, #0]
 800e406:	4ba0      	ldr	r3, [pc, #640]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	4618      	mov	r0, r3
 800e412:	f001 f9f1 	bl	800f7f8 <SUBGRF_GetFskBandwidthRegValue>
 800e416:	4603      	mov	r3, r0
 800e418:	461a      	mov	r2, r3
 800e41a:	4b9b      	ldr	r3, [pc, #620]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	68db      	ldr	r3, [r3, #12]
 800e424:	4a98      	ldr	r2, [pc, #608]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e426:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e428:	4b97      	ldr	r3, [pc, #604]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e42a:	2200      	movs	r2, #0
 800e42c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	b29b      	uxth	r3, r3
 800e434:	00db      	lsls	r3, r3, #3
 800e436:	b29a      	uxth	r2, r3
 800e438:	4b93      	ldr	r3, [pc, #588]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e43a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800e43c:	4b92      	ldr	r3, [pc, #584]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e43e:	2204      	movs	r2, #4
 800e440:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	7d1b      	ldrb	r3, [r3, #20]
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	b2da      	uxtb	r2, r3
 800e44a:	4b8f      	ldr	r3, [pc, #572]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e44c:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800e44e:	4b8e      	ldr	r3, [pc, #568]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e450:	2200      	movs	r2, #0
 800e452:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d003      	beq.n	800e466 <RadioSetTxGenericConfig+0xfe>
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	7f9b      	ldrb	r3, [r3, #30]
 800e462:	2b02      	cmp	r3, #2
 800e464:	d12a      	bne.n	800e4bc <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	7fdb      	ldrb	r3, [r3, #31]
 800e46a:	2bf1      	cmp	r3, #241	; 0xf1
 800e46c:	d00a      	beq.n	800e484 <RadioSetTxGenericConfig+0x11c>
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	7fdb      	ldrb	r3, [r3, #31]
 800e472:	2bf2      	cmp	r3, #242	; 0xf2
 800e474:	d006      	beq.n	800e484 <RadioSetTxGenericConfig+0x11c>
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	7fdb      	ldrb	r3, [r3, #31]
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d002      	beq.n	800e484 <RadioSetTxGenericConfig+0x11c>
                return -1;
 800e47e:	f04f 33ff 	mov.w	r3, #4294967295
 800e482:	e0fc      	b.n	800e67e <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 800e484:	2301      	movs	r3, #1
 800e486:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800e48c:	4b7f      	ldr	r3, [pc, #508]	; (800e68c <RadioSetTxGenericConfig+0x324>)
 800e48e:	6819      	ldr	r1, [r3, #0]
 800e490:	f107 0310 	add.w	r3, r7, #16
 800e494:	4a7e      	ldr	r2, [pc, #504]	; (800e690 <RadioSetTxGenericConfig+0x328>)
 800e496:	4618      	mov	r0, r3
 800e498:	f001 fa6e 	bl	800f978 <RFW_Init>
 800e49c:	4603      	mov	r3, r0
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d002      	beq.n	800e4a8 <RadioSetTxGenericConfig+0x140>
              return -1;
 800e4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a6:	e0ea      	b.n	800e67e <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e4a8:	4b77      	ldr	r3, [pc, #476]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800e4ae:	4b76      	ldr	r3, [pc, #472]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e4b0:	2201      	movs	r2, #1
 800e4b2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e4b4:	4b74      	ldr	r3, [pc, #464]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	755a      	strb	r2, [r3, #21]
        {
 800e4ba:	e00c      	b.n	800e4d6 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	7fda      	ldrb	r2, [r3, #31]
 800e4c0:	4b71      	ldr	r3, [pc, #452]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e4c2:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e4ca:	4b6f      	ldr	r3, [pc, #444]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e4cc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	7f9a      	ldrb	r2, [r3, #30]
 800e4d2:	4b6d      	ldr	r3, [pc, #436]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e4d4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800e4d6:	f7ff f8f0 	bl	800d6ba <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800e4da:	2000      	movs	r0, #0
 800e4dc:	f7fe fa82 	bl	800c9e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e4e0:	486c      	ldr	r0, [pc, #432]	; (800e694 <RadioSetTxGenericConfig+0x32c>)
 800e4e2:	f000 fd65 	bl	800efb0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e4e6:	486c      	ldr	r0, [pc, #432]	; (800e698 <RadioSetTxGenericConfig+0x330>)
 800e4e8:	f000 fe34 	bl	800f154 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e4ec:	f107 031c 	add.w	r3, r7, #28
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f000 f964 	bl	800e7be <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	8b9b      	ldrh	r3, [r3, #28]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f000 f9ae 	bl	800e85c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	8c1b      	ldrh	r3, [r3, #32]
 800e504:	4618      	mov	r0, r3
 800e506:	f000 f989 	bl	800e81c <SUBGRF_SetCrcPolynomial>
        break;
 800e50a:	e0a4      	b.n	800e656 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e50c:	4b5e      	ldr	r3, [pc, #376]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e50e:	2201      	movs	r2, #1
 800e510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800e51a:	4b5b      	ldr	r3, [pc, #364]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e51c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800e526:	4b58      	ldr	r3, [pc, #352]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e532:	4b55      	ldr	r3, [pc, #340]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e534:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e53e:	2b02      	cmp	r3, #2
 800e540:	d010      	beq.n	800e564 <RadioSetTxGenericConfig+0x1fc>
 800e542:	2b02      	cmp	r3, #2
 800e544:	dc22      	bgt.n	800e58c <RadioSetTxGenericConfig+0x224>
 800e546:	2b00      	cmp	r3, #0
 800e548:	d002      	beq.n	800e550 <RadioSetTxGenericConfig+0x1e8>
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d005      	beq.n	800e55a <RadioSetTxGenericConfig+0x1f2>
            break;
 800e54e:	e01d      	b.n	800e58c <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e550:	4b4d      	ldr	r3, [pc, #308]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e552:	2200      	movs	r2, #0
 800e554:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e558:	e019      	b.n	800e58e <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e55a:	4b4b      	ldr	r3, [pc, #300]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e55c:	2201      	movs	r2, #1
 800e55e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e562:	e014      	b.n	800e58e <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e56a:	2b0b      	cmp	r3, #11
 800e56c:	d004      	beq.n	800e578 <RadioSetTxGenericConfig+0x210>
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e574:	2b0c      	cmp	r3, #12
 800e576:	d104      	bne.n	800e582 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e578:	4b43      	ldr	r3, [pc, #268]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e57a:	2201      	movs	r2, #1
 800e57c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e580:	e005      	b.n	800e58e <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e582:	4b41      	ldr	r3, [pc, #260]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e584:	2200      	movs	r2, #0
 800e586:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e58a:	e000      	b.n	800e58e <RadioSetTxGenericConfig+0x226>
            break;
 800e58c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e58e:	4b3e      	ldr	r3, [pc, #248]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e590:	2201      	movs	r2, #1
 800e592:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e598:	4b3b      	ldr	r3, [pc, #236]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e59a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800e5a2:	4b39      	ldr	r3, [pc, #228]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e5a4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e5ac:	4b36      	ldr	r3, [pc, #216]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e5ae:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e5b8:	4b33      	ldr	r3, [pc, #204]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e5ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800e5be:	f7ff f87c 	bl	800d6ba <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800e5c2:	2001      	movs	r0, #1
 800e5c4:	f7fe fa0e 	bl	800c9e4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e5c8:	4832      	ldr	r0, [pc, #200]	; (800e694 <RadioSetTxGenericConfig+0x32c>)
 800e5ca:	f000 fcf1 	bl	800efb0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e5ce:	4832      	ldr	r0, [pc, #200]	; (800e698 <RadioSetTxGenericConfig+0x330>)
 800e5d0:	f000 fdc0 	bl	800f154 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800e5d4:	4b2c      	ldr	r3, [pc, #176]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e5d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5da:	2b06      	cmp	r3, #6
 800e5dc:	d10d      	bne.n	800e5fa <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800e5de:	f640 0089 	movw	r0, #2185	; 0x889
 800e5e2:	f000 ff13 	bl	800f40c <SUBGRF_ReadRegister>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	f023 0304 	bic.w	r3, r3, #4
 800e5ec:	b2db      	uxtb	r3, r3
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	f640 0089 	movw	r0, #2185	; 0x889
 800e5f4:	f000 fef6 	bl	800f3e4 <SUBGRF_WriteRegister>
        break;
 800e5f8:	e02d      	b.n	800e656 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800e5fa:	f640 0089 	movw	r0, #2185	; 0x889
 800e5fe:	f000 ff05 	bl	800f40c <SUBGRF_ReadRegister>
 800e602:	4603      	mov	r3, r0
 800e604:	f043 0304 	orr.w	r3, r3, #4
 800e608:	b2db      	uxtb	r3, r3
 800e60a:	4619      	mov	r1, r3
 800e60c:	f640 0089 	movw	r0, #2185	; 0x889
 800e610:	f000 fee8 	bl	800f3e4 <SUBGRF_WriteRegister>
        break;
 800e614:	e01f      	b.n	800e656 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d004      	beq.n	800e628 <RadioSetTxGenericConfig+0x2c0>
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e626:	d902      	bls.n	800e62e <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800e628:	f04f 33ff 	mov.w	r3, #4294967295
 800e62c:	e027      	b.n	800e67e <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 800e62e:	2002      	movs	r0, #2
 800e630:	f7fe f9d8 	bl	800c9e4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800e634:	4b14      	ldr	r3, [pc, #80]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e636:	2202      	movs	r2, #2
 800e638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e640:	4a11      	ldr	r2, [pc, #68]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e642:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800e644:	4b10      	ldr	r3, [pc, #64]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e646:	2216      	movs	r2, #22
 800e648:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e64c:	4811      	ldr	r0, [pc, #68]	; (800e694 <RadioSetTxGenericConfig+0x32c>)
 800e64e:	f000 fcaf 	bl	800efb0 <SUBGRF_SetModulationParams>
        break;
 800e652:	e000      	b.n	800e656 <RadioSetTxGenericConfig+0x2ee>
        break;
 800e654:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800e656:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f000 ffde 	bl	800f61c <SUBGRF_SetRfTxPower>
 800e660:	4603      	mov	r3, r0
 800e662:	461a      	mov	r2, r3
 800e664:	4b08      	ldr	r3, [pc, #32]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e666:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800e66a:	4b07      	ldr	r3, [pc, #28]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e66c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e670:	4618      	mov	r0, r3
 800e672:	f001 f9a2 	bl	800f9ba <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800e676:	4a04      	ldr	r2, [pc, #16]	; (800e688 <RadioSetTxGenericConfig+0x320>)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	6053      	str	r3, [r2, #4]
    return 0;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3728      	adds	r7, #40	; 0x28
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	20000b5c 	.word	0x20000b5c
 800e68c:	20000b58 	.word	0x20000b58
 800e690:	20000bb4 	.word	0x20000bb4
 800e694:	20000b94 	.word	0x20000b94
 800e698:	20000b6a 	.word	0x20000b6a

0800e69c <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800e6aa:	4a1a      	ldr	r2, [pc, #104]	; (800e714 <SUBGRF_Init+0x78>)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800e6b0:	f7f3 ff34 	bl	800251c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800e6b4:	2002      	movs	r0, #2
 800e6b6:	f001 f87d 	bl	800f7b4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800e6ba:	4b17      	ldr	r3, [pc, #92]	; (800e718 <SUBGRF_Init+0x7c>)
 800e6bc:	2200      	movs	r2, #0
 800e6be:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	f000 f977 	bl	800e9b4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800e6c6:	f7f7 f815 	bl	80056f4 <RBI_IsTCXO>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d10e      	bne.n	800e6ee <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800e6d0:	2140      	movs	r1, #64	; 0x40
 800e6d2:	2001      	movs	r0, #1
 800e6d4:	f000 fb78 	bl	800edc8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800e6d8:	2100      	movs	r1, #0
 800e6da:	f640 1011 	movw	r0, #2321	; 0x911
 800e6de:	f000 fe81 	bl	800f3e4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800e6e2:	237f      	movs	r3, #127	; 0x7f
 800e6e4:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800e6e6:	7b38      	ldrb	r0, [r7, #12]
 800e6e8:	f000 fa85 	bl	800ebf6 <SUBGRF_Calibrate>
 800e6ec:	e009      	b.n	800e702 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800e6ee:	2120      	movs	r1, #32
 800e6f0:	f640 1011 	movw	r0, #2321	; 0x911
 800e6f4:	f000 fe76 	bl	800f3e4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800e6f8:	2120      	movs	r1, #32
 800e6fa:	f640 1012 	movw	r0, #2322	; 0x912
 800e6fe:	f000 fe71 	bl	800f3e4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800e702:	f7f6 ffdb 	bl	80056bc <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800e706:	4b05      	ldr	r3, [pc, #20]	; (800e71c <SUBGRF_Init+0x80>)
 800e708:	2201      	movs	r2, #1
 800e70a:	701a      	strb	r2, [r3, #0]
}
 800e70c:	bf00      	nop
 800e70e:	3710      	adds	r7, #16
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	20000bf0 	.word	0x20000bf0
 800e718:	20000bec 	.word	0x20000bec
 800e71c:	20000be4 	.word	0x20000be4

0800e720 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800e720:	b480      	push	{r7}
 800e722:	af00      	add	r7, sp, #0
    return OperatingMode;
 800e724:	4b02      	ldr	r3, [pc, #8]	; (800e730 <SUBGRF_GetOperatingMode+0x10>)
 800e726:	781b      	ldrb	r3, [r3, #0]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bc80      	pop	{r7}
 800e72e:	4770      	bx	lr
 800e730:	20000be4 	.word	0x20000be4

0800e734 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	460b      	mov	r3, r1
 800e73e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800e740:	78fb      	ldrb	r3, [r7, #3]
 800e742:	461a      	mov	r2, r3
 800e744:	6879      	ldr	r1, [r7, #4]
 800e746:	2000      	movs	r0, #0
 800e748:	f000 feb8 	bl	800f4bc <SUBGRF_WriteBuffer>
}
 800e74c:	bf00      	nop
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	60b9      	str	r1, [r7, #8]
 800e75e:	4613      	mov	r3, r2
 800e760:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800e762:	2300      	movs	r3, #0
 800e764:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800e766:	f107 0317 	add.w	r3, r7, #23
 800e76a:	4619      	mov	r1, r3
 800e76c:	68b8      	ldr	r0, [r7, #8]
 800e76e:	f000 fdbb 	bl	800f2e8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	79fa      	ldrb	r2, [r7, #7]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d201      	bcs.n	800e780 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800e77c:	2301      	movs	r3, #1
 800e77e:	e007      	b.n	800e790 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800e780:	7df8      	ldrb	r0, [r7, #23]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	781b      	ldrb	r3, [r3, #0]
 800e786:	461a      	mov	r2, r3
 800e788:	68f9      	ldr	r1, [r7, #12]
 800e78a:	f000 feb9 	bl	800f500 <SUBGRF_ReadBuffer>

    return 0;
 800e78e:	2300      	movs	r3, #0
}
 800e790:	4618      	mov	r0, r3
 800e792:	3718      	adds	r7, #24
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	607a      	str	r2, [r7, #4]
 800e7a4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800e7a6:	7afb      	ldrb	r3, [r7, #11]
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	68f8      	ldr	r0, [r7, #12]
 800e7ac:	f7ff ffc2 	bl	800e734 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f91b 	bl	800e9ec <SUBGRF_SetTx>
}
 800e7b6:	bf00      	nop
 800e7b8:	3710      	adds	r7, #16
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}

0800e7be <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800e7c6:	2208      	movs	r2, #8
 800e7c8:	6879      	ldr	r1, [r7, #4]
 800e7ca:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800e7ce:	f000 fe31 	bl	800f434 <SUBGRF_WriteRegisters>
    return 0;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800e7e6:	88fb      	ldrh	r3, [r7, #6]
 800e7e8:	0a1b      	lsrs	r3, r3, #8
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	b2db      	uxtb	r3, r3
 800e7ee:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800e7f0:	88fb      	ldrh	r3, [r7, #6]
 800e7f2:	b2db      	uxtb	r3, r3
 800e7f4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800e7f6:	f000 fb6b 	bl	800eed0 <SUBGRF_GetPacketType>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d108      	bne.n	800e812 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800e800:	f107 030c 	add.w	r3, r7, #12
 800e804:	2202      	movs	r2, #2
 800e806:	4619      	mov	r1, r3
 800e808:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800e80c:	f000 fe12 	bl	800f434 <SUBGRF_WriteRegisters>
            break;
 800e810:	e000      	b.n	800e814 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800e812:	bf00      	nop
    }
}
 800e814:	bf00      	nop
 800e816:	3710      	adds	r7, #16
 800e818:	46bd      	mov	sp, r7
 800e81a:	bd80      	pop	{r7, pc}

0800e81c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	4603      	mov	r3, r0
 800e824:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800e826:	88fb      	ldrh	r3, [r7, #6]
 800e828:	0a1b      	lsrs	r3, r3, #8
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	b2db      	uxtb	r3, r3
 800e82e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800e830:	88fb      	ldrh	r3, [r7, #6]
 800e832:	b2db      	uxtb	r3, r3
 800e834:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800e836:	f000 fb4b 	bl	800eed0 <SUBGRF_GetPacketType>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d108      	bne.n	800e852 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800e840:	f107 030c 	add.w	r3, r7, #12
 800e844:	2202      	movs	r2, #2
 800e846:	4619      	mov	r1, r3
 800e848:	f240 60be 	movw	r0, #1726	; 0x6be
 800e84c:	f000 fdf2 	bl	800f434 <SUBGRF_WriteRegisters>
            break;
 800e850:	e000      	b.n	800e854 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800e852:	bf00      	nop
    }
}
 800e854:	bf00      	nop
 800e856:	3710      	adds	r7, #16
 800e858:	46bd      	mov	sp, r7
 800e85a:	bd80      	pop	{r7, pc}

0800e85c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
 800e862:	4603      	mov	r3, r0
 800e864:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800e866:	2300      	movs	r3, #0
 800e868:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800e86a:	f000 fb31 	bl	800eed0 <SUBGRF_GetPacketType>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	d121      	bne.n	800e8b8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800e874:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e878:	f000 fdc8 	bl	800f40c <SUBGRF_ReadRegister>
 800e87c:	4603      	mov	r3, r0
 800e87e:	f023 0301 	bic.w	r3, r3, #1
 800e882:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800e884:	88fb      	ldrh	r3, [r7, #6]
 800e886:	0a1b      	lsrs	r3, r3, #8
 800e888:	b29b      	uxth	r3, r3
 800e88a:	b25b      	sxtb	r3, r3
 800e88c:	f003 0301 	and.w	r3, r3, #1
 800e890:	b25a      	sxtb	r2, r3
 800e892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e896:	4313      	orrs	r3, r2
 800e898:	b25b      	sxtb	r3, r3
 800e89a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
 800e89e:	4619      	mov	r1, r3
 800e8a0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e8a4:	f000 fd9e 	bl	800f3e4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800e8a8:	88fb      	ldrh	r3, [r7, #6]
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800e8b2:	f000 fd97 	bl	800f3e4 <SUBGRF_WriteRegister>
            break;
 800e8b6:	e000      	b.n	800e8ba <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800e8b8:	bf00      	nop
    }
}
 800e8ba:	bf00      	nop
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}

0800e8c2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b082      	sub	sp, #8
 800e8c6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800e8d4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e8d8:	f000 fd98 	bl	800f40c <SUBGRF_ReadRegister>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e8e0:	79fb      	ldrb	r3, [r7, #7]
 800e8e2:	f023 0301 	bic.w	r3, r3, #1
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e8ee:	f000 fd79 	bl	800f3e4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800e8f2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e8f6:	f000 fd89 	bl	800f40c <SUBGRF_ReadRegister>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800e8fe:	79bb      	ldrb	r3, [r7, #6]
 800e900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e904:	b2db      	uxtb	r3, r3
 800e906:	4619      	mov	r1, r3
 800e908:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e90c:	f000 fd6a 	bl	800f3e4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800e910:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e914:	f000 f88a 	bl	800ea2c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800e918:	463b      	mov	r3, r7
 800e91a:	2204      	movs	r2, #4
 800e91c:	4619      	mov	r1, r3
 800e91e:	f640 0019 	movw	r0, #2073	; 0x819
 800e922:	f000 fda9 	bl	800f478 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800e926:	2000      	movs	r0, #0
 800e928:	f000 f844 	bl	800e9b4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800e92c:	79fb      	ldrb	r3, [r7, #7]
 800e92e:	4619      	mov	r1, r3
 800e930:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e934:	f000 fd56 	bl	800f3e4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800e938:	79bb      	ldrb	r3, [r7, #6]
 800e93a:	4619      	mov	r1, r3
 800e93c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e940:	f000 fd50 	bl	800f3e4 <SUBGRF_WriteRegister>

    return number;
 800e944:	683b      	ldr	r3, [r7, #0]
}
 800e946:	4618      	mov	r0, r3
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
	...

0800e950 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b084      	sub	sp, #16
 800e954:	af00      	add	r7, sp, #0
 800e956:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800e958:	2000      	movs	r0, #0
 800e95a:	f7f6 feb6 	bl	80056ca <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800e95e:	2002      	movs	r0, #2
 800e960:	f000 ff28 	bl	800f7b4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e964:	793b      	ldrb	r3, [r7, #4]
 800e966:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800e970:	793b      	ldrb	r3, [r7, #4]
 800e972:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e976:	b2db      	uxtb	r3, r3
 800e978:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e97a:	b25b      	sxtb	r3, r3
 800e97c:	4313      	orrs	r3, r2
 800e97e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800e980:	793b      	ldrb	r3, [r7, #4]
 800e982:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e986:	b2db      	uxtb	r3, r3
 800e988:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800e98a:	4313      	orrs	r3, r2
 800e98c:	b25b      	sxtb	r3, r3
 800e98e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e990:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800e992:	f107 030f 	add.w	r3, r7, #15
 800e996:	2201      	movs	r2, #1
 800e998:	4619      	mov	r1, r3
 800e99a:	2084      	movs	r0, #132	; 0x84
 800e99c:	f000 fdd2 	bl	800f544 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800e9a0:	4b03      	ldr	r3, [pc, #12]	; (800e9b0 <SUBGRF_SetSleep+0x60>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	701a      	strb	r2, [r3, #0]
}
 800e9a6:	bf00      	nop
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20000be4 	.word	0x20000be4

0800e9b4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800e9be:	1dfb      	adds	r3, r7, #7
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	2080      	movs	r0, #128	; 0x80
 800e9c6:	f000 fdbd 	bl	800f544 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800e9ca:	79fb      	ldrb	r3, [r7, #7]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d103      	bne.n	800e9d8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800e9d0:	4b05      	ldr	r3, [pc, #20]	; (800e9e8 <SUBGRF_SetStandby+0x34>)
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800e9d6:	e002      	b.n	800e9de <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800e9d8:	4b03      	ldr	r3, [pc, #12]	; (800e9e8 <SUBGRF_SetStandby+0x34>)
 800e9da:	2202      	movs	r2, #2
 800e9dc:	701a      	strb	r2, [r3, #0]
}
 800e9de:	bf00      	nop
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	20000be4 	.word	0x20000be4

0800e9ec <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800e9f4:	4b0c      	ldr	r3, [pc, #48]	; (800ea28 <SUBGRF_SetTx+0x3c>)
 800e9f6:	2204      	movs	r2, #4
 800e9f8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	0c1b      	lsrs	r3, r3, #16
 800e9fe:	b2db      	uxtb	r3, r3
 800ea00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	0a1b      	lsrs	r3, r3, #8
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800ea10:	f107 030c 	add.w	r3, r7, #12
 800ea14:	2203      	movs	r2, #3
 800ea16:	4619      	mov	r1, r3
 800ea18:	2083      	movs	r0, #131	; 0x83
 800ea1a:	f000 fd93 	bl	800f544 <SUBGRF_WriteCommand>
}
 800ea1e:	bf00      	nop
 800ea20:	3710      	adds	r7, #16
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	20000be4 	.word	0x20000be4

0800ea2c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ea34:	4b0c      	ldr	r3, [pc, #48]	; (800ea68 <SUBGRF_SetRx+0x3c>)
 800ea36:	2205      	movs	r2, #5
 800ea38:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	0c1b      	lsrs	r3, r3, #16
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	0a1b      	lsrs	r3, r3, #8
 800ea46:	b2db      	uxtb	r3, r3
 800ea48:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ea50:	f107 030c 	add.w	r3, r7, #12
 800ea54:	2203      	movs	r2, #3
 800ea56:	4619      	mov	r1, r3
 800ea58:	2082      	movs	r0, #130	; 0x82
 800ea5a:	f000 fd73 	bl	800f544 <SUBGRF_WriteCommand>
}
 800ea5e:	bf00      	nop
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	20000be4 	.word	0x20000be4

0800ea6c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ea74:	4b0e      	ldr	r3, [pc, #56]	; (800eab0 <SUBGRF_SetRxBoosted+0x44>)
 800ea76:	2205      	movs	r2, #5
 800ea78:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800ea7a:	2197      	movs	r1, #151	; 0x97
 800ea7c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800ea80:	f000 fcb0 	bl	800f3e4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	0c1b      	lsrs	r3, r3, #16
 800ea88:	b2db      	uxtb	r3, r3
 800ea8a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	0a1b      	lsrs	r3, r3, #8
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ea9a:	f107 030c 	add.w	r3, r7, #12
 800ea9e:	2203      	movs	r2, #3
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	2082      	movs	r0, #130	; 0x82
 800eaa4:	f000 fd4e 	bl	800f544 <SUBGRF_WriteCommand>
}
 800eaa8:	bf00      	nop
 800eaaa:	3710      	adds	r7, #16
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}
 800eab0:	20000be4 	.word	0x20000be4

0800eab4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	0c1b      	lsrs	r3, r3, #16
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	0a1b      	lsrs	r3, r3, #8
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	0c1b      	lsrs	r3, r3, #16
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	0a1b      	lsrs	r3, r3, #8
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800eaea:	f107 0308 	add.w	r3, r7, #8
 800eaee:	2206      	movs	r2, #6
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	2094      	movs	r0, #148	; 0x94
 800eaf4:	f000 fd26 	bl	800f544 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800eaf8:	4b03      	ldr	r3, [pc, #12]	; (800eb08 <SUBGRF_SetRxDutyCycle+0x54>)
 800eafa:	2206      	movs	r2, #6
 800eafc:	701a      	strb	r2, [r3, #0]
}
 800eafe:	bf00      	nop
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}
 800eb06:	bf00      	nop
 800eb08:	20000be4 	.word	0x20000be4

0800eb0c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800eb10:	2200      	movs	r2, #0
 800eb12:	2100      	movs	r1, #0
 800eb14:	20c5      	movs	r0, #197	; 0xc5
 800eb16:	f000 fd15 	bl	800f544 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800eb1a:	4b02      	ldr	r3, [pc, #8]	; (800eb24 <SUBGRF_SetCad+0x18>)
 800eb1c:	2207      	movs	r2, #7
 800eb1e:	701a      	strb	r2, [r3, #0]
}
 800eb20:	bf00      	nop
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	20000be4 	.word	0x20000be4

0800eb28 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	2100      	movs	r1, #0
 800eb30:	20d1      	movs	r0, #209	; 0xd1
 800eb32:	f000 fd07 	bl	800f544 <SUBGRF_WriteCommand>
}
 800eb36:	bf00      	nop
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800eb3e:	2200      	movs	r2, #0
 800eb40:	2100      	movs	r1, #0
 800eb42:	20d2      	movs	r0, #210	; 0xd2
 800eb44:	f000 fcfe 	bl	800f544 <SUBGRF_WriteCommand>
}
 800eb48:	bf00      	nop
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800eb56:	1dfb      	adds	r3, r7, #7
 800eb58:	2201      	movs	r2, #1
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	209f      	movs	r0, #159	; 0x9f
 800eb5e:	f000 fcf1 	bl	800f544 <SUBGRF_WriteCommand>
}
 800eb62:	bf00      	nop
 800eb64:	3708      	adds	r7, #8
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}

0800eb6a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800eb6a:	b580      	push	{r7, lr}
 800eb6c:	b084      	sub	sp, #16
 800eb6e:	af00      	add	r7, sp, #0
 800eb70:	4603      	mov	r3, r0
 800eb72:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800eb74:	1dfb      	adds	r3, r7, #7
 800eb76:	2201      	movs	r2, #1
 800eb78:	4619      	mov	r1, r3
 800eb7a:	20a0      	movs	r0, #160	; 0xa0
 800eb7c:	f000 fce2 	bl	800f544 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800eb80:	79fb      	ldrb	r3, [r7, #7]
 800eb82:	2b3f      	cmp	r3, #63	; 0x3f
 800eb84:	d91c      	bls.n	800ebc0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800eb86:	79fb      	ldrb	r3, [r7, #7]
 800eb88:	085b      	lsrs	r3, r3, #1
 800eb8a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800eb90:	2300      	movs	r3, #0
 800eb92:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800eb94:	e005      	b.n	800eba2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800eb96:	7bfb      	ldrb	r3, [r7, #15]
 800eb98:	089b      	lsrs	r3, r3, #2
 800eb9a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800eb9c:	7bbb      	ldrb	r3, [r7, #14]
 800eb9e:	3301      	adds	r3, #1
 800eba0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800eba2:	7bfb      	ldrb	r3, [r7, #15]
 800eba4:	2b1f      	cmp	r3, #31
 800eba6:	d8f6      	bhi.n	800eb96 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800eba8:	7bfb      	ldrb	r3, [r7, #15]
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	b2da      	uxtb	r2, r3
 800ebae:	7bbb      	ldrb	r3, [r7, #14]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800ebb4:	7b7b      	ldrb	r3, [r7, #13]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	f240 7006 	movw	r0, #1798	; 0x706
 800ebbc:	f000 fc12 	bl	800f3e4 <SUBGRF_WriteRegister>
    }
}
 800ebc0:	bf00      	nop
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800ebce:	f7f6 fd98 	bl	8005702 <RBI_IsDCDC>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d102      	bne.n	800ebde <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800ebd8:	2301      	movs	r3, #1
 800ebda:	71fb      	strb	r3, [r7, #7]
 800ebdc:	e001      	b.n	800ebe2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800ebe2:	1dfb      	adds	r3, r7, #7
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	2096      	movs	r0, #150	; 0x96
 800ebea:	f000 fcab 	bl	800f544 <SUBGRF_WriteCommand>
}
 800ebee:	bf00      	nop
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}

0800ebf6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800ebf6:	b580      	push	{r7, lr}
 800ebf8:	b084      	sub	sp, #16
 800ebfa:	af00      	add	r7, sp, #0
 800ebfc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ebfe:	793b      	ldrb	r3, [r7, #4]
 800ec00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	019b      	lsls	r3, r3, #6
 800ec08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ec0a:	793b      	ldrb	r3, [r7, #4]
 800ec0c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec10:	b2db      	uxtb	r3, r3
 800ec12:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ec14:	b25b      	sxtb	r3, r3
 800ec16:	4313      	orrs	r3, r2
 800ec18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800ec1a:	793b      	ldrb	r3, [r7, #4]
 800ec1c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ec24:	b25b      	sxtb	r3, r3
 800ec26:	4313      	orrs	r3, r2
 800ec28:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ec2a:	793b      	ldrb	r3, [r7, #4]
 800ec2c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800ec34:	b25b      	sxtb	r3, r3
 800ec36:	4313      	orrs	r3, r2
 800ec38:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800ec3a:	793b      	ldrb	r3, [r7, #4]
 800ec3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ec40:	b2db      	uxtb	r3, r3
 800ec42:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ec44:	b25b      	sxtb	r3, r3
 800ec46:	4313      	orrs	r3, r2
 800ec48:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ec4a:	793b      	ldrb	r3, [r7, #4]
 800ec4c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800ec54:	b25b      	sxtb	r3, r3
 800ec56:	4313      	orrs	r3, r2
 800ec58:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800ec5a:	793b      	ldrb	r3, [r7, #4]
 800ec5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ec64:	4313      	orrs	r3, r2
 800ec66:	b25b      	sxtb	r3, r3
 800ec68:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ec6a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800ec6c:	f107 030f 	add.w	r3, r7, #15
 800ec70:	2201      	movs	r2, #1
 800ec72:	4619      	mov	r1, r3
 800ec74:	2089      	movs	r0, #137	; 0x89
 800ec76:	f000 fc65 	bl	800f544 <SUBGRF_WriteCommand>
}
 800ec7a:	bf00      	nop
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
	...

0800ec84 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	4a1b      	ldr	r2, [pc, #108]	; (800ecfc <SUBGRF_CalibrateImage+0x78>)
 800ec90:	4293      	cmp	r3, r2
 800ec92:	d904      	bls.n	800ec9e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800ec94:	23e1      	movs	r3, #225	; 0xe1
 800ec96:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800ec98:	23e9      	movs	r3, #233	; 0xe9
 800ec9a:	737b      	strb	r3, [r7, #13]
 800ec9c:	e022      	b.n	800ece4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	4a17      	ldr	r2, [pc, #92]	; (800ed00 <SUBGRF_CalibrateImage+0x7c>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d904      	bls.n	800ecb0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800eca6:	23d7      	movs	r3, #215	; 0xd7
 800eca8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800ecaa:	23db      	movs	r3, #219	; 0xdb
 800ecac:	737b      	strb	r3, [r7, #13]
 800ecae:	e019      	b.n	800ece4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	4a14      	ldr	r2, [pc, #80]	; (800ed04 <SUBGRF_CalibrateImage+0x80>)
 800ecb4:	4293      	cmp	r3, r2
 800ecb6:	d904      	bls.n	800ecc2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800ecb8:	23c1      	movs	r3, #193	; 0xc1
 800ecba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800ecbc:	23c5      	movs	r3, #197	; 0xc5
 800ecbe:	737b      	strb	r3, [r7, #13]
 800ecc0:	e010      	b.n	800ece4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	4a10      	ldr	r2, [pc, #64]	; (800ed08 <SUBGRF_CalibrateImage+0x84>)
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	d904      	bls.n	800ecd4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800ecca:	2375      	movs	r3, #117	; 0x75
 800eccc:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800ecce:	2381      	movs	r3, #129	; 0x81
 800ecd0:	737b      	strb	r3, [r7, #13]
 800ecd2:	e007      	b.n	800ece4 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a0d      	ldr	r2, [pc, #52]	; (800ed0c <SUBGRF_CalibrateImage+0x88>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d903      	bls.n	800ece4 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800ecdc:	236b      	movs	r3, #107	; 0x6b
 800ecde:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800ece0:	236f      	movs	r3, #111	; 0x6f
 800ece2:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800ece4:	f107 030c 	add.w	r3, r7, #12
 800ece8:	2202      	movs	r2, #2
 800ecea:	4619      	mov	r1, r3
 800ecec:	2098      	movs	r0, #152	; 0x98
 800ecee:	f000 fc29 	bl	800f544 <SUBGRF_WriteCommand>
}
 800ecf2:	bf00      	nop
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	35a4e900 	.word	0x35a4e900
 800ed00:	32a9f880 	.word	0x32a9f880
 800ed04:	2de54480 	.word	0x2de54480
 800ed08:	1b6b0b00 	.word	0x1b6b0b00
 800ed0c:	1954fc40 	.word	0x1954fc40

0800ed10 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800ed10:	b590      	push	{r4, r7, lr}
 800ed12:	b085      	sub	sp, #20
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	4604      	mov	r4, r0
 800ed18:	4608      	mov	r0, r1
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	4623      	mov	r3, r4
 800ed20:	71fb      	strb	r3, [r7, #7]
 800ed22:	4603      	mov	r3, r0
 800ed24:	71bb      	strb	r3, [r7, #6]
 800ed26:	460b      	mov	r3, r1
 800ed28:	717b      	strb	r3, [r7, #5]
 800ed2a:	4613      	mov	r3, r2
 800ed2c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800ed2e:	79fb      	ldrb	r3, [r7, #7]
 800ed30:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800ed32:	79bb      	ldrb	r3, [r7, #6]
 800ed34:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800ed36:	797b      	ldrb	r3, [r7, #5]
 800ed38:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800ed3a:	793b      	ldrb	r3, [r7, #4]
 800ed3c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ed3e:	f107 030c 	add.w	r3, r7, #12
 800ed42:	2204      	movs	r2, #4
 800ed44:	4619      	mov	r1, r3
 800ed46:	2095      	movs	r0, #149	; 0x95
 800ed48:	f000 fbfc 	bl	800f544 <SUBGRF_WriteCommand>
}
 800ed4c:	bf00      	nop
 800ed4e:	3714      	adds	r7, #20
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd90      	pop	{r4, r7, pc}

0800ed54 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800ed54:	b590      	push	{r4, r7, lr}
 800ed56:	b085      	sub	sp, #20
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	4608      	mov	r0, r1
 800ed5e:	4611      	mov	r1, r2
 800ed60:	461a      	mov	r2, r3
 800ed62:	4623      	mov	r3, r4
 800ed64:	80fb      	strh	r3, [r7, #6]
 800ed66:	4603      	mov	r3, r0
 800ed68:	80bb      	strh	r3, [r7, #4]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	807b      	strh	r3, [r7, #2]
 800ed6e:	4613      	mov	r3, r2
 800ed70:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ed72:	88fb      	ldrh	r3, [r7, #6]
 800ed74:	0a1b      	lsrs	r3, r3, #8
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800ed7c:	88fb      	ldrh	r3, [r7, #6]
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ed82:	88bb      	ldrh	r3, [r7, #4]
 800ed84:	0a1b      	lsrs	r3, r3, #8
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800ed8c:	88bb      	ldrh	r3, [r7, #4]
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ed92:	887b      	ldrh	r3, [r7, #2]
 800ed94:	0a1b      	lsrs	r3, r3, #8
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800ed9c:	887b      	ldrh	r3, [r7, #2]
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800eda2:	883b      	ldrh	r3, [r7, #0]
 800eda4:	0a1b      	lsrs	r3, r3, #8
 800eda6:	b29b      	uxth	r3, r3
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800edac:	883b      	ldrh	r3, [r7, #0]
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800edb2:	f107 0308 	add.w	r3, r7, #8
 800edb6:	2208      	movs	r2, #8
 800edb8:	4619      	mov	r1, r3
 800edba:	2008      	movs	r0, #8
 800edbc:	f000 fbc2 	bl	800f544 <SUBGRF_WriteCommand>
}
 800edc0:	bf00      	nop
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd90      	pop	{r4, r7, pc}

0800edc8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	4603      	mov	r3, r0
 800edd0:	6039      	str	r1, [r7, #0]
 800edd2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800edd4:	79fb      	ldrb	r3, [r7, #7]
 800edd6:	f003 0307 	and.w	r3, r3, #7
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	0c1b      	lsrs	r3, r3, #16
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	0a1b      	lsrs	r3, r3, #8
 800edea:	b2db      	uxtb	r3, r3
 800edec:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800edf4:	f107 030c 	add.w	r3, r7, #12
 800edf8:	2204      	movs	r2, #4
 800edfa:	4619      	mov	r1, r3
 800edfc:	2097      	movs	r0, #151	; 0x97
 800edfe:	f000 fba1 	bl	800f544 <SUBGRF_WriteCommand>
}
 800ee02:	bf00      	nop
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
	...

0800ee0c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800ee0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ee10:	b084      	sub	sp, #16
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800ee1a:	4b1d      	ldr	r3, [pc, #116]	; (800ee90 <SUBGRF_SetRfFrequency+0x84>)
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	f083 0301 	eor.w	r3, r3, #1
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d005      	beq.n	800ee34 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f7ff ff2b 	bl	800ec84 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800ee2e:	4b18      	ldr	r3, [pc, #96]	; (800ee90 <SUBGRF_SetRfFrequency+0x84>)
 800ee30:	2201      	movs	r2, #1
 800ee32:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	461c      	mov	r4, r3
 800ee3a:	4615      	mov	r5, r2
 800ee3c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800ee40:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800ee44:	4a13      	ldr	r2, [pc, #76]	; (800ee94 <SUBGRF_SetRfFrequency+0x88>)
 800ee46:	f04f 0300 	mov.w	r3, #0
 800ee4a:	4640      	mov	r0, r8
 800ee4c:	4649      	mov	r1, r9
 800ee4e:	f7f2 f9a7 	bl	80011a0 <__aeabi_uldivmod>
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	4613      	mov	r3, r2
 800ee58:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	0e1b      	lsrs	r3, r3, #24
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	0c1b      	lsrs	r3, r3, #16
 800ee66:	b2db      	uxtb	r3, r3
 800ee68:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	0a1b      	lsrs	r3, r3, #8
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800ee78:	f107 0308 	add.w	r3, r7, #8
 800ee7c:	2204      	movs	r2, #4
 800ee7e:	4619      	mov	r1, r3
 800ee80:	2086      	movs	r0, #134	; 0x86
 800ee82:	f000 fb5f 	bl	800f544 <SUBGRF_WriteCommand>
}
 800ee86:	bf00      	nop
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ee90:	20000bec 	.word	0x20000bec
 800ee94:	01e84800 	.word	0x01e84800

0800ee98 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	4603      	mov	r3, r0
 800eea0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800eea2:	79fa      	ldrb	r2, [r7, #7]
 800eea4:	4b09      	ldr	r3, [pc, #36]	; (800eecc <SUBGRF_SetPacketType+0x34>)
 800eea6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800eea8:	79fb      	ldrb	r3, [r7, #7]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d104      	bne.n	800eeb8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800eeae:	2100      	movs	r1, #0
 800eeb0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800eeb4:	f000 fa96 	bl	800f3e4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800eeb8:	1dfb      	adds	r3, r7, #7
 800eeba:	2201      	movs	r2, #1
 800eebc:	4619      	mov	r1, r3
 800eebe:	208a      	movs	r0, #138	; 0x8a
 800eec0:	f000 fb40 	bl	800f544 <SUBGRF_WriteCommand>
}
 800eec4:	bf00      	nop
 800eec6:	3708      	adds	r7, #8
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}
 800eecc:	20000be5 	.word	0x20000be5

0800eed0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800eed0:	b480      	push	{r7}
 800eed2:	af00      	add	r7, sp, #0
    return PacketType;
 800eed4:	4b02      	ldr	r3, [pc, #8]	; (800eee0 <SUBGRF_GetPacketType+0x10>)
 800eed6:	781b      	ldrb	r3, [r3, #0]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bc80      	pop	{r7}
 800eede:	4770      	bx	lr
 800eee0:	20000be5 	.word	0x20000be5

0800eee4 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	4603      	mov	r3, r0
 800eeec:	71fb      	strb	r3, [r7, #7]
 800eeee:	460b      	mov	r3, r1
 800eef0:	71bb      	strb	r3, [r7, #6]
 800eef2:	4613      	mov	r3, r2
 800eef4:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800eef6:	79fb      	ldrb	r3, [r7, #7]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d124      	bne.n	800ef46 <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800eefc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef00:	2b0f      	cmp	r3, #15
 800ef02:	d106      	bne.n	800ef12 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800ef04:	2301      	movs	r3, #1
 800ef06:	2201      	movs	r2, #1
 800ef08:	2100      	movs	r1, #0
 800ef0a:	2006      	movs	r0, #6
 800ef0c:	f7ff ff00 	bl	800ed10 <SUBGRF_SetPaConfig>
 800ef10:	e005      	b.n	800ef1e <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800ef12:	2301      	movs	r3, #1
 800ef14:	2201      	movs	r2, #1
 800ef16:	2100      	movs	r1, #0
 800ef18:	2004      	movs	r0, #4
 800ef1a:	f7ff fef9 	bl	800ed10 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800ef1e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef22:	2b0d      	cmp	r3, #13
 800ef24:	dd02      	ble.n	800ef2c <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800ef26:	230e      	movs	r3, #14
 800ef28:	71bb      	strb	r3, [r7, #6]
 800ef2a:	e006      	b.n	800ef3a <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 800ef2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef30:	f113 0f11 	cmn.w	r3, #17
 800ef34:	da01      	bge.n	800ef3a <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800ef36:	23ef      	movs	r3, #239	; 0xef
 800ef38:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800ef3a:	2118      	movs	r1, #24
 800ef3c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ef40:	f000 fa50 	bl	800f3e4 <SUBGRF_WriteRegister>
 800ef44:	e025      	b.n	800ef92 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800ef46:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ef4a:	f000 fa5f 	bl	800f40c <SUBGRF_ReadRegister>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	f043 031e 	orr.w	r3, r3, #30
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	4619      	mov	r1, r3
 800ef58:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ef5c:	f000 fa42 	bl	800f3e4 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800ef60:	2301      	movs	r3, #1
 800ef62:	2200      	movs	r2, #0
 800ef64:	2107      	movs	r1, #7
 800ef66:	2004      	movs	r0, #4
 800ef68:	f7ff fed2 	bl	800ed10 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800ef6c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef70:	2b16      	cmp	r3, #22
 800ef72:	dd02      	ble.n	800ef7a <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800ef74:	2316      	movs	r3, #22
 800ef76:	71bb      	strb	r3, [r7, #6]
 800ef78:	e006      	b.n	800ef88 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800ef7a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef7e:	f113 0f09 	cmn.w	r3, #9
 800ef82:	da01      	bge.n	800ef88 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800ef84:	23f7      	movs	r3, #247	; 0xf7
 800ef86:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800ef88:	2138      	movs	r1, #56	; 0x38
 800ef8a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ef8e:	f000 fa29 	bl	800f3e4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800ef92:	79bb      	ldrb	r3, [r7, #6]
 800ef94:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800ef96:	797b      	ldrb	r3, [r7, #5]
 800ef98:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800ef9a:	f107 030c 	add.w	r3, r7, #12
 800ef9e:	2202      	movs	r2, #2
 800efa0:	4619      	mov	r1, r3
 800efa2:	208e      	movs	r0, #142	; 0x8e
 800efa4:	f000 face 	bl	800f544 <SUBGRF_WriteCommand>
}
 800efa8:	bf00      	nop
 800efaa:	3710      	adds	r7, #16
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800efb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800efb4:	b086      	sub	sp, #24
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800efbe:	4a61      	ldr	r2, [pc, #388]	; (800f144 <SUBGRF_SetModulationParams+0x194>)
 800efc0:	f107 0308 	add.w	r3, r7, #8
 800efc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efc8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	781a      	ldrb	r2, [r3, #0]
 800efd0:	4b5d      	ldr	r3, [pc, #372]	; (800f148 <SUBGRF_SetModulationParams+0x198>)
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d004      	beq.n	800efe2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	4618      	mov	r0, r3
 800efde:	f7ff ff5b 	bl	800ee98 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	2b03      	cmp	r3, #3
 800efe8:	f200 80a5 	bhi.w	800f136 <SUBGRF_SetModulationParams+0x186>
 800efec:	a201      	add	r2, pc, #4	; (adr r2, 800eff4 <SUBGRF_SetModulationParams+0x44>)
 800efee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff2:	bf00      	nop
 800eff4:	0800f005 	.word	0x0800f005
 800eff8:	0800f0c5 	.word	0x0800f0c5
 800effc:	0800f087 	.word	0x0800f087
 800f000:	0800f0f3 	.word	0x0800f0f3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800f004:	2308      	movs	r3, #8
 800f006:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	4a4f      	ldr	r2, [pc, #316]	; (800f14c <SUBGRF_SetModulationParams+0x19c>)
 800f00e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f012:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	0c1b      	lsrs	r3, r3, #16
 800f018:	b2db      	uxtb	r3, r3
 800f01a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	0a1b      	lsrs	r3, r3, #8
 800f020:	b2db      	uxtb	r3, r3
 800f022:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	b2db      	uxtb	r3, r3
 800f028:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	7b1b      	ldrb	r3, [r3, #12]
 800f02e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	7b5b      	ldrb	r3, [r3, #13]
 800f034:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	689b      	ldr	r3, [r3, #8]
 800f03a:	2200      	movs	r2, #0
 800f03c:	461c      	mov	r4, r3
 800f03e:	4615      	mov	r5, r2
 800f040:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800f044:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800f048:	4a41      	ldr	r2, [pc, #260]	; (800f150 <SUBGRF_SetModulationParams+0x1a0>)
 800f04a:	f04f 0300 	mov.w	r3, #0
 800f04e:	4640      	mov	r0, r8
 800f050:	4649      	mov	r1, r9
 800f052:	f7f2 f8a5 	bl	80011a0 <__aeabi_uldivmod>
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	4613      	mov	r3, r2
 800f05c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	0c1b      	lsrs	r3, r3, #16
 800f062:	b2db      	uxtb	r3, r3
 800f064:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	0a1b      	lsrs	r3, r3, #8
 800f06a:	b2db      	uxtb	r3, r3
 800f06c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	b2db      	uxtb	r3, r3
 800f072:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f074:	7cfb      	ldrb	r3, [r7, #19]
 800f076:	b29a      	uxth	r2, r3
 800f078:	f107 0308 	add.w	r3, r7, #8
 800f07c:	4619      	mov	r1, r3
 800f07e:	208b      	movs	r0, #139	; 0x8b
 800f080:	f000 fa60 	bl	800f544 <SUBGRF_WriteCommand>
        break;
 800f084:	e058      	b.n	800f138 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800f086:	2304      	movs	r3, #4
 800f088:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	4a2f      	ldr	r2, [pc, #188]	; (800f14c <SUBGRF_SetModulationParams+0x19c>)
 800f090:	fbb2 f3f3 	udiv	r3, r2, r3
 800f094:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	0c1b      	lsrs	r3, r3, #16
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	0a1b      	lsrs	r3, r3, #8
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	7d1b      	ldrb	r3, [r3, #20]
 800f0b0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f0b2:	7cfb      	ldrb	r3, [r7, #19]
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	f107 0308 	add.w	r3, r7, #8
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	208b      	movs	r0, #139	; 0x8b
 800f0be:	f000 fa41 	bl	800f544 <SUBGRF_WriteCommand>
        break;
 800f0c2:	e039      	b.n	800f138 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800f0c4:	2304      	movs	r3, #4
 800f0c6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	7e1b      	ldrb	r3, [r3, #24]
 800f0cc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	7e5b      	ldrb	r3, [r3, #25]
 800f0d2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	7e9b      	ldrb	r3, [r3, #26]
 800f0d8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	7edb      	ldrb	r3, [r3, #27]
 800f0de:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f0e0:	7cfb      	ldrb	r3, [r7, #19]
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	f107 0308 	add.w	r3, r7, #8
 800f0e8:	4619      	mov	r1, r3
 800f0ea:	208b      	movs	r0, #139	; 0x8b
 800f0ec:	f000 fa2a 	bl	800f544 <SUBGRF_WriteCommand>

        break;
 800f0f0:	e022      	b.n	800f138 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800f0f2:	2305      	movs	r3, #5
 800f0f4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	685b      	ldr	r3, [r3, #4]
 800f0fa:	4a14      	ldr	r2, [pc, #80]	; (800f14c <SUBGRF_SetModulationParams+0x19c>)
 800f0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f100:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	0c1b      	lsrs	r3, r3, #16
 800f106:	b2db      	uxtb	r3, r3
 800f108:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	0a1b      	lsrs	r3, r3, #8
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	b2db      	uxtb	r3, r3
 800f116:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	7b1b      	ldrb	r3, [r3, #12]
 800f11c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	7b5b      	ldrb	r3, [r3, #13]
 800f122:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f124:	7cfb      	ldrb	r3, [r7, #19]
 800f126:	b29a      	uxth	r2, r3
 800f128:	f107 0308 	add.w	r3, r7, #8
 800f12c:	4619      	mov	r1, r3
 800f12e:	208b      	movs	r0, #139	; 0x8b
 800f130:	f000 fa08 	bl	800f544 <SUBGRF_WriteCommand>
        break;
 800f134:	e000      	b.n	800f138 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800f136:	bf00      	nop
    }
}
 800f138:	bf00      	nop
 800f13a:	3718      	adds	r7, #24
 800f13c:	46bd      	mov	sp, r7
 800f13e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f142:	bf00      	nop
 800f144:	080155bc 	.word	0x080155bc
 800f148:	20000be5 	.word	0x20000be5
 800f14c:	3d090000 	.word	0x3d090000
 800f150:	01e84800 	.word	0x01e84800

0800f154 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b086      	sub	sp, #24
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800f15c:	2300      	movs	r3, #0
 800f15e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f160:	4a48      	ldr	r2, [pc, #288]	; (800f284 <SUBGRF_SetPacketParams+0x130>)
 800f162:	f107 030c 	add.w	r3, r7, #12
 800f166:	ca07      	ldmia	r2, {r0, r1, r2}
 800f168:	c303      	stmia	r3!, {r0, r1}
 800f16a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	781a      	ldrb	r2, [r3, #0]
 800f170:	4b45      	ldr	r3, [pc, #276]	; (800f288 <SUBGRF_SetPacketParams+0x134>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	429a      	cmp	r2, r3
 800f176:	d004      	beq.n	800f182 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7ff fe8b 	bl	800ee98 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	2b03      	cmp	r3, #3
 800f188:	d878      	bhi.n	800f27c <SUBGRF_SetPacketParams+0x128>
 800f18a:	a201      	add	r2, pc, #4	; (adr r2, 800f190 <SUBGRF_SetPacketParams+0x3c>)
 800f18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f190:	0800f1a1 	.word	0x0800f1a1
 800f194:	0800f231 	.word	0x0800f231
 800f198:	0800f225 	.word	0x0800f225
 800f19c:	0800f1a1 	.word	0x0800f1a1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	7a5b      	ldrb	r3, [r3, #9]
 800f1a4:	2bf1      	cmp	r3, #241	; 0xf1
 800f1a6:	d10a      	bne.n	800f1be <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800f1a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f1ac:	f7ff fb16 	bl	800e7dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800f1b0:	f248 0005 	movw	r0, #32773	; 0x8005
 800f1b4:	f7ff fb32 	bl	800e81c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800f1b8:	2302      	movs	r3, #2
 800f1ba:	75bb      	strb	r3, [r7, #22]
 800f1bc:	e011      	b.n	800f1e2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	7a5b      	ldrb	r3, [r3, #9]
 800f1c2:	2bf2      	cmp	r3, #242	; 0xf2
 800f1c4:	d10a      	bne.n	800f1dc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800f1c6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800f1ca:	f7ff fb07 	bl	800e7dc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800f1ce:	f241 0021 	movw	r0, #4129	; 0x1021
 800f1d2:	f7ff fb23 	bl	800e81c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800f1d6:	2306      	movs	r3, #6
 800f1d8:	75bb      	strb	r3, [r7, #22]
 800f1da:	e002      	b.n	800f1e2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	7a5b      	ldrb	r3, [r3, #9]
 800f1e0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800f1e2:	2309      	movs	r3, #9
 800f1e4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	885b      	ldrh	r3, [r3, #2]
 800f1ea:	0a1b      	lsrs	r3, r3, #8
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	885b      	ldrh	r3, [r3, #2]
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	791b      	ldrb	r3, [r3, #4]
 800f1fe:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	795b      	ldrb	r3, [r3, #5]
 800f204:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	799b      	ldrb	r3, [r3, #6]
 800f20a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	79db      	ldrb	r3, [r3, #7]
 800f210:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	7a1b      	ldrb	r3, [r3, #8]
 800f216:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800f218:	7dbb      	ldrb	r3, [r7, #22]
 800f21a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	7a9b      	ldrb	r3, [r3, #10]
 800f220:	753b      	strb	r3, [r7, #20]
        break;
 800f222:	e022      	b.n	800f26a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800f224:	2301      	movs	r3, #1
 800f226:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	7b1b      	ldrb	r3, [r3, #12]
 800f22c:	733b      	strb	r3, [r7, #12]
        break;
 800f22e:	e01c      	b.n	800f26a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800f230:	2306      	movs	r3, #6
 800f232:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	89db      	ldrh	r3, [r3, #14]
 800f238:	0a1b      	lsrs	r3, r3, #8
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	89db      	ldrh	r3, [r3, #14]
 800f244:	b2db      	uxtb	r3, r3
 800f246:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	7c1a      	ldrb	r2, [r3, #16]
 800f24c:	4b0f      	ldr	r3, [pc, #60]	; (800f28c <SUBGRF_SetPacketParams+0x138>)
 800f24e:	4611      	mov	r1, r2
 800f250:	7019      	strb	r1, [r3, #0]
 800f252:	4613      	mov	r3, r2
 800f254:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	7c5b      	ldrb	r3, [r3, #17]
 800f25a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	7c9b      	ldrb	r3, [r3, #18]
 800f260:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	7cdb      	ldrb	r3, [r3, #19]
 800f266:	747b      	strb	r3, [r7, #17]
        break;
 800f268:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800f26a:	7dfb      	ldrb	r3, [r7, #23]
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	f107 030c 	add.w	r3, r7, #12
 800f272:	4619      	mov	r1, r3
 800f274:	208c      	movs	r0, #140	; 0x8c
 800f276:	f000 f965 	bl	800f544 <SUBGRF_WriteCommand>
 800f27a:	e000      	b.n	800f27e <SUBGRF_SetPacketParams+0x12a>
        return;
 800f27c:	bf00      	nop
}
 800f27e:	3718      	adds	r7, #24
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}
 800f284:	080155c4 	.word	0x080155c4
 800f288:	20000be5 	.word	0x20000be5
 800f28c:	20000be6 	.word	0x20000be6

0800f290 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	4603      	mov	r3, r0
 800f298:	460a      	mov	r2, r1
 800f29a:	71fb      	strb	r3, [r7, #7]
 800f29c:	4613      	mov	r3, r2
 800f29e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800f2a0:	79fb      	ldrb	r3, [r7, #7]
 800f2a2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800f2a4:	79bb      	ldrb	r3, [r7, #6]
 800f2a6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800f2a8:	f107 030c 	add.w	r3, r7, #12
 800f2ac:	2202      	movs	r2, #2
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	208f      	movs	r0, #143	; 0x8f
 800f2b2:	f000 f947 	bl	800f544 <SUBGRF_WriteCommand>
}
 800f2b6:	bf00      	nop
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b082      	sub	sp, #8
 800f2c2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800f2c8:	1d3b      	adds	r3, r7, #4
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	4619      	mov	r1, r3
 800f2ce:	2015      	movs	r0, #21
 800f2d0:	f000 f95a 	bl	800f588 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800f2d4:	793b      	ldrb	r3, [r7, #4]
 800f2d6:	425b      	negs	r3, r3
 800f2d8:	105b      	asrs	r3, r3, #1
 800f2da:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800f2dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800f2f2:	f107 030c 	add.w	r3, r7, #12
 800f2f6:	2202      	movs	r2, #2
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	2013      	movs	r0, #19
 800f2fc:	f000 f944 	bl	800f588 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800f300:	f7ff fde6 	bl	800eed0 <SUBGRF_GetPacketType>
 800f304:	4603      	mov	r3, r0
 800f306:	2b01      	cmp	r3, #1
 800f308:	d10d      	bne.n	800f326 <SUBGRF_GetRxBufferStatus+0x3e>
 800f30a:	4b0c      	ldr	r3, [pc, #48]	; (800f33c <SUBGRF_GetRxBufferStatus+0x54>)
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	2b01      	cmp	r3, #1
 800f312:	d108      	bne.n	800f326 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800f314:	f240 7002 	movw	r0, #1794	; 0x702
 800f318:	f000 f878 	bl	800f40c <SUBGRF_ReadRegister>
 800f31c:	4603      	mov	r3, r0
 800f31e:	461a      	mov	r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	701a      	strb	r2, [r3, #0]
 800f324:	e002      	b.n	800f32c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800f326:	7b3a      	ldrb	r2, [r7, #12]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800f32c:	7b7a      	ldrb	r2, [r7, #13]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	701a      	strb	r2, [r3, #0]
}
 800f332:	bf00      	nop
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	20000be6 	.word	0x20000be6

0800f340 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800f348:	f107 030c 	add.w	r3, r7, #12
 800f34c:	2203      	movs	r2, #3
 800f34e:	4619      	mov	r1, r3
 800f350:	2014      	movs	r0, #20
 800f352:	f000 f919 	bl	800f588 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800f356:	f7ff fdbb 	bl	800eed0 <SUBGRF_GetPacketType>
 800f35a:	4603      	mov	r3, r0
 800f35c:	461a      	mov	r2, r3
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d002      	beq.n	800f370 <SUBGRF_GetPacketStatus+0x30>
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d013      	beq.n	800f396 <SUBGRF_GetPacketStatus+0x56>
 800f36e:	e02a      	b.n	800f3c6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800f370:	7b3a      	ldrb	r2, [r7, #12]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800f376:	7b7b      	ldrb	r3, [r7, #13]
 800f378:	425b      	negs	r3, r3
 800f37a:	105b      	asrs	r3, r3, #1
 800f37c:	b25a      	sxtb	r2, r3
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800f382:	7bbb      	ldrb	r3, [r7, #14]
 800f384:	425b      	negs	r3, r3
 800f386:	105b      	asrs	r3, r3, #1
 800f388:	b25a      	sxtb	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	609a      	str	r2, [r3, #8]
            break;
 800f394:	e020      	b.n	800f3d8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800f396:	7b3b      	ldrb	r3, [r7, #12]
 800f398:	425b      	negs	r3, r3
 800f39a:	105b      	asrs	r3, r3, #1
 800f39c:	b25a      	sxtb	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800f3a2:	7b7b      	ldrb	r3, [r7, #13]
 800f3a4:	b25b      	sxtb	r3, r3
 800f3a6:	3302      	adds	r3, #2
 800f3a8:	109b      	asrs	r3, r3, #2
 800f3aa:	b25a      	sxtb	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800f3b0:	7bbb      	ldrb	r3, [r7, #14]
 800f3b2:	425b      	negs	r3, r3
 800f3b4:	105b      	asrs	r3, r3, #1
 800f3b6:	b25a      	sxtb	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800f3bc:	4b08      	ldr	r3, [pc, #32]	; (800f3e0 <SUBGRF_GetPacketStatus+0xa0>)
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	611a      	str	r2, [r3, #16]
            break;
 800f3c4:	e008      	b.n	800f3d8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800f3c6:	2214      	movs	r2, #20
 800f3c8:	2100      	movs	r1, #0
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 fe68 	bl	80100a0 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	220f      	movs	r2, #15
 800f3d4:	701a      	strb	r2, [r3, #0]
            break;
 800f3d6:	bf00      	nop
    }
}
 800f3d8:	bf00      	nop
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}
 800f3e0:	20000be8 	.word	0x20000be8

0800f3e4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	460a      	mov	r2, r1
 800f3ee:	80fb      	strh	r3, [r7, #6]
 800f3f0:	4613      	mov	r3, r2
 800f3f2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800f3f4:	1d7a      	adds	r2, r7, #5
 800f3f6:	88f9      	ldrh	r1, [r7, #6]
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	4803      	ldr	r0, [pc, #12]	; (800f408 <SUBGRF_WriteRegister+0x24>)
 800f3fc:	f7fa fa44 	bl	8009888 <HAL_SUBGHZ_WriteRegisters>
}
 800f400:	bf00      	nop
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	2000045c 	.word	0x2000045c

0800f40c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	4603      	mov	r3, r0
 800f414:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800f416:	f107 020f 	add.w	r2, r7, #15
 800f41a:	88f9      	ldrh	r1, [r7, #6]
 800f41c:	2301      	movs	r3, #1
 800f41e:	4804      	ldr	r0, [pc, #16]	; (800f430 <SUBGRF_ReadRegister+0x24>)
 800f420:	f7fa fa91 	bl	8009946 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800f424:	7bfb      	ldrb	r3, [r7, #15]
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	2000045c 	.word	0x2000045c

0800f434 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b086      	sub	sp, #24
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	6039      	str	r1, [r7, #0]
 800f43e:	80fb      	strh	r3, [r7, #6]
 800f440:	4613      	mov	r3, r2
 800f442:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f444:	f3ef 8310 	mrs	r3, PRIMASK
 800f448:	60fb      	str	r3, [r7, #12]
  return(result);
 800f44a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f44c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f44e:	b672      	cpsid	i
}
 800f450:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800f452:	88bb      	ldrh	r3, [r7, #4]
 800f454:	88f9      	ldrh	r1, [r7, #6]
 800f456:	683a      	ldr	r2, [r7, #0]
 800f458:	4806      	ldr	r0, [pc, #24]	; (800f474 <SUBGRF_WriteRegisters+0x40>)
 800f45a:	f7fa fa15 	bl	8009888 <HAL_SUBGHZ_WriteRegisters>
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	f383 8810 	msr	PRIMASK, r3
}
 800f468:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f46a:	bf00      	nop
 800f46c:	3718      	adds	r7, #24
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	2000045c 	.word	0x2000045c

0800f478 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b086      	sub	sp, #24
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	4603      	mov	r3, r0
 800f480:	6039      	str	r1, [r7, #0]
 800f482:	80fb      	strh	r3, [r7, #6]
 800f484:	4613      	mov	r3, r2
 800f486:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f488:	f3ef 8310 	mrs	r3, PRIMASK
 800f48c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f48e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f490:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f492:	b672      	cpsid	i
}
 800f494:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800f496:	88bb      	ldrh	r3, [r7, #4]
 800f498:	88f9      	ldrh	r1, [r7, #6]
 800f49a:	683a      	ldr	r2, [r7, #0]
 800f49c:	4806      	ldr	r0, [pc, #24]	; (800f4b8 <SUBGRF_ReadRegisters+0x40>)
 800f49e:	f7fa fa52 	bl	8009946 <HAL_SUBGHZ_ReadRegisters>
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	f383 8810 	msr	PRIMASK, r3
}
 800f4ac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f4ae:	bf00      	nop
 800f4b0:	3718      	adds	r7, #24
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	2000045c 	.word	0x2000045c

0800f4bc <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b086      	sub	sp, #24
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	6039      	str	r1, [r7, #0]
 800f4c6:	71fb      	strb	r3, [r7, #7]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4cc:	f3ef 8310 	mrs	r3, PRIMASK
 800f4d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f4d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4d6:	b672      	cpsid	i
}
 800f4d8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800f4da:	79bb      	ldrb	r3, [r7, #6]
 800f4dc:	b29b      	uxth	r3, r3
 800f4de:	79f9      	ldrb	r1, [r7, #7]
 800f4e0:	683a      	ldr	r2, [r7, #0]
 800f4e2:	4806      	ldr	r0, [pc, #24]	; (800f4fc <SUBGRF_WriteBuffer+0x40>)
 800f4e4:	f7fa fb43 	bl	8009b6e <HAL_SUBGHZ_WriteBuffer>
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	f383 8810 	msr	PRIMASK, r3
}
 800f4f2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f4f4:	bf00      	nop
 800f4f6:	3718      	adds	r7, #24
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	2000045c 	.word	0x2000045c

0800f500 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	4603      	mov	r3, r0
 800f508:	6039      	str	r1, [r7, #0]
 800f50a:	71fb      	strb	r3, [r7, #7]
 800f50c:	4613      	mov	r3, r2
 800f50e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f510:	f3ef 8310 	mrs	r3, PRIMASK
 800f514:	60fb      	str	r3, [r7, #12]
  return(result);
 800f516:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f518:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f51a:	b672      	cpsid	i
}
 800f51c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800f51e:	79bb      	ldrb	r3, [r7, #6]
 800f520:	b29b      	uxth	r3, r3
 800f522:	79f9      	ldrb	r1, [r7, #7]
 800f524:	683a      	ldr	r2, [r7, #0]
 800f526:	4806      	ldr	r0, [pc, #24]	; (800f540 <SUBGRF_ReadBuffer+0x40>)
 800f528:	f7fa fb74 	bl	8009c14 <HAL_SUBGHZ_ReadBuffer>
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	f383 8810 	msr	PRIMASK, r3
}
 800f536:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f538:	bf00      	nop
 800f53a:	3718      	adds	r7, #24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	2000045c 	.word	0x2000045c

0800f544 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	4603      	mov	r3, r0
 800f54c:	6039      	str	r1, [r7, #0]
 800f54e:	71fb      	strb	r3, [r7, #7]
 800f550:	4613      	mov	r3, r2
 800f552:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f554:	f3ef 8310 	mrs	r3, PRIMASK
 800f558:	60fb      	str	r3, [r7, #12]
  return(result);
 800f55a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f55c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f55e:	b672      	cpsid	i
}
 800f560:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f562:	88bb      	ldrh	r3, [r7, #4]
 800f564:	79f9      	ldrb	r1, [r7, #7]
 800f566:	683a      	ldr	r2, [r7, #0]
 800f568:	4806      	ldr	r0, [pc, #24]	; (800f584 <SUBGRF_WriteCommand+0x40>)
 800f56a:	f7fa fa4d 	bl	8009a08 <HAL_SUBGHZ_ExecSetCmd>
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	f383 8810 	msr	PRIMASK, r3
}
 800f578:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f57a:	bf00      	nop
 800f57c:	3718      	adds	r7, #24
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	2000045c 	.word	0x2000045c

0800f588 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	4603      	mov	r3, r0
 800f590:	6039      	str	r1, [r7, #0]
 800f592:	71fb      	strb	r3, [r7, #7]
 800f594:	4613      	mov	r3, r2
 800f596:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f598:	f3ef 8310 	mrs	r3, PRIMASK
 800f59c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f59e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f5a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f5a2:	b672      	cpsid	i
}
 800f5a4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f5a6:	88bb      	ldrh	r3, [r7, #4]
 800f5a8:	79f9      	ldrb	r1, [r7, #7]
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	4806      	ldr	r0, [pc, #24]	; (800f5c8 <SUBGRF_ReadCommand+0x40>)
 800f5ae:	f7fa fa8a 	bl	8009ac6 <HAL_SUBGHZ_ExecGetCmd>
 800f5b2:	697b      	ldr	r3, [r7, #20]
 800f5b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	f383 8810 	msr	PRIMASK, r3
}
 800f5bc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f5be:	bf00      	nop
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	2000045c 	.word	0x2000045c

0800f5cc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	460a      	mov	r2, r1
 800f5d6:	71fb      	strb	r3, [r7, #7]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800f5dc:	2301      	movs	r3, #1
 800f5de:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800f5e0:	79bb      	ldrb	r3, [r7, #6]
 800f5e2:	2b01      	cmp	r3, #1
 800f5e4:	d10d      	bne.n	800f602 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d104      	bne.n	800f5f6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800f5ec:	2302      	movs	r3, #2
 800f5ee:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800f5f0:	2004      	movs	r0, #4
 800f5f2:	f000 f8df 	bl	800f7b4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800f5f6:	79fb      	ldrb	r3, [r7, #7]
 800f5f8:	2b02      	cmp	r3, #2
 800f5fa:	d107      	bne.n	800f60c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800f5fc:	2303      	movs	r3, #3
 800f5fe:	73fb      	strb	r3, [r7, #15]
 800f600:	e004      	b.n	800f60c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800f602:	79bb      	ldrb	r3, [r7, #6]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d101      	bne.n	800f60c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800f608:	2301      	movs	r3, #1
 800f60a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800f60c:	7bfb      	ldrb	r3, [r7, #15]
 800f60e:	4618      	mov	r0, r3
 800f610:	f7f6 f85b 	bl	80056ca <RBI_ConfigRFSwitch>
}
 800f614:	bf00      	nop
 800f616:	3710      	adds	r7, #16
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b084      	sub	sp, #16
 800f620:	af00      	add	r7, sp, #0
 800f622:	4603      	mov	r3, r0
 800f624:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800f626:	2301      	movs	r3, #1
 800f628:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800f62a:	f7f6 f85c 	bl	80056e6 <RBI_GetTxConfig>
 800f62e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	2b02      	cmp	r3, #2
 800f634:	d016      	beq.n	800f664 <SUBGRF_SetRfTxPower+0x48>
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	2b02      	cmp	r3, #2
 800f63a:	dc16      	bgt.n	800f66a <SUBGRF_SetRfTxPower+0x4e>
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d003      	beq.n	800f64a <SUBGRF_SetRfTxPower+0x2e>
 800f642:	68bb      	ldr	r3, [r7, #8]
 800f644:	2b01      	cmp	r3, #1
 800f646:	d00a      	beq.n	800f65e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800f648:	e00f      	b.n	800f66a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800f64a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f64e:	2b0f      	cmp	r3, #15
 800f650:	dd02      	ble.n	800f658 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800f652:	2302      	movs	r3, #2
 800f654:	73fb      	strb	r3, [r7, #15]
            break;
 800f656:	e009      	b.n	800f66c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800f658:	2301      	movs	r3, #1
 800f65a:	73fb      	strb	r3, [r7, #15]
            break;
 800f65c:	e006      	b.n	800f66c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800f65e:	2301      	movs	r3, #1
 800f660:	73fb      	strb	r3, [r7, #15]
            break;
 800f662:	e003      	b.n	800f66c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800f664:	2302      	movs	r3, #2
 800f666:	73fb      	strb	r3, [r7, #15]
            break;
 800f668:	e000      	b.n	800f66c <SUBGRF_SetRfTxPower+0x50>
            break;
 800f66a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800f66c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800f670:	7bfb      	ldrb	r3, [r7, #15]
 800f672:	2202      	movs	r2, #2
 800f674:	4618      	mov	r0, r3
 800f676:	f7ff fc35 	bl	800eee4 <SUBGRF_SetTxParams>

    return paSelect;
 800f67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3710      	adds	r7, #16
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800f684:	b480      	push	{r7}
 800f686:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800f688:	2301      	movs	r3, #1
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bc80      	pop	{r7}
 800f690:	4770      	bx	lr
	...

0800f694 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b082      	sub	sp, #8
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800f69c:	4b03      	ldr	r3, [pc, #12]	; (800f6ac <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	2001      	movs	r0, #1
 800f6a2:	4798      	blx	r3
}
 800f6a4:	bf00      	nop
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	20000bf0 	.word	0x20000bf0

0800f6b0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800f6b8:	4b03      	ldr	r3, [pc, #12]	; (800f6c8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2002      	movs	r0, #2
 800f6be:	4798      	blx	r3
}
 800f6c0:	bf00      	nop
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	20000bf0 	.word	0x20000bf0

0800f6cc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800f6d4:	4b03      	ldr	r3, [pc, #12]	; (800f6e4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2040      	movs	r0, #64	; 0x40
 800f6da:	4798      	blx	r3
}
 800f6dc:	bf00      	nop
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}
 800f6e4:	20000bf0 	.word	0x20000bf0

0800f6e8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b082      	sub	sp, #8
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800f6f4:	78fb      	ldrb	r3, [r7, #3]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d002      	beq.n	800f700 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d005      	beq.n	800f70a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800f6fe:	e00a      	b.n	800f716 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800f700:	4b07      	ldr	r3, [pc, #28]	; (800f720 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2080      	movs	r0, #128	; 0x80
 800f706:	4798      	blx	r3
            break;
 800f708:	e005      	b.n	800f716 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800f70a:	4b05      	ldr	r3, [pc, #20]	; (800f720 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f712:	4798      	blx	r3
            break;
 800f714:	bf00      	nop
    }
}
 800f716:	bf00      	nop
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}
 800f71e:	bf00      	nop
 800f720:	20000bf0 	.word	0x20000bf0

0800f724 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800f72c:	4b04      	ldr	r3, [pc, #16]	; (800f740 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f734:	4798      	blx	r3
}
 800f736:	bf00      	nop
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20000bf0 	.word	0x20000bf0

0800f744 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800f74c:	4b03      	ldr	r3, [pc, #12]	; (800f75c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	2020      	movs	r0, #32
 800f752:	4798      	blx	r3
}
 800f754:	bf00      	nop
 800f756:	3708      	adds	r7, #8
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	20000bf0 	.word	0x20000bf0

0800f760 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800f768:	4b03      	ldr	r3, [pc, #12]	; (800f778 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2004      	movs	r0, #4
 800f76e:	4798      	blx	r3
}
 800f770:	bf00      	nop
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	20000bf0 	.word	0x20000bf0

0800f77c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b082      	sub	sp, #8
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800f784:	4b03      	ldr	r3, [pc, #12]	; (800f794 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2008      	movs	r0, #8
 800f78a:	4798      	blx	r3
}
 800f78c:	bf00      	nop
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	20000bf0 	.word	0x20000bf0

0800f798 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b082      	sub	sp, #8
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800f7a0:	4b03      	ldr	r3, [pc, #12]	; (800f7b0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2010      	movs	r0, #16
 800f7a6:	4798      	blx	r3
}
 800f7a8:	bf00      	nop
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	20000bf0 	.word	0x20000bf0

0800f7b4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b084      	sub	sp, #16
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800f7be:	f7f5 ffa0 	bl	8005702 <RBI_IsDCDC>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b01      	cmp	r3, #1
 800f7c6:	d112      	bne.n	800f7ee <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800f7c8:	f640 1023 	movw	r0, #2339	; 0x923
 800f7cc:	f7ff fe1e 	bl	800f40c <SUBGRF_ReadRegister>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
 800f7d6:	f023 0306 	bic.w	r3, r3, #6
 800f7da:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800f7dc:	7bfa      	ldrb	r2, [r7, #15]
 800f7de:	79fb      	ldrb	r3, [r7, #7]
 800f7e0:	4313      	orrs	r3, r2
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	f640 1023 	movw	r0, #2339	; 0x923
 800f7ea:	f7ff fdfb 	bl	800f3e4 <SUBGRF_WriteRegister>
  }
}
 800f7ee:	bf00      	nop
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
	...

0800f7f8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d101      	bne.n	800f80a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800f806:	231f      	movs	r3, #31
 800f808:	e016      	b.n	800f838 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800f80a:	2300      	movs	r3, #0
 800f80c:	73fb      	strb	r3, [r7, #15]
 800f80e:	e00f      	b.n	800f830 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800f810:	7bfb      	ldrb	r3, [r7, #15]
 800f812:	4a0c      	ldr	r2, [pc, #48]	; (800f844 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800f814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d205      	bcs.n	800f82a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800f81e:	7bfb      	ldrb	r3, [r7, #15]
 800f820:	4a08      	ldr	r2, [pc, #32]	; (800f844 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800f822:	00db      	lsls	r3, r3, #3
 800f824:	4413      	add	r3, r2
 800f826:	791b      	ldrb	r3, [r3, #4]
 800f828:	e006      	b.n	800f838 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800f82a:	7bfb      	ldrb	r3, [r7, #15]
 800f82c:	3301      	adds	r3, #1
 800f82e:	73fb      	strb	r3, [r7, #15]
 800f830:	7bfb      	ldrb	r3, [r7, #15]
 800f832:	2b15      	cmp	r3, #21
 800f834:	d9ec      	bls.n	800f810 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800f836:	e7fe      	b.n	800f836 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bc80      	pop	{r7}
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop
 800f844:	080157e4 	.word	0x080157e4

0800f848 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b08a      	sub	sp, #40	; 0x28
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800f852:	4b35      	ldr	r3, [pc, #212]	; (800f928 <SUBGRF_GetCFO+0xe0>)
 800f854:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800f856:	f640 0007 	movw	r0, #2055	; 0x807
 800f85a:	f7ff fdd7 	bl	800f40c <SUBGRF_ReadRegister>
 800f85e:	4603      	mov	r3, r0
 800f860:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800f862:	7ffb      	ldrb	r3, [r7, #31]
 800f864:	08db      	lsrs	r3, r3, #3
 800f866:	b2db      	uxtb	r3, r3
 800f868:	f003 0303 	and.w	r3, r3, #3
 800f86c:	3328      	adds	r3, #40	; 0x28
 800f86e:	443b      	add	r3, r7
 800f870:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800f874:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800f876:	7ffb      	ldrb	r3, [r7, #31]
 800f878:	f003 0307 	and.w	r3, r3, #7
 800f87c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800f87e:	7fba      	ldrb	r2, [r7, #30]
 800f880:	7f7b      	ldrb	r3, [r7, #29]
 800f882:	3b01      	subs	r3, #1
 800f884:	fa02 f303 	lsl.w	r3, r2, r3
 800f888:	461a      	mov	r2, r3
 800f88a:	4b28      	ldr	r3, [pc, #160]	; (800f92c <SUBGRF_GetCFO+0xe4>)
 800f88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f890:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800f892:	69ba      	ldr	r2, [r7, #24]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	fbb2 f3f3 	udiv	r3, r2, r3
 800f89a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800f89c:	2301      	movs	r3, #1
 800f89e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800f8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8a6:	697a      	ldr	r2, [r7, #20]
 800f8a8:	fb02 f303 	mul.w	r3, r2, r3
 800f8ac:	2b07      	cmp	r3, #7
 800f8ae:	d802      	bhi.n	800f8b6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800f8b0:	2302      	movs	r3, #2
 800f8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800f8b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8ba:	697a      	ldr	r2, [r7, #20]
 800f8bc:	fb02 f303 	mul.w	r3, r2, r3
 800f8c0:	2b03      	cmp	r3, #3
 800f8c2:	d802      	bhi.n	800f8ca <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800f8c4:	2304      	movs	r3, #4
 800f8c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800f8ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	fb02 f303 	mul.w	r3, r2, r3
 800f8d4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 800f8d6:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800f8da:	f7ff fd97 	bl	800f40c <SUBGRF_ReadRegister>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	021b      	lsls	r3, r3, #8
 800f8e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f8e6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800f8e8:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800f8ec:	f7ff fd8e 	bl	800f40c <SUBGRF_ReadRegister>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	6a3b      	ldr	r3, [r7, #32]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800f8fa:	6a3b      	ldr	r3, [r7, #32]
 800f8fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f900:	2b00      	cmp	r3, #0
 800f902:	d005      	beq.n	800f910 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800f904:	6a3b      	ldr	r3, [r7, #32]
 800f906:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800f90a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800f90e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	095b      	lsrs	r3, r3, #5
 800f914:	6a3a      	ldr	r2, [r7, #32]
 800f916:	fb02 f303 	mul.w	r3, r2, r3
 800f91a:	11da      	asrs	r2, r3, #7
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	601a      	str	r2, [r3, #0]
}
 800f920:	bf00      	nop
 800f922:	3728      	adds	r7, #40	; 0x28
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	0c0a0804 	.word	0x0c0a0804
 800f92c:	01e84800 	.word	0x01e84800

0800f930 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800f930:	b480      	push	{r7}
 800f932:	b087      	sub	sp, #28
 800f934:	af00      	add	r7, sp, #0
 800f936:	4603      	mov	r3, r0
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	607a      	str	r2, [r7, #4]
 800f93c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800f93e:	2300      	movs	r3, #0
 800f940:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800f942:	f04f 33ff 	mov.w	r3, #4294967295
 800f946:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800f948:	697b      	ldr	r3, [r7, #20]
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	371c      	adds	r7, #28
 800f94e:	46bd      	mov	sp, r7
 800f950:	bc80      	pop	{r7}
 800f952:	4770      	bx	lr

0800f954 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800f954:	b480      	push	{r7}
 800f956:	b087      	sub	sp, #28
 800f958:	af00      	add	r7, sp, #0
 800f95a:	4603      	mov	r3, r0
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	607a      	str	r2, [r7, #4]
 800f960:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800f962:	2300      	movs	r3, #0
 800f964:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800f966:	f04f 33ff 	mov.w	r3, #4294967295
 800f96a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800f96c:	697b      	ldr	r3, [r7, #20]
}
 800f96e:	4618      	mov	r0, r3
 800f970:	371c      	adds	r7, #28
 800f972:	46bd      	mov	sp, r7
 800f974:	bc80      	pop	{r7}
 800f976:	4770      	bx	lr

0800f978 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800f978:	b480      	push	{r7}
 800f97a:	b085      	sub	sp, #20
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800f984:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800f988:	4618      	mov	r0, r3
 800f98a:	3714      	adds	r7, #20
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bc80      	pop	{r7}
 800f990:	4770      	bx	lr

0800f992 <RFW_DeInit>:

void RFW_DeInit( void)
{
 800f992:	b480      	push	{r7}
 800f994:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800f996:	bf00      	nop
 800f998:	46bd      	mov	sp, r7
 800f99a:	bc80      	pop	{r7}
 800f99c:	4770      	bx	lr

0800f99e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800f99e:	b480      	push	{r7}
 800f9a0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800f9a2:	2300      	movs	r3, #0
#endif
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bc80      	pop	{r7}
 800f9aa:	4770      	bx	lr

0800f9ac <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800f9b0:	2300      	movs	r3, #0
#endif
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bc80      	pop	{r7}
 800f9b8:	4770      	bx	lr

0800f9ba <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800f9ba:	b480      	push	{r7}
 800f9bc:	b083      	sub	sp, #12
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bc80      	pop	{r7}
 800f9cc:	4770      	bx	lr

0800f9ce <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800f9ce:	b480      	push	{r7}
 800f9d0:	b087      	sub	sp, #28
 800f9d2:	af00      	add	r7, sp, #0
 800f9d4:	60f8      	str	r0, [r7, #12]
 800f9d6:	460b      	mov	r3, r1
 800f9d8:	607a      	str	r2, [r7, #4]
 800f9da:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800f9dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f9e0:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800f9e2:	697b      	ldr	r3, [r7, #20]
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	371c      	adds	r7, #28
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bc80      	pop	{r7}
 800f9ec:	4770      	bx	lr

0800f9ee <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800f9ee:	b480      	push	{r7}
 800f9f0:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800f9f2:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bc80      	pop	{r7}
 800f9fc:	4770      	bx	lr

0800f9fe <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800f9fe:	b480      	push	{r7}
 800fa00:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800fa02:	bf00      	nop
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bc80      	pop	{r7}
 800fa08:	4770      	bx	lr

0800fa0a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800fa0e:	bf00      	nop
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bc80      	pop	{r7}
 800fa14:	4770      	bx	lr

0800fa16 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800fa16:	b480      	push	{r7}
 800fa18:	b083      	sub	sp, #12
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800fa20:	bf00      	nop
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bc80      	pop	{r7}
 800fa28:	4770      	bx	lr
	...

0800fa2c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800fa30:	2218      	movs	r2, #24
 800fa32:	2100      	movs	r1, #0
 800fa34:	4807      	ldr	r0, [pc, #28]	; (800fa54 <UTIL_ADV_TRACE_Init+0x28>)
 800fa36:	f000 fb33 	bl	80100a0 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800fa3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa3e:	2100      	movs	r1, #0
 800fa40:	4805      	ldr	r0, [pc, #20]	; (800fa58 <UTIL_ADV_TRACE_Init+0x2c>)
 800fa42:	f000 fb2d 	bl	80100a0 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800fa46:	4b05      	ldr	r3, [pc, #20]	; (800fa5c <UTIL_ADV_TRACE_Init+0x30>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	4805      	ldr	r0, [pc, #20]	; (800fa60 <UTIL_ADV_TRACE_Init+0x34>)
 800fa4c:	4798      	blx	r3
 800fa4e:	4603      	mov	r3, r0
}
 800fa50:	4618      	mov	r0, r3
 800fa52:	bd80      	pop	{r7, pc}
 800fa54:	20000bf4 	.word	0x20000bf4
 800fa58:	20000c0c 	.word	0x20000c0c
 800fa5c:	08015680 	.word	0x08015680
 800fa60:	0800fca9 	.word	0x0800fca9

0800fa64 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800fa64:	b408      	push	{r3}
 800fa66:	b580      	push	{r7, lr}
 800fa68:	b08d      	sub	sp, #52	; 0x34
 800fa6a:	af00      	add	r7, sp, #0
 800fa6c:	60f8      	str	r0, [r7, #12]
 800fa6e:	60b9      	str	r1, [r7, #8]
 800fa70:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800fa72:	2300      	movs	r3, #0
 800fa74:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800fa76:	2300      	movs	r3, #0
 800fa78:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800fa7a:	4b37      	ldr	r3, [pc, #220]	; (800fb58 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800fa7c:	7a1b      	ldrb	r3, [r3, #8]
 800fa7e:	461a      	mov	r2, r3
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d902      	bls.n	800fa8c <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800fa86:	f06f 0304 	mvn.w	r3, #4
 800fa8a:	e05e      	b.n	800fb4a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800fa8c:	4b32      	ldr	r3, [pc, #200]	; (800fb58 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800fa8e:	68da      	ldr	r2, [r3, #12]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	4013      	ands	r3, r2
 800fa94:	68ba      	ldr	r2, [r7, #8]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d002      	beq.n	800faa0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800fa9a:	f06f 0305 	mvn.w	r3, #5
 800fa9e:	e054      	b.n	800fb4a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800faa0:	4b2d      	ldr	r3, [pc, #180]	; (800fb58 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d00a      	beq.n	800fabe <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d007      	beq.n	800fabe <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800faae:	4b2a      	ldr	r3, [pc, #168]	; (800fb58 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	f107 0116 	add.w	r1, r7, #22
 800fab6:	f107 0218 	add.w	r2, r7, #24
 800faba:	4610      	mov	r0, r2
 800fabc:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800fabe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fac2:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800fac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800facc:	4823      	ldr	r0, [pc, #140]	; (800fb5c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800face:	f001 f8a9 	bl	8010c24 <tiny_vsnprintf_like>
 800fad2:	4603      	mov	r3, r0
 800fad4:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800fad6:	f000 f9f1 	bl	800febc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800fada:	8afa      	ldrh	r2, [r7, #22]
 800fadc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fade:	4413      	add	r3, r2
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	f107 0214 	add.w	r2, r7, #20
 800fae6:	4611      	mov	r1, r2
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f969 	bl	800fdc0 <TRACE_AllocateBufer>
 800faee:	4603      	mov	r3, r0
 800faf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf4:	d025      	beq.n	800fb42 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800faf6:	2300      	movs	r3, #0
 800faf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fafa:	e00e      	b.n	800fb1a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800fafc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fafe:	8aba      	ldrh	r2, [r7, #20]
 800fb00:	3330      	adds	r3, #48	; 0x30
 800fb02:	443b      	add	r3, r7
 800fb04:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800fb08:	4b15      	ldr	r3, [pc, #84]	; (800fb60 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800fb0a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800fb0c:	8abb      	ldrh	r3, [r7, #20]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	b29b      	uxth	r3, r3
 800fb12:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800fb14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb16:	3301      	adds	r3, #1
 800fb18:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fb1a:	8afb      	ldrh	r3, [r7, #22]
 800fb1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d3ec      	bcc.n	800fafc <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800fb22:	8abb      	ldrh	r3, [r7, #20]
 800fb24:	461a      	mov	r2, r3
 800fb26:	4b0e      	ldr	r3, [pc, #56]	; (800fb60 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800fb28:	18d0      	adds	r0, r2, r3
 800fb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fb32:	f001 f877 	bl	8010c24 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800fb36:	f000 f9df 	bl	800fef8 <TRACE_UnLock>

    return TRACE_Send();
 800fb3a:	f000 f831 	bl	800fba0 <TRACE_Send>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	e003      	b.n	800fb4a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800fb42:	f000 f9d9 	bl	800fef8 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800fb46:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3734      	adds	r7, #52	; 0x34
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb54:	b001      	add	sp, #4
 800fb56:	4770      	bx	lr
 800fb58:	20000bf4 	.word	0x20000bf4
 800fb5c:	20000e0c 	.word	0x20000e0c
 800fb60:	20000c0c 	.word	0x20000c0c

0800fb64 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800fb6c:	4a03      	ldr	r2, [pc, #12]	; (800fb7c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6053      	str	r3, [r2, #4]
}
 800fb72:	bf00      	nop
 800fb74:	370c      	adds	r7, #12
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bc80      	pop	{r7}
 800fb7a:	4770      	bx	lr
 800fb7c:	20000bf4 	.word	0x20000bf4

0800fb80 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800fb8a:	4a04      	ldr	r2, [pc, #16]	; (800fb9c <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	7213      	strb	r3, [r2, #8]
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bc80      	pop	{r7}
 800fb98:	4770      	bx	lr
 800fb9a:	bf00      	nop
 800fb9c:	20000bf4 	.word	0x20000bf4

0800fba0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b088      	sub	sp, #32
 800fba4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800fba6:	2300      	movs	r3, #0
 800fba8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbae:	f3ef 8310 	mrs	r3, PRIMASK
 800fbb2:	613b      	str	r3, [r7, #16]
  return(result);
 800fbb4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800fbb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fbb8:	b672      	cpsid	i
}
 800fbba:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800fbbc:	f000 f9ba 	bl	800ff34 <TRACE_IsLocked>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d15d      	bne.n	800fc82 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800fbc6:	f000 f979 	bl	800febc <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800fbca:	4b34      	ldr	r3, [pc, #208]	; (800fc9c <TRACE_Send+0xfc>)
 800fbcc:	8a1a      	ldrh	r2, [r3, #16]
 800fbce:	4b33      	ldr	r3, [pc, #204]	; (800fc9c <TRACE_Send+0xfc>)
 800fbd0:	8a5b      	ldrh	r3, [r3, #18]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d04d      	beq.n	800fc72 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800fbd6:	4b31      	ldr	r3, [pc, #196]	; (800fc9c <TRACE_Send+0xfc>)
 800fbd8:	789b      	ldrb	r3, [r3, #2]
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d117      	bne.n	800fc0e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800fbde:	4b2f      	ldr	r3, [pc, #188]	; (800fc9c <TRACE_Send+0xfc>)
 800fbe0:	881a      	ldrh	r2, [r3, #0]
 800fbe2:	4b2e      	ldr	r3, [pc, #184]	; (800fc9c <TRACE_Send+0xfc>)
 800fbe4:	8a1b      	ldrh	r3, [r3, #16]
 800fbe6:	1ad3      	subs	r3, r2, r3
 800fbe8:	b29a      	uxth	r2, r3
 800fbea:	4b2c      	ldr	r3, [pc, #176]	; (800fc9c <TRACE_Send+0xfc>)
 800fbec:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800fbee:	4b2b      	ldr	r3, [pc, #172]	; (800fc9c <TRACE_Send+0xfc>)
 800fbf0:	2202      	movs	r2, #2
 800fbf2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800fbf4:	4b29      	ldr	r3, [pc, #164]	; (800fc9c <TRACE_Send+0xfc>)
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800fbfa:	4b28      	ldr	r3, [pc, #160]	; (800fc9c <TRACE_Send+0xfc>)
 800fbfc:	8a9b      	ldrh	r3, [r3, #20]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d105      	bne.n	800fc0e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800fc02:	4b26      	ldr	r3, [pc, #152]	; (800fc9c <TRACE_Send+0xfc>)
 800fc04:	2200      	movs	r2, #0
 800fc06:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800fc08:	4b24      	ldr	r3, [pc, #144]	; (800fc9c <TRACE_Send+0xfc>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800fc0e:	4b23      	ldr	r3, [pc, #140]	; (800fc9c <TRACE_Send+0xfc>)
 800fc10:	789b      	ldrb	r3, [r3, #2]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d115      	bne.n	800fc42 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800fc16:	4b21      	ldr	r3, [pc, #132]	; (800fc9c <TRACE_Send+0xfc>)
 800fc18:	8a5a      	ldrh	r2, [r3, #18]
 800fc1a:	4b20      	ldr	r3, [pc, #128]	; (800fc9c <TRACE_Send+0xfc>)
 800fc1c:	8a1b      	ldrh	r3, [r3, #16]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	d908      	bls.n	800fc34 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800fc22:	4b1e      	ldr	r3, [pc, #120]	; (800fc9c <TRACE_Send+0xfc>)
 800fc24:	8a5a      	ldrh	r2, [r3, #18]
 800fc26:	4b1d      	ldr	r3, [pc, #116]	; (800fc9c <TRACE_Send+0xfc>)
 800fc28:	8a1b      	ldrh	r3, [r3, #16]
 800fc2a:	1ad3      	subs	r3, r2, r3
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	4b1b      	ldr	r3, [pc, #108]	; (800fc9c <TRACE_Send+0xfc>)
 800fc30:	829a      	strh	r2, [r3, #20]
 800fc32:	e006      	b.n	800fc42 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800fc34:	4b19      	ldr	r3, [pc, #100]	; (800fc9c <TRACE_Send+0xfc>)
 800fc36:	8a1b      	ldrh	r3, [r3, #16]
 800fc38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	4b17      	ldr	r3, [pc, #92]	; (800fc9c <TRACE_Send+0xfc>)
 800fc40:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800fc42:	4b16      	ldr	r3, [pc, #88]	; (800fc9c <TRACE_Send+0xfc>)
 800fc44:	8a1b      	ldrh	r3, [r3, #16]
 800fc46:	461a      	mov	r2, r3
 800fc48:	4b15      	ldr	r3, [pc, #84]	; (800fca0 <TRACE_Send+0x100>)
 800fc4a:	4413      	add	r3, r2
 800fc4c:	61bb      	str	r3, [r7, #24]
 800fc4e:	697b      	ldr	r3, [r7, #20]
 800fc50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f383 8810 	msr	PRIMASK, r3
}
 800fc58:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800fc5a:	f7f2 fcdd 	bl	8002618 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800fc5e:	4b11      	ldr	r3, [pc, #68]	; (800fca4 <TRACE_Send+0x104>)
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	4a0e      	ldr	r2, [pc, #56]	; (800fc9c <TRACE_Send+0xfc>)
 800fc64:	8a92      	ldrh	r2, [r2, #20]
 800fc66:	4611      	mov	r1, r2
 800fc68:	69b8      	ldr	r0, [r7, #24]
 800fc6a:	4798      	blx	r3
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	77fb      	strb	r3, [r7, #31]
 800fc70:	e00d      	b.n	800fc8e <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800fc72:	f000 f941 	bl	800fef8 <TRACE_UnLock>
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	f383 8810 	msr	PRIMASK, r3
}
 800fc80:	e005      	b.n	800fc8e <TRACE_Send+0xee>
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f383 8810 	msr	PRIMASK, r3
}
 800fc8c:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800fc8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3720      	adds	r7, #32
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	20000bf4 	.word	0x20000bf4
 800fca0:	20000c0c 	.word	0x20000c0c
 800fca4:	08015680 	.word	0x08015680

0800fca8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b088      	sub	sp, #32
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcb4:	f3ef 8310 	mrs	r3, PRIMASK
 800fcb8:	617b      	str	r3, [r7, #20]
  return(result);
 800fcba:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800fcbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800fcbe:	b672      	cpsid	i
}
 800fcc0:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800fcc2:	4b3c      	ldr	r3, [pc, #240]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fcc4:	789b      	ldrb	r3, [r3, #2]
 800fcc6:	2b02      	cmp	r3, #2
 800fcc8:	d106      	bne.n	800fcd8 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800fcca:	4b3a      	ldr	r3, [pc, #232]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800fcd0:	4b38      	ldr	r3, [pc, #224]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	821a      	strh	r2, [r3, #16]
 800fcd6:	e00a      	b.n	800fcee <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800fcd8:	4b36      	ldr	r3, [pc, #216]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fcda:	8a1a      	ldrh	r2, [r3, #16]
 800fcdc:	4b35      	ldr	r3, [pc, #212]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fcde:	8a9b      	ldrh	r3, [r3, #20]
 800fce0:	4413      	add	r3, r2
 800fce2:	b29b      	uxth	r3, r3
 800fce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	4b32      	ldr	r3, [pc, #200]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fcec:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800fcee:	4b31      	ldr	r3, [pc, #196]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fcf0:	8a1a      	ldrh	r2, [r3, #16]
 800fcf2:	4b30      	ldr	r3, [pc, #192]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fcf4:	8a5b      	ldrh	r3, [r3, #18]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d04d      	beq.n	800fd96 <TRACE_TxCpltCallback+0xee>
 800fcfa:	4b2e      	ldr	r3, [pc, #184]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fcfc:	8adb      	ldrh	r3, [r3, #22]
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d149      	bne.n	800fd96 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800fd02:	4b2c      	ldr	r3, [pc, #176]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd04:	789b      	ldrb	r3, [r3, #2]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d117      	bne.n	800fd3a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800fd0a:	4b2a      	ldr	r3, [pc, #168]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd0c:	881a      	ldrh	r2, [r3, #0]
 800fd0e:	4b29      	ldr	r3, [pc, #164]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd10:	8a1b      	ldrh	r3, [r3, #16]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	4b27      	ldr	r3, [pc, #156]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd18:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800fd1a:	4b26      	ldr	r3, [pc, #152]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd1c:	2202      	movs	r2, #2
 800fd1e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800fd20:	4b24      	ldr	r3, [pc, #144]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd22:	2200      	movs	r2, #0
 800fd24:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800fd26:	4b23      	ldr	r3, [pc, #140]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd28:	8a9b      	ldrh	r3, [r3, #20]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d105      	bne.n	800fd3a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800fd2e:	4b21      	ldr	r3, [pc, #132]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd30:	2200      	movs	r2, #0
 800fd32:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800fd34:	4b1f      	ldr	r3, [pc, #124]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd36:	2200      	movs	r2, #0
 800fd38:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800fd3a:	4b1e      	ldr	r3, [pc, #120]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd3c:	789b      	ldrb	r3, [r3, #2]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d115      	bne.n	800fd6e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800fd42:	4b1c      	ldr	r3, [pc, #112]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd44:	8a5a      	ldrh	r2, [r3, #18]
 800fd46:	4b1b      	ldr	r3, [pc, #108]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd48:	8a1b      	ldrh	r3, [r3, #16]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d908      	bls.n	800fd60 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800fd4e:	4b19      	ldr	r3, [pc, #100]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd50:	8a5a      	ldrh	r2, [r3, #18]
 800fd52:	4b18      	ldr	r3, [pc, #96]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd54:	8a1b      	ldrh	r3, [r3, #16]
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	4b16      	ldr	r3, [pc, #88]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd5c:	829a      	strh	r2, [r3, #20]
 800fd5e:	e006      	b.n	800fd6e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800fd60:	4b14      	ldr	r3, [pc, #80]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd62:	8a1b      	ldrh	r3, [r3, #16]
 800fd64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	4b12      	ldr	r3, [pc, #72]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd6c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800fd6e:	4b11      	ldr	r3, [pc, #68]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd70:	8a1b      	ldrh	r3, [r3, #16]
 800fd72:	461a      	mov	r2, r3
 800fd74:	4b10      	ldr	r3, [pc, #64]	; (800fdb8 <TRACE_TxCpltCallback+0x110>)
 800fd76:	4413      	add	r3, r2
 800fd78:	61fb      	str	r3, [r7, #28]
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	f383 8810 	msr	PRIMASK, r3
}
 800fd84:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800fd86:	4b0d      	ldr	r3, [pc, #52]	; (800fdbc <TRACE_TxCpltCallback+0x114>)
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	4a0a      	ldr	r2, [pc, #40]	; (800fdb4 <TRACE_TxCpltCallback+0x10c>)
 800fd8c:	8a92      	ldrh	r2, [r2, #20]
 800fd8e:	4611      	mov	r1, r2
 800fd90:	69f8      	ldr	r0, [r7, #28]
 800fd92:	4798      	blx	r3
 800fd94:	e00a      	b.n	800fdac <TRACE_TxCpltCallback+0x104>
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f383 8810 	msr	PRIMASK, r3
}
 800fda0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800fda2:	f7f2 fc41 	bl	8002628 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800fda6:	f000 f8a7 	bl	800fef8 <TRACE_UnLock>
  }
}
 800fdaa:	bf00      	nop
 800fdac:	bf00      	nop
 800fdae:	3720      	adds	r7, #32
 800fdb0:	46bd      	mov	sp, r7
 800fdb2:	bd80      	pop	{r7, pc}
 800fdb4:	20000bf4 	.word	0x20000bf4
 800fdb8:	20000c0c 	.word	0x20000c0c
 800fdbc:	08015680 	.word	0x08015680

0800fdc0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	6039      	str	r1, [r7, #0]
 800fdca:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800fdcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdd0:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdd2:	f3ef 8310 	mrs	r3, PRIMASK
 800fdd6:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdd8:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800fdda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fddc:	b672      	cpsid	i
}
 800fdde:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800fde0:	4b35      	ldr	r3, [pc, #212]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fde2:	8a5a      	ldrh	r2, [r3, #18]
 800fde4:	4b34      	ldr	r3, [pc, #208]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fde6:	8a1b      	ldrh	r3, [r3, #16]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d11b      	bne.n	800fe24 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800fdec:	4b32      	ldr	r3, [pc, #200]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fdee:	8a5b      	ldrh	r3, [r3, #18]
 800fdf0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fdf4:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800fdf6:	88fa      	ldrh	r2, [r7, #6]
 800fdf8:	8afb      	ldrh	r3, [r7, #22]
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d33a      	bcc.n	800fe74 <TRACE_AllocateBufer+0xb4>
 800fdfe:	4b2e      	ldr	r3, [pc, #184]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe00:	8a1b      	ldrh	r3, [r3, #16]
 800fe02:	88fa      	ldrh	r2, [r7, #6]
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d235      	bcs.n	800fe74 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800fe08:	4b2b      	ldr	r3, [pc, #172]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800fe0e:	4b2a      	ldr	r3, [pc, #168]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe10:	8a5a      	ldrh	r2, [r3, #18]
 800fe12:	4b29      	ldr	r3, [pc, #164]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe14:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800fe16:	4b28      	ldr	r3, [pc, #160]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe18:	8a1b      	ldrh	r3, [r3, #16]
 800fe1a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800fe1c:	4b26      	ldr	r3, [pc, #152]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	825a      	strh	r2, [r3, #18]
 800fe22:	e027      	b.n	800fe74 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800fe24:	4b24      	ldr	r3, [pc, #144]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe26:	8a5a      	ldrh	r2, [r3, #18]
 800fe28:	4b23      	ldr	r3, [pc, #140]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe2a:	8a1b      	ldrh	r3, [r3, #16]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d91b      	bls.n	800fe68 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800fe30:	4b21      	ldr	r3, [pc, #132]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe32:	8a5b      	ldrh	r3, [r3, #18]
 800fe34:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fe38:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800fe3a:	88fa      	ldrh	r2, [r7, #6]
 800fe3c:	8afb      	ldrh	r3, [r7, #22]
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d318      	bcc.n	800fe74 <TRACE_AllocateBufer+0xb4>
 800fe42:	4b1d      	ldr	r3, [pc, #116]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe44:	8a1b      	ldrh	r3, [r3, #16]
 800fe46:	88fa      	ldrh	r2, [r7, #6]
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d213      	bcs.n	800fe74 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800fe4c:	4b1a      	ldr	r3, [pc, #104]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe4e:	2201      	movs	r2, #1
 800fe50:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800fe52:	4b19      	ldr	r3, [pc, #100]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe54:	8a5a      	ldrh	r2, [r3, #18]
 800fe56:	4b18      	ldr	r3, [pc, #96]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe58:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800fe5a:	4b17      	ldr	r3, [pc, #92]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe5c:	8a1b      	ldrh	r3, [r3, #16]
 800fe5e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800fe60:	4b15      	ldr	r3, [pc, #84]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	825a      	strh	r2, [r3, #18]
 800fe66:	e005      	b.n	800fe74 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800fe68:	4b13      	ldr	r3, [pc, #76]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe6a:	8a1a      	ldrh	r2, [r3, #16]
 800fe6c:	4b12      	ldr	r3, [pc, #72]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe6e:	8a5b      	ldrh	r3, [r3, #18]
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800fe74:	8afa      	ldrh	r2, [r7, #22]
 800fe76:	88fb      	ldrh	r3, [r7, #6]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d90f      	bls.n	800fe9c <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800fe7c:	4b0e      	ldr	r3, [pc, #56]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe7e:	8a5a      	ldrh	r2, [r3, #18]
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800fe84:	4b0c      	ldr	r3, [pc, #48]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe86:	8a5a      	ldrh	r2, [r3, #18]
 800fe88:	88fb      	ldrh	r3, [r7, #6]
 800fe8a:	4413      	add	r3, r2
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe92:	b29a      	uxth	r2, r3
 800fe94:	4b08      	ldr	r3, [pc, #32]	; (800feb8 <TRACE_AllocateBufer+0xf8>)
 800fe96:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	82bb      	strh	r3, [r7, #20]
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	f383 8810 	msr	PRIMASK, r3
}
 800fea6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800fea8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800feac:	4618      	mov	r0, r3
 800feae:	371c      	adds	r7, #28
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bc80      	pop	{r7}
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	20000bf4 	.word	0x20000bf4

0800febc <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fec2:	f3ef 8310 	mrs	r3, PRIMASK
 800fec6:	607b      	str	r3, [r7, #4]
  return(result);
 800fec8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800feca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fecc:	b672      	cpsid	i
}
 800fece:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800fed0:	4b08      	ldr	r3, [pc, #32]	; (800fef4 <TRACE_Lock+0x38>)
 800fed2:	8adb      	ldrh	r3, [r3, #22]
 800fed4:	3301      	adds	r3, #1
 800fed6:	b29a      	uxth	r2, r3
 800fed8:	4b06      	ldr	r3, [pc, #24]	; (800fef4 <TRACE_Lock+0x38>)
 800feda:	82da      	strh	r2, [r3, #22]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	f383 8810 	msr	PRIMASK, r3
}
 800fee6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800fee8:	bf00      	nop
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	bc80      	pop	{r7}
 800fef0:	4770      	bx	lr
 800fef2:	bf00      	nop
 800fef4:	20000bf4 	.word	0x20000bf4

0800fef8 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fefe:	f3ef 8310 	mrs	r3, PRIMASK
 800ff02:	607b      	str	r3, [r7, #4]
  return(result);
 800ff04:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800ff06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff08:	b672      	cpsid	i
}
 800ff0a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800ff0c:	4b08      	ldr	r3, [pc, #32]	; (800ff30 <TRACE_UnLock+0x38>)
 800ff0e:	8adb      	ldrh	r3, [r3, #22]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	4b06      	ldr	r3, [pc, #24]	; (800ff30 <TRACE_UnLock+0x38>)
 800ff16:	82da      	strh	r2, [r3, #22]
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	f383 8810 	msr	PRIMASK, r3
}
 800ff22:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ff24:	bf00      	nop
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bc80      	pop	{r7}
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	20000bf4 	.word	0x20000bf4

0800ff34 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800ff34:	b480      	push	{r7}
 800ff36:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800ff38:	4b05      	ldr	r3, [pc, #20]	; (800ff50 <TRACE_IsLocked+0x1c>)
 800ff3a:	8adb      	ldrh	r3, [r3, #22]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	bf14      	ite	ne
 800ff40:	2301      	movne	r3, #1
 800ff42:	2300      	moveq	r3, #0
 800ff44:	b2db      	uxtb	r3, r3
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bc80      	pop	{r7}
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	20000bf4 	.word	0x20000bf4

0800ff54 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ff54:	b480      	push	{r7}
 800ff56:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ff58:	4b04      	ldr	r3, [pc, #16]	; (800ff6c <UTIL_LPM_Init+0x18>)
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ff5e:	4b04      	ldr	r3, [pc, #16]	; (800ff70 <UTIL_LPM_Init+0x1c>)
 800ff60:	2200      	movs	r2, #0
 800ff62:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ff64:	bf00      	nop
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bc80      	pop	{r7}
 800ff6a:	4770      	bx	lr
 800ff6c:	20000f0c 	.word	0x20000f0c
 800ff70:	20000f10 	.word	0x20000f10

0800ff74 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ff74:	b480      	push	{r7}
 800ff76:	b087      	sub	sp, #28
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff80:	f3ef 8310 	mrs	r3, PRIMASK
 800ff84:	613b      	str	r3, [r7, #16]
  return(result);
 800ff86:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ff88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff8a:	b672      	cpsid	i
}
 800ff8c:	bf00      	nop
  
  switch( state )
 800ff8e:	78fb      	ldrb	r3, [r7, #3]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d008      	beq.n	800ffa6 <UTIL_LPM_SetStopMode+0x32>
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d10e      	bne.n	800ffb6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ff98:	4b0d      	ldr	r3, [pc, #52]	; (800ffd0 <UTIL_LPM_SetStopMode+0x5c>)
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	4a0b      	ldr	r2, [pc, #44]	; (800ffd0 <UTIL_LPM_SetStopMode+0x5c>)
 800ffa2:	6013      	str	r3, [r2, #0]
      break;
 800ffa4:	e008      	b.n	800ffb8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	43da      	mvns	r2, r3
 800ffaa:	4b09      	ldr	r3, [pc, #36]	; (800ffd0 <UTIL_LPM_SetStopMode+0x5c>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4013      	ands	r3, r2
 800ffb0:	4a07      	ldr	r2, [pc, #28]	; (800ffd0 <UTIL_LPM_SetStopMode+0x5c>)
 800ffb2:	6013      	str	r3, [r2, #0]
      break;
 800ffb4:	e000      	b.n	800ffb8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800ffb6:	bf00      	nop
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f383 8810 	msr	PRIMASK, r3
}
 800ffc2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ffc4:	bf00      	nop
 800ffc6:	371c      	adds	r7, #28
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	bc80      	pop	{r7}
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop
 800ffd0:	20000f0c 	.word	0x20000f0c

0800ffd4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b087      	sub	sp, #28
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	460b      	mov	r3, r1
 800ffde:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffe0:	f3ef 8310 	mrs	r3, PRIMASK
 800ffe4:	613b      	str	r3, [r7, #16]
  return(result);
 800ffe6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ffe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ffea:	b672      	cpsid	i
}
 800ffec:	bf00      	nop
  
  switch(state)
 800ffee:	78fb      	ldrb	r3, [r7, #3]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d008      	beq.n	8010006 <UTIL_LPM_SetOffMode+0x32>
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d10e      	bne.n	8010016 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800fff8:	4b0d      	ldr	r3, [pc, #52]	; (8010030 <UTIL_LPM_SetOffMode+0x5c>)
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	4313      	orrs	r3, r2
 8010000:	4a0b      	ldr	r2, [pc, #44]	; (8010030 <UTIL_LPM_SetOffMode+0x5c>)
 8010002:	6013      	str	r3, [r2, #0]
      break;
 8010004:	e008      	b.n	8010018 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	43da      	mvns	r2, r3
 801000a:	4b09      	ldr	r3, [pc, #36]	; (8010030 <UTIL_LPM_SetOffMode+0x5c>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	4013      	ands	r3, r2
 8010010:	4a07      	ldr	r2, [pc, #28]	; (8010030 <UTIL_LPM_SetOffMode+0x5c>)
 8010012:	6013      	str	r3, [r2, #0]
      break;
 8010014:	e000      	b.n	8010018 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8010016:	bf00      	nop
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	f383 8810 	msr	PRIMASK, r3
}
 8010022:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010024:	bf00      	nop
 8010026:	371c      	adds	r7, #28
 8010028:	46bd      	mov	sp, r7
 801002a:	bc80      	pop	{r7}
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop
 8010030:	20000f10 	.word	0x20000f10

08010034 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b084      	sub	sp, #16
 8010038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801003a:	f3ef 8310 	mrs	r3, PRIMASK
 801003e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010040:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8010042:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010044:	b672      	cpsid	i
}
 8010046:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8010048:	4b12      	ldr	r3, [pc, #72]	; (8010094 <UTIL_LPM_EnterLowPower+0x60>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d006      	beq.n	801005e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8010050:	4b11      	ldr	r3, [pc, #68]	; (8010098 <UTIL_LPM_EnterLowPower+0x64>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8010056:	4b10      	ldr	r3, [pc, #64]	; (8010098 <UTIL_LPM_EnterLowPower+0x64>)
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	4798      	blx	r3
 801005c:	e010      	b.n	8010080 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801005e:	4b0f      	ldr	r3, [pc, #60]	; (801009c <UTIL_LPM_EnterLowPower+0x68>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d006      	beq.n	8010074 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8010066:	4b0c      	ldr	r3, [pc, #48]	; (8010098 <UTIL_LPM_EnterLowPower+0x64>)
 8010068:	689b      	ldr	r3, [r3, #8]
 801006a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801006c:	4b0a      	ldr	r3, [pc, #40]	; (8010098 <UTIL_LPM_EnterLowPower+0x64>)
 801006e:	68db      	ldr	r3, [r3, #12]
 8010070:	4798      	blx	r3
 8010072:	e005      	b.n	8010080 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8010074:	4b08      	ldr	r3, [pc, #32]	; (8010098 <UTIL_LPM_EnterLowPower+0x64>)
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801007a:	4b07      	ldr	r3, [pc, #28]	; (8010098 <UTIL_LPM_EnterLowPower+0x64>)
 801007c:	695b      	ldr	r3, [r3, #20]
 801007e:	4798      	blx	r3
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f383 8810 	msr	PRIMASK, r3
}
 801008a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801008c:	bf00      	nop
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	20000f0c 	.word	0x20000f0c
 8010098:	08015628 	.word	0x08015628
 801009c:	20000f10 	.word	0x20000f10

080100a0 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80100a0:	b480      	push	{r7}
 80100a2:	b085      	sub	sp, #20
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	460b      	mov	r3, r1
 80100aa:	70fb      	strb	r3, [r7, #3]
 80100ac:	4613      	mov	r3, r2
 80100ae:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80100b4:	e004      	b.n	80100c0 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	1c5a      	adds	r2, r3, #1
 80100ba:	60fa      	str	r2, [r7, #12]
 80100bc:	78fa      	ldrb	r2, [r7, #3]
 80100be:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80100c0:	883b      	ldrh	r3, [r7, #0]
 80100c2:	1e5a      	subs	r2, r3, #1
 80100c4:	803a      	strh	r2, [r7, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d1f5      	bne.n	80100b6 <UTIL_MEM_set_8+0x16>
  }
}
 80100ca:	bf00      	nop
 80100cc:	bf00      	nop
 80100ce:	3714      	adds	r7, #20
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bc80      	pop	{r7}
 80100d4:	4770      	bx	lr
	...

080100d8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b090      	sub	sp, #64	; 0x40
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80100e0:	4b73      	ldr	r3, [pc, #460]	; (80102b0 <UTIL_SEQ_Run+0x1d8>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80100e6:	4b72      	ldr	r3, [pc, #456]	; (80102b0 <UTIL_SEQ_Run+0x1d8>)
 80100e8:	681a      	ldr	r2, [r3, #0]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	4013      	ands	r3, r2
 80100ee:	4a70      	ldr	r2, [pc, #448]	; (80102b0 <UTIL_SEQ_Run+0x1d8>)
 80100f0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80100f2:	4b70      	ldr	r3, [pc, #448]	; (80102b4 <UTIL_SEQ_Run+0x1dc>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80100f8:	4b6f      	ldr	r3, [pc, #444]	; (80102b8 <UTIL_SEQ_Run+0x1e0>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80100fe:	4b6f      	ldr	r3, [pc, #444]	; (80102bc <UTIL_SEQ_Run+0x1e4>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8010104:	4b6e      	ldr	r3, [pc, #440]	; (80102c0 <UTIL_SEQ_Run+0x1e8>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801010a:	e08d      	b.n	8010228 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801010c:	2300      	movs	r3, #0
 801010e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010110:	e002      	b.n	8010118 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8010112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010114:	3301      	adds	r3, #1
 8010116:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010118:	4a6a      	ldr	r2, [pc, #424]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 801011a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801011c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010122:	401a      	ands	r2, r3
 8010124:	4b62      	ldr	r3, [pc, #392]	; (80102b0 <UTIL_SEQ_Run+0x1d8>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	4013      	ands	r3, r2
 801012a:	2b00      	cmp	r3, #0
 801012c:	d0f1      	beq.n	8010112 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801012e:	4a65      	ldr	r2, [pc, #404]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 8010130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010132:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010138:	401a      	ands	r2, r3
 801013a:	4b5d      	ldr	r3, [pc, #372]	; (80102b0 <UTIL_SEQ_Run+0x1d8>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	4013      	ands	r3, r2
 8010140:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010142:	4a60      	ldr	r2, [pc, #384]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 8010144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010146:	00db      	lsls	r3, r3, #3
 8010148:	4413      	add	r3, r2
 801014a:	685a      	ldr	r2, [r3, #4]
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014e:	4013      	ands	r3, r2
 8010150:	2b00      	cmp	r3, #0
 8010152:	d106      	bne.n	8010162 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010154:	4a5b      	ldr	r2, [pc, #364]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 8010156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010158:	00db      	lsls	r3, r3, #3
 801015a:	4413      	add	r3, r2
 801015c:	f04f 32ff 	mov.w	r2, #4294967295
 8010160:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010162:	4a58      	ldr	r2, [pc, #352]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 8010164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010166:	00db      	lsls	r3, r3, #3
 8010168:	4413      	add	r3, r2
 801016a:	685a      	ldr	r2, [r3, #4]
 801016c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016e:	4013      	ands	r3, r2
 8010170:	4618      	mov	r0, r3
 8010172:	f000 f907 	bl	8010384 <SEQ_BitPosition>
 8010176:	4603      	mov	r3, r0
 8010178:	461a      	mov	r2, r3
 801017a:	4b53      	ldr	r3, [pc, #332]	; (80102c8 <UTIL_SEQ_Run+0x1f0>)
 801017c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801017e:	4a51      	ldr	r2, [pc, #324]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 8010180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010182:	00db      	lsls	r3, r3, #3
 8010184:	4413      	add	r3, r2
 8010186:	685a      	ldr	r2, [r3, #4]
 8010188:	4b4f      	ldr	r3, [pc, #316]	; (80102c8 <UTIL_SEQ_Run+0x1f0>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	2101      	movs	r1, #1
 801018e:	fa01 f303 	lsl.w	r3, r1, r3
 8010192:	43db      	mvns	r3, r3
 8010194:	401a      	ands	r2, r3
 8010196:	494b      	ldr	r1, [pc, #300]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 8010198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801019a:	00db      	lsls	r3, r3, #3
 801019c:	440b      	add	r3, r1
 801019e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101a0:	f3ef 8310 	mrs	r3, PRIMASK
 80101a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80101a6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80101a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80101aa:	b672      	cpsid	i
}
 80101ac:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80101ae:	4b46      	ldr	r3, [pc, #280]	; (80102c8 <UTIL_SEQ_Run+0x1f0>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2201      	movs	r2, #1
 80101b4:	fa02 f303 	lsl.w	r3, r2, r3
 80101b8:	43da      	mvns	r2, r3
 80101ba:	4b3e      	ldr	r3, [pc, #248]	; (80102b4 <UTIL_SEQ_Run+0x1dc>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4013      	ands	r3, r2
 80101c0:	4a3c      	ldr	r2, [pc, #240]	; (80102b4 <UTIL_SEQ_Run+0x1dc>)
 80101c2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80101c4:	2303      	movs	r3, #3
 80101c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101c8:	e013      	b.n	80101f2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80101ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101cc:	3b01      	subs	r3, #1
 80101ce:	4a3d      	ldr	r2, [pc, #244]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 80101d0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80101d4:	4b3c      	ldr	r3, [pc, #240]	; (80102c8 <UTIL_SEQ_Run+0x1f0>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	2201      	movs	r2, #1
 80101da:	fa02 f303 	lsl.w	r3, r2, r3
 80101de:	43da      	mvns	r2, r3
 80101e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101e2:	3b01      	subs	r3, #1
 80101e4:	400a      	ands	r2, r1
 80101e6:	4937      	ldr	r1, [pc, #220]	; (80102c4 <UTIL_SEQ_Run+0x1ec>)
 80101e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80101ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101ee:	3b01      	subs	r3, #1
 80101f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d1e8      	bne.n	80101ca <UTIL_SEQ_Run+0xf2>
 80101f8:	6a3b      	ldr	r3, [r7, #32]
 80101fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	f383 8810 	msr	PRIMASK, r3
}
 8010202:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010204:	4b30      	ldr	r3, [pc, #192]	; (80102c8 <UTIL_SEQ_Run+0x1f0>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4a30      	ldr	r2, [pc, #192]	; (80102cc <UTIL_SEQ_Run+0x1f4>)
 801020a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801020e:	4798      	blx	r3

    local_taskset = TaskSet;
 8010210:	4b28      	ldr	r3, [pc, #160]	; (80102b4 <UTIL_SEQ_Run+0x1dc>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8010216:	4b28      	ldr	r3, [pc, #160]	; (80102b8 <UTIL_SEQ_Run+0x1e0>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801021c:	4b27      	ldr	r3, [pc, #156]	; (80102bc <UTIL_SEQ_Run+0x1e4>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8010222:	4b27      	ldr	r3, [pc, #156]	; (80102c0 <UTIL_SEQ_Run+0x1e8>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010228:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801022a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801022c:	401a      	ands	r2, r3
 801022e:	4b20      	ldr	r3, [pc, #128]	; (80102b0 <UTIL_SEQ_Run+0x1d8>)
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	4013      	ands	r3, r2
 8010234:	2b00      	cmp	r3, #0
 8010236:	d005      	beq.n	8010244 <UTIL_SEQ_Run+0x16c>
 8010238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801023a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023c:	4013      	ands	r3, r2
 801023e:	2b00      	cmp	r3, #0
 8010240:	f43f af64 	beq.w	801010c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010244:	4b20      	ldr	r3, [pc, #128]	; (80102c8 <UTIL_SEQ_Run+0x1f0>)
 8010246:	f04f 32ff 	mov.w	r2, #4294967295
 801024a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801024c:	f000 f88e 	bl	801036c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010250:	f3ef 8310 	mrs	r3, PRIMASK
 8010254:	613b      	str	r3, [r7, #16]
  return(result);
 8010256:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8010258:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801025a:	b672      	cpsid	i
}
 801025c:	bf00      	nop
  local_taskset = TaskSet;
 801025e:	4b15      	ldr	r3, [pc, #84]	; (80102b4 <UTIL_SEQ_Run+0x1dc>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8010264:	4b14      	ldr	r3, [pc, #80]	; (80102b8 <UTIL_SEQ_Run+0x1e0>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801026a:	4b14      	ldr	r3, [pc, #80]	; (80102bc <UTIL_SEQ_Run+0x1e4>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010270:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	401a      	ands	r2, r3
 8010276:	4b0e      	ldr	r3, [pc, #56]	; (80102b0 <UTIL_SEQ_Run+0x1d8>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4013      	ands	r3, r2
 801027c:	2b00      	cmp	r3, #0
 801027e:	d107      	bne.n	8010290 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8010280:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <UTIL_SEQ_Run+0x1e8>)
 8010282:	681a      	ldr	r2, [r3, #0]
 8010284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010286:	4013      	ands	r3, r2
 8010288:	2b00      	cmp	r3, #0
 801028a:	d101      	bne.n	8010290 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801028c:	f7f2 f99e 	bl	80025cc <UTIL_SEQ_Idle>
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	f383 8810 	msr	PRIMASK, r3
}
 801029a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801029c:	f000 f86c 	bl	8010378 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80102a0:	4a03      	ldr	r2, [pc, #12]	; (80102b0 <UTIL_SEQ_Run+0x1d8>)
 80102a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a4:	6013      	str	r3, [r2, #0]

  return;
 80102a6:	bf00      	nop
}
 80102a8:	3740      	adds	r7, #64	; 0x40
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	bf00      	nop
 80102b0:	20000050 	.word	0x20000050
 80102b4:	20000f14 	.word	0x20000f14
 80102b8:	20000f18 	.word	0x20000f18
 80102bc:	2000004c 	.word	0x2000004c
 80102c0:	20000f1c 	.word	0x20000f1c
 80102c4:	20000f34 	.word	0x20000f34
 80102c8:	20000f20 	.word	0x20000f20
 80102cc:	20000f24 	.word	0x20000f24

080102d0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b088      	sub	sp, #32
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102dc:	f3ef 8310 	mrs	r3, PRIMASK
 80102e0:	617b      	str	r3, [r7, #20]
  return(result);
 80102e2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80102e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80102e6:	b672      	cpsid	i
}
 80102e8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f000 f84a 	bl	8010384 <SEQ_BitPosition>
 80102f0:	4603      	mov	r3, r0
 80102f2:	4619      	mov	r1, r3
 80102f4:	4a06      	ldr	r2, [pc, #24]	; (8010310 <UTIL_SEQ_RegTask+0x40>)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010300:	69bb      	ldr	r3, [r7, #24]
 8010302:	f383 8810 	msr	PRIMASK, r3
}
 8010306:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8010308:	bf00      	nop
}
 801030a:	3720      	adds	r7, #32
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}
 8010310:	20000f24 	.word	0x20000f24

08010314 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010314:	b480      	push	{r7}
 8010316:	b087      	sub	sp, #28
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801031e:	f3ef 8310 	mrs	r3, PRIMASK
 8010322:	60fb      	str	r3, [r7, #12]
  return(result);
 8010324:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010328:	b672      	cpsid	i
}
 801032a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801032c:	4b0d      	ldr	r3, [pc, #52]	; (8010364 <UTIL_SEQ_SetTask+0x50>)
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	4313      	orrs	r3, r2
 8010334:	4a0b      	ldr	r2, [pc, #44]	; (8010364 <UTIL_SEQ_SetTask+0x50>)
 8010336:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010338:	4a0b      	ldr	r2, [pc, #44]	; (8010368 <UTIL_SEQ_SetTask+0x54>)
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	431a      	orrs	r2, r3
 8010344:	4908      	ldr	r1, [pc, #32]	; (8010368 <UTIL_SEQ_SetTask+0x54>)
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010350:	693b      	ldr	r3, [r7, #16]
 8010352:	f383 8810 	msr	PRIMASK, r3
}
 8010356:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010358:	bf00      	nop
}
 801035a:	371c      	adds	r7, #28
 801035c:	46bd      	mov	sp, r7
 801035e:	bc80      	pop	{r7}
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	20000f14 	.word	0x20000f14
 8010368:	20000f34 	.word	0x20000f34

0801036c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801036c:	b480      	push	{r7}
 801036e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010370:	bf00      	nop
}
 8010372:	46bd      	mov	sp, r7
 8010374:	bc80      	pop	{r7}
 8010376:	4770      	bx	lr

08010378 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8010378:	b480      	push	{r7}
 801037a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801037c:	bf00      	nop
}
 801037e:	46bd      	mov	sp, r7
 8010380:	bc80      	pop	{r7}
 8010382:	4770      	bx	lr

08010384 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010384:	b480      	push	{r7}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801038c:	2300      	movs	r3, #0
 801038e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	0c1b      	lsrs	r3, r3, #16
 8010398:	041b      	lsls	r3, r3, #16
 801039a:	2b00      	cmp	r3, #0
 801039c:	d104      	bne.n	80103a8 <SEQ_BitPosition+0x24>
 801039e:	2310      	movs	r3, #16
 80103a0:	73fb      	strb	r3, [r7, #15]
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	041b      	lsls	r3, r3, #16
 80103a6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d105      	bne.n	80103be <SEQ_BitPosition+0x3a>
 80103b2:	7bfb      	ldrb	r3, [r7, #15]
 80103b4:	3308      	adds	r3, #8
 80103b6:	73fb      	strb	r3, [r7, #15]
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	021b      	lsls	r3, r3, #8
 80103bc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d105      	bne.n	80103d4 <SEQ_BitPosition+0x50>
 80103c8:	7bfb      	ldrb	r3, [r7, #15]
 80103ca:	3304      	adds	r3, #4
 80103cc:	73fb      	strb	r3, [r7, #15]
 80103ce:	68bb      	ldr	r3, [r7, #8]
 80103d0:	011b      	lsls	r3, r3, #4
 80103d2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	0f1b      	lsrs	r3, r3, #28
 80103d8:	4a06      	ldr	r2, [pc, #24]	; (80103f4 <SEQ_BitPosition+0x70>)
 80103da:	5cd2      	ldrb	r2, [r2, r3]
 80103dc:	7bfb      	ldrb	r3, [r7, #15]
 80103de:	4413      	add	r3, r2
 80103e0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80103e2:	7bfb      	ldrb	r3, [r7, #15]
 80103e4:	f1c3 031f 	rsb	r3, r3, #31
 80103e8:	b2db      	uxtb	r3, r3
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3714      	adds	r7, #20
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bc80      	pop	{r7}
 80103f2:	4770      	bx	lr
 80103f4:	08015894 	.word	0x08015894

080103f8 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80103f8:	b082      	sub	sp, #8
 80103fa:	b480      	push	{r7}
 80103fc:	b087      	sub	sp, #28
 80103fe:	af00      	add	r7, sp, #0
 8010400:	60f8      	str	r0, [r7, #12]
 8010402:	1d38      	adds	r0, r7, #4
 8010404:	e880 0006 	stmia.w	r0, {r1, r2}
 8010408:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801040a:	2300      	movs	r3, #0
 801040c:	613b      	str	r3, [r7, #16]
 801040e:	2300      	movs	r3, #0
 8010410:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8010412:	687a      	ldr	r2, [r7, #4]
 8010414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010416:	4413      	add	r3, r2
 8010418:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801041a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801041e:	b29a      	uxth	r2, r3
 8010420:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010424:	b29b      	uxth	r3, r3
 8010426:	4413      	add	r3, r2
 8010428:	b29b      	uxth	r3, r3
 801042a:	b21b      	sxth	r3, r3
 801042c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801042e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010432:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010436:	db0a      	blt.n	801044e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	3301      	adds	r3, #1
 801043c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801043e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010442:	b29b      	uxth	r3, r3
 8010444:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8010448:	b29b      	uxth	r3, r3
 801044a:	b21b      	sxth	r3, r3
 801044c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	461a      	mov	r2, r3
 8010452:	f107 0310 	add.w	r3, r7, #16
 8010456:	e893 0003 	ldmia.w	r3, {r0, r1}
 801045a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801045e:	68f8      	ldr	r0, [r7, #12]
 8010460:	371c      	adds	r7, #28
 8010462:	46bd      	mov	sp, r7
 8010464:	bc80      	pop	{r7}
 8010466:	b002      	add	sp, #8
 8010468:	4770      	bx	lr
	...

0801046c <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b08a      	sub	sp, #40	; 0x28
 8010470:	af02      	add	r7, sp, #8
 8010472:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010474:	2300      	movs	r3, #0
 8010476:	61bb      	str	r3, [r7, #24]
 8010478:	2300      	movs	r3, #0
 801047a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801047c:	2300      	movs	r3, #0
 801047e:	613b      	str	r3, [r7, #16]
 8010480:	2300      	movs	r3, #0
 8010482:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010484:	4b14      	ldr	r3, [pc, #80]	; (80104d8 <SysTimeGet+0x6c>)
 8010486:	691b      	ldr	r3, [r3, #16]
 8010488:	f107 0218 	add.w	r2, r7, #24
 801048c:	3204      	adds	r2, #4
 801048e:	4610      	mov	r0, r2
 8010490:	4798      	blx	r3
 8010492:	4603      	mov	r3, r0
 8010494:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8010496:	4b10      	ldr	r3, [pc, #64]	; (80104d8 <SysTimeGet+0x6c>)
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	4798      	blx	r3
 801049c:	4603      	mov	r3, r0
 801049e:	b21b      	sxth	r3, r3
 80104a0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80104a2:	4b0d      	ldr	r3, [pc, #52]	; (80104d8 <SysTimeGet+0x6c>)
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	4798      	blx	r3
 80104a8:	4603      	mov	r3, r0
 80104aa:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80104ac:	f107 0010 	add.w	r0, r7, #16
 80104b0:	69fb      	ldr	r3, [r7, #28]
 80104b2:	9300      	str	r3, [sp, #0]
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	f107 0208 	add.w	r2, r7, #8
 80104ba:	ca06      	ldmia	r2, {r1, r2}
 80104bc:	f7ff ff9c 	bl	80103f8 <SysTimeAdd>

  return sysTime;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	461a      	mov	r2, r3
 80104c4:	f107 0310 	add.w	r3, r7, #16
 80104c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80104d0:	6878      	ldr	r0, [r7, #4]
 80104d2:	3720      	adds	r7, #32
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}
 80104d8:	0801566c 	.word	0x0801566c

080104dc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80104e0:	4b04      	ldr	r3, [pc, #16]	; (80104f4 <UTIL_TIMER_Init+0x18>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80104e6:	4b04      	ldr	r3, [pc, #16]	; (80104f8 <UTIL_TIMER_Init+0x1c>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	4798      	blx	r3
 80104ec:	4603      	mov	r3, r0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	20000f4c 	.word	0x20000f4c
 80104f8:	08015640 	.word	0x08015640

080104fc <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	603b      	str	r3, [r7, #0]
 8010508:	4613      	mov	r3, r2
 801050a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d023      	beq.n	801055a <UTIL_TIMER_Create+0x5e>
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d020      	beq.n	801055a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2200      	movs	r2, #0
 801051c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801051e:	4b11      	ldr	r3, [pc, #68]	; (8010564 <UTIL_TIMER_Create+0x68>)
 8010520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010522:	68b8      	ldr	r0, [r7, #8]
 8010524:	4798      	blx	r3
 8010526:	4602      	mov	r2, r0
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2200      	movs	r2, #0
 8010530:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2200      	movs	r2, #0
 8010536:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2200      	movs	r2, #0
 801053c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	683a      	ldr	r2, [r7, #0]
 8010542:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	69ba      	ldr	r2, [r7, #24]
 8010548:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	79fa      	ldrb	r2, [r7, #7]
 801054e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2200      	movs	r2, #0
 8010554:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8010556:	2300      	movs	r3, #0
 8010558:	e000      	b.n	801055c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801055a:	2301      	movs	r3, #1
  }
}
 801055c:	4618      	mov	r0, r3
 801055e:	3710      	adds	r7, #16
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}
 8010564:	08015640 	.word	0x08015640

08010568 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b08a      	sub	sp, #40	; 0x28
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010570:	2300      	movs	r3, #0
 8010572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d056      	beq.n	801062a <UTIL_TIMER_Start+0xc2>
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f000 f9a9 	bl	80108d4 <TimerExists>
 8010582:	4603      	mov	r3, r0
 8010584:	f083 0301 	eor.w	r3, r3, #1
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d04d      	beq.n	801062a <UTIL_TIMER_Start+0xc2>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	7a5b      	ldrb	r3, [r3, #9]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d149      	bne.n	801062a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010596:	f3ef 8310 	mrs	r3, PRIMASK
 801059a:	613b      	str	r3, [r7, #16]
  return(result);
 801059c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801059e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80105a0:	b672      	cpsid	i
}
 80105a2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	685b      	ldr	r3, [r3, #4]
 80105a8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 80105aa:	4b24      	ldr	r3, [pc, #144]	; (801063c <UTIL_TIMER_Start+0xd4>)
 80105ac:	6a1b      	ldr	r3, [r3, #32]
 80105ae:	4798      	blx	r3
 80105b0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80105b2:	6a3a      	ldr	r2, [r7, #32]
 80105b4:	69bb      	ldr	r3, [r7, #24]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d201      	bcs.n	80105be <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80105ba:	69bb      	ldr	r3, [r7, #24]
 80105bc:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6a3a      	ldr	r2, [r7, #32]
 80105c2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2201      	movs	r2, #1
 80105ce:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80105d6:	4b1a      	ldr	r3, [pc, #104]	; (8010640 <UTIL_TIMER_Start+0xd8>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d106      	bne.n	80105ec <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80105de:	4b17      	ldr	r3, [pc, #92]	; (801063c <UTIL_TIMER_Start+0xd4>)
 80105e0:	691b      	ldr	r3, [r3, #16]
 80105e2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f000 f9eb 	bl	80109c0 <TimerInsertNewHeadTimer>
 80105ea:	e017      	b.n	801061c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80105ec:	4b13      	ldr	r3, [pc, #76]	; (801063c <UTIL_TIMER_Start+0xd4>)
 80105ee:	699b      	ldr	r3, [r3, #24]
 80105f0:	4798      	blx	r3
 80105f2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	441a      	add	r2, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	4b0e      	ldr	r3, [pc, #56]	; (8010640 <UTIL_TIMER_Start+0xd8>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	429a      	cmp	r2, r3
 801060c:	d203      	bcs.n	8010616 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 f9d6 	bl	80109c0 <TimerInsertNewHeadTimer>
 8010614:	e002      	b.n	801061c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f000 f9a2 	bl	8010960 <TimerInsertTimer>
 801061c:	69fb      	ldr	r3, [r7, #28]
 801061e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f383 8810 	msr	PRIMASK, r3
}
 8010626:	bf00      	nop
  {
 8010628:	e002      	b.n	8010630 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801062a:	2301      	movs	r3, #1
 801062c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8010630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010634:	4618      	mov	r0, r3
 8010636:	3728      	adds	r7, #40	; 0x28
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	08015640 	.word	0x08015640
 8010640:	20000f4c 	.word	0x20000f4c

08010644 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b088      	sub	sp, #32
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801064c:	2300      	movs	r3, #0
 801064e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d05b      	beq.n	801070e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010656:	f3ef 8310 	mrs	r3, PRIMASK
 801065a:	60fb      	str	r3, [r7, #12]
  return(result);
 801065c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801065e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010660:	b672      	cpsid	i
}
 8010662:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010664:	4b2d      	ldr	r3, [pc, #180]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801066a:	4b2c      	ldr	r3, [pc, #176]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2201      	movs	r2, #1
 8010674:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8010676:	4b29      	ldr	r3, [pc, #164]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d041      	beq.n	8010702 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2200      	movs	r2, #0
 8010682:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010684:	4b25      	ldr	r3, [pc, #148]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	429a      	cmp	r2, r3
 801068c:	d134      	bne.n	80106f8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801068e:	4b23      	ldr	r3, [pc, #140]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	2200      	movs	r2, #0
 8010694:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8010696:	4b21      	ldr	r3, [pc, #132]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	695b      	ldr	r3, [r3, #20]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00a      	beq.n	80106b6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 80106a0:	4b1e      	ldr	r3, [pc, #120]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	695b      	ldr	r3, [r3, #20]
 80106a6:	4a1d      	ldr	r2, [pc, #116]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 80106a8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 80106aa:	4b1c      	ldr	r3, [pc, #112]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f000 f92c 	bl	801090c <TimerSetTimeout>
 80106b4:	e023      	b.n	80106fe <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80106b6:	4b1a      	ldr	r3, [pc, #104]	; (8010720 <UTIL_TIMER_Stop+0xdc>)
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	4798      	blx	r3
            TimerListHead = NULL;
 80106bc:	4b17      	ldr	r3, [pc, #92]	; (801071c <UTIL_TIMER_Stop+0xd8>)
 80106be:	2200      	movs	r2, #0
 80106c0:	601a      	str	r2, [r3, #0]
 80106c2:	e01c      	b.n	80106fe <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80106c4:	697a      	ldr	r2, [r7, #20]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d110      	bne.n	80106ee <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	695b      	ldr	r3, [r3, #20]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d006      	beq.n	80106e2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	695b      	ldr	r3, [r3, #20]
 80106d8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	697a      	ldr	r2, [r7, #20]
 80106de:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80106e0:	e00d      	b.n	80106fe <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80106e2:	2300      	movs	r3, #0
 80106e4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80106e6:	69bb      	ldr	r3, [r7, #24]
 80106e8:	697a      	ldr	r2, [r7, #20]
 80106ea:	615a      	str	r2, [r3, #20]
            break;
 80106ec:	e007      	b.n	80106fe <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80106f8:	697b      	ldr	r3, [r7, #20]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d1e2      	bne.n	80106c4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	77fb      	strb	r3, [r7, #31]
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	f383 8810 	msr	PRIMASK, r3
}
 801070c:	e001      	b.n	8010712 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801070e:	2301      	movs	r3, #1
 8010710:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8010712:	7ffb      	ldrb	r3, [r7, #31]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3720      	adds	r7, #32
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}
 801071c:	20000f4c 	.word	0x20000f4c
 8010720:	08015640 	.word	0x08015640

08010724 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
 801072c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d102      	bne.n	801073e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8010738:	2301      	movs	r3, #1
 801073a:	73fb      	strb	r3, [r7, #15]
 801073c:	e014      	b.n	8010768 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801073e:	4b0d      	ldr	r3, [pc, #52]	; (8010774 <UTIL_TIMER_SetPeriod+0x50>)
 8010740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010742:	6838      	ldr	r0, [r7, #0]
 8010744:	4798      	blx	r3
 8010746:	4602      	mov	r2, r0
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 f8c1 	bl	80108d4 <TimerExists>
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d007      	beq.n	8010768 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8010758:	6878      	ldr	r0, [r7, #4]
 801075a:	f7ff ff73 	bl	8010644 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f7ff ff02 	bl	8010568 <UTIL_TIMER_Start>
 8010764:	4603      	mov	r3, r0
 8010766:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8010768:	7bfb      	ldrb	r3, [r7, #15]
}
 801076a:	4618      	mov	r0, r3
 801076c:	3710      	adds	r7, #16
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	08015640 	.word	0x08015640

08010778 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 8010778:	b590      	push	{r4, r7, lr}
 801077a:	b089      	sub	sp, #36	; 0x24
 801077c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801077e:	f3ef 8310 	mrs	r3, PRIMASK
 8010782:	60bb      	str	r3, [r7, #8]
  return(result);
 8010784:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8010786:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8010788:	b672      	cpsid	i
}
 801078a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801078c:	4b38      	ldr	r3, [pc, #224]	; (8010870 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801078e:	695b      	ldr	r3, [r3, #20]
 8010790:	4798      	blx	r3
 8010792:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010794:	4b36      	ldr	r3, [pc, #216]	; (8010870 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8010796:	691b      	ldr	r3, [r3, #16]
 8010798:	4798      	blx	r3
 801079a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801079c:	693a      	ldr	r2, [r7, #16]
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	1ad3      	subs	r3, r2, r3
 80107a2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 80107a4:	4b33      	ldr	r3, [pc, #204]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d037      	beq.n	801081c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 80107ac:	4b31      	ldr	r3, [pc, #196]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	429a      	cmp	r2, r3
 80107ba:	d206      	bcs.n	80107ca <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	681a      	ldr	r2, [r3, #0]
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	1ad2      	subs	r2, r2, r3
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	601a      	str	r2, [r3, #0]
 80107c8:	e002      	b.n	80107d0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	2200      	movs	r2, #0
 80107ce:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	695b      	ldr	r3, [r3, #20]
 80107d4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d1ea      	bne.n	80107b2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80107dc:	e01e      	b.n	801081c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 80107de:	4b25      	ldr	r3, [pc, #148]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 80107e4:	4b23      	ldr	r3, [pc, #140]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	695b      	ldr	r3, [r3, #20]
 80107ea:	4a22      	ldr	r2, [pc, #136]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107ec:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	2200      	movs	r2, #0
 80107f2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	2200      	movs	r2, #0
 80107f8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	69fa      	ldr	r2, [r7, #28]
 8010800:	6912      	ldr	r2, [r2, #16]
 8010802:	4610      	mov	r0, r2
 8010804:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8010806:	69fb      	ldr	r3, [r7, #28]
 8010808:	7adb      	ldrb	r3, [r3, #11]
 801080a:	2b01      	cmp	r3, #1
 801080c:	d106      	bne.n	801081c <UTIL_TIMER_IRQ_Handler+0xa4>
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	7a9b      	ldrb	r3, [r3, #10]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d102      	bne.n	801081c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 8010816:	69f8      	ldr	r0, [r7, #28]
 8010818:	f7ff fea6 	bl	8010568 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801081c:	4b15      	ldr	r3, [pc, #84]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d00d      	beq.n	8010840 <UTIL_TIMER_IRQ_Handler+0xc8>
 8010824:	4b13      	ldr	r3, [pc, #76]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d0d7      	beq.n	80107de <UTIL_TIMER_IRQ_Handler+0x66>
 801082e:	4b11      	ldr	r3, [pc, #68]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	681c      	ldr	r4, [r3, #0]
 8010834:	4b0e      	ldr	r3, [pc, #56]	; (8010870 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8010836:	699b      	ldr	r3, [r3, #24]
 8010838:	4798      	blx	r3
 801083a:	4603      	mov	r3, r0
 801083c:	429c      	cmp	r4, r3
 801083e:	d3ce      	bcc.n	80107de <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010840:	4b0c      	ldr	r3, [pc, #48]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d009      	beq.n	801085c <UTIL_TIMER_IRQ_Handler+0xe4>
 8010848:	4b0a      	ldr	r3, [pc, #40]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801084a:	681b      	ldr	r3, [r3, #0]
 801084c:	7a1b      	ldrb	r3, [r3, #8]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d104      	bne.n	801085c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8010852:	4b08      	ldr	r3, [pc, #32]	; (8010874 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	4618      	mov	r0, r3
 8010858:	f000 f858 	bl	801090c <TimerSetTimeout>
 801085c:	69bb      	ldr	r3, [r7, #24]
 801085e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f383 8810 	msr	PRIMASK, r3
}
 8010866:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8010868:	bf00      	nop
 801086a:	3724      	adds	r7, #36	; 0x24
 801086c:	46bd      	mov	sp, r7
 801086e:	bd90      	pop	{r4, r7, pc}
 8010870:	08015640 	.word	0x08015640
 8010874:	20000f4c 	.word	0x20000f4c

08010878 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801087e:	4b06      	ldr	r3, [pc, #24]	; (8010898 <UTIL_TIMER_GetCurrentTime+0x20>)
 8010880:	69db      	ldr	r3, [r3, #28]
 8010882:	4798      	blx	r3
 8010884:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8010886:	4b04      	ldr	r3, [pc, #16]	; (8010898 <UTIL_TIMER_GetCurrentTime+0x20>)
 8010888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	4798      	blx	r3
 801088e:	4603      	mov	r3, r0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	08015640 	.word	0x08015640

0801089c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80108a4:	4b0a      	ldr	r3, [pc, #40]	; (80108d0 <UTIL_TIMER_GetElapsedTime+0x34>)
 80108a6:	69db      	ldr	r3, [r3, #28]
 80108a8:	4798      	blx	r3
 80108aa:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80108ac:	4b08      	ldr	r3, [pc, #32]	; (80108d0 <UTIL_TIMER_GetElapsedTime+0x34>)
 80108ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	4798      	blx	r3
 80108b4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80108b6:	4b06      	ldr	r3, [pc, #24]	; (80108d0 <UTIL_TIMER_GetElapsedTime+0x34>)
 80108b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ba:	68f9      	ldr	r1, [r7, #12]
 80108bc:	68ba      	ldr	r2, [r7, #8]
 80108be:	1a8a      	subs	r2, r1, r2
 80108c0:	4610      	mov	r0, r2
 80108c2:	4798      	blx	r3
 80108c4:	4603      	mov	r3, r0
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3710      	adds	r7, #16
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}
 80108ce:	bf00      	nop
 80108d0:	08015640 	.word	0x08015640

080108d4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80108dc:	4b0a      	ldr	r3, [pc, #40]	; (8010908 <TimerExists+0x34>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80108e2:	e008      	b.n	80108f6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d101      	bne.n	80108f0 <TimerExists+0x1c>
    {
      return true;
 80108ec:	2301      	movs	r3, #1
 80108ee:	e006      	b.n	80108fe <TimerExists+0x2a>
    }
    cur = cur->Next;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	695b      	ldr	r3, [r3, #20]
 80108f4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d1f3      	bne.n	80108e4 <TimerExists+0x10>
  }
  return false;
 80108fc:	2300      	movs	r3, #0
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3714      	adds	r7, #20
 8010902:	46bd      	mov	sp, r7
 8010904:	bc80      	pop	{r7}
 8010906:	4770      	bx	lr
 8010908:	20000f4c 	.word	0x20000f4c

0801090c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801090c:	b590      	push	{r4, r7, lr}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010914:	4b11      	ldr	r3, [pc, #68]	; (801095c <TimerSetTimeout+0x50>)
 8010916:	6a1b      	ldr	r3, [r3, #32]
 8010918:	4798      	blx	r3
 801091a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2201      	movs	r2, #1
 8010920:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681c      	ldr	r4, [r3, #0]
 8010926:	4b0d      	ldr	r3, [pc, #52]	; (801095c <TimerSetTimeout+0x50>)
 8010928:	699b      	ldr	r3, [r3, #24]
 801092a:	4798      	blx	r3
 801092c:	4602      	mov	r2, r0
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	4413      	add	r3, r2
 8010932:	429c      	cmp	r4, r3
 8010934:	d207      	bcs.n	8010946 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8010936:	4b09      	ldr	r3, [pc, #36]	; (801095c <TimerSetTimeout+0x50>)
 8010938:	699b      	ldr	r3, [r3, #24]
 801093a:	4798      	blx	r3
 801093c:	4602      	mov	r2, r0
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	441a      	add	r2, r3
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8010946:	4b05      	ldr	r3, [pc, #20]	; (801095c <TimerSetTimeout+0x50>)
 8010948:	689b      	ldr	r3, [r3, #8]
 801094a:	687a      	ldr	r2, [r7, #4]
 801094c:	6812      	ldr	r2, [r2, #0]
 801094e:	4610      	mov	r0, r2
 8010950:	4798      	blx	r3
}
 8010952:	bf00      	nop
 8010954:	3714      	adds	r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	bd90      	pop	{r4, r7, pc}
 801095a:	bf00      	nop
 801095c:	08015640 	.word	0x08015640

08010960 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8010960:	b480      	push	{r7}
 8010962:	b085      	sub	sp, #20
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8010968:	4b14      	ldr	r3, [pc, #80]	; (80109bc <TimerInsertTimer+0x5c>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801096e:	4b13      	ldr	r3, [pc, #76]	; (80109bc <TimerInsertTimer+0x5c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	695b      	ldr	r3, [r3, #20]
 8010974:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8010976:	e012      	b.n	801099e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	429a      	cmp	r2, r3
 8010982:	d905      	bls.n	8010990 <TimerInsertTimer+0x30>
    {
        cur = next;
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	695b      	ldr	r3, [r3, #20]
 801098c:	60bb      	str	r3, [r7, #8]
 801098e:	e006      	b.n	801099e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	687a      	ldr	r2, [r7, #4]
 8010994:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	68ba      	ldr	r2, [r7, #8]
 801099a:	615a      	str	r2, [r3, #20]
        return;
 801099c:	e009      	b.n	80109b2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	695b      	ldr	r3, [r3, #20]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d1e8      	bne.n	8010978 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	687a      	ldr	r2, [r7, #4]
 80109aa:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2200      	movs	r2, #0
 80109b0:	615a      	str	r2, [r3, #20]
}
 80109b2:	3714      	adds	r7, #20
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bc80      	pop	{r7}
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop
 80109bc:	20000f4c 	.word	0x20000f4c

080109c0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80109c8:	4b0b      	ldr	r3, [pc, #44]	; (80109f8 <TimerInsertNewHeadTimer+0x38>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d002      	beq.n	80109da <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2200      	movs	r2, #0
 80109d8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	68fa      	ldr	r2, [r7, #12]
 80109de:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80109e0:	4a05      	ldr	r2, [pc, #20]	; (80109f8 <TimerInsertNewHeadTimer+0x38>)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80109e6:	4b04      	ldr	r3, [pc, #16]	; (80109f8 <TimerInsertNewHeadTimer+0x38>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7ff ff8e 	bl	801090c <TimerSetTimeout>
}
 80109f0:	bf00      	nop
 80109f2:	3710      	adds	r7, #16
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	20000f4c 	.word	0x20000f4c

080109fc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b085      	sub	sp, #20
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  int i = 0;
 8010a04:	2300      	movs	r3, #0
 8010a06:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8010a08:	e00e      	b.n	8010a28 <ee_skip_atoi+0x2c>
 8010a0a:	68fa      	ldr	r2, [r7, #12]
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	4618      	mov	r0, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	1c59      	adds	r1, r3, #1
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	6011      	str	r1, [r2, #0]
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	4403      	add	r3, r0
 8010a24:	3b30      	subs	r3, #48	; 0x30
 8010a26:	60fb      	str	r3, [r7, #12]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	781b      	ldrb	r3, [r3, #0]
 8010a2e:	2b2f      	cmp	r3, #47	; 0x2f
 8010a30:	d904      	bls.n	8010a3c <ee_skip_atoi+0x40>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	2b39      	cmp	r3, #57	; 0x39
 8010a3a:	d9e6      	bls.n	8010a0a <ee_skip_atoi+0xe>
  return i;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3714      	adds	r7, #20
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bc80      	pop	{r7}
 8010a46:	4770      	bx	lr

08010a48 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b099      	sub	sp, #100	; 0x64
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8010a56:	4b71      	ldr	r3, [pc, #452]	; (8010c1c <ee_number+0x1d4>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8010a5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d002      	beq.n	8010a6c <ee_number+0x24>
 8010a66:	4b6e      	ldr	r3, [pc, #440]	; (8010c20 <ee_number+0x1d8>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8010a6c:	683b      	ldr	r3, [r7, #0]
 8010a6e:	2b01      	cmp	r3, #1
 8010a70:	dd02      	ble.n	8010a78 <ee_number+0x30>
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	2b24      	cmp	r3, #36	; 0x24
 8010a76:	dd01      	ble.n	8010a7c <ee_number+0x34>
 8010a78:	2300      	movs	r3, #0
 8010a7a:	e0ca      	b.n	8010c12 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 8010a7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a7e:	f003 0301 	and.w	r3, r3, #1
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d001      	beq.n	8010a8a <ee_number+0x42>
 8010a86:	2330      	movs	r3, #48	; 0x30
 8010a88:	e000      	b.n	8010a8c <ee_number+0x44>
 8010a8a:	2320      	movs	r3, #32
 8010a8c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8010a90:	2300      	movs	r3, #0
 8010a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8010a96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a98:	f003 0302 	and.w	r3, r3, #2
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d00b      	beq.n	8010ab8 <ee_number+0x70>
  {
    if (num < 0)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	da08      	bge.n	8010ab8 <ee_number+0x70>
    {
      sign = '-';
 8010aa6:	232d      	movs	r3, #45	; 0x2d
 8010aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	425b      	negs	r3, r3
 8010ab0:	607b      	str	r3, [r7, #4]
      size--;
 8010ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ab4:	3b01      	subs	r3, #1
 8010ab6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d11e      	bne.n	8010b00 <ee_number+0xb8>
    tmp[i++] = '0';
 8010ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ac4:	1c5a      	adds	r2, r3, #1
 8010ac6:	657a      	str	r2, [r7, #84]	; 0x54
 8010ac8:	3360      	adds	r3, #96	; 0x60
 8010aca:	443b      	add	r3, r7
 8010acc:	2230      	movs	r2, #48	; 0x30
 8010ace:	f803 2c50 	strb.w	r2, [r3, #-80]
 8010ad2:	e018      	b.n	8010b06 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	683a      	ldr	r2, [r7, #0]
 8010ad8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010adc:	fb01 f202 	mul.w	r2, r1, r2
 8010ae0:	1a9b      	subs	r3, r3, r2
 8010ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ae4:	441a      	add	r2, r3
 8010ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae8:	1c59      	adds	r1, r3, #1
 8010aea:	6579      	str	r1, [r7, #84]	; 0x54
 8010aec:	7812      	ldrb	r2, [r2, #0]
 8010aee:	3360      	adds	r3, #96	; 0x60
 8010af0:	443b      	add	r3, r7
 8010af2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8010afe:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d1e6      	bne.n	8010ad4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 8010b06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	dd01      	ble.n	8010b12 <ee_number+0xca>
 8010b0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b10:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8010b12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d112      	bne.n	8010b4a <ee_number+0x102>
 8010b24:	e00c      	b.n	8010b40 <ee_number+0xf8>
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	60fa      	str	r2, [r7, #12]
 8010b2c:	2220      	movs	r2, #32
 8010b2e:	701a      	strb	r2, [r3, #0]
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	3b01      	subs	r3, #1
 8010b34:	60bb      	str	r3, [r7, #8]
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d101      	bne.n	8010b40 <ee_number+0xf8>
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	e068      	b.n	8010c12 <ee_number+0x1ca>
 8010b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b42:	1e5a      	subs	r2, r3, #1
 8010b44:	66ba      	str	r2, [r7, #104]	; 0x68
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	dced      	bgt.n	8010b26 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 8010b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d01b      	beq.n	8010b8a <ee_number+0x142>
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	60fa      	str	r2, [r7, #12]
 8010b58:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8010b5c:	701a      	strb	r2, [r3, #0]
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	3b01      	subs	r3, #1
 8010b62:	60bb      	str	r3, [r7, #8]
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d10f      	bne.n	8010b8a <ee_number+0x142>
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	e051      	b.n	8010c12 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	1c5a      	adds	r2, r3, #1
 8010b72:	60fa      	str	r2, [r7, #12]
 8010b74:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8010b78:	701a      	strb	r2, [r3, #0]
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	60bb      	str	r3, [r7, #8]
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d101      	bne.n	8010b8a <ee_number+0x142>
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	e043      	b.n	8010c12 <ee_number+0x1ca>
 8010b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b8c:	1e5a      	subs	r2, r3, #1
 8010b8e:	66ba      	str	r2, [r7, #104]	; 0x68
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	dcec      	bgt.n	8010b6e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8010b94:	e00c      	b.n	8010bb0 <ee_number+0x168>
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	1c5a      	adds	r2, r3, #1
 8010b9a:	60fa      	str	r2, [r7, #12]
 8010b9c:	2230      	movs	r2, #48	; 0x30
 8010b9e:	701a      	strb	r2, [r3, #0]
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	3b01      	subs	r3, #1
 8010ba4:	60bb      	str	r3, [r7, #8]
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d101      	bne.n	8010bb0 <ee_number+0x168>
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	e030      	b.n	8010c12 <ee_number+0x1ca>
 8010bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010bb2:	1e5a      	subs	r2, r3, #1
 8010bb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010bb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	dbec      	blt.n	8010b96 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010bbc:	e010      	b.n	8010be0 <ee_number+0x198>
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	1c5a      	adds	r2, r3, #1
 8010bc2:	60fa      	str	r2, [r7, #12]
 8010bc4:	f107 0110 	add.w	r1, r7, #16
 8010bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bca:	440a      	add	r2, r1
 8010bcc:	7812      	ldrb	r2, [r2, #0]
 8010bce:	701a      	strb	r2, [r3, #0]
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	3b01      	subs	r3, #1
 8010bd4:	60bb      	str	r3, [r7, #8]
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d101      	bne.n	8010be0 <ee_number+0x198>
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	e018      	b.n	8010c12 <ee_number+0x1ca>
 8010be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010be2:	1e5a      	subs	r2, r3, #1
 8010be4:	657a      	str	r2, [r7, #84]	; 0x54
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	dce9      	bgt.n	8010bbe <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 8010bea:	e00c      	b.n	8010c06 <ee_number+0x1be>
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	1c5a      	adds	r2, r3, #1
 8010bf0:	60fa      	str	r2, [r7, #12]
 8010bf2:	2220      	movs	r2, #32
 8010bf4:	701a      	strb	r2, [r3, #0]
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	3b01      	subs	r3, #1
 8010bfa:	60bb      	str	r3, [r7, #8]
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <ee_number+0x1be>
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	e005      	b.n	8010c12 <ee_number+0x1ca>
 8010c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010c08:	1e5a      	subs	r2, r3, #1
 8010c0a:	66ba      	str	r2, [r7, #104]	; 0x68
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	dced      	bgt.n	8010bec <ee_number+0x1a4>

  return str;
 8010c10:	68fb      	ldr	r3, [r7, #12]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3764      	adds	r7, #100	; 0x64
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bc80      	pop	{r7}
 8010c1a:	4770      	bx	lr
 8010c1c:	20000054 	.word	0x20000054
 8010c20:	20000058 	.word	0x20000058

08010c24 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b092      	sub	sp, #72	; 0x48
 8010c28:	af04      	add	r7, sp, #16
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	60b9      	str	r1, [r7, #8]
 8010c2e:	607a      	str	r2, [r7, #4]
 8010c30:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	dc01      	bgt.n	8010c3c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8010c38:	2300      	movs	r3, #0
 8010c3a:	e142      	b.n	8010ec2 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c40:	e12a      	b.n	8010e98 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8010c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	1ad2      	subs	r2, r2, r3
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	3b01      	subs	r3, #1
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	f280 8131 	bge.w	8010eb4 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	2b25      	cmp	r3, #37	; 0x25
 8010c58:	d006      	beq.n	8010c68 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5e:	1c59      	adds	r1, r3, #1
 8010c60:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010c62:	7812      	ldrb	r2, [r2, #0]
 8010c64:	701a      	strb	r2, [r3, #0]
      continue;
 8010c66:	e114      	b.n	8010e92 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 8010c68:	2300      	movs	r3, #0
 8010c6a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	3301      	adds	r3, #1
 8010c70:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	2b30      	cmp	r3, #48	; 0x30
 8010c78:	d103      	bne.n	8010c82 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8010c7a:	6a3b      	ldr	r3, [r7, #32]
 8010c7c:	f043 0301 	orr.w	r3, r3, #1
 8010c80:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 8010c82:	f04f 33ff 	mov.w	r3, #4294967295
 8010c86:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	2b2f      	cmp	r3, #47	; 0x2f
 8010c8e:	d908      	bls.n	8010ca2 <tiny_vsnprintf_like+0x7e>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	2b39      	cmp	r3, #57	; 0x39
 8010c96:	d804      	bhi.n	8010ca2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8010c98:	1d3b      	adds	r3, r7, #4
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7ff feae 	bl	80109fc <ee_skip_atoi>
 8010ca0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 8010ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ca6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 8010ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8010cac:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 8010cae:	230a      	movs	r3, #10
 8010cb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	3b58      	subs	r3, #88	; 0x58
 8010cb8:	2b20      	cmp	r3, #32
 8010cba:	f200 8094 	bhi.w	8010de6 <tiny_vsnprintf_like+0x1c2>
 8010cbe:	a201      	add	r2, pc, #4	; (adr r2, 8010cc4 <tiny_vsnprintf_like+0xa0>)
 8010cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc4:	08010dcf 	.word	0x08010dcf
 8010cc8:	08010de7 	.word	0x08010de7
 8010ccc:	08010de7 	.word	0x08010de7
 8010cd0:	08010de7 	.word	0x08010de7
 8010cd4:	08010de7 	.word	0x08010de7
 8010cd8:	08010de7 	.word	0x08010de7
 8010cdc:	08010de7 	.word	0x08010de7
 8010ce0:	08010de7 	.word	0x08010de7
 8010ce4:	08010de7 	.word	0x08010de7
 8010ce8:	08010de7 	.word	0x08010de7
 8010cec:	08010de7 	.word	0x08010de7
 8010cf0:	08010d53 	.word	0x08010d53
 8010cf4:	08010ddd 	.word	0x08010ddd
 8010cf8:	08010de7 	.word	0x08010de7
 8010cfc:	08010de7 	.word	0x08010de7
 8010d00:	08010de7 	.word	0x08010de7
 8010d04:	08010de7 	.word	0x08010de7
 8010d08:	08010ddd 	.word	0x08010ddd
 8010d0c:	08010de7 	.word	0x08010de7
 8010d10:	08010de7 	.word	0x08010de7
 8010d14:	08010de7 	.word	0x08010de7
 8010d18:	08010de7 	.word	0x08010de7
 8010d1c:	08010de7 	.word	0x08010de7
 8010d20:	08010de7 	.word	0x08010de7
 8010d24:	08010de7 	.word	0x08010de7
 8010d28:	08010de7 	.word	0x08010de7
 8010d2c:	08010de7 	.word	0x08010de7
 8010d30:	08010d73 	.word	0x08010d73
 8010d34:	08010de7 	.word	0x08010de7
 8010d38:	08010e33 	.word	0x08010e33
 8010d3c:	08010de7 	.word	0x08010de7
 8010d40:	08010de7 	.word	0x08010de7
 8010d44:	08010dd7 	.word	0x08010dd7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8010d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4a:	1c5a      	adds	r2, r3, #1
 8010d4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d4e:	2220      	movs	r2, #32
 8010d50:	701a      	strb	r2, [r3, #0]
 8010d52:	69fb      	ldr	r3, [r7, #28]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	61fb      	str	r3, [r7, #28]
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	dcf4      	bgt.n	8010d48 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	1d1a      	adds	r2, r3, #4
 8010d62:	603a      	str	r2, [r7, #0]
 8010d64:	6819      	ldr	r1, [r3, #0]
 8010d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d68:	1c5a      	adds	r2, r3, #1
 8010d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d6c:	b2ca      	uxtb	r2, r1
 8010d6e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8010d70:	e08f      	b.n	8010e92 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	1d1a      	adds	r2, r3, #4
 8010d76:	603a      	str	r2, [r7, #0]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8010d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d101      	bne.n	8010d86 <tiny_vsnprintf_like+0x162>
 8010d82:	4b52      	ldr	r3, [pc, #328]	; (8010ecc <tiny_vsnprintf_like+0x2a8>)
 8010d84:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8010d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d88:	f7ef f9fa 	bl	8000180 <strlen>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8010d90:	e004      	b.n	8010d9c <tiny_vsnprintf_like+0x178>
 8010d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d94:	1c5a      	adds	r2, r3, #1
 8010d96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d98:	2220      	movs	r2, #32
 8010d9a:	701a      	strb	r2, [r3, #0]
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	1e5a      	subs	r2, r3, #1
 8010da0:	61fa      	str	r2, [r7, #28]
 8010da2:	693a      	ldr	r2, [r7, #16]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	dbf4      	blt.n	8010d92 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8010da8:	2300      	movs	r3, #0
 8010daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dac:	e00a      	b.n	8010dc4 <tiny_vsnprintf_like+0x1a0>
 8010dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010db0:	1c53      	adds	r3, r2, #1
 8010db2:	627b      	str	r3, [r7, #36]	; 0x24
 8010db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db6:	1c59      	adds	r1, r3, #1
 8010db8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010dba:	7812      	ldrb	r2, [r2, #0]
 8010dbc:	701a      	strb	r2, [r3, #0]
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	dbf0      	blt.n	8010dae <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8010dcc:	e061      	b.n	8010e92 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8010dce:	6a3b      	ldr	r3, [r7, #32]
 8010dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dd4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8010dd6:	2310      	movs	r3, #16
 8010dd8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8010dda:	e02d      	b.n	8010e38 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8010ddc:	6a3b      	ldr	r3, [r7, #32]
 8010dde:	f043 0302 	orr.w	r3, r3, #2
 8010de2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8010de4:	e025      	b.n	8010e32 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	2b25      	cmp	r3, #37	; 0x25
 8010dec:	d004      	beq.n	8010df8 <tiny_vsnprintf_like+0x1d4>
 8010dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df0:	1c5a      	adds	r2, r3, #1
 8010df2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010df4:	2225      	movs	r2, #37	; 0x25
 8010df6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8010df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	1ad2      	subs	r2, r2, r3
 8010dfe:	68bb      	ldr	r3, [r7, #8]
 8010e00:	3b01      	subs	r3, #1
 8010e02:	429a      	cmp	r2, r3
 8010e04:	da17      	bge.n	8010e36 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d006      	beq.n	8010e1c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8010e0e:	687a      	ldr	r2, [r7, #4]
 8010e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e12:	1c59      	adds	r1, r3, #1
 8010e14:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010e16:	7812      	ldrb	r2, [r2, #0]
 8010e18:	701a      	strb	r2, [r3, #0]
 8010e1a:	e002      	b.n	8010e22 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8010e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	1ad2      	subs	r2, r2, r3
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	db2f      	blt.n	8010e90 <tiny_vsnprintf_like+0x26c>
 8010e30:	e002      	b.n	8010e38 <tiny_vsnprintf_like+0x214>
        break;
 8010e32:	bf00      	nop
 8010e34:	e000      	b.n	8010e38 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8010e36:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	2b6c      	cmp	r3, #108	; 0x6c
 8010e3c:	d105      	bne.n	8010e4a <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	1d1a      	adds	r2, r3, #4
 8010e42:	603a      	str	r2, [r7, #0]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	637b      	str	r3, [r7, #52]	; 0x34
 8010e48:	e00f      	b.n	8010e6a <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8010e4a:	6a3b      	ldr	r3, [r7, #32]
 8010e4c:	f003 0302 	and.w	r3, r3, #2
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d005      	beq.n	8010e60 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	1d1a      	adds	r2, r3, #4
 8010e58:	603a      	str	r2, [r7, #0]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e5e:	e004      	b.n	8010e6a <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	1d1a      	adds	r2, r3, #4
 8010e64:	603a      	str	r2, [r7, #0]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010e6a:	68bb      	ldr	r3, [r7, #8]
 8010e6c:	1e5a      	subs	r2, r3, #1
 8010e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	1acb      	subs	r3, r1, r3
 8010e74:	1ad1      	subs	r1, r2, r3
 8010e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e78:	6a3b      	ldr	r3, [r7, #32]
 8010e7a:	9302      	str	r3, [sp, #8]
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	9301      	str	r3, [sp, #4]
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	9300      	str	r3, [sp, #0]
 8010e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e88:	f7ff fdde 	bl	8010a48 <ee_number>
 8010e8c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010e8e:	e000      	b.n	8010e92 <tiny_vsnprintf_like+0x26e>
        continue;
 8010e90:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	3301      	adds	r3, #1
 8010e96:	607b      	str	r3, [r7, #4]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f47f aed0 	bne.w	8010c42 <tiny_vsnprintf_like+0x1e>
 8010ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	1ad2      	subs	r2, r2, r3
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	429a      	cmp	r2, r3
 8010eae:	f6bf aec8 	bge.w	8010c42 <tiny_vsnprintf_like+0x1e>
 8010eb2:	e000      	b.n	8010eb6 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8010eb4:	bf00      	nop
  }

  *str = '\0';
 8010eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eb8:	2200      	movs	r2, #0
 8010eba:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8010ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	1ad3      	subs	r3, r2, r3
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3738      	adds	r7, #56	; 0x38
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}
 8010eca:	bf00      	nop
 8010ecc:	08015620 	.word	0x08015620

08010ed0 <__errno>:
 8010ed0:	4b01      	ldr	r3, [pc, #4]	; (8010ed8 <__errno+0x8>)
 8010ed2:	6818      	ldr	r0, [r3, #0]
 8010ed4:	4770      	bx	lr
 8010ed6:	bf00      	nop
 8010ed8:	2000005c 	.word	0x2000005c

08010edc <__libc_init_array>:
 8010edc:	b570      	push	{r4, r5, r6, lr}
 8010ede:	4d0d      	ldr	r5, [pc, #52]	; (8010f14 <__libc_init_array+0x38>)
 8010ee0:	4c0d      	ldr	r4, [pc, #52]	; (8010f18 <__libc_init_array+0x3c>)
 8010ee2:	1b64      	subs	r4, r4, r5
 8010ee4:	10a4      	asrs	r4, r4, #2
 8010ee6:	2600      	movs	r6, #0
 8010ee8:	42a6      	cmp	r6, r4
 8010eea:	d109      	bne.n	8010f00 <__libc_init_array+0x24>
 8010eec:	4d0b      	ldr	r5, [pc, #44]	; (8010f1c <__libc_init_array+0x40>)
 8010eee:	4c0c      	ldr	r4, [pc, #48]	; (8010f20 <__libc_init_array+0x44>)
 8010ef0:	f003 fe98 	bl	8014c24 <_init>
 8010ef4:	1b64      	subs	r4, r4, r5
 8010ef6:	10a4      	asrs	r4, r4, #2
 8010ef8:	2600      	movs	r6, #0
 8010efa:	42a6      	cmp	r6, r4
 8010efc:	d105      	bne.n	8010f0a <__libc_init_array+0x2e>
 8010efe:	bd70      	pop	{r4, r5, r6, pc}
 8010f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f04:	4798      	blx	r3
 8010f06:	3601      	adds	r6, #1
 8010f08:	e7ee      	b.n	8010ee8 <__libc_init_array+0xc>
 8010f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f0e:	4798      	blx	r3
 8010f10:	3601      	adds	r6, #1
 8010f12:	e7f2      	b.n	8010efa <__libc_init_array+0x1e>
 8010f14:	08015cc0 	.word	0x08015cc0
 8010f18:	08015cc0 	.word	0x08015cc0
 8010f1c:	08015cc0 	.word	0x08015cc0
 8010f20:	08015cc4 	.word	0x08015cc4

08010f24 <memcpy>:
 8010f24:	440a      	add	r2, r1
 8010f26:	4291      	cmp	r1, r2
 8010f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f2c:	d100      	bne.n	8010f30 <memcpy+0xc>
 8010f2e:	4770      	bx	lr
 8010f30:	b510      	push	{r4, lr}
 8010f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f3a:	4291      	cmp	r1, r2
 8010f3c:	d1f9      	bne.n	8010f32 <memcpy+0xe>
 8010f3e:	bd10      	pop	{r4, pc}

08010f40 <memset>:
 8010f40:	4402      	add	r2, r0
 8010f42:	4603      	mov	r3, r0
 8010f44:	4293      	cmp	r3, r2
 8010f46:	d100      	bne.n	8010f4a <memset+0xa>
 8010f48:	4770      	bx	lr
 8010f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8010f4e:	e7f9      	b.n	8010f44 <memset+0x4>

08010f50 <__cvt>:
 8010f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f54:	b088      	sub	sp, #32
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	461f      	mov	r7, r3
 8010f5a:	4614      	mov	r4, r2
 8010f5c:	bfb8      	it	lt
 8010f5e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010f62:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f64:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010f66:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8010f6a:	bfb6      	itet	lt
 8010f6c:	461f      	movlt	r7, r3
 8010f6e:	2300      	movge	r3, #0
 8010f70:	232d      	movlt	r3, #45	; 0x2d
 8010f72:	7013      	strb	r3, [r2, #0]
 8010f74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f76:	f023 0820 	bic.w	r8, r3, #32
 8010f7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010f7e:	d005      	beq.n	8010f8c <__cvt+0x3c>
 8010f80:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010f84:	d100      	bne.n	8010f88 <__cvt+0x38>
 8010f86:	3501      	adds	r5, #1
 8010f88:	2302      	movs	r3, #2
 8010f8a:	e000      	b.n	8010f8e <__cvt+0x3e>
 8010f8c:	2303      	movs	r3, #3
 8010f8e:	aa07      	add	r2, sp, #28
 8010f90:	9204      	str	r2, [sp, #16]
 8010f92:	aa06      	add	r2, sp, #24
 8010f94:	e9cd a202 	strd	sl, r2, [sp, #8]
 8010f98:	e9cd 3500 	strd	r3, r5, [sp]
 8010f9c:	4622      	mov	r2, r4
 8010f9e:	463b      	mov	r3, r7
 8010fa0:	f000 fdae 	bl	8011b00 <_dtoa_r>
 8010fa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010fa8:	4606      	mov	r6, r0
 8010faa:	d102      	bne.n	8010fb2 <__cvt+0x62>
 8010fac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010fae:	07db      	lsls	r3, r3, #31
 8010fb0:	d522      	bpl.n	8010ff8 <__cvt+0xa8>
 8010fb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010fb6:	eb06 0905 	add.w	r9, r6, r5
 8010fba:	d110      	bne.n	8010fde <__cvt+0x8e>
 8010fbc:	7833      	ldrb	r3, [r6, #0]
 8010fbe:	2b30      	cmp	r3, #48	; 0x30
 8010fc0:	d10a      	bne.n	8010fd8 <__cvt+0x88>
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	4639      	mov	r1, r7
 8010fca:	f7ef fd55 	bl	8000a78 <__aeabi_dcmpeq>
 8010fce:	b918      	cbnz	r0, 8010fd8 <__cvt+0x88>
 8010fd0:	f1c5 0501 	rsb	r5, r5, #1
 8010fd4:	f8ca 5000 	str.w	r5, [sl]
 8010fd8:	f8da 3000 	ldr.w	r3, [sl]
 8010fdc:	4499      	add	r9, r3
 8010fde:	2200      	movs	r2, #0
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	4639      	mov	r1, r7
 8010fe6:	f7ef fd47 	bl	8000a78 <__aeabi_dcmpeq>
 8010fea:	b108      	cbz	r0, 8010ff0 <__cvt+0xa0>
 8010fec:	f8cd 901c 	str.w	r9, [sp, #28]
 8010ff0:	2230      	movs	r2, #48	; 0x30
 8010ff2:	9b07      	ldr	r3, [sp, #28]
 8010ff4:	454b      	cmp	r3, r9
 8010ff6:	d307      	bcc.n	8011008 <__cvt+0xb8>
 8010ff8:	9b07      	ldr	r3, [sp, #28]
 8010ffa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010ffc:	1b9b      	subs	r3, r3, r6
 8010ffe:	4630      	mov	r0, r6
 8011000:	6013      	str	r3, [r2, #0]
 8011002:	b008      	add	sp, #32
 8011004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011008:	1c59      	adds	r1, r3, #1
 801100a:	9107      	str	r1, [sp, #28]
 801100c:	701a      	strb	r2, [r3, #0]
 801100e:	e7f0      	b.n	8010ff2 <__cvt+0xa2>

08011010 <__exponent>:
 8011010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011012:	4603      	mov	r3, r0
 8011014:	2900      	cmp	r1, #0
 8011016:	bfb8      	it	lt
 8011018:	4249      	neglt	r1, r1
 801101a:	f803 2b02 	strb.w	r2, [r3], #2
 801101e:	bfb4      	ite	lt
 8011020:	222d      	movlt	r2, #45	; 0x2d
 8011022:	222b      	movge	r2, #43	; 0x2b
 8011024:	2909      	cmp	r1, #9
 8011026:	7042      	strb	r2, [r0, #1]
 8011028:	dd2a      	ble.n	8011080 <__exponent+0x70>
 801102a:	f10d 0407 	add.w	r4, sp, #7
 801102e:	46a4      	mov	ip, r4
 8011030:	270a      	movs	r7, #10
 8011032:	46a6      	mov	lr, r4
 8011034:	460a      	mov	r2, r1
 8011036:	fb91 f6f7 	sdiv	r6, r1, r7
 801103a:	fb07 1516 	mls	r5, r7, r6, r1
 801103e:	3530      	adds	r5, #48	; 0x30
 8011040:	2a63      	cmp	r2, #99	; 0x63
 8011042:	f104 34ff 	add.w	r4, r4, #4294967295
 8011046:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801104a:	4631      	mov	r1, r6
 801104c:	dcf1      	bgt.n	8011032 <__exponent+0x22>
 801104e:	3130      	adds	r1, #48	; 0x30
 8011050:	f1ae 0502 	sub.w	r5, lr, #2
 8011054:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011058:	1c44      	adds	r4, r0, #1
 801105a:	4629      	mov	r1, r5
 801105c:	4561      	cmp	r1, ip
 801105e:	d30a      	bcc.n	8011076 <__exponent+0x66>
 8011060:	f10d 0209 	add.w	r2, sp, #9
 8011064:	eba2 020e 	sub.w	r2, r2, lr
 8011068:	4565      	cmp	r5, ip
 801106a:	bf88      	it	hi
 801106c:	2200      	movhi	r2, #0
 801106e:	4413      	add	r3, r2
 8011070:	1a18      	subs	r0, r3, r0
 8011072:	b003      	add	sp, #12
 8011074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011076:	f811 2b01 	ldrb.w	r2, [r1], #1
 801107a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801107e:	e7ed      	b.n	801105c <__exponent+0x4c>
 8011080:	2330      	movs	r3, #48	; 0x30
 8011082:	3130      	adds	r1, #48	; 0x30
 8011084:	7083      	strb	r3, [r0, #2]
 8011086:	70c1      	strb	r1, [r0, #3]
 8011088:	1d03      	adds	r3, r0, #4
 801108a:	e7f1      	b.n	8011070 <__exponent+0x60>

0801108c <_printf_float>:
 801108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011090:	b091      	sub	sp, #68	; 0x44
 8011092:	460c      	mov	r4, r1
 8011094:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8011098:	4616      	mov	r6, r2
 801109a:	461f      	mov	r7, r3
 801109c:	4605      	mov	r5, r0
 801109e:	f001 fb1d 	bl	80126dc <_localeconv_r>
 80110a2:	6803      	ldr	r3, [r0, #0]
 80110a4:	9309      	str	r3, [sp, #36]	; 0x24
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ef f86a 	bl	8000180 <strlen>
 80110ac:	2300      	movs	r3, #0
 80110ae:	930e      	str	r3, [sp, #56]	; 0x38
 80110b0:	f8d8 3000 	ldr.w	r3, [r8]
 80110b4:	900a      	str	r0, [sp, #40]	; 0x28
 80110b6:	3307      	adds	r3, #7
 80110b8:	f023 0307 	bic.w	r3, r3, #7
 80110bc:	f103 0208 	add.w	r2, r3, #8
 80110c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80110c4:	f8d4 b000 	ldr.w	fp, [r4]
 80110c8:	f8c8 2000 	str.w	r2, [r8]
 80110cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80110d4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80110d8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80110dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80110de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80110e0:	4b9c      	ldr	r3, [pc, #624]	; (8011354 <_printf_float+0x2c8>)
 80110e2:	f04f 32ff 	mov.w	r2, #4294967295
 80110e6:	4640      	mov	r0, r8
 80110e8:	f7ef fcf8 	bl	8000adc <__aeabi_dcmpun>
 80110ec:	bb70      	cbnz	r0, 801114c <_printf_float+0xc0>
 80110ee:	4b99      	ldr	r3, [pc, #612]	; (8011354 <_printf_float+0x2c8>)
 80110f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80110f2:	f04f 32ff 	mov.w	r2, #4294967295
 80110f6:	4640      	mov	r0, r8
 80110f8:	f7ef fcd2 	bl	8000aa0 <__aeabi_dcmple>
 80110fc:	bb30      	cbnz	r0, 801114c <_printf_float+0xc0>
 80110fe:	2200      	movs	r2, #0
 8011100:	2300      	movs	r3, #0
 8011102:	4640      	mov	r0, r8
 8011104:	4651      	mov	r1, sl
 8011106:	f7ef fcc1 	bl	8000a8c <__aeabi_dcmplt>
 801110a:	b110      	cbz	r0, 8011112 <_printf_float+0x86>
 801110c:	232d      	movs	r3, #45	; 0x2d
 801110e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011112:	4b91      	ldr	r3, [pc, #580]	; (8011358 <_printf_float+0x2cc>)
 8011114:	4891      	ldr	r0, [pc, #580]	; (801135c <_printf_float+0x2d0>)
 8011116:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801111a:	bf94      	ite	ls
 801111c:	4698      	movls	r8, r3
 801111e:	4680      	movhi	r8, r0
 8011120:	2303      	movs	r3, #3
 8011122:	6123      	str	r3, [r4, #16]
 8011124:	f02b 0304 	bic.w	r3, fp, #4
 8011128:	6023      	str	r3, [r4, #0]
 801112a:	f04f 0a00 	mov.w	sl, #0
 801112e:	9700      	str	r7, [sp, #0]
 8011130:	4633      	mov	r3, r6
 8011132:	aa0f      	add	r2, sp, #60	; 0x3c
 8011134:	4621      	mov	r1, r4
 8011136:	4628      	mov	r0, r5
 8011138:	f000 f9d2 	bl	80114e0 <_printf_common>
 801113c:	3001      	adds	r0, #1
 801113e:	f040 808f 	bne.w	8011260 <_printf_float+0x1d4>
 8011142:	f04f 30ff 	mov.w	r0, #4294967295
 8011146:	b011      	add	sp, #68	; 0x44
 8011148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801114c:	4642      	mov	r2, r8
 801114e:	4653      	mov	r3, sl
 8011150:	4640      	mov	r0, r8
 8011152:	4651      	mov	r1, sl
 8011154:	f7ef fcc2 	bl	8000adc <__aeabi_dcmpun>
 8011158:	b140      	cbz	r0, 801116c <_printf_float+0xe0>
 801115a:	f1ba 0f00 	cmp.w	sl, #0
 801115e:	bfbc      	itt	lt
 8011160:	232d      	movlt	r3, #45	; 0x2d
 8011162:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011166:	487e      	ldr	r0, [pc, #504]	; (8011360 <_printf_float+0x2d4>)
 8011168:	4b7e      	ldr	r3, [pc, #504]	; (8011364 <_printf_float+0x2d8>)
 801116a:	e7d4      	b.n	8011116 <_printf_float+0x8a>
 801116c:	6863      	ldr	r3, [r4, #4]
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011174:	d142      	bne.n	80111fc <_printf_float+0x170>
 8011176:	2306      	movs	r3, #6
 8011178:	6063      	str	r3, [r4, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	9206      	str	r2, [sp, #24]
 801117e:	aa0e      	add	r2, sp, #56	; 0x38
 8011180:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011184:	aa0d      	add	r2, sp, #52	; 0x34
 8011186:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 801118a:	9203      	str	r2, [sp, #12]
 801118c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011190:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	6863      	ldr	r3, [r4, #4]
 8011198:	9300      	str	r3, [sp, #0]
 801119a:	4642      	mov	r2, r8
 801119c:	4653      	mov	r3, sl
 801119e:	4628      	mov	r0, r5
 80111a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80111a2:	f7ff fed5 	bl	8010f50 <__cvt>
 80111a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80111a8:	2947      	cmp	r1, #71	; 0x47
 80111aa:	4680      	mov	r8, r0
 80111ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80111ae:	d108      	bne.n	80111c2 <_printf_float+0x136>
 80111b0:	1cc8      	adds	r0, r1, #3
 80111b2:	db02      	blt.n	80111ba <_printf_float+0x12e>
 80111b4:	6863      	ldr	r3, [r4, #4]
 80111b6:	4299      	cmp	r1, r3
 80111b8:	dd40      	ble.n	801123c <_printf_float+0x1b0>
 80111ba:	f1a9 0902 	sub.w	r9, r9, #2
 80111be:	fa5f f989 	uxtb.w	r9, r9
 80111c2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80111c6:	d81f      	bhi.n	8011208 <_printf_float+0x17c>
 80111c8:	3901      	subs	r1, #1
 80111ca:	464a      	mov	r2, r9
 80111cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80111d0:	910d      	str	r1, [sp, #52]	; 0x34
 80111d2:	f7ff ff1d 	bl	8011010 <__exponent>
 80111d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111d8:	1813      	adds	r3, r2, r0
 80111da:	2a01      	cmp	r2, #1
 80111dc:	4682      	mov	sl, r0
 80111de:	6123      	str	r3, [r4, #16]
 80111e0:	dc02      	bgt.n	80111e8 <_printf_float+0x15c>
 80111e2:	6822      	ldr	r2, [r4, #0]
 80111e4:	07d2      	lsls	r2, r2, #31
 80111e6:	d501      	bpl.n	80111ec <_printf_float+0x160>
 80111e8:	3301      	adds	r3, #1
 80111ea:	6123      	str	r3, [r4, #16]
 80111ec:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d09c      	beq.n	801112e <_printf_float+0xa2>
 80111f4:	232d      	movs	r3, #45	; 0x2d
 80111f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111fa:	e798      	b.n	801112e <_printf_float+0xa2>
 80111fc:	2947      	cmp	r1, #71	; 0x47
 80111fe:	d1bc      	bne.n	801117a <_printf_float+0xee>
 8011200:	2b00      	cmp	r3, #0
 8011202:	d1ba      	bne.n	801117a <_printf_float+0xee>
 8011204:	2301      	movs	r3, #1
 8011206:	e7b7      	b.n	8011178 <_printf_float+0xec>
 8011208:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801120c:	d118      	bne.n	8011240 <_printf_float+0x1b4>
 801120e:	2900      	cmp	r1, #0
 8011210:	6863      	ldr	r3, [r4, #4]
 8011212:	dd0b      	ble.n	801122c <_printf_float+0x1a0>
 8011214:	6121      	str	r1, [r4, #16]
 8011216:	b913      	cbnz	r3, 801121e <_printf_float+0x192>
 8011218:	6822      	ldr	r2, [r4, #0]
 801121a:	07d0      	lsls	r0, r2, #31
 801121c:	d502      	bpl.n	8011224 <_printf_float+0x198>
 801121e:	3301      	adds	r3, #1
 8011220:	440b      	add	r3, r1
 8011222:	6123      	str	r3, [r4, #16]
 8011224:	65a1      	str	r1, [r4, #88]	; 0x58
 8011226:	f04f 0a00 	mov.w	sl, #0
 801122a:	e7df      	b.n	80111ec <_printf_float+0x160>
 801122c:	b913      	cbnz	r3, 8011234 <_printf_float+0x1a8>
 801122e:	6822      	ldr	r2, [r4, #0]
 8011230:	07d2      	lsls	r2, r2, #31
 8011232:	d501      	bpl.n	8011238 <_printf_float+0x1ac>
 8011234:	3302      	adds	r3, #2
 8011236:	e7f4      	b.n	8011222 <_printf_float+0x196>
 8011238:	2301      	movs	r3, #1
 801123a:	e7f2      	b.n	8011222 <_printf_float+0x196>
 801123c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011242:	4299      	cmp	r1, r3
 8011244:	db05      	blt.n	8011252 <_printf_float+0x1c6>
 8011246:	6823      	ldr	r3, [r4, #0]
 8011248:	6121      	str	r1, [r4, #16]
 801124a:	07d8      	lsls	r0, r3, #31
 801124c:	d5ea      	bpl.n	8011224 <_printf_float+0x198>
 801124e:	1c4b      	adds	r3, r1, #1
 8011250:	e7e7      	b.n	8011222 <_printf_float+0x196>
 8011252:	2900      	cmp	r1, #0
 8011254:	bfd4      	ite	le
 8011256:	f1c1 0202 	rsble	r2, r1, #2
 801125a:	2201      	movgt	r2, #1
 801125c:	4413      	add	r3, r2
 801125e:	e7e0      	b.n	8011222 <_printf_float+0x196>
 8011260:	6823      	ldr	r3, [r4, #0]
 8011262:	055a      	lsls	r2, r3, #21
 8011264:	d407      	bmi.n	8011276 <_printf_float+0x1ea>
 8011266:	6923      	ldr	r3, [r4, #16]
 8011268:	4642      	mov	r2, r8
 801126a:	4631      	mov	r1, r6
 801126c:	4628      	mov	r0, r5
 801126e:	47b8      	blx	r7
 8011270:	3001      	adds	r0, #1
 8011272:	d12b      	bne.n	80112cc <_printf_float+0x240>
 8011274:	e765      	b.n	8011142 <_printf_float+0xb6>
 8011276:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801127a:	f240 80dc 	bls.w	8011436 <_printf_float+0x3aa>
 801127e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011282:	2200      	movs	r2, #0
 8011284:	2300      	movs	r3, #0
 8011286:	f7ef fbf7 	bl	8000a78 <__aeabi_dcmpeq>
 801128a:	2800      	cmp	r0, #0
 801128c:	d033      	beq.n	80112f6 <_printf_float+0x26a>
 801128e:	4a36      	ldr	r2, [pc, #216]	; (8011368 <_printf_float+0x2dc>)
 8011290:	2301      	movs	r3, #1
 8011292:	4631      	mov	r1, r6
 8011294:	4628      	mov	r0, r5
 8011296:	47b8      	blx	r7
 8011298:	3001      	adds	r0, #1
 801129a:	f43f af52 	beq.w	8011142 <_printf_float+0xb6>
 801129e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80112a2:	429a      	cmp	r2, r3
 80112a4:	db02      	blt.n	80112ac <_printf_float+0x220>
 80112a6:	6823      	ldr	r3, [r4, #0]
 80112a8:	07d8      	lsls	r0, r3, #31
 80112aa:	d50f      	bpl.n	80112cc <_printf_float+0x240>
 80112ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80112b0:	4631      	mov	r1, r6
 80112b2:	4628      	mov	r0, r5
 80112b4:	47b8      	blx	r7
 80112b6:	3001      	adds	r0, #1
 80112b8:	f43f af43 	beq.w	8011142 <_printf_float+0xb6>
 80112bc:	f04f 0800 	mov.w	r8, #0
 80112c0:	f104 091a 	add.w	r9, r4, #26
 80112c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112c6:	3b01      	subs	r3, #1
 80112c8:	4543      	cmp	r3, r8
 80112ca:	dc09      	bgt.n	80112e0 <_printf_float+0x254>
 80112cc:	6823      	ldr	r3, [r4, #0]
 80112ce:	079b      	lsls	r3, r3, #30
 80112d0:	f100 8101 	bmi.w	80114d6 <_printf_float+0x44a>
 80112d4:	68e0      	ldr	r0, [r4, #12]
 80112d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112d8:	4298      	cmp	r0, r3
 80112da:	bfb8      	it	lt
 80112dc:	4618      	movlt	r0, r3
 80112de:	e732      	b.n	8011146 <_printf_float+0xba>
 80112e0:	2301      	movs	r3, #1
 80112e2:	464a      	mov	r2, r9
 80112e4:	4631      	mov	r1, r6
 80112e6:	4628      	mov	r0, r5
 80112e8:	47b8      	blx	r7
 80112ea:	3001      	adds	r0, #1
 80112ec:	f43f af29 	beq.w	8011142 <_printf_float+0xb6>
 80112f0:	f108 0801 	add.w	r8, r8, #1
 80112f4:	e7e6      	b.n	80112c4 <_printf_float+0x238>
 80112f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	dc37      	bgt.n	801136c <_printf_float+0x2e0>
 80112fc:	4a1a      	ldr	r2, [pc, #104]	; (8011368 <_printf_float+0x2dc>)
 80112fe:	2301      	movs	r3, #1
 8011300:	4631      	mov	r1, r6
 8011302:	4628      	mov	r0, r5
 8011304:	47b8      	blx	r7
 8011306:	3001      	adds	r0, #1
 8011308:	f43f af1b 	beq.w	8011142 <_printf_float+0xb6>
 801130c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011310:	4313      	orrs	r3, r2
 8011312:	d102      	bne.n	801131a <_printf_float+0x28e>
 8011314:	6823      	ldr	r3, [r4, #0]
 8011316:	07d9      	lsls	r1, r3, #31
 8011318:	d5d8      	bpl.n	80112cc <_printf_float+0x240>
 801131a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801131e:	4631      	mov	r1, r6
 8011320:	4628      	mov	r0, r5
 8011322:	47b8      	blx	r7
 8011324:	3001      	adds	r0, #1
 8011326:	f43f af0c 	beq.w	8011142 <_printf_float+0xb6>
 801132a:	f04f 0900 	mov.w	r9, #0
 801132e:	f104 0a1a 	add.w	sl, r4, #26
 8011332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011334:	425b      	negs	r3, r3
 8011336:	454b      	cmp	r3, r9
 8011338:	dc01      	bgt.n	801133e <_printf_float+0x2b2>
 801133a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801133c:	e794      	b.n	8011268 <_printf_float+0x1dc>
 801133e:	2301      	movs	r3, #1
 8011340:	4652      	mov	r2, sl
 8011342:	4631      	mov	r1, r6
 8011344:	4628      	mov	r0, r5
 8011346:	47b8      	blx	r7
 8011348:	3001      	adds	r0, #1
 801134a:	f43f aefa 	beq.w	8011142 <_printf_float+0xb6>
 801134e:	f109 0901 	add.w	r9, r9, #1
 8011352:	e7ee      	b.n	8011332 <_printf_float+0x2a6>
 8011354:	7fefffff 	.word	0x7fefffff
 8011358:	080159ac 	.word	0x080159ac
 801135c:	080159b0 	.word	0x080159b0
 8011360:	080159b8 	.word	0x080159b8
 8011364:	080159b4 	.word	0x080159b4
 8011368:	080159bc 	.word	0x080159bc
 801136c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801136e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011370:	429a      	cmp	r2, r3
 8011372:	bfa8      	it	ge
 8011374:	461a      	movge	r2, r3
 8011376:	2a00      	cmp	r2, #0
 8011378:	4691      	mov	r9, r2
 801137a:	dc37      	bgt.n	80113ec <_printf_float+0x360>
 801137c:	f04f 0b00 	mov.w	fp, #0
 8011380:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011384:	f104 021a 	add.w	r2, r4, #26
 8011388:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801138c:	ebaa 0309 	sub.w	r3, sl, r9
 8011390:	455b      	cmp	r3, fp
 8011392:	dc33      	bgt.n	80113fc <_printf_float+0x370>
 8011394:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011398:	429a      	cmp	r2, r3
 801139a:	db3b      	blt.n	8011414 <_printf_float+0x388>
 801139c:	6823      	ldr	r3, [r4, #0]
 801139e:	07da      	lsls	r2, r3, #31
 80113a0:	d438      	bmi.n	8011414 <_printf_float+0x388>
 80113a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80113a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80113a6:	eba3 020a 	sub.w	r2, r3, sl
 80113aa:	eba3 0901 	sub.w	r9, r3, r1
 80113ae:	4591      	cmp	r9, r2
 80113b0:	bfa8      	it	ge
 80113b2:	4691      	movge	r9, r2
 80113b4:	f1b9 0f00 	cmp.w	r9, #0
 80113b8:	dc34      	bgt.n	8011424 <_printf_float+0x398>
 80113ba:	f04f 0800 	mov.w	r8, #0
 80113be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113c2:	f104 0a1a 	add.w	sl, r4, #26
 80113c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80113ca:	1a9b      	subs	r3, r3, r2
 80113cc:	eba3 0309 	sub.w	r3, r3, r9
 80113d0:	4543      	cmp	r3, r8
 80113d2:	f77f af7b 	ble.w	80112cc <_printf_float+0x240>
 80113d6:	2301      	movs	r3, #1
 80113d8:	4652      	mov	r2, sl
 80113da:	4631      	mov	r1, r6
 80113dc:	4628      	mov	r0, r5
 80113de:	47b8      	blx	r7
 80113e0:	3001      	adds	r0, #1
 80113e2:	f43f aeae 	beq.w	8011142 <_printf_float+0xb6>
 80113e6:	f108 0801 	add.w	r8, r8, #1
 80113ea:	e7ec      	b.n	80113c6 <_printf_float+0x33a>
 80113ec:	4613      	mov	r3, r2
 80113ee:	4631      	mov	r1, r6
 80113f0:	4642      	mov	r2, r8
 80113f2:	4628      	mov	r0, r5
 80113f4:	47b8      	blx	r7
 80113f6:	3001      	adds	r0, #1
 80113f8:	d1c0      	bne.n	801137c <_printf_float+0x2f0>
 80113fa:	e6a2      	b.n	8011142 <_printf_float+0xb6>
 80113fc:	2301      	movs	r3, #1
 80113fe:	4631      	mov	r1, r6
 8011400:	4628      	mov	r0, r5
 8011402:	920b      	str	r2, [sp, #44]	; 0x2c
 8011404:	47b8      	blx	r7
 8011406:	3001      	adds	r0, #1
 8011408:	f43f ae9b 	beq.w	8011142 <_printf_float+0xb6>
 801140c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801140e:	f10b 0b01 	add.w	fp, fp, #1
 8011412:	e7b9      	b.n	8011388 <_printf_float+0x2fc>
 8011414:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011418:	4631      	mov	r1, r6
 801141a:	4628      	mov	r0, r5
 801141c:	47b8      	blx	r7
 801141e:	3001      	adds	r0, #1
 8011420:	d1bf      	bne.n	80113a2 <_printf_float+0x316>
 8011422:	e68e      	b.n	8011142 <_printf_float+0xb6>
 8011424:	464b      	mov	r3, r9
 8011426:	eb08 020a 	add.w	r2, r8, sl
 801142a:	4631      	mov	r1, r6
 801142c:	4628      	mov	r0, r5
 801142e:	47b8      	blx	r7
 8011430:	3001      	adds	r0, #1
 8011432:	d1c2      	bne.n	80113ba <_printf_float+0x32e>
 8011434:	e685      	b.n	8011142 <_printf_float+0xb6>
 8011436:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011438:	2a01      	cmp	r2, #1
 801143a:	dc01      	bgt.n	8011440 <_printf_float+0x3b4>
 801143c:	07db      	lsls	r3, r3, #31
 801143e:	d537      	bpl.n	80114b0 <_printf_float+0x424>
 8011440:	2301      	movs	r3, #1
 8011442:	4642      	mov	r2, r8
 8011444:	4631      	mov	r1, r6
 8011446:	4628      	mov	r0, r5
 8011448:	47b8      	blx	r7
 801144a:	3001      	adds	r0, #1
 801144c:	f43f ae79 	beq.w	8011142 <_printf_float+0xb6>
 8011450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011454:	4631      	mov	r1, r6
 8011456:	4628      	mov	r0, r5
 8011458:	47b8      	blx	r7
 801145a:	3001      	adds	r0, #1
 801145c:	f43f ae71 	beq.w	8011142 <_printf_float+0xb6>
 8011460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011464:	2200      	movs	r2, #0
 8011466:	2300      	movs	r3, #0
 8011468:	f7ef fb06 	bl	8000a78 <__aeabi_dcmpeq>
 801146c:	b9d8      	cbnz	r0, 80114a6 <_printf_float+0x41a>
 801146e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011470:	f108 0201 	add.w	r2, r8, #1
 8011474:	3b01      	subs	r3, #1
 8011476:	4631      	mov	r1, r6
 8011478:	4628      	mov	r0, r5
 801147a:	47b8      	blx	r7
 801147c:	3001      	adds	r0, #1
 801147e:	d10e      	bne.n	801149e <_printf_float+0x412>
 8011480:	e65f      	b.n	8011142 <_printf_float+0xb6>
 8011482:	2301      	movs	r3, #1
 8011484:	464a      	mov	r2, r9
 8011486:	4631      	mov	r1, r6
 8011488:	4628      	mov	r0, r5
 801148a:	47b8      	blx	r7
 801148c:	3001      	adds	r0, #1
 801148e:	f43f ae58 	beq.w	8011142 <_printf_float+0xb6>
 8011492:	f108 0801 	add.w	r8, r8, #1
 8011496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011498:	3b01      	subs	r3, #1
 801149a:	4543      	cmp	r3, r8
 801149c:	dcf1      	bgt.n	8011482 <_printf_float+0x3f6>
 801149e:	4653      	mov	r3, sl
 80114a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80114a4:	e6e1      	b.n	801126a <_printf_float+0x1de>
 80114a6:	f04f 0800 	mov.w	r8, #0
 80114aa:	f104 091a 	add.w	r9, r4, #26
 80114ae:	e7f2      	b.n	8011496 <_printf_float+0x40a>
 80114b0:	2301      	movs	r3, #1
 80114b2:	4642      	mov	r2, r8
 80114b4:	e7df      	b.n	8011476 <_printf_float+0x3ea>
 80114b6:	2301      	movs	r3, #1
 80114b8:	464a      	mov	r2, r9
 80114ba:	4631      	mov	r1, r6
 80114bc:	4628      	mov	r0, r5
 80114be:	47b8      	blx	r7
 80114c0:	3001      	adds	r0, #1
 80114c2:	f43f ae3e 	beq.w	8011142 <_printf_float+0xb6>
 80114c6:	f108 0801 	add.w	r8, r8, #1
 80114ca:	68e3      	ldr	r3, [r4, #12]
 80114cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80114ce:	1a5b      	subs	r3, r3, r1
 80114d0:	4543      	cmp	r3, r8
 80114d2:	dcf0      	bgt.n	80114b6 <_printf_float+0x42a>
 80114d4:	e6fe      	b.n	80112d4 <_printf_float+0x248>
 80114d6:	f04f 0800 	mov.w	r8, #0
 80114da:	f104 0919 	add.w	r9, r4, #25
 80114de:	e7f4      	b.n	80114ca <_printf_float+0x43e>

080114e0 <_printf_common>:
 80114e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114e4:	4616      	mov	r6, r2
 80114e6:	4699      	mov	r9, r3
 80114e8:	688a      	ldr	r2, [r1, #8]
 80114ea:	690b      	ldr	r3, [r1, #16]
 80114ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80114f0:	4293      	cmp	r3, r2
 80114f2:	bfb8      	it	lt
 80114f4:	4613      	movlt	r3, r2
 80114f6:	6033      	str	r3, [r6, #0]
 80114f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114fc:	4607      	mov	r7, r0
 80114fe:	460c      	mov	r4, r1
 8011500:	b10a      	cbz	r2, 8011506 <_printf_common+0x26>
 8011502:	3301      	adds	r3, #1
 8011504:	6033      	str	r3, [r6, #0]
 8011506:	6823      	ldr	r3, [r4, #0]
 8011508:	0699      	lsls	r1, r3, #26
 801150a:	bf42      	ittt	mi
 801150c:	6833      	ldrmi	r3, [r6, #0]
 801150e:	3302      	addmi	r3, #2
 8011510:	6033      	strmi	r3, [r6, #0]
 8011512:	6825      	ldr	r5, [r4, #0]
 8011514:	f015 0506 	ands.w	r5, r5, #6
 8011518:	d106      	bne.n	8011528 <_printf_common+0x48>
 801151a:	f104 0a19 	add.w	sl, r4, #25
 801151e:	68e3      	ldr	r3, [r4, #12]
 8011520:	6832      	ldr	r2, [r6, #0]
 8011522:	1a9b      	subs	r3, r3, r2
 8011524:	42ab      	cmp	r3, r5
 8011526:	dc26      	bgt.n	8011576 <_printf_common+0x96>
 8011528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801152c:	1e13      	subs	r3, r2, #0
 801152e:	6822      	ldr	r2, [r4, #0]
 8011530:	bf18      	it	ne
 8011532:	2301      	movne	r3, #1
 8011534:	0692      	lsls	r2, r2, #26
 8011536:	d42b      	bmi.n	8011590 <_printf_common+0xb0>
 8011538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801153c:	4649      	mov	r1, r9
 801153e:	4638      	mov	r0, r7
 8011540:	47c0      	blx	r8
 8011542:	3001      	adds	r0, #1
 8011544:	d01e      	beq.n	8011584 <_printf_common+0xa4>
 8011546:	6823      	ldr	r3, [r4, #0]
 8011548:	68e5      	ldr	r5, [r4, #12]
 801154a:	6832      	ldr	r2, [r6, #0]
 801154c:	f003 0306 	and.w	r3, r3, #6
 8011550:	2b04      	cmp	r3, #4
 8011552:	bf08      	it	eq
 8011554:	1aad      	subeq	r5, r5, r2
 8011556:	68a3      	ldr	r3, [r4, #8]
 8011558:	6922      	ldr	r2, [r4, #16]
 801155a:	bf0c      	ite	eq
 801155c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011560:	2500      	movne	r5, #0
 8011562:	4293      	cmp	r3, r2
 8011564:	bfc4      	itt	gt
 8011566:	1a9b      	subgt	r3, r3, r2
 8011568:	18ed      	addgt	r5, r5, r3
 801156a:	2600      	movs	r6, #0
 801156c:	341a      	adds	r4, #26
 801156e:	42b5      	cmp	r5, r6
 8011570:	d11a      	bne.n	80115a8 <_printf_common+0xc8>
 8011572:	2000      	movs	r0, #0
 8011574:	e008      	b.n	8011588 <_printf_common+0xa8>
 8011576:	2301      	movs	r3, #1
 8011578:	4652      	mov	r2, sl
 801157a:	4649      	mov	r1, r9
 801157c:	4638      	mov	r0, r7
 801157e:	47c0      	blx	r8
 8011580:	3001      	adds	r0, #1
 8011582:	d103      	bne.n	801158c <_printf_common+0xac>
 8011584:	f04f 30ff 	mov.w	r0, #4294967295
 8011588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801158c:	3501      	adds	r5, #1
 801158e:	e7c6      	b.n	801151e <_printf_common+0x3e>
 8011590:	18e1      	adds	r1, r4, r3
 8011592:	1c5a      	adds	r2, r3, #1
 8011594:	2030      	movs	r0, #48	; 0x30
 8011596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801159a:	4422      	add	r2, r4
 801159c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80115a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80115a4:	3302      	adds	r3, #2
 80115a6:	e7c7      	b.n	8011538 <_printf_common+0x58>
 80115a8:	2301      	movs	r3, #1
 80115aa:	4622      	mov	r2, r4
 80115ac:	4649      	mov	r1, r9
 80115ae:	4638      	mov	r0, r7
 80115b0:	47c0      	blx	r8
 80115b2:	3001      	adds	r0, #1
 80115b4:	d0e6      	beq.n	8011584 <_printf_common+0xa4>
 80115b6:	3601      	adds	r6, #1
 80115b8:	e7d9      	b.n	801156e <_printf_common+0x8e>
	...

080115bc <_printf_i>:
 80115bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115c0:	7e0f      	ldrb	r7, [r1, #24]
 80115c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80115c4:	2f78      	cmp	r7, #120	; 0x78
 80115c6:	4691      	mov	r9, r2
 80115c8:	4680      	mov	r8, r0
 80115ca:	460c      	mov	r4, r1
 80115cc:	469a      	mov	sl, r3
 80115ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80115d2:	d807      	bhi.n	80115e4 <_printf_i+0x28>
 80115d4:	2f62      	cmp	r7, #98	; 0x62
 80115d6:	d80a      	bhi.n	80115ee <_printf_i+0x32>
 80115d8:	2f00      	cmp	r7, #0
 80115da:	f000 80d8 	beq.w	801178e <_printf_i+0x1d2>
 80115de:	2f58      	cmp	r7, #88	; 0x58
 80115e0:	f000 80a3 	beq.w	801172a <_printf_i+0x16e>
 80115e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80115ec:	e03a      	b.n	8011664 <_printf_i+0xa8>
 80115ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80115f2:	2b15      	cmp	r3, #21
 80115f4:	d8f6      	bhi.n	80115e4 <_printf_i+0x28>
 80115f6:	a101      	add	r1, pc, #4	; (adr r1, 80115fc <_printf_i+0x40>)
 80115f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115fc:	08011655 	.word	0x08011655
 8011600:	08011669 	.word	0x08011669
 8011604:	080115e5 	.word	0x080115e5
 8011608:	080115e5 	.word	0x080115e5
 801160c:	080115e5 	.word	0x080115e5
 8011610:	080115e5 	.word	0x080115e5
 8011614:	08011669 	.word	0x08011669
 8011618:	080115e5 	.word	0x080115e5
 801161c:	080115e5 	.word	0x080115e5
 8011620:	080115e5 	.word	0x080115e5
 8011624:	080115e5 	.word	0x080115e5
 8011628:	08011775 	.word	0x08011775
 801162c:	08011699 	.word	0x08011699
 8011630:	08011757 	.word	0x08011757
 8011634:	080115e5 	.word	0x080115e5
 8011638:	080115e5 	.word	0x080115e5
 801163c:	08011797 	.word	0x08011797
 8011640:	080115e5 	.word	0x080115e5
 8011644:	08011699 	.word	0x08011699
 8011648:	080115e5 	.word	0x080115e5
 801164c:	080115e5 	.word	0x080115e5
 8011650:	0801175f 	.word	0x0801175f
 8011654:	682b      	ldr	r3, [r5, #0]
 8011656:	1d1a      	adds	r2, r3, #4
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	602a      	str	r2, [r5, #0]
 801165c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011664:	2301      	movs	r3, #1
 8011666:	e0a3      	b.n	80117b0 <_printf_i+0x1f4>
 8011668:	6820      	ldr	r0, [r4, #0]
 801166a:	6829      	ldr	r1, [r5, #0]
 801166c:	0606      	lsls	r6, r0, #24
 801166e:	f101 0304 	add.w	r3, r1, #4
 8011672:	d50a      	bpl.n	801168a <_printf_i+0xce>
 8011674:	680e      	ldr	r6, [r1, #0]
 8011676:	602b      	str	r3, [r5, #0]
 8011678:	2e00      	cmp	r6, #0
 801167a:	da03      	bge.n	8011684 <_printf_i+0xc8>
 801167c:	232d      	movs	r3, #45	; 0x2d
 801167e:	4276      	negs	r6, r6
 8011680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011684:	485e      	ldr	r0, [pc, #376]	; (8011800 <_printf_i+0x244>)
 8011686:	230a      	movs	r3, #10
 8011688:	e019      	b.n	80116be <_printf_i+0x102>
 801168a:	680e      	ldr	r6, [r1, #0]
 801168c:	602b      	str	r3, [r5, #0]
 801168e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011692:	bf18      	it	ne
 8011694:	b236      	sxthne	r6, r6
 8011696:	e7ef      	b.n	8011678 <_printf_i+0xbc>
 8011698:	682b      	ldr	r3, [r5, #0]
 801169a:	6820      	ldr	r0, [r4, #0]
 801169c:	1d19      	adds	r1, r3, #4
 801169e:	6029      	str	r1, [r5, #0]
 80116a0:	0601      	lsls	r1, r0, #24
 80116a2:	d501      	bpl.n	80116a8 <_printf_i+0xec>
 80116a4:	681e      	ldr	r6, [r3, #0]
 80116a6:	e002      	b.n	80116ae <_printf_i+0xf2>
 80116a8:	0646      	lsls	r6, r0, #25
 80116aa:	d5fb      	bpl.n	80116a4 <_printf_i+0xe8>
 80116ac:	881e      	ldrh	r6, [r3, #0]
 80116ae:	4854      	ldr	r0, [pc, #336]	; (8011800 <_printf_i+0x244>)
 80116b0:	2f6f      	cmp	r7, #111	; 0x6f
 80116b2:	bf0c      	ite	eq
 80116b4:	2308      	moveq	r3, #8
 80116b6:	230a      	movne	r3, #10
 80116b8:	2100      	movs	r1, #0
 80116ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116be:	6865      	ldr	r5, [r4, #4]
 80116c0:	60a5      	str	r5, [r4, #8]
 80116c2:	2d00      	cmp	r5, #0
 80116c4:	bfa2      	ittt	ge
 80116c6:	6821      	ldrge	r1, [r4, #0]
 80116c8:	f021 0104 	bicge.w	r1, r1, #4
 80116cc:	6021      	strge	r1, [r4, #0]
 80116ce:	b90e      	cbnz	r6, 80116d4 <_printf_i+0x118>
 80116d0:	2d00      	cmp	r5, #0
 80116d2:	d04d      	beq.n	8011770 <_printf_i+0x1b4>
 80116d4:	4615      	mov	r5, r2
 80116d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80116da:	fb03 6711 	mls	r7, r3, r1, r6
 80116de:	5dc7      	ldrb	r7, [r0, r7]
 80116e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80116e4:	4637      	mov	r7, r6
 80116e6:	42bb      	cmp	r3, r7
 80116e8:	460e      	mov	r6, r1
 80116ea:	d9f4      	bls.n	80116d6 <_printf_i+0x11a>
 80116ec:	2b08      	cmp	r3, #8
 80116ee:	d10b      	bne.n	8011708 <_printf_i+0x14c>
 80116f0:	6823      	ldr	r3, [r4, #0]
 80116f2:	07de      	lsls	r6, r3, #31
 80116f4:	d508      	bpl.n	8011708 <_printf_i+0x14c>
 80116f6:	6923      	ldr	r3, [r4, #16]
 80116f8:	6861      	ldr	r1, [r4, #4]
 80116fa:	4299      	cmp	r1, r3
 80116fc:	bfde      	ittt	le
 80116fe:	2330      	movle	r3, #48	; 0x30
 8011700:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011704:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011708:	1b52      	subs	r2, r2, r5
 801170a:	6122      	str	r2, [r4, #16]
 801170c:	f8cd a000 	str.w	sl, [sp]
 8011710:	464b      	mov	r3, r9
 8011712:	aa03      	add	r2, sp, #12
 8011714:	4621      	mov	r1, r4
 8011716:	4640      	mov	r0, r8
 8011718:	f7ff fee2 	bl	80114e0 <_printf_common>
 801171c:	3001      	adds	r0, #1
 801171e:	d14c      	bne.n	80117ba <_printf_i+0x1fe>
 8011720:	f04f 30ff 	mov.w	r0, #4294967295
 8011724:	b004      	add	sp, #16
 8011726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801172a:	4835      	ldr	r0, [pc, #212]	; (8011800 <_printf_i+0x244>)
 801172c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011730:	6829      	ldr	r1, [r5, #0]
 8011732:	6823      	ldr	r3, [r4, #0]
 8011734:	f851 6b04 	ldr.w	r6, [r1], #4
 8011738:	6029      	str	r1, [r5, #0]
 801173a:	061d      	lsls	r5, r3, #24
 801173c:	d514      	bpl.n	8011768 <_printf_i+0x1ac>
 801173e:	07df      	lsls	r7, r3, #31
 8011740:	bf44      	itt	mi
 8011742:	f043 0320 	orrmi.w	r3, r3, #32
 8011746:	6023      	strmi	r3, [r4, #0]
 8011748:	b91e      	cbnz	r6, 8011752 <_printf_i+0x196>
 801174a:	6823      	ldr	r3, [r4, #0]
 801174c:	f023 0320 	bic.w	r3, r3, #32
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	2310      	movs	r3, #16
 8011754:	e7b0      	b.n	80116b8 <_printf_i+0xfc>
 8011756:	6823      	ldr	r3, [r4, #0]
 8011758:	f043 0320 	orr.w	r3, r3, #32
 801175c:	6023      	str	r3, [r4, #0]
 801175e:	2378      	movs	r3, #120	; 0x78
 8011760:	4828      	ldr	r0, [pc, #160]	; (8011804 <_printf_i+0x248>)
 8011762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011766:	e7e3      	b.n	8011730 <_printf_i+0x174>
 8011768:	0659      	lsls	r1, r3, #25
 801176a:	bf48      	it	mi
 801176c:	b2b6      	uxthmi	r6, r6
 801176e:	e7e6      	b.n	801173e <_printf_i+0x182>
 8011770:	4615      	mov	r5, r2
 8011772:	e7bb      	b.n	80116ec <_printf_i+0x130>
 8011774:	682b      	ldr	r3, [r5, #0]
 8011776:	6826      	ldr	r6, [r4, #0]
 8011778:	6961      	ldr	r1, [r4, #20]
 801177a:	1d18      	adds	r0, r3, #4
 801177c:	6028      	str	r0, [r5, #0]
 801177e:	0635      	lsls	r5, r6, #24
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	d501      	bpl.n	8011788 <_printf_i+0x1cc>
 8011784:	6019      	str	r1, [r3, #0]
 8011786:	e002      	b.n	801178e <_printf_i+0x1d2>
 8011788:	0670      	lsls	r0, r6, #25
 801178a:	d5fb      	bpl.n	8011784 <_printf_i+0x1c8>
 801178c:	8019      	strh	r1, [r3, #0]
 801178e:	2300      	movs	r3, #0
 8011790:	6123      	str	r3, [r4, #16]
 8011792:	4615      	mov	r5, r2
 8011794:	e7ba      	b.n	801170c <_printf_i+0x150>
 8011796:	682b      	ldr	r3, [r5, #0]
 8011798:	1d1a      	adds	r2, r3, #4
 801179a:	602a      	str	r2, [r5, #0]
 801179c:	681d      	ldr	r5, [r3, #0]
 801179e:	6862      	ldr	r2, [r4, #4]
 80117a0:	2100      	movs	r1, #0
 80117a2:	4628      	mov	r0, r5
 80117a4:	f7ee fcf4 	bl	8000190 <memchr>
 80117a8:	b108      	cbz	r0, 80117ae <_printf_i+0x1f2>
 80117aa:	1b40      	subs	r0, r0, r5
 80117ac:	6060      	str	r0, [r4, #4]
 80117ae:	6863      	ldr	r3, [r4, #4]
 80117b0:	6123      	str	r3, [r4, #16]
 80117b2:	2300      	movs	r3, #0
 80117b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117b8:	e7a8      	b.n	801170c <_printf_i+0x150>
 80117ba:	6923      	ldr	r3, [r4, #16]
 80117bc:	462a      	mov	r2, r5
 80117be:	4649      	mov	r1, r9
 80117c0:	4640      	mov	r0, r8
 80117c2:	47d0      	blx	sl
 80117c4:	3001      	adds	r0, #1
 80117c6:	d0ab      	beq.n	8011720 <_printf_i+0x164>
 80117c8:	6823      	ldr	r3, [r4, #0]
 80117ca:	079b      	lsls	r3, r3, #30
 80117cc:	d413      	bmi.n	80117f6 <_printf_i+0x23a>
 80117ce:	68e0      	ldr	r0, [r4, #12]
 80117d0:	9b03      	ldr	r3, [sp, #12]
 80117d2:	4298      	cmp	r0, r3
 80117d4:	bfb8      	it	lt
 80117d6:	4618      	movlt	r0, r3
 80117d8:	e7a4      	b.n	8011724 <_printf_i+0x168>
 80117da:	2301      	movs	r3, #1
 80117dc:	4632      	mov	r2, r6
 80117de:	4649      	mov	r1, r9
 80117e0:	4640      	mov	r0, r8
 80117e2:	47d0      	blx	sl
 80117e4:	3001      	adds	r0, #1
 80117e6:	d09b      	beq.n	8011720 <_printf_i+0x164>
 80117e8:	3501      	adds	r5, #1
 80117ea:	68e3      	ldr	r3, [r4, #12]
 80117ec:	9903      	ldr	r1, [sp, #12]
 80117ee:	1a5b      	subs	r3, r3, r1
 80117f0:	42ab      	cmp	r3, r5
 80117f2:	dcf2      	bgt.n	80117da <_printf_i+0x21e>
 80117f4:	e7eb      	b.n	80117ce <_printf_i+0x212>
 80117f6:	2500      	movs	r5, #0
 80117f8:	f104 0619 	add.w	r6, r4, #25
 80117fc:	e7f5      	b.n	80117ea <_printf_i+0x22e>
 80117fe:	bf00      	nop
 8011800:	080159be 	.word	0x080159be
 8011804:	080159cf 	.word	0x080159cf

08011808 <siprintf>:
 8011808:	b40e      	push	{r1, r2, r3}
 801180a:	b500      	push	{lr}
 801180c:	b09c      	sub	sp, #112	; 0x70
 801180e:	ab1d      	add	r3, sp, #116	; 0x74
 8011810:	9002      	str	r0, [sp, #8]
 8011812:	9006      	str	r0, [sp, #24]
 8011814:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011818:	4809      	ldr	r0, [pc, #36]	; (8011840 <siprintf+0x38>)
 801181a:	9107      	str	r1, [sp, #28]
 801181c:	9104      	str	r1, [sp, #16]
 801181e:	4909      	ldr	r1, [pc, #36]	; (8011844 <siprintf+0x3c>)
 8011820:	f853 2b04 	ldr.w	r2, [r3], #4
 8011824:	9105      	str	r1, [sp, #20]
 8011826:	6800      	ldr	r0, [r0, #0]
 8011828:	9301      	str	r3, [sp, #4]
 801182a:	a902      	add	r1, sp, #8
 801182c:	f001 fc2e 	bl	801308c <_svfiprintf_r>
 8011830:	9b02      	ldr	r3, [sp, #8]
 8011832:	2200      	movs	r2, #0
 8011834:	701a      	strb	r2, [r3, #0]
 8011836:	b01c      	add	sp, #112	; 0x70
 8011838:	f85d eb04 	ldr.w	lr, [sp], #4
 801183c:	b003      	add	sp, #12
 801183e:	4770      	bx	lr
 8011840:	2000005c 	.word	0x2000005c
 8011844:	ffff0208 	.word	0xffff0208

08011848 <strcat>:
 8011848:	b510      	push	{r4, lr}
 801184a:	4602      	mov	r2, r0
 801184c:	7814      	ldrb	r4, [r2, #0]
 801184e:	4613      	mov	r3, r2
 8011850:	3201      	adds	r2, #1
 8011852:	2c00      	cmp	r4, #0
 8011854:	d1fa      	bne.n	801184c <strcat+0x4>
 8011856:	3b01      	subs	r3, #1
 8011858:	f811 2b01 	ldrb.w	r2, [r1], #1
 801185c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011860:	2a00      	cmp	r2, #0
 8011862:	d1f9      	bne.n	8011858 <strcat+0x10>
 8011864:	bd10      	pop	{r4, pc}

08011866 <strchr>:
 8011866:	b2c9      	uxtb	r1, r1
 8011868:	4603      	mov	r3, r0
 801186a:	4618      	mov	r0, r3
 801186c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011870:	b112      	cbz	r2, 8011878 <strchr+0x12>
 8011872:	428a      	cmp	r2, r1
 8011874:	d1f9      	bne.n	801186a <strchr+0x4>
 8011876:	4770      	bx	lr
 8011878:	2900      	cmp	r1, #0
 801187a:	bf18      	it	ne
 801187c:	2000      	movne	r0, #0
 801187e:	4770      	bx	lr

08011880 <strcpy>:
 8011880:	4603      	mov	r3, r0
 8011882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011886:	f803 2b01 	strb.w	r2, [r3], #1
 801188a:	2a00      	cmp	r2, #0
 801188c:	d1f9      	bne.n	8011882 <strcpy+0x2>
 801188e:	4770      	bx	lr

08011890 <strncmp>:
 8011890:	b510      	push	{r4, lr}
 8011892:	4603      	mov	r3, r0
 8011894:	b172      	cbz	r2, 80118b4 <strncmp+0x24>
 8011896:	3901      	subs	r1, #1
 8011898:	1884      	adds	r4, r0, r2
 801189a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801189e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80118a2:	4290      	cmp	r0, r2
 80118a4:	d101      	bne.n	80118aa <strncmp+0x1a>
 80118a6:	42a3      	cmp	r3, r4
 80118a8:	d101      	bne.n	80118ae <strncmp+0x1e>
 80118aa:	1a80      	subs	r0, r0, r2
 80118ac:	bd10      	pop	{r4, pc}
 80118ae:	2800      	cmp	r0, #0
 80118b0:	d1f3      	bne.n	801189a <strncmp+0xa>
 80118b2:	e7fa      	b.n	80118aa <strncmp+0x1a>
 80118b4:	4610      	mov	r0, r2
 80118b6:	e7f9      	b.n	80118ac <strncmp+0x1c>

080118b8 <strstr>:
 80118b8:	780a      	ldrb	r2, [r1, #0]
 80118ba:	b570      	push	{r4, r5, r6, lr}
 80118bc:	b96a      	cbnz	r2, 80118da <strstr+0x22>
 80118be:	bd70      	pop	{r4, r5, r6, pc}
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d109      	bne.n	80118d8 <strstr+0x20>
 80118c4:	460c      	mov	r4, r1
 80118c6:	4605      	mov	r5, r0
 80118c8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d0f6      	beq.n	80118be <strstr+0x6>
 80118d0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80118d4:	429e      	cmp	r6, r3
 80118d6:	d0f7      	beq.n	80118c8 <strstr+0x10>
 80118d8:	3001      	adds	r0, #1
 80118da:	7803      	ldrb	r3, [r0, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d1ef      	bne.n	80118c0 <strstr+0x8>
 80118e0:	4618      	mov	r0, r3
 80118e2:	e7ec      	b.n	80118be <strstr+0x6>

080118e4 <_strtol_l.constprop.0>:
 80118e4:	2b01      	cmp	r3, #1
 80118e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118ea:	4680      	mov	r8, r0
 80118ec:	d001      	beq.n	80118f2 <_strtol_l.constprop.0+0xe>
 80118ee:	2b24      	cmp	r3, #36	; 0x24
 80118f0:	d906      	bls.n	8011900 <_strtol_l.constprop.0+0x1c>
 80118f2:	f7ff faed 	bl	8010ed0 <__errno>
 80118f6:	2316      	movs	r3, #22
 80118f8:	6003      	str	r3, [r0, #0]
 80118fa:	2000      	movs	r0, #0
 80118fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011900:	4f35      	ldr	r7, [pc, #212]	; (80119d8 <_strtol_l.constprop.0+0xf4>)
 8011902:	460d      	mov	r5, r1
 8011904:	4628      	mov	r0, r5
 8011906:	f815 4b01 	ldrb.w	r4, [r5], #1
 801190a:	5de6      	ldrb	r6, [r4, r7]
 801190c:	f016 0608 	ands.w	r6, r6, #8
 8011910:	d1f8      	bne.n	8011904 <_strtol_l.constprop.0+0x20>
 8011912:	2c2d      	cmp	r4, #45	; 0x2d
 8011914:	d12f      	bne.n	8011976 <_strtol_l.constprop.0+0x92>
 8011916:	782c      	ldrb	r4, [r5, #0]
 8011918:	2601      	movs	r6, #1
 801191a:	1c85      	adds	r5, r0, #2
 801191c:	2b00      	cmp	r3, #0
 801191e:	d057      	beq.n	80119d0 <_strtol_l.constprop.0+0xec>
 8011920:	2b10      	cmp	r3, #16
 8011922:	d109      	bne.n	8011938 <_strtol_l.constprop.0+0x54>
 8011924:	2c30      	cmp	r4, #48	; 0x30
 8011926:	d107      	bne.n	8011938 <_strtol_l.constprop.0+0x54>
 8011928:	7828      	ldrb	r0, [r5, #0]
 801192a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801192e:	2858      	cmp	r0, #88	; 0x58
 8011930:	d149      	bne.n	80119c6 <_strtol_l.constprop.0+0xe2>
 8011932:	786c      	ldrb	r4, [r5, #1]
 8011934:	2310      	movs	r3, #16
 8011936:	3502      	adds	r5, #2
 8011938:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 801193c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011940:	2700      	movs	r7, #0
 8011942:	fbbe f9f3 	udiv	r9, lr, r3
 8011946:	4638      	mov	r0, r7
 8011948:	fb03 ea19 	mls	sl, r3, r9, lr
 801194c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011950:	f1bc 0f09 	cmp.w	ip, #9
 8011954:	d814      	bhi.n	8011980 <_strtol_l.constprop.0+0x9c>
 8011956:	4664      	mov	r4, ip
 8011958:	42a3      	cmp	r3, r4
 801195a:	dd22      	ble.n	80119a2 <_strtol_l.constprop.0+0xbe>
 801195c:	2f00      	cmp	r7, #0
 801195e:	db1d      	blt.n	801199c <_strtol_l.constprop.0+0xb8>
 8011960:	4581      	cmp	r9, r0
 8011962:	d31b      	bcc.n	801199c <_strtol_l.constprop.0+0xb8>
 8011964:	d101      	bne.n	801196a <_strtol_l.constprop.0+0x86>
 8011966:	45a2      	cmp	sl, r4
 8011968:	db18      	blt.n	801199c <_strtol_l.constprop.0+0xb8>
 801196a:	fb00 4003 	mla	r0, r0, r3, r4
 801196e:	2701      	movs	r7, #1
 8011970:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011974:	e7ea      	b.n	801194c <_strtol_l.constprop.0+0x68>
 8011976:	2c2b      	cmp	r4, #43	; 0x2b
 8011978:	bf04      	itt	eq
 801197a:	782c      	ldrbeq	r4, [r5, #0]
 801197c:	1c85      	addeq	r5, r0, #2
 801197e:	e7cd      	b.n	801191c <_strtol_l.constprop.0+0x38>
 8011980:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011984:	f1bc 0f19 	cmp.w	ip, #25
 8011988:	d801      	bhi.n	801198e <_strtol_l.constprop.0+0xaa>
 801198a:	3c37      	subs	r4, #55	; 0x37
 801198c:	e7e4      	b.n	8011958 <_strtol_l.constprop.0+0x74>
 801198e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011992:	f1bc 0f19 	cmp.w	ip, #25
 8011996:	d804      	bhi.n	80119a2 <_strtol_l.constprop.0+0xbe>
 8011998:	3c57      	subs	r4, #87	; 0x57
 801199a:	e7dd      	b.n	8011958 <_strtol_l.constprop.0+0x74>
 801199c:	f04f 37ff 	mov.w	r7, #4294967295
 80119a0:	e7e6      	b.n	8011970 <_strtol_l.constprop.0+0x8c>
 80119a2:	2f00      	cmp	r7, #0
 80119a4:	da07      	bge.n	80119b6 <_strtol_l.constprop.0+0xd2>
 80119a6:	2322      	movs	r3, #34	; 0x22
 80119a8:	f8c8 3000 	str.w	r3, [r8]
 80119ac:	4670      	mov	r0, lr
 80119ae:	2a00      	cmp	r2, #0
 80119b0:	d0a4      	beq.n	80118fc <_strtol_l.constprop.0+0x18>
 80119b2:	1e69      	subs	r1, r5, #1
 80119b4:	e005      	b.n	80119c2 <_strtol_l.constprop.0+0xde>
 80119b6:	b106      	cbz	r6, 80119ba <_strtol_l.constprop.0+0xd6>
 80119b8:	4240      	negs	r0, r0
 80119ba:	2a00      	cmp	r2, #0
 80119bc:	d09e      	beq.n	80118fc <_strtol_l.constprop.0+0x18>
 80119be:	2f00      	cmp	r7, #0
 80119c0:	d1f7      	bne.n	80119b2 <_strtol_l.constprop.0+0xce>
 80119c2:	6011      	str	r1, [r2, #0]
 80119c4:	e79a      	b.n	80118fc <_strtol_l.constprop.0+0x18>
 80119c6:	2430      	movs	r4, #48	; 0x30
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d1b5      	bne.n	8011938 <_strtol_l.constprop.0+0x54>
 80119cc:	2308      	movs	r3, #8
 80119ce:	e7b3      	b.n	8011938 <_strtol_l.constprop.0+0x54>
 80119d0:	2c30      	cmp	r4, #48	; 0x30
 80119d2:	d0a9      	beq.n	8011928 <_strtol_l.constprop.0+0x44>
 80119d4:	230a      	movs	r3, #10
 80119d6:	e7af      	b.n	8011938 <_strtol_l.constprop.0+0x54>
 80119d8:	080158a5 	.word	0x080158a5

080119dc <strtol>:
 80119dc:	4613      	mov	r3, r2
 80119de:	460a      	mov	r2, r1
 80119e0:	4601      	mov	r1, r0
 80119e2:	4802      	ldr	r0, [pc, #8]	; (80119ec <strtol+0x10>)
 80119e4:	6800      	ldr	r0, [r0, #0]
 80119e6:	f7ff bf7d 	b.w	80118e4 <_strtol_l.constprop.0>
 80119ea:	bf00      	nop
 80119ec:	2000005c 	.word	0x2000005c

080119f0 <quorem>:
 80119f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119f4:	6903      	ldr	r3, [r0, #16]
 80119f6:	690c      	ldr	r4, [r1, #16]
 80119f8:	42a3      	cmp	r3, r4
 80119fa:	4607      	mov	r7, r0
 80119fc:	db7d      	blt.n	8011afa <quorem+0x10a>
 80119fe:	3c01      	subs	r4, #1
 8011a00:	f101 0814 	add.w	r8, r1, #20
 8011a04:	f100 0514 	add.w	r5, r0, #20
 8011a08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a0c:	9301      	str	r3, [sp, #4]
 8011a0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a16:	3301      	adds	r3, #1
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a22:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a26:	d32e      	bcc.n	8011a86 <quorem+0x96>
 8011a28:	f04f 0e00 	mov.w	lr, #0
 8011a2c:	4640      	mov	r0, r8
 8011a2e:	46ac      	mov	ip, r5
 8011a30:	46f2      	mov	sl, lr
 8011a32:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a36:	b293      	uxth	r3, r2
 8011a38:	fb06 e303 	mla	r3, r6, r3, lr
 8011a3c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a40:	0c12      	lsrs	r2, r2, #16
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	fb06 e202 	mla	r2, r6, r2, lr
 8011a48:	ebaa 0303 	sub.w	r3, sl, r3
 8011a4c:	f8dc a000 	ldr.w	sl, [ip]
 8011a50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a54:	b292      	uxth	r2, r2
 8011a56:	fa13 f38a 	uxtah	r3, r3, sl
 8011a5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a68:	4581      	cmp	r9, r0
 8011a6a:	f84c 3b04 	str.w	r3, [ip], #4
 8011a6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a72:	d2de      	bcs.n	8011a32 <quorem+0x42>
 8011a74:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a78:	b92b      	cbnz	r3, 8011a86 <quorem+0x96>
 8011a7a:	9b01      	ldr	r3, [sp, #4]
 8011a7c:	3b04      	subs	r3, #4
 8011a7e:	429d      	cmp	r5, r3
 8011a80:	461a      	mov	r2, r3
 8011a82:	d32e      	bcc.n	8011ae2 <quorem+0xf2>
 8011a84:	613c      	str	r4, [r7, #16]
 8011a86:	4638      	mov	r0, r7
 8011a88:	f001 f8b2 	bl	8012bf0 <__mcmp>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	db24      	blt.n	8011ada <quorem+0xea>
 8011a90:	3601      	adds	r6, #1
 8011a92:	4628      	mov	r0, r5
 8011a94:	f04f 0c00 	mov.w	ip, #0
 8011a98:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a9c:	f8d0 e000 	ldr.w	lr, [r0]
 8011aa0:	b293      	uxth	r3, r2
 8011aa2:	ebac 0303 	sub.w	r3, ip, r3
 8011aa6:	0c12      	lsrs	r2, r2, #16
 8011aa8:	fa13 f38e 	uxtah	r3, r3, lr
 8011aac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011ab0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aba:	45c1      	cmp	r9, r8
 8011abc:	f840 3b04 	str.w	r3, [r0], #4
 8011ac0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ac4:	d2e8      	bcs.n	8011a98 <quorem+0xa8>
 8011ac6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011aca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ace:	b922      	cbnz	r2, 8011ada <quorem+0xea>
 8011ad0:	3b04      	subs	r3, #4
 8011ad2:	429d      	cmp	r5, r3
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	d30a      	bcc.n	8011aee <quorem+0xfe>
 8011ad8:	613c      	str	r4, [r7, #16]
 8011ada:	4630      	mov	r0, r6
 8011adc:	b003      	add	sp, #12
 8011ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae2:	6812      	ldr	r2, [r2, #0]
 8011ae4:	3b04      	subs	r3, #4
 8011ae6:	2a00      	cmp	r2, #0
 8011ae8:	d1cc      	bne.n	8011a84 <quorem+0x94>
 8011aea:	3c01      	subs	r4, #1
 8011aec:	e7c7      	b.n	8011a7e <quorem+0x8e>
 8011aee:	6812      	ldr	r2, [r2, #0]
 8011af0:	3b04      	subs	r3, #4
 8011af2:	2a00      	cmp	r2, #0
 8011af4:	d1f0      	bne.n	8011ad8 <quorem+0xe8>
 8011af6:	3c01      	subs	r4, #1
 8011af8:	e7eb      	b.n	8011ad2 <quorem+0xe2>
 8011afa:	2000      	movs	r0, #0
 8011afc:	e7ee      	b.n	8011adc <quorem+0xec>
	...

08011b00 <_dtoa_r>:
 8011b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b04:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011b06:	b099      	sub	sp, #100	; 0x64
 8011b08:	4616      	mov	r6, r2
 8011b0a:	461f      	mov	r7, r3
 8011b0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011b10:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8011b14:	4605      	mov	r5, r0
 8011b16:	b974      	cbnz	r4, 8011b36 <_dtoa_r+0x36>
 8011b18:	2010      	movs	r0, #16
 8011b1a:	f000 fde3 	bl	80126e4 <malloc>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	6268      	str	r0, [r5, #36]	; 0x24
 8011b22:	b920      	cbnz	r0, 8011b2e <_dtoa_r+0x2e>
 8011b24:	4ba8      	ldr	r3, [pc, #672]	; (8011dc8 <_dtoa_r+0x2c8>)
 8011b26:	21ea      	movs	r1, #234	; 0xea
 8011b28:	48a8      	ldr	r0, [pc, #672]	; (8011dcc <_dtoa_r+0x2cc>)
 8011b2a:	f001 fbbf 	bl	80132ac <__assert_func>
 8011b2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b32:	6004      	str	r4, [r0, #0]
 8011b34:	60c4      	str	r4, [r0, #12]
 8011b36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011b38:	6819      	ldr	r1, [r3, #0]
 8011b3a:	b151      	cbz	r1, 8011b52 <_dtoa_r+0x52>
 8011b3c:	685a      	ldr	r2, [r3, #4]
 8011b3e:	604a      	str	r2, [r1, #4]
 8011b40:	2301      	movs	r3, #1
 8011b42:	4093      	lsls	r3, r2
 8011b44:	608b      	str	r3, [r1, #8]
 8011b46:	4628      	mov	r0, r5
 8011b48:	f000 fe14 	bl	8012774 <_Bfree>
 8011b4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011b4e:	2200      	movs	r2, #0
 8011b50:	601a      	str	r2, [r3, #0]
 8011b52:	1e3b      	subs	r3, r7, #0
 8011b54:	bfb9      	ittee	lt
 8011b56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011b5a:	9305      	strlt	r3, [sp, #20]
 8011b5c:	2300      	movge	r3, #0
 8011b5e:	f8c8 3000 	strge.w	r3, [r8]
 8011b62:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011b66:	4b9a      	ldr	r3, [pc, #616]	; (8011dd0 <_dtoa_r+0x2d0>)
 8011b68:	bfbc      	itt	lt
 8011b6a:	2201      	movlt	r2, #1
 8011b6c:	f8c8 2000 	strlt.w	r2, [r8]
 8011b70:	ea33 0309 	bics.w	r3, r3, r9
 8011b74:	d119      	bne.n	8011baa <_dtoa_r+0xaa>
 8011b76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011b78:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b7c:	6013      	str	r3, [r2, #0]
 8011b7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b82:	4333      	orrs	r3, r6
 8011b84:	f000 8580 	beq.w	8012688 <_dtoa_r+0xb88>
 8011b88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011b8a:	b953      	cbnz	r3, 8011ba2 <_dtoa_r+0xa2>
 8011b8c:	4b91      	ldr	r3, [pc, #580]	; (8011dd4 <_dtoa_r+0x2d4>)
 8011b8e:	e022      	b.n	8011bd6 <_dtoa_r+0xd6>
 8011b90:	4b91      	ldr	r3, [pc, #580]	; (8011dd8 <_dtoa_r+0x2d8>)
 8011b92:	9303      	str	r3, [sp, #12]
 8011b94:	3308      	adds	r3, #8
 8011b96:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011b98:	6013      	str	r3, [r2, #0]
 8011b9a:	9803      	ldr	r0, [sp, #12]
 8011b9c:	b019      	add	sp, #100	; 0x64
 8011b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba2:	4b8c      	ldr	r3, [pc, #560]	; (8011dd4 <_dtoa_r+0x2d4>)
 8011ba4:	9303      	str	r3, [sp, #12]
 8011ba6:	3303      	adds	r3, #3
 8011ba8:	e7f5      	b.n	8011b96 <_dtoa_r+0x96>
 8011baa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011bae:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8011bb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	2300      	movs	r3, #0
 8011bba:	f7ee ff5d 	bl	8000a78 <__aeabi_dcmpeq>
 8011bbe:	4680      	mov	r8, r0
 8011bc0:	b158      	cbz	r0, 8011bda <_dtoa_r+0xda>
 8011bc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011bc4:	2301      	movs	r3, #1
 8011bc6:	6013      	str	r3, [r2, #0]
 8011bc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f000 8559 	beq.w	8012682 <_dtoa_r+0xb82>
 8011bd0:	4882      	ldr	r0, [pc, #520]	; (8011ddc <_dtoa_r+0x2dc>)
 8011bd2:	6018      	str	r0, [r3, #0]
 8011bd4:	1e43      	subs	r3, r0, #1
 8011bd6:	9303      	str	r3, [sp, #12]
 8011bd8:	e7df      	b.n	8011b9a <_dtoa_r+0x9a>
 8011bda:	ab16      	add	r3, sp, #88	; 0x58
 8011bdc:	9301      	str	r3, [sp, #4]
 8011bde:	ab17      	add	r3, sp, #92	; 0x5c
 8011be0:	9300      	str	r3, [sp, #0]
 8011be2:	4628      	mov	r0, r5
 8011be4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011be8:	f001 f8a6 	bl	8012d38 <__d2b>
 8011bec:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011bf0:	4683      	mov	fp, r0
 8011bf2:	2c00      	cmp	r4, #0
 8011bf4:	d07e      	beq.n	8011cf4 <_dtoa_r+0x1f4>
 8011bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bf8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8011bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c04:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8011c08:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011c0c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8011c10:	4b73      	ldr	r3, [pc, #460]	; (8011de0 <_dtoa_r+0x2e0>)
 8011c12:	2200      	movs	r2, #0
 8011c14:	f7ee fb10 	bl	8000238 <__aeabi_dsub>
 8011c18:	a365      	add	r3, pc, #404	; (adr r3, 8011db0 <_dtoa_r+0x2b0>)
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	f7ee fcc3 	bl	80005a8 <__aeabi_dmul>
 8011c22:	a365      	add	r3, pc, #404	; (adr r3, 8011db8 <_dtoa_r+0x2b8>)
 8011c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c28:	f7ee fb08 	bl	800023c <__adddf3>
 8011c2c:	4606      	mov	r6, r0
 8011c2e:	4620      	mov	r0, r4
 8011c30:	460f      	mov	r7, r1
 8011c32:	f7ee fc4f 	bl	80004d4 <__aeabi_i2d>
 8011c36:	a362      	add	r3, pc, #392	; (adr r3, 8011dc0 <_dtoa_r+0x2c0>)
 8011c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c3c:	f7ee fcb4 	bl	80005a8 <__aeabi_dmul>
 8011c40:	4602      	mov	r2, r0
 8011c42:	460b      	mov	r3, r1
 8011c44:	4630      	mov	r0, r6
 8011c46:	4639      	mov	r1, r7
 8011c48:	f7ee faf8 	bl	800023c <__adddf3>
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	460f      	mov	r7, r1
 8011c50:	f7ee ff5a 	bl	8000b08 <__aeabi_d2iz>
 8011c54:	2200      	movs	r2, #0
 8011c56:	4682      	mov	sl, r0
 8011c58:	2300      	movs	r3, #0
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	4639      	mov	r1, r7
 8011c5e:	f7ee ff15 	bl	8000a8c <__aeabi_dcmplt>
 8011c62:	b148      	cbz	r0, 8011c78 <_dtoa_r+0x178>
 8011c64:	4650      	mov	r0, sl
 8011c66:	f7ee fc35 	bl	80004d4 <__aeabi_i2d>
 8011c6a:	4632      	mov	r2, r6
 8011c6c:	463b      	mov	r3, r7
 8011c6e:	f7ee ff03 	bl	8000a78 <__aeabi_dcmpeq>
 8011c72:	b908      	cbnz	r0, 8011c78 <_dtoa_r+0x178>
 8011c74:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c78:	f1ba 0f16 	cmp.w	sl, #22
 8011c7c:	d857      	bhi.n	8011d2e <_dtoa_r+0x22e>
 8011c7e:	4b59      	ldr	r3, [pc, #356]	; (8011de4 <_dtoa_r+0x2e4>)
 8011c80:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c8c:	f7ee fefe 	bl	8000a8c <__aeabi_dcmplt>
 8011c90:	2800      	cmp	r0, #0
 8011c92:	d04e      	beq.n	8011d32 <_dtoa_r+0x232>
 8011c94:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c98:	2300      	movs	r3, #0
 8011c9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c9e:	1b1c      	subs	r4, r3, r4
 8011ca0:	1e63      	subs	r3, r4, #1
 8011ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8011ca4:	bf45      	ittet	mi
 8011ca6:	f1c4 0301 	rsbmi	r3, r4, #1
 8011caa:	9306      	strmi	r3, [sp, #24]
 8011cac:	2300      	movpl	r3, #0
 8011cae:	2300      	movmi	r3, #0
 8011cb0:	bf4c      	ite	mi
 8011cb2:	9309      	strmi	r3, [sp, #36]	; 0x24
 8011cb4:	9306      	strpl	r3, [sp, #24]
 8011cb6:	f1ba 0f00 	cmp.w	sl, #0
 8011cba:	db3c      	blt.n	8011d36 <_dtoa_r+0x236>
 8011cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cbe:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011cc2:	4453      	add	r3, sl
 8011cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	930a      	str	r3, [sp, #40]	; 0x28
 8011cca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011ccc:	2b09      	cmp	r3, #9
 8011cce:	f200 808d 	bhi.w	8011dec <_dtoa_r+0x2ec>
 8011cd2:	2b05      	cmp	r3, #5
 8011cd4:	bfc4      	itt	gt
 8011cd6:	3b04      	subgt	r3, #4
 8011cd8:	9322      	strgt	r3, [sp, #136]	; 0x88
 8011cda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011cdc:	f1a3 0302 	sub.w	r3, r3, #2
 8011ce0:	bfcc      	ite	gt
 8011ce2:	2400      	movgt	r4, #0
 8011ce4:	2401      	movle	r4, #1
 8011ce6:	2b03      	cmp	r3, #3
 8011ce8:	f200 808c 	bhi.w	8011e04 <_dtoa_r+0x304>
 8011cec:	e8df f003 	tbb	[pc, r3]
 8011cf0:	5b4d4f2d 	.word	0x5b4d4f2d
 8011cf4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8011cf8:	441c      	add	r4, r3
 8011cfa:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8011cfe:	2b20      	cmp	r3, #32
 8011d00:	bfc3      	ittte	gt
 8011d02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011d06:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8011d0a:	fa09 f303 	lslgt.w	r3, r9, r3
 8011d0e:	f1c3 0320 	rsble	r3, r3, #32
 8011d12:	bfc6      	itte	gt
 8011d14:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011d18:	4318      	orrgt	r0, r3
 8011d1a:	fa06 f003 	lslle.w	r0, r6, r3
 8011d1e:	f7ee fbc9 	bl	80004b4 <__aeabi_ui2d>
 8011d22:	2301      	movs	r3, #1
 8011d24:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011d28:	3c01      	subs	r4, #1
 8011d2a:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d2c:	e770      	b.n	8011c10 <_dtoa_r+0x110>
 8011d2e:	2301      	movs	r3, #1
 8011d30:	e7b3      	b.n	8011c9a <_dtoa_r+0x19a>
 8011d32:	900f      	str	r0, [sp, #60]	; 0x3c
 8011d34:	e7b2      	b.n	8011c9c <_dtoa_r+0x19c>
 8011d36:	9b06      	ldr	r3, [sp, #24]
 8011d38:	eba3 030a 	sub.w	r3, r3, sl
 8011d3c:	9306      	str	r3, [sp, #24]
 8011d3e:	f1ca 0300 	rsb	r3, sl, #0
 8011d42:	930a      	str	r3, [sp, #40]	; 0x28
 8011d44:	2300      	movs	r3, #0
 8011d46:	930e      	str	r3, [sp, #56]	; 0x38
 8011d48:	e7bf      	b.n	8011cca <_dtoa_r+0x1ca>
 8011d4a:	2300      	movs	r3, #0
 8011d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	dc5a      	bgt.n	8011e0a <_dtoa_r+0x30a>
 8011d54:	f04f 0901 	mov.w	r9, #1
 8011d58:	f8cd 9020 	str.w	r9, [sp, #32]
 8011d5c:	464b      	mov	r3, r9
 8011d5e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8011d62:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011d64:	2200      	movs	r2, #0
 8011d66:	6042      	str	r2, [r0, #4]
 8011d68:	2204      	movs	r2, #4
 8011d6a:	f102 0614 	add.w	r6, r2, #20
 8011d6e:	429e      	cmp	r6, r3
 8011d70:	6841      	ldr	r1, [r0, #4]
 8011d72:	d950      	bls.n	8011e16 <_dtoa_r+0x316>
 8011d74:	4628      	mov	r0, r5
 8011d76:	f000 fcbd 	bl	80126f4 <_Balloc>
 8011d7a:	9003      	str	r0, [sp, #12]
 8011d7c:	2800      	cmp	r0, #0
 8011d7e:	d14e      	bne.n	8011e1e <_dtoa_r+0x31e>
 8011d80:	4b19      	ldr	r3, [pc, #100]	; (8011de8 <_dtoa_r+0x2e8>)
 8011d82:	4602      	mov	r2, r0
 8011d84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011d88:	e6ce      	b.n	8011b28 <_dtoa_r+0x28>
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	e7de      	b.n	8011d4c <_dtoa_r+0x24c>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011d94:	eb0a 0903 	add.w	r9, sl, r3
 8011d98:	f109 0301 	add.w	r3, r9, #1
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	9308      	str	r3, [sp, #32]
 8011da0:	bfb8      	it	lt
 8011da2:	2301      	movlt	r3, #1
 8011da4:	e7dd      	b.n	8011d62 <_dtoa_r+0x262>
 8011da6:	2301      	movs	r3, #1
 8011da8:	e7f2      	b.n	8011d90 <_dtoa_r+0x290>
 8011daa:	bf00      	nop
 8011dac:	f3af 8000 	nop.w
 8011db0:	636f4361 	.word	0x636f4361
 8011db4:	3fd287a7 	.word	0x3fd287a7
 8011db8:	8b60c8b3 	.word	0x8b60c8b3
 8011dbc:	3fc68a28 	.word	0x3fc68a28
 8011dc0:	509f79fb 	.word	0x509f79fb
 8011dc4:	3fd34413 	.word	0x3fd34413
 8011dc8:	080159ed 	.word	0x080159ed
 8011dcc:	08015a04 	.word	0x08015a04
 8011dd0:	7ff00000 	.word	0x7ff00000
 8011dd4:	080159e9 	.word	0x080159e9
 8011dd8:	080159e0 	.word	0x080159e0
 8011ddc:	080159bd 	.word	0x080159bd
 8011de0:	3ff80000 	.word	0x3ff80000
 8011de4:	08015af8 	.word	0x08015af8
 8011de8:	08015a5f 	.word	0x08015a5f
 8011dec:	2401      	movs	r4, #1
 8011dee:	2300      	movs	r3, #0
 8011df0:	9322      	str	r3, [sp, #136]	; 0x88
 8011df2:	940b      	str	r4, [sp, #44]	; 0x2c
 8011df4:	f04f 39ff 	mov.w	r9, #4294967295
 8011df8:	2200      	movs	r2, #0
 8011dfa:	f8cd 9020 	str.w	r9, [sp, #32]
 8011dfe:	2312      	movs	r3, #18
 8011e00:	9223      	str	r2, [sp, #140]	; 0x8c
 8011e02:	e7ae      	b.n	8011d62 <_dtoa_r+0x262>
 8011e04:	2301      	movs	r3, #1
 8011e06:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e08:	e7f4      	b.n	8011df4 <_dtoa_r+0x2f4>
 8011e0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8011e0e:	f8cd 9020 	str.w	r9, [sp, #32]
 8011e12:	464b      	mov	r3, r9
 8011e14:	e7a5      	b.n	8011d62 <_dtoa_r+0x262>
 8011e16:	3101      	adds	r1, #1
 8011e18:	6041      	str	r1, [r0, #4]
 8011e1a:	0052      	lsls	r2, r2, #1
 8011e1c:	e7a5      	b.n	8011d6a <_dtoa_r+0x26a>
 8011e1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e20:	9a03      	ldr	r2, [sp, #12]
 8011e22:	601a      	str	r2, [r3, #0]
 8011e24:	9b08      	ldr	r3, [sp, #32]
 8011e26:	2b0e      	cmp	r3, #14
 8011e28:	f200 80a8 	bhi.w	8011f7c <_dtoa_r+0x47c>
 8011e2c:	2c00      	cmp	r4, #0
 8011e2e:	f000 80a5 	beq.w	8011f7c <_dtoa_r+0x47c>
 8011e32:	f1ba 0f00 	cmp.w	sl, #0
 8011e36:	dd34      	ble.n	8011ea2 <_dtoa_r+0x3a2>
 8011e38:	4a9a      	ldr	r2, [pc, #616]	; (80120a4 <_dtoa_r+0x5a4>)
 8011e3a:	f00a 030f 	and.w	r3, sl, #15
 8011e3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011e46:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011e4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011e4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8011e52:	d016      	beq.n	8011e82 <_dtoa_r+0x382>
 8011e54:	4b94      	ldr	r3, [pc, #592]	; (80120a8 <_dtoa_r+0x5a8>)
 8011e56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011e5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e5e:	f7ee fccd 	bl	80007fc <__aeabi_ddiv>
 8011e62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e66:	f004 040f 	and.w	r4, r4, #15
 8011e6a:	2703      	movs	r7, #3
 8011e6c:	4e8e      	ldr	r6, [pc, #568]	; (80120a8 <_dtoa_r+0x5a8>)
 8011e6e:	b954      	cbnz	r4, 8011e86 <_dtoa_r+0x386>
 8011e70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011e74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e78:	f7ee fcc0 	bl	80007fc <__aeabi_ddiv>
 8011e7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e80:	e029      	b.n	8011ed6 <_dtoa_r+0x3d6>
 8011e82:	2702      	movs	r7, #2
 8011e84:	e7f2      	b.n	8011e6c <_dtoa_r+0x36c>
 8011e86:	07e1      	lsls	r1, r4, #31
 8011e88:	d508      	bpl.n	8011e9c <_dtoa_r+0x39c>
 8011e8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011e8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e92:	f7ee fb89 	bl	80005a8 <__aeabi_dmul>
 8011e96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011e9a:	3701      	adds	r7, #1
 8011e9c:	1064      	asrs	r4, r4, #1
 8011e9e:	3608      	adds	r6, #8
 8011ea0:	e7e5      	b.n	8011e6e <_dtoa_r+0x36e>
 8011ea2:	f000 80a5 	beq.w	8011ff0 <_dtoa_r+0x4f0>
 8011ea6:	f1ca 0400 	rsb	r4, sl, #0
 8011eaa:	4b7e      	ldr	r3, [pc, #504]	; (80120a4 <_dtoa_r+0x5a4>)
 8011eac:	4e7e      	ldr	r6, [pc, #504]	; (80120a8 <_dtoa_r+0x5a8>)
 8011eae:	f004 020f 	and.w	r2, r4, #15
 8011eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011ebe:	f7ee fb73 	bl	80005a8 <__aeabi_dmul>
 8011ec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ec6:	1124      	asrs	r4, r4, #4
 8011ec8:	2300      	movs	r3, #0
 8011eca:	2702      	movs	r7, #2
 8011ecc:	2c00      	cmp	r4, #0
 8011ece:	f040 8084 	bne.w	8011fda <_dtoa_r+0x4da>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d1d2      	bne.n	8011e7c <_dtoa_r+0x37c>
 8011ed6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	f000 808b 	beq.w	8011ff4 <_dtoa_r+0x4f4>
 8011ede:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011ee2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011ee6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011eea:	4b70      	ldr	r3, [pc, #448]	; (80120ac <_dtoa_r+0x5ac>)
 8011eec:	2200      	movs	r2, #0
 8011eee:	f7ee fdcd 	bl	8000a8c <__aeabi_dcmplt>
 8011ef2:	2800      	cmp	r0, #0
 8011ef4:	d07e      	beq.n	8011ff4 <_dtoa_r+0x4f4>
 8011ef6:	9b08      	ldr	r3, [sp, #32]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d07b      	beq.n	8011ff4 <_dtoa_r+0x4f4>
 8011efc:	f1b9 0f00 	cmp.w	r9, #0
 8011f00:	dd38      	ble.n	8011f74 <_dtoa_r+0x474>
 8011f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011f06:	4b6a      	ldr	r3, [pc, #424]	; (80120b0 <_dtoa_r+0x5b0>)
 8011f08:	2200      	movs	r2, #0
 8011f0a:	f7ee fb4d 	bl	80005a8 <__aeabi_dmul>
 8011f0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f12:	f10a 38ff 	add.w	r8, sl, #4294967295
 8011f16:	3701      	adds	r7, #1
 8011f18:	464c      	mov	r4, r9
 8011f1a:	4638      	mov	r0, r7
 8011f1c:	f7ee fada 	bl	80004d4 <__aeabi_i2d>
 8011f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f24:	f7ee fb40 	bl	80005a8 <__aeabi_dmul>
 8011f28:	4b62      	ldr	r3, [pc, #392]	; (80120b4 <_dtoa_r+0x5b4>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f7ee f986 	bl	800023c <__adddf3>
 8011f30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011f34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011f38:	9611      	str	r6, [sp, #68]	; 0x44
 8011f3a:	2c00      	cmp	r4, #0
 8011f3c:	d15d      	bne.n	8011ffa <_dtoa_r+0x4fa>
 8011f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f42:	4b5d      	ldr	r3, [pc, #372]	; (80120b8 <_dtoa_r+0x5b8>)
 8011f44:	2200      	movs	r2, #0
 8011f46:	f7ee f977 	bl	8000238 <__aeabi_dsub>
 8011f4a:	4602      	mov	r2, r0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f54:	4633      	mov	r3, r6
 8011f56:	f7ee fdb7 	bl	8000ac8 <__aeabi_dcmpgt>
 8011f5a:	2800      	cmp	r0, #0
 8011f5c:	f040 829c 	bne.w	8012498 <_dtoa_r+0x998>
 8011f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011f6a:	f7ee fd8f 	bl	8000a8c <__aeabi_dcmplt>
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	f040 8290 	bne.w	8012494 <_dtoa_r+0x994>
 8011f74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8011f78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011f7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	f2c0 8152 	blt.w	8012228 <_dtoa_r+0x728>
 8011f84:	f1ba 0f0e 	cmp.w	sl, #14
 8011f88:	f300 814e 	bgt.w	8012228 <_dtoa_r+0x728>
 8011f8c:	4b45      	ldr	r3, [pc, #276]	; (80120a4 <_dtoa_r+0x5a4>)
 8011f8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011f92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011f96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8011f9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f280 80db 	bge.w	8012158 <_dtoa_r+0x658>
 8011fa2:	9b08      	ldr	r3, [sp, #32]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	f300 80d7 	bgt.w	8012158 <_dtoa_r+0x658>
 8011faa:	f040 8272 	bne.w	8012492 <_dtoa_r+0x992>
 8011fae:	4b42      	ldr	r3, [pc, #264]	; (80120b8 <_dtoa_r+0x5b8>)
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011fb6:	f7ee faf7 	bl	80005a8 <__aeabi_dmul>
 8011fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fbe:	f7ee fd79 	bl	8000ab4 <__aeabi_dcmpge>
 8011fc2:	9c08      	ldr	r4, [sp, #32]
 8011fc4:	4626      	mov	r6, r4
 8011fc6:	2800      	cmp	r0, #0
 8011fc8:	f040 8248 	bne.w	801245c <_dtoa_r+0x95c>
 8011fcc:	9f03      	ldr	r7, [sp, #12]
 8011fce:	2331      	movs	r3, #49	; 0x31
 8011fd0:	f807 3b01 	strb.w	r3, [r7], #1
 8011fd4:	f10a 0a01 	add.w	sl, sl, #1
 8011fd8:	e244      	b.n	8012464 <_dtoa_r+0x964>
 8011fda:	07e2      	lsls	r2, r4, #31
 8011fdc:	d505      	bpl.n	8011fea <_dtoa_r+0x4ea>
 8011fde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011fe2:	f7ee fae1 	bl	80005a8 <__aeabi_dmul>
 8011fe6:	3701      	adds	r7, #1
 8011fe8:	2301      	movs	r3, #1
 8011fea:	1064      	asrs	r4, r4, #1
 8011fec:	3608      	adds	r6, #8
 8011fee:	e76d      	b.n	8011ecc <_dtoa_r+0x3cc>
 8011ff0:	2702      	movs	r7, #2
 8011ff2:	e770      	b.n	8011ed6 <_dtoa_r+0x3d6>
 8011ff4:	9c08      	ldr	r4, [sp, #32]
 8011ff6:	46d0      	mov	r8, sl
 8011ff8:	e78f      	b.n	8011f1a <_dtoa_r+0x41a>
 8011ffa:	9903      	ldr	r1, [sp, #12]
 8011ffc:	4b29      	ldr	r3, [pc, #164]	; (80120a4 <_dtoa_r+0x5a4>)
 8011ffe:	4421      	add	r1, r4
 8012000:	9112      	str	r1, [sp, #72]	; 0x48
 8012002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012004:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012008:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801200c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012010:	2900      	cmp	r1, #0
 8012012:	d055      	beq.n	80120c0 <_dtoa_r+0x5c0>
 8012014:	4929      	ldr	r1, [pc, #164]	; (80120bc <_dtoa_r+0x5bc>)
 8012016:	2000      	movs	r0, #0
 8012018:	f7ee fbf0 	bl	80007fc <__aeabi_ddiv>
 801201c:	463b      	mov	r3, r7
 801201e:	4632      	mov	r2, r6
 8012020:	f7ee f90a 	bl	8000238 <__aeabi_dsub>
 8012024:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012028:	9f03      	ldr	r7, [sp, #12]
 801202a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801202e:	f7ee fd6b 	bl	8000b08 <__aeabi_d2iz>
 8012032:	4604      	mov	r4, r0
 8012034:	f7ee fa4e 	bl	80004d4 <__aeabi_i2d>
 8012038:	4602      	mov	r2, r0
 801203a:	460b      	mov	r3, r1
 801203c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012040:	f7ee f8fa 	bl	8000238 <__aeabi_dsub>
 8012044:	3430      	adds	r4, #48	; 0x30
 8012046:	4602      	mov	r2, r0
 8012048:	460b      	mov	r3, r1
 801204a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801204e:	f807 4b01 	strb.w	r4, [r7], #1
 8012052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012056:	f7ee fd19 	bl	8000a8c <__aeabi_dcmplt>
 801205a:	2800      	cmp	r0, #0
 801205c:	d174      	bne.n	8012148 <_dtoa_r+0x648>
 801205e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012062:	4912      	ldr	r1, [pc, #72]	; (80120ac <_dtoa_r+0x5ac>)
 8012064:	2000      	movs	r0, #0
 8012066:	f7ee f8e7 	bl	8000238 <__aeabi_dsub>
 801206a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801206e:	f7ee fd0d 	bl	8000a8c <__aeabi_dcmplt>
 8012072:	2800      	cmp	r0, #0
 8012074:	f040 80b7 	bne.w	80121e6 <_dtoa_r+0x6e6>
 8012078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801207a:	429f      	cmp	r7, r3
 801207c:	f43f af7a 	beq.w	8011f74 <_dtoa_r+0x474>
 8012080:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012084:	4b0a      	ldr	r3, [pc, #40]	; (80120b0 <_dtoa_r+0x5b0>)
 8012086:	2200      	movs	r2, #0
 8012088:	f7ee fa8e 	bl	80005a8 <__aeabi_dmul>
 801208c:	4b08      	ldr	r3, [pc, #32]	; (80120b0 <_dtoa_r+0x5b0>)
 801208e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012092:	2200      	movs	r2, #0
 8012094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012098:	f7ee fa86 	bl	80005a8 <__aeabi_dmul>
 801209c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80120a0:	e7c3      	b.n	801202a <_dtoa_r+0x52a>
 80120a2:	bf00      	nop
 80120a4:	08015af8 	.word	0x08015af8
 80120a8:	08015ad0 	.word	0x08015ad0
 80120ac:	3ff00000 	.word	0x3ff00000
 80120b0:	40240000 	.word	0x40240000
 80120b4:	401c0000 	.word	0x401c0000
 80120b8:	40140000 	.word	0x40140000
 80120bc:	3fe00000 	.word	0x3fe00000
 80120c0:	4630      	mov	r0, r6
 80120c2:	4639      	mov	r1, r7
 80120c4:	f7ee fa70 	bl	80005a8 <__aeabi_dmul>
 80120c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80120cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120ce:	9c03      	ldr	r4, [sp, #12]
 80120d0:	9314      	str	r3, [sp, #80]	; 0x50
 80120d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120d6:	f7ee fd17 	bl	8000b08 <__aeabi_d2iz>
 80120da:	9015      	str	r0, [sp, #84]	; 0x54
 80120dc:	f7ee f9fa 	bl	80004d4 <__aeabi_i2d>
 80120e0:	4602      	mov	r2, r0
 80120e2:	460b      	mov	r3, r1
 80120e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120e8:	f7ee f8a6 	bl	8000238 <__aeabi_dsub>
 80120ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120ee:	3330      	adds	r3, #48	; 0x30
 80120f0:	f804 3b01 	strb.w	r3, [r4], #1
 80120f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120f6:	429c      	cmp	r4, r3
 80120f8:	4606      	mov	r6, r0
 80120fa:	460f      	mov	r7, r1
 80120fc:	f04f 0200 	mov.w	r2, #0
 8012100:	d124      	bne.n	801214c <_dtoa_r+0x64c>
 8012102:	4ba4      	ldr	r3, [pc, #656]	; (8012394 <_dtoa_r+0x894>)
 8012104:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012108:	f7ee f898 	bl	800023c <__adddf3>
 801210c:	4602      	mov	r2, r0
 801210e:	460b      	mov	r3, r1
 8012110:	4630      	mov	r0, r6
 8012112:	4639      	mov	r1, r7
 8012114:	f7ee fcd8 	bl	8000ac8 <__aeabi_dcmpgt>
 8012118:	2800      	cmp	r0, #0
 801211a:	d163      	bne.n	80121e4 <_dtoa_r+0x6e4>
 801211c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012120:	499c      	ldr	r1, [pc, #624]	; (8012394 <_dtoa_r+0x894>)
 8012122:	2000      	movs	r0, #0
 8012124:	f7ee f888 	bl	8000238 <__aeabi_dsub>
 8012128:	4602      	mov	r2, r0
 801212a:	460b      	mov	r3, r1
 801212c:	4630      	mov	r0, r6
 801212e:	4639      	mov	r1, r7
 8012130:	f7ee fcac 	bl	8000a8c <__aeabi_dcmplt>
 8012134:	2800      	cmp	r0, #0
 8012136:	f43f af1d 	beq.w	8011f74 <_dtoa_r+0x474>
 801213a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801213c:	1e7b      	subs	r3, r7, #1
 801213e:	9314      	str	r3, [sp, #80]	; 0x50
 8012140:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8012144:	2b30      	cmp	r3, #48	; 0x30
 8012146:	d0f8      	beq.n	801213a <_dtoa_r+0x63a>
 8012148:	46c2      	mov	sl, r8
 801214a:	e03b      	b.n	80121c4 <_dtoa_r+0x6c4>
 801214c:	4b92      	ldr	r3, [pc, #584]	; (8012398 <_dtoa_r+0x898>)
 801214e:	f7ee fa2b 	bl	80005a8 <__aeabi_dmul>
 8012152:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012156:	e7bc      	b.n	80120d2 <_dtoa_r+0x5d2>
 8012158:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801215c:	9f03      	ldr	r7, [sp, #12]
 801215e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012162:	4640      	mov	r0, r8
 8012164:	4649      	mov	r1, r9
 8012166:	f7ee fb49 	bl	80007fc <__aeabi_ddiv>
 801216a:	f7ee fccd 	bl	8000b08 <__aeabi_d2iz>
 801216e:	4604      	mov	r4, r0
 8012170:	f7ee f9b0 	bl	80004d4 <__aeabi_i2d>
 8012174:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012178:	f7ee fa16 	bl	80005a8 <__aeabi_dmul>
 801217c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012180:	4602      	mov	r2, r0
 8012182:	460b      	mov	r3, r1
 8012184:	4640      	mov	r0, r8
 8012186:	4649      	mov	r1, r9
 8012188:	f7ee f856 	bl	8000238 <__aeabi_dsub>
 801218c:	f807 6b01 	strb.w	r6, [r7], #1
 8012190:	9e03      	ldr	r6, [sp, #12]
 8012192:	f8dd c020 	ldr.w	ip, [sp, #32]
 8012196:	1bbe      	subs	r6, r7, r6
 8012198:	45b4      	cmp	ip, r6
 801219a:	4602      	mov	r2, r0
 801219c:	460b      	mov	r3, r1
 801219e:	d136      	bne.n	801220e <_dtoa_r+0x70e>
 80121a0:	f7ee f84c 	bl	800023c <__adddf3>
 80121a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121a8:	4680      	mov	r8, r0
 80121aa:	4689      	mov	r9, r1
 80121ac:	f7ee fc8c 	bl	8000ac8 <__aeabi_dcmpgt>
 80121b0:	bb58      	cbnz	r0, 801220a <_dtoa_r+0x70a>
 80121b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121b6:	4640      	mov	r0, r8
 80121b8:	4649      	mov	r1, r9
 80121ba:	f7ee fc5d 	bl	8000a78 <__aeabi_dcmpeq>
 80121be:	b108      	cbz	r0, 80121c4 <_dtoa_r+0x6c4>
 80121c0:	07e1      	lsls	r1, r4, #31
 80121c2:	d422      	bmi.n	801220a <_dtoa_r+0x70a>
 80121c4:	4628      	mov	r0, r5
 80121c6:	4659      	mov	r1, fp
 80121c8:	f000 fad4 	bl	8012774 <_Bfree>
 80121cc:	2300      	movs	r3, #0
 80121ce:	703b      	strb	r3, [r7, #0]
 80121d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80121d2:	f10a 0001 	add.w	r0, sl, #1
 80121d6:	6018      	str	r0, [r3, #0]
 80121d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80121da:	2b00      	cmp	r3, #0
 80121dc:	f43f acdd 	beq.w	8011b9a <_dtoa_r+0x9a>
 80121e0:	601f      	str	r7, [r3, #0]
 80121e2:	e4da      	b.n	8011b9a <_dtoa_r+0x9a>
 80121e4:	4627      	mov	r7, r4
 80121e6:	463b      	mov	r3, r7
 80121e8:	461f      	mov	r7, r3
 80121ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121ee:	2a39      	cmp	r2, #57	; 0x39
 80121f0:	d107      	bne.n	8012202 <_dtoa_r+0x702>
 80121f2:	9a03      	ldr	r2, [sp, #12]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d1f7      	bne.n	80121e8 <_dtoa_r+0x6e8>
 80121f8:	9903      	ldr	r1, [sp, #12]
 80121fa:	2230      	movs	r2, #48	; 0x30
 80121fc:	f108 0801 	add.w	r8, r8, #1
 8012200:	700a      	strb	r2, [r1, #0]
 8012202:	781a      	ldrb	r2, [r3, #0]
 8012204:	3201      	adds	r2, #1
 8012206:	701a      	strb	r2, [r3, #0]
 8012208:	e79e      	b.n	8012148 <_dtoa_r+0x648>
 801220a:	46d0      	mov	r8, sl
 801220c:	e7eb      	b.n	80121e6 <_dtoa_r+0x6e6>
 801220e:	4b62      	ldr	r3, [pc, #392]	; (8012398 <_dtoa_r+0x898>)
 8012210:	2200      	movs	r2, #0
 8012212:	f7ee f9c9 	bl	80005a8 <__aeabi_dmul>
 8012216:	2200      	movs	r2, #0
 8012218:	2300      	movs	r3, #0
 801221a:	4680      	mov	r8, r0
 801221c:	4689      	mov	r9, r1
 801221e:	f7ee fc2b 	bl	8000a78 <__aeabi_dcmpeq>
 8012222:	2800      	cmp	r0, #0
 8012224:	d09b      	beq.n	801215e <_dtoa_r+0x65e>
 8012226:	e7cd      	b.n	80121c4 <_dtoa_r+0x6c4>
 8012228:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801222a:	2a00      	cmp	r2, #0
 801222c:	f000 80d0 	beq.w	80123d0 <_dtoa_r+0x8d0>
 8012230:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012232:	2a01      	cmp	r2, #1
 8012234:	f300 80b2 	bgt.w	801239c <_dtoa_r+0x89c>
 8012238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801223a:	2a00      	cmp	r2, #0
 801223c:	f000 80a6 	beq.w	801238c <_dtoa_r+0x88c>
 8012240:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012244:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012246:	9f06      	ldr	r7, [sp, #24]
 8012248:	9a06      	ldr	r2, [sp, #24]
 801224a:	441a      	add	r2, r3
 801224c:	9206      	str	r2, [sp, #24]
 801224e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012250:	2101      	movs	r1, #1
 8012252:	441a      	add	r2, r3
 8012254:	4628      	mov	r0, r5
 8012256:	9209      	str	r2, [sp, #36]	; 0x24
 8012258:	f000 fb42 	bl	80128e0 <__i2b>
 801225c:	4606      	mov	r6, r0
 801225e:	2f00      	cmp	r7, #0
 8012260:	dd0c      	ble.n	801227c <_dtoa_r+0x77c>
 8012262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012264:	2b00      	cmp	r3, #0
 8012266:	dd09      	ble.n	801227c <_dtoa_r+0x77c>
 8012268:	42bb      	cmp	r3, r7
 801226a:	9a06      	ldr	r2, [sp, #24]
 801226c:	bfa8      	it	ge
 801226e:	463b      	movge	r3, r7
 8012270:	1ad2      	subs	r2, r2, r3
 8012272:	9206      	str	r2, [sp, #24]
 8012274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012276:	1aff      	subs	r7, r7, r3
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	9309      	str	r3, [sp, #36]	; 0x24
 801227c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801227e:	b1f3      	cbz	r3, 80122be <_dtoa_r+0x7be>
 8012280:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012282:	2b00      	cmp	r3, #0
 8012284:	f000 80a8 	beq.w	80123d8 <_dtoa_r+0x8d8>
 8012288:	2c00      	cmp	r4, #0
 801228a:	dd10      	ble.n	80122ae <_dtoa_r+0x7ae>
 801228c:	4631      	mov	r1, r6
 801228e:	4622      	mov	r2, r4
 8012290:	4628      	mov	r0, r5
 8012292:	f000 fbe3 	bl	8012a5c <__pow5mult>
 8012296:	465a      	mov	r2, fp
 8012298:	4601      	mov	r1, r0
 801229a:	4606      	mov	r6, r0
 801229c:	4628      	mov	r0, r5
 801229e:	f000 fb35 	bl	801290c <__multiply>
 80122a2:	4659      	mov	r1, fp
 80122a4:	4680      	mov	r8, r0
 80122a6:	4628      	mov	r0, r5
 80122a8:	f000 fa64 	bl	8012774 <_Bfree>
 80122ac:	46c3      	mov	fp, r8
 80122ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122b0:	1b1a      	subs	r2, r3, r4
 80122b2:	d004      	beq.n	80122be <_dtoa_r+0x7be>
 80122b4:	4659      	mov	r1, fp
 80122b6:	4628      	mov	r0, r5
 80122b8:	f000 fbd0 	bl	8012a5c <__pow5mult>
 80122bc:	4683      	mov	fp, r0
 80122be:	2101      	movs	r1, #1
 80122c0:	4628      	mov	r0, r5
 80122c2:	f000 fb0d 	bl	80128e0 <__i2b>
 80122c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	4604      	mov	r4, r0
 80122cc:	f340 8086 	ble.w	80123dc <_dtoa_r+0x8dc>
 80122d0:	461a      	mov	r2, r3
 80122d2:	4601      	mov	r1, r0
 80122d4:	4628      	mov	r0, r5
 80122d6:	f000 fbc1 	bl	8012a5c <__pow5mult>
 80122da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80122dc:	2b01      	cmp	r3, #1
 80122de:	4604      	mov	r4, r0
 80122e0:	dd7f      	ble.n	80123e2 <_dtoa_r+0x8e2>
 80122e2:	f04f 0800 	mov.w	r8, #0
 80122e6:	6923      	ldr	r3, [r4, #16]
 80122e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80122ec:	6918      	ldr	r0, [r3, #16]
 80122ee:	f000 faa9 	bl	8012844 <__hi0bits>
 80122f2:	f1c0 0020 	rsb	r0, r0, #32
 80122f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f8:	4418      	add	r0, r3
 80122fa:	f010 001f 	ands.w	r0, r0, #31
 80122fe:	f000 8092 	beq.w	8012426 <_dtoa_r+0x926>
 8012302:	f1c0 0320 	rsb	r3, r0, #32
 8012306:	2b04      	cmp	r3, #4
 8012308:	f340 808a 	ble.w	8012420 <_dtoa_r+0x920>
 801230c:	f1c0 001c 	rsb	r0, r0, #28
 8012310:	9b06      	ldr	r3, [sp, #24]
 8012312:	4403      	add	r3, r0
 8012314:	9306      	str	r3, [sp, #24]
 8012316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012318:	4403      	add	r3, r0
 801231a:	4407      	add	r7, r0
 801231c:	9309      	str	r3, [sp, #36]	; 0x24
 801231e:	9b06      	ldr	r3, [sp, #24]
 8012320:	2b00      	cmp	r3, #0
 8012322:	dd05      	ble.n	8012330 <_dtoa_r+0x830>
 8012324:	4659      	mov	r1, fp
 8012326:	461a      	mov	r2, r3
 8012328:	4628      	mov	r0, r5
 801232a:	f000 fbf1 	bl	8012b10 <__lshift>
 801232e:	4683      	mov	fp, r0
 8012330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012332:	2b00      	cmp	r3, #0
 8012334:	dd05      	ble.n	8012342 <_dtoa_r+0x842>
 8012336:	4621      	mov	r1, r4
 8012338:	461a      	mov	r2, r3
 801233a:	4628      	mov	r0, r5
 801233c:	f000 fbe8 	bl	8012b10 <__lshift>
 8012340:	4604      	mov	r4, r0
 8012342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012344:	2b00      	cmp	r3, #0
 8012346:	d070      	beq.n	801242a <_dtoa_r+0x92a>
 8012348:	4621      	mov	r1, r4
 801234a:	4658      	mov	r0, fp
 801234c:	f000 fc50 	bl	8012bf0 <__mcmp>
 8012350:	2800      	cmp	r0, #0
 8012352:	da6a      	bge.n	801242a <_dtoa_r+0x92a>
 8012354:	2300      	movs	r3, #0
 8012356:	4659      	mov	r1, fp
 8012358:	220a      	movs	r2, #10
 801235a:	4628      	mov	r0, r5
 801235c:	f000 fa2c 	bl	80127b8 <__multadd>
 8012360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012366:	4683      	mov	fp, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	f000 8194 	beq.w	8012696 <_dtoa_r+0xb96>
 801236e:	4631      	mov	r1, r6
 8012370:	2300      	movs	r3, #0
 8012372:	220a      	movs	r2, #10
 8012374:	4628      	mov	r0, r5
 8012376:	f000 fa1f 	bl	80127b8 <__multadd>
 801237a:	f1b9 0f00 	cmp.w	r9, #0
 801237e:	4606      	mov	r6, r0
 8012380:	f300 8093 	bgt.w	80124aa <_dtoa_r+0x9aa>
 8012384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012386:	2b02      	cmp	r3, #2
 8012388:	dc57      	bgt.n	801243a <_dtoa_r+0x93a>
 801238a:	e08e      	b.n	80124aa <_dtoa_r+0x9aa>
 801238c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801238e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012392:	e757      	b.n	8012244 <_dtoa_r+0x744>
 8012394:	3fe00000 	.word	0x3fe00000
 8012398:	40240000 	.word	0x40240000
 801239c:	9b08      	ldr	r3, [sp, #32]
 801239e:	1e5c      	subs	r4, r3, #1
 80123a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123a2:	42a3      	cmp	r3, r4
 80123a4:	bfbf      	itttt	lt
 80123a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80123a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80123aa:	1ae2      	sublt	r2, r4, r3
 80123ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80123ae:	bfb6      	itet	lt
 80123b0:	189b      	addlt	r3, r3, r2
 80123b2:	1b1c      	subge	r4, r3, r4
 80123b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80123b6:	9b08      	ldr	r3, [sp, #32]
 80123b8:	bfb8      	it	lt
 80123ba:	2400      	movlt	r4, #0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	bfb9      	ittee	lt
 80123c0:	9b06      	ldrlt	r3, [sp, #24]
 80123c2:	9a08      	ldrlt	r2, [sp, #32]
 80123c4:	9f06      	ldrge	r7, [sp, #24]
 80123c6:	9b08      	ldrge	r3, [sp, #32]
 80123c8:	bfbc      	itt	lt
 80123ca:	1a9f      	sublt	r7, r3, r2
 80123cc:	2300      	movlt	r3, #0
 80123ce:	e73b      	b.n	8012248 <_dtoa_r+0x748>
 80123d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80123d2:	9f06      	ldr	r7, [sp, #24]
 80123d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80123d6:	e742      	b.n	801225e <_dtoa_r+0x75e>
 80123d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123da:	e76b      	b.n	80122b4 <_dtoa_r+0x7b4>
 80123dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80123de:	2b01      	cmp	r3, #1
 80123e0:	dc19      	bgt.n	8012416 <_dtoa_r+0x916>
 80123e2:	9b04      	ldr	r3, [sp, #16]
 80123e4:	b9bb      	cbnz	r3, 8012416 <_dtoa_r+0x916>
 80123e6:	9b05      	ldr	r3, [sp, #20]
 80123e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123ec:	b99b      	cbnz	r3, 8012416 <_dtoa_r+0x916>
 80123ee:	9b05      	ldr	r3, [sp, #20]
 80123f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80123f4:	0d1b      	lsrs	r3, r3, #20
 80123f6:	051b      	lsls	r3, r3, #20
 80123f8:	b183      	cbz	r3, 801241c <_dtoa_r+0x91c>
 80123fa:	9b06      	ldr	r3, [sp, #24]
 80123fc:	3301      	adds	r3, #1
 80123fe:	9306      	str	r3, [sp, #24]
 8012400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012402:	3301      	adds	r3, #1
 8012404:	9309      	str	r3, [sp, #36]	; 0x24
 8012406:	f04f 0801 	mov.w	r8, #1
 801240a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801240c:	2b00      	cmp	r3, #0
 801240e:	f47f af6a 	bne.w	80122e6 <_dtoa_r+0x7e6>
 8012412:	2001      	movs	r0, #1
 8012414:	e76f      	b.n	80122f6 <_dtoa_r+0x7f6>
 8012416:	f04f 0800 	mov.w	r8, #0
 801241a:	e7f6      	b.n	801240a <_dtoa_r+0x90a>
 801241c:	4698      	mov	r8, r3
 801241e:	e7f4      	b.n	801240a <_dtoa_r+0x90a>
 8012420:	f43f af7d 	beq.w	801231e <_dtoa_r+0x81e>
 8012424:	4618      	mov	r0, r3
 8012426:	301c      	adds	r0, #28
 8012428:	e772      	b.n	8012310 <_dtoa_r+0x810>
 801242a:	9b08      	ldr	r3, [sp, #32]
 801242c:	2b00      	cmp	r3, #0
 801242e:	dc36      	bgt.n	801249e <_dtoa_r+0x99e>
 8012430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012432:	2b02      	cmp	r3, #2
 8012434:	dd33      	ble.n	801249e <_dtoa_r+0x99e>
 8012436:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801243a:	f1b9 0f00 	cmp.w	r9, #0
 801243e:	d10d      	bne.n	801245c <_dtoa_r+0x95c>
 8012440:	4621      	mov	r1, r4
 8012442:	464b      	mov	r3, r9
 8012444:	2205      	movs	r2, #5
 8012446:	4628      	mov	r0, r5
 8012448:	f000 f9b6 	bl	80127b8 <__multadd>
 801244c:	4601      	mov	r1, r0
 801244e:	4604      	mov	r4, r0
 8012450:	4658      	mov	r0, fp
 8012452:	f000 fbcd 	bl	8012bf0 <__mcmp>
 8012456:	2800      	cmp	r0, #0
 8012458:	f73f adb8 	bgt.w	8011fcc <_dtoa_r+0x4cc>
 801245c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801245e:	9f03      	ldr	r7, [sp, #12]
 8012460:	ea6f 0a03 	mvn.w	sl, r3
 8012464:	f04f 0800 	mov.w	r8, #0
 8012468:	4621      	mov	r1, r4
 801246a:	4628      	mov	r0, r5
 801246c:	f000 f982 	bl	8012774 <_Bfree>
 8012470:	2e00      	cmp	r6, #0
 8012472:	f43f aea7 	beq.w	80121c4 <_dtoa_r+0x6c4>
 8012476:	f1b8 0f00 	cmp.w	r8, #0
 801247a:	d005      	beq.n	8012488 <_dtoa_r+0x988>
 801247c:	45b0      	cmp	r8, r6
 801247e:	d003      	beq.n	8012488 <_dtoa_r+0x988>
 8012480:	4641      	mov	r1, r8
 8012482:	4628      	mov	r0, r5
 8012484:	f000 f976 	bl	8012774 <_Bfree>
 8012488:	4631      	mov	r1, r6
 801248a:	4628      	mov	r0, r5
 801248c:	f000 f972 	bl	8012774 <_Bfree>
 8012490:	e698      	b.n	80121c4 <_dtoa_r+0x6c4>
 8012492:	2400      	movs	r4, #0
 8012494:	4626      	mov	r6, r4
 8012496:	e7e1      	b.n	801245c <_dtoa_r+0x95c>
 8012498:	46c2      	mov	sl, r8
 801249a:	4626      	mov	r6, r4
 801249c:	e596      	b.n	8011fcc <_dtoa_r+0x4cc>
 801249e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f000 80fd 	beq.w	80126a4 <_dtoa_r+0xba4>
 80124aa:	2f00      	cmp	r7, #0
 80124ac:	dd05      	ble.n	80124ba <_dtoa_r+0x9ba>
 80124ae:	4631      	mov	r1, r6
 80124b0:	463a      	mov	r2, r7
 80124b2:	4628      	mov	r0, r5
 80124b4:	f000 fb2c 	bl	8012b10 <__lshift>
 80124b8:	4606      	mov	r6, r0
 80124ba:	f1b8 0f00 	cmp.w	r8, #0
 80124be:	d05c      	beq.n	801257a <_dtoa_r+0xa7a>
 80124c0:	6871      	ldr	r1, [r6, #4]
 80124c2:	4628      	mov	r0, r5
 80124c4:	f000 f916 	bl	80126f4 <_Balloc>
 80124c8:	4607      	mov	r7, r0
 80124ca:	b928      	cbnz	r0, 80124d8 <_dtoa_r+0x9d8>
 80124cc:	4b80      	ldr	r3, [pc, #512]	; (80126d0 <_dtoa_r+0xbd0>)
 80124ce:	4602      	mov	r2, r0
 80124d0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80124d4:	f7ff bb28 	b.w	8011b28 <_dtoa_r+0x28>
 80124d8:	6932      	ldr	r2, [r6, #16]
 80124da:	3202      	adds	r2, #2
 80124dc:	0092      	lsls	r2, r2, #2
 80124de:	f106 010c 	add.w	r1, r6, #12
 80124e2:	300c      	adds	r0, #12
 80124e4:	f7fe fd1e 	bl	8010f24 <memcpy>
 80124e8:	2201      	movs	r2, #1
 80124ea:	4639      	mov	r1, r7
 80124ec:	4628      	mov	r0, r5
 80124ee:	f000 fb0f 	bl	8012b10 <__lshift>
 80124f2:	9b03      	ldr	r3, [sp, #12]
 80124f4:	3301      	adds	r3, #1
 80124f6:	9308      	str	r3, [sp, #32]
 80124f8:	9b03      	ldr	r3, [sp, #12]
 80124fa:	444b      	add	r3, r9
 80124fc:	930a      	str	r3, [sp, #40]	; 0x28
 80124fe:	9b04      	ldr	r3, [sp, #16]
 8012500:	f003 0301 	and.w	r3, r3, #1
 8012504:	46b0      	mov	r8, r6
 8012506:	9309      	str	r3, [sp, #36]	; 0x24
 8012508:	4606      	mov	r6, r0
 801250a:	9b08      	ldr	r3, [sp, #32]
 801250c:	4621      	mov	r1, r4
 801250e:	3b01      	subs	r3, #1
 8012510:	4658      	mov	r0, fp
 8012512:	9304      	str	r3, [sp, #16]
 8012514:	f7ff fa6c 	bl	80119f0 <quorem>
 8012518:	4603      	mov	r3, r0
 801251a:	3330      	adds	r3, #48	; 0x30
 801251c:	9006      	str	r0, [sp, #24]
 801251e:	4641      	mov	r1, r8
 8012520:	4658      	mov	r0, fp
 8012522:	930b      	str	r3, [sp, #44]	; 0x2c
 8012524:	f000 fb64 	bl	8012bf0 <__mcmp>
 8012528:	4632      	mov	r2, r6
 801252a:	4681      	mov	r9, r0
 801252c:	4621      	mov	r1, r4
 801252e:	4628      	mov	r0, r5
 8012530:	f000 fb7a 	bl	8012c28 <__mdiff>
 8012534:	68c2      	ldr	r2, [r0, #12]
 8012536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012538:	4607      	mov	r7, r0
 801253a:	bb02      	cbnz	r2, 801257e <_dtoa_r+0xa7e>
 801253c:	4601      	mov	r1, r0
 801253e:	4658      	mov	r0, fp
 8012540:	f000 fb56 	bl	8012bf0 <__mcmp>
 8012544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012546:	4602      	mov	r2, r0
 8012548:	4639      	mov	r1, r7
 801254a:	4628      	mov	r0, r5
 801254c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8012550:	f000 f910 	bl	8012774 <_Bfree>
 8012554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012558:	9f08      	ldr	r7, [sp, #32]
 801255a:	ea43 0102 	orr.w	r1, r3, r2
 801255e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012560:	430b      	orrs	r3, r1
 8012562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012564:	d10d      	bne.n	8012582 <_dtoa_r+0xa82>
 8012566:	2b39      	cmp	r3, #57	; 0x39
 8012568:	d029      	beq.n	80125be <_dtoa_r+0xabe>
 801256a:	f1b9 0f00 	cmp.w	r9, #0
 801256e:	dd01      	ble.n	8012574 <_dtoa_r+0xa74>
 8012570:	9b06      	ldr	r3, [sp, #24]
 8012572:	3331      	adds	r3, #49	; 0x31
 8012574:	9a04      	ldr	r2, [sp, #16]
 8012576:	7013      	strb	r3, [r2, #0]
 8012578:	e776      	b.n	8012468 <_dtoa_r+0x968>
 801257a:	4630      	mov	r0, r6
 801257c:	e7b9      	b.n	80124f2 <_dtoa_r+0x9f2>
 801257e:	2201      	movs	r2, #1
 8012580:	e7e2      	b.n	8012548 <_dtoa_r+0xa48>
 8012582:	f1b9 0f00 	cmp.w	r9, #0
 8012586:	db06      	blt.n	8012596 <_dtoa_r+0xa96>
 8012588:	9922      	ldr	r1, [sp, #136]	; 0x88
 801258a:	ea41 0909 	orr.w	r9, r1, r9
 801258e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012590:	ea59 0101 	orrs.w	r1, r9, r1
 8012594:	d120      	bne.n	80125d8 <_dtoa_r+0xad8>
 8012596:	2a00      	cmp	r2, #0
 8012598:	ddec      	ble.n	8012574 <_dtoa_r+0xa74>
 801259a:	4659      	mov	r1, fp
 801259c:	2201      	movs	r2, #1
 801259e:	4628      	mov	r0, r5
 80125a0:	9308      	str	r3, [sp, #32]
 80125a2:	f000 fab5 	bl	8012b10 <__lshift>
 80125a6:	4621      	mov	r1, r4
 80125a8:	4683      	mov	fp, r0
 80125aa:	f000 fb21 	bl	8012bf0 <__mcmp>
 80125ae:	2800      	cmp	r0, #0
 80125b0:	9b08      	ldr	r3, [sp, #32]
 80125b2:	dc02      	bgt.n	80125ba <_dtoa_r+0xaba>
 80125b4:	d1de      	bne.n	8012574 <_dtoa_r+0xa74>
 80125b6:	07da      	lsls	r2, r3, #31
 80125b8:	d5dc      	bpl.n	8012574 <_dtoa_r+0xa74>
 80125ba:	2b39      	cmp	r3, #57	; 0x39
 80125bc:	d1d8      	bne.n	8012570 <_dtoa_r+0xa70>
 80125be:	9a04      	ldr	r2, [sp, #16]
 80125c0:	2339      	movs	r3, #57	; 0x39
 80125c2:	7013      	strb	r3, [r2, #0]
 80125c4:	463b      	mov	r3, r7
 80125c6:	461f      	mov	r7, r3
 80125c8:	3b01      	subs	r3, #1
 80125ca:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80125ce:	2a39      	cmp	r2, #57	; 0x39
 80125d0:	d050      	beq.n	8012674 <_dtoa_r+0xb74>
 80125d2:	3201      	adds	r2, #1
 80125d4:	701a      	strb	r2, [r3, #0]
 80125d6:	e747      	b.n	8012468 <_dtoa_r+0x968>
 80125d8:	2a00      	cmp	r2, #0
 80125da:	dd03      	ble.n	80125e4 <_dtoa_r+0xae4>
 80125dc:	2b39      	cmp	r3, #57	; 0x39
 80125de:	d0ee      	beq.n	80125be <_dtoa_r+0xabe>
 80125e0:	3301      	adds	r3, #1
 80125e2:	e7c7      	b.n	8012574 <_dtoa_r+0xa74>
 80125e4:	9a08      	ldr	r2, [sp, #32]
 80125e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80125e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80125ec:	428a      	cmp	r2, r1
 80125ee:	d02a      	beq.n	8012646 <_dtoa_r+0xb46>
 80125f0:	4659      	mov	r1, fp
 80125f2:	2300      	movs	r3, #0
 80125f4:	220a      	movs	r2, #10
 80125f6:	4628      	mov	r0, r5
 80125f8:	f000 f8de 	bl	80127b8 <__multadd>
 80125fc:	45b0      	cmp	r8, r6
 80125fe:	4683      	mov	fp, r0
 8012600:	f04f 0300 	mov.w	r3, #0
 8012604:	f04f 020a 	mov.w	r2, #10
 8012608:	4641      	mov	r1, r8
 801260a:	4628      	mov	r0, r5
 801260c:	d107      	bne.n	801261e <_dtoa_r+0xb1e>
 801260e:	f000 f8d3 	bl	80127b8 <__multadd>
 8012612:	4680      	mov	r8, r0
 8012614:	4606      	mov	r6, r0
 8012616:	9b08      	ldr	r3, [sp, #32]
 8012618:	3301      	adds	r3, #1
 801261a:	9308      	str	r3, [sp, #32]
 801261c:	e775      	b.n	801250a <_dtoa_r+0xa0a>
 801261e:	f000 f8cb 	bl	80127b8 <__multadd>
 8012622:	4631      	mov	r1, r6
 8012624:	4680      	mov	r8, r0
 8012626:	2300      	movs	r3, #0
 8012628:	220a      	movs	r2, #10
 801262a:	4628      	mov	r0, r5
 801262c:	f000 f8c4 	bl	80127b8 <__multadd>
 8012630:	4606      	mov	r6, r0
 8012632:	e7f0      	b.n	8012616 <_dtoa_r+0xb16>
 8012634:	f1b9 0f00 	cmp.w	r9, #0
 8012638:	9a03      	ldr	r2, [sp, #12]
 801263a:	bfcc      	ite	gt
 801263c:	464f      	movgt	r7, r9
 801263e:	2701      	movle	r7, #1
 8012640:	4417      	add	r7, r2
 8012642:	f04f 0800 	mov.w	r8, #0
 8012646:	4659      	mov	r1, fp
 8012648:	2201      	movs	r2, #1
 801264a:	4628      	mov	r0, r5
 801264c:	9308      	str	r3, [sp, #32]
 801264e:	f000 fa5f 	bl	8012b10 <__lshift>
 8012652:	4621      	mov	r1, r4
 8012654:	4683      	mov	fp, r0
 8012656:	f000 facb 	bl	8012bf0 <__mcmp>
 801265a:	2800      	cmp	r0, #0
 801265c:	dcb2      	bgt.n	80125c4 <_dtoa_r+0xac4>
 801265e:	d102      	bne.n	8012666 <_dtoa_r+0xb66>
 8012660:	9b08      	ldr	r3, [sp, #32]
 8012662:	07db      	lsls	r3, r3, #31
 8012664:	d4ae      	bmi.n	80125c4 <_dtoa_r+0xac4>
 8012666:	463b      	mov	r3, r7
 8012668:	461f      	mov	r7, r3
 801266a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801266e:	2a30      	cmp	r2, #48	; 0x30
 8012670:	d0fa      	beq.n	8012668 <_dtoa_r+0xb68>
 8012672:	e6f9      	b.n	8012468 <_dtoa_r+0x968>
 8012674:	9a03      	ldr	r2, [sp, #12]
 8012676:	429a      	cmp	r2, r3
 8012678:	d1a5      	bne.n	80125c6 <_dtoa_r+0xac6>
 801267a:	f10a 0a01 	add.w	sl, sl, #1
 801267e:	2331      	movs	r3, #49	; 0x31
 8012680:	e779      	b.n	8012576 <_dtoa_r+0xa76>
 8012682:	4b14      	ldr	r3, [pc, #80]	; (80126d4 <_dtoa_r+0xbd4>)
 8012684:	f7ff baa7 	b.w	8011bd6 <_dtoa_r+0xd6>
 8012688:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801268a:	2b00      	cmp	r3, #0
 801268c:	f47f aa80 	bne.w	8011b90 <_dtoa_r+0x90>
 8012690:	4b11      	ldr	r3, [pc, #68]	; (80126d8 <_dtoa_r+0xbd8>)
 8012692:	f7ff baa0 	b.w	8011bd6 <_dtoa_r+0xd6>
 8012696:	f1b9 0f00 	cmp.w	r9, #0
 801269a:	dc03      	bgt.n	80126a4 <_dtoa_r+0xba4>
 801269c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801269e:	2b02      	cmp	r3, #2
 80126a0:	f73f aecb 	bgt.w	801243a <_dtoa_r+0x93a>
 80126a4:	9f03      	ldr	r7, [sp, #12]
 80126a6:	4621      	mov	r1, r4
 80126a8:	4658      	mov	r0, fp
 80126aa:	f7ff f9a1 	bl	80119f0 <quorem>
 80126ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80126b2:	f807 3b01 	strb.w	r3, [r7], #1
 80126b6:	9a03      	ldr	r2, [sp, #12]
 80126b8:	1aba      	subs	r2, r7, r2
 80126ba:	4591      	cmp	r9, r2
 80126bc:	ddba      	ble.n	8012634 <_dtoa_r+0xb34>
 80126be:	4659      	mov	r1, fp
 80126c0:	2300      	movs	r3, #0
 80126c2:	220a      	movs	r2, #10
 80126c4:	4628      	mov	r0, r5
 80126c6:	f000 f877 	bl	80127b8 <__multadd>
 80126ca:	4683      	mov	fp, r0
 80126cc:	e7eb      	b.n	80126a6 <_dtoa_r+0xba6>
 80126ce:	bf00      	nop
 80126d0:	08015a5f 	.word	0x08015a5f
 80126d4:	080159bc 	.word	0x080159bc
 80126d8:	080159e0 	.word	0x080159e0

080126dc <_localeconv_r>:
 80126dc:	4800      	ldr	r0, [pc, #0]	; (80126e0 <_localeconv_r+0x4>)
 80126de:	4770      	bx	lr
 80126e0:	200001b0 	.word	0x200001b0

080126e4 <malloc>:
 80126e4:	4b02      	ldr	r3, [pc, #8]	; (80126f0 <malloc+0xc>)
 80126e6:	4601      	mov	r1, r0
 80126e8:	6818      	ldr	r0, [r3, #0]
 80126ea:	f000 bbff 	b.w	8012eec <_malloc_r>
 80126ee:	bf00      	nop
 80126f0:	2000005c 	.word	0x2000005c

080126f4 <_Balloc>:
 80126f4:	b570      	push	{r4, r5, r6, lr}
 80126f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80126f8:	4604      	mov	r4, r0
 80126fa:	460d      	mov	r5, r1
 80126fc:	b976      	cbnz	r6, 801271c <_Balloc+0x28>
 80126fe:	2010      	movs	r0, #16
 8012700:	f7ff fff0 	bl	80126e4 <malloc>
 8012704:	4602      	mov	r2, r0
 8012706:	6260      	str	r0, [r4, #36]	; 0x24
 8012708:	b920      	cbnz	r0, 8012714 <_Balloc+0x20>
 801270a:	4b18      	ldr	r3, [pc, #96]	; (801276c <_Balloc+0x78>)
 801270c:	4818      	ldr	r0, [pc, #96]	; (8012770 <_Balloc+0x7c>)
 801270e:	2166      	movs	r1, #102	; 0x66
 8012710:	f000 fdcc 	bl	80132ac <__assert_func>
 8012714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012718:	6006      	str	r6, [r0, #0]
 801271a:	60c6      	str	r6, [r0, #12]
 801271c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801271e:	68f3      	ldr	r3, [r6, #12]
 8012720:	b183      	cbz	r3, 8012744 <_Balloc+0x50>
 8012722:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012724:	68db      	ldr	r3, [r3, #12]
 8012726:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801272a:	b9b8      	cbnz	r0, 801275c <_Balloc+0x68>
 801272c:	2101      	movs	r1, #1
 801272e:	fa01 f605 	lsl.w	r6, r1, r5
 8012732:	1d72      	adds	r2, r6, #5
 8012734:	0092      	lsls	r2, r2, #2
 8012736:	4620      	mov	r0, r4
 8012738:	f000 fb5a 	bl	8012df0 <_calloc_r>
 801273c:	b160      	cbz	r0, 8012758 <_Balloc+0x64>
 801273e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012742:	e00e      	b.n	8012762 <_Balloc+0x6e>
 8012744:	2221      	movs	r2, #33	; 0x21
 8012746:	2104      	movs	r1, #4
 8012748:	4620      	mov	r0, r4
 801274a:	f000 fb51 	bl	8012df0 <_calloc_r>
 801274e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012750:	60f0      	str	r0, [r6, #12]
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1e4      	bne.n	8012722 <_Balloc+0x2e>
 8012758:	2000      	movs	r0, #0
 801275a:	bd70      	pop	{r4, r5, r6, pc}
 801275c:	6802      	ldr	r2, [r0, #0]
 801275e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012762:	2300      	movs	r3, #0
 8012764:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012768:	e7f7      	b.n	801275a <_Balloc+0x66>
 801276a:	bf00      	nop
 801276c:	080159ed 	.word	0x080159ed
 8012770:	08015a70 	.word	0x08015a70

08012774 <_Bfree>:
 8012774:	b570      	push	{r4, r5, r6, lr}
 8012776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012778:	4605      	mov	r5, r0
 801277a:	460c      	mov	r4, r1
 801277c:	b976      	cbnz	r6, 801279c <_Bfree+0x28>
 801277e:	2010      	movs	r0, #16
 8012780:	f7ff ffb0 	bl	80126e4 <malloc>
 8012784:	4602      	mov	r2, r0
 8012786:	6268      	str	r0, [r5, #36]	; 0x24
 8012788:	b920      	cbnz	r0, 8012794 <_Bfree+0x20>
 801278a:	4b09      	ldr	r3, [pc, #36]	; (80127b0 <_Bfree+0x3c>)
 801278c:	4809      	ldr	r0, [pc, #36]	; (80127b4 <_Bfree+0x40>)
 801278e:	218a      	movs	r1, #138	; 0x8a
 8012790:	f000 fd8c 	bl	80132ac <__assert_func>
 8012794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012798:	6006      	str	r6, [r0, #0]
 801279a:	60c6      	str	r6, [r0, #12]
 801279c:	b13c      	cbz	r4, 80127ae <_Bfree+0x3a>
 801279e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80127a0:	6862      	ldr	r2, [r4, #4]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127a8:	6021      	str	r1, [r4, #0]
 80127aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127ae:	bd70      	pop	{r4, r5, r6, pc}
 80127b0:	080159ed 	.word	0x080159ed
 80127b4:	08015a70 	.word	0x08015a70

080127b8 <__multadd>:
 80127b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127bc:	690d      	ldr	r5, [r1, #16]
 80127be:	4607      	mov	r7, r0
 80127c0:	460c      	mov	r4, r1
 80127c2:	461e      	mov	r6, r3
 80127c4:	f101 0c14 	add.w	ip, r1, #20
 80127c8:	2000      	movs	r0, #0
 80127ca:	f8dc 3000 	ldr.w	r3, [ip]
 80127ce:	b299      	uxth	r1, r3
 80127d0:	fb02 6101 	mla	r1, r2, r1, r6
 80127d4:	0c1e      	lsrs	r6, r3, #16
 80127d6:	0c0b      	lsrs	r3, r1, #16
 80127d8:	fb02 3306 	mla	r3, r2, r6, r3
 80127dc:	b289      	uxth	r1, r1
 80127de:	3001      	adds	r0, #1
 80127e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80127e4:	4285      	cmp	r5, r0
 80127e6:	f84c 1b04 	str.w	r1, [ip], #4
 80127ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80127ee:	dcec      	bgt.n	80127ca <__multadd+0x12>
 80127f0:	b30e      	cbz	r6, 8012836 <__multadd+0x7e>
 80127f2:	68a3      	ldr	r3, [r4, #8]
 80127f4:	42ab      	cmp	r3, r5
 80127f6:	dc19      	bgt.n	801282c <__multadd+0x74>
 80127f8:	6861      	ldr	r1, [r4, #4]
 80127fa:	4638      	mov	r0, r7
 80127fc:	3101      	adds	r1, #1
 80127fe:	f7ff ff79 	bl	80126f4 <_Balloc>
 8012802:	4680      	mov	r8, r0
 8012804:	b928      	cbnz	r0, 8012812 <__multadd+0x5a>
 8012806:	4602      	mov	r2, r0
 8012808:	4b0c      	ldr	r3, [pc, #48]	; (801283c <__multadd+0x84>)
 801280a:	480d      	ldr	r0, [pc, #52]	; (8012840 <__multadd+0x88>)
 801280c:	21b5      	movs	r1, #181	; 0xb5
 801280e:	f000 fd4d 	bl	80132ac <__assert_func>
 8012812:	6922      	ldr	r2, [r4, #16]
 8012814:	3202      	adds	r2, #2
 8012816:	f104 010c 	add.w	r1, r4, #12
 801281a:	0092      	lsls	r2, r2, #2
 801281c:	300c      	adds	r0, #12
 801281e:	f7fe fb81 	bl	8010f24 <memcpy>
 8012822:	4621      	mov	r1, r4
 8012824:	4638      	mov	r0, r7
 8012826:	f7ff ffa5 	bl	8012774 <_Bfree>
 801282a:	4644      	mov	r4, r8
 801282c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012830:	3501      	adds	r5, #1
 8012832:	615e      	str	r6, [r3, #20]
 8012834:	6125      	str	r5, [r4, #16]
 8012836:	4620      	mov	r0, r4
 8012838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801283c:	08015a5f 	.word	0x08015a5f
 8012840:	08015a70 	.word	0x08015a70

08012844 <__hi0bits>:
 8012844:	0c02      	lsrs	r2, r0, #16
 8012846:	0412      	lsls	r2, r2, #16
 8012848:	4603      	mov	r3, r0
 801284a:	b9ca      	cbnz	r2, 8012880 <__hi0bits+0x3c>
 801284c:	0403      	lsls	r3, r0, #16
 801284e:	2010      	movs	r0, #16
 8012850:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012854:	bf04      	itt	eq
 8012856:	021b      	lsleq	r3, r3, #8
 8012858:	3008      	addeq	r0, #8
 801285a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801285e:	bf04      	itt	eq
 8012860:	011b      	lsleq	r3, r3, #4
 8012862:	3004      	addeq	r0, #4
 8012864:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012868:	bf04      	itt	eq
 801286a:	009b      	lsleq	r3, r3, #2
 801286c:	3002      	addeq	r0, #2
 801286e:	2b00      	cmp	r3, #0
 8012870:	db05      	blt.n	801287e <__hi0bits+0x3a>
 8012872:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8012876:	f100 0001 	add.w	r0, r0, #1
 801287a:	bf08      	it	eq
 801287c:	2020      	moveq	r0, #32
 801287e:	4770      	bx	lr
 8012880:	2000      	movs	r0, #0
 8012882:	e7e5      	b.n	8012850 <__hi0bits+0xc>

08012884 <__lo0bits>:
 8012884:	6803      	ldr	r3, [r0, #0]
 8012886:	4602      	mov	r2, r0
 8012888:	f013 0007 	ands.w	r0, r3, #7
 801288c:	d00b      	beq.n	80128a6 <__lo0bits+0x22>
 801288e:	07d9      	lsls	r1, r3, #31
 8012890:	d421      	bmi.n	80128d6 <__lo0bits+0x52>
 8012892:	0798      	lsls	r0, r3, #30
 8012894:	bf49      	itett	mi
 8012896:	085b      	lsrmi	r3, r3, #1
 8012898:	089b      	lsrpl	r3, r3, #2
 801289a:	2001      	movmi	r0, #1
 801289c:	6013      	strmi	r3, [r2, #0]
 801289e:	bf5c      	itt	pl
 80128a0:	6013      	strpl	r3, [r2, #0]
 80128a2:	2002      	movpl	r0, #2
 80128a4:	4770      	bx	lr
 80128a6:	b299      	uxth	r1, r3
 80128a8:	b909      	cbnz	r1, 80128ae <__lo0bits+0x2a>
 80128aa:	0c1b      	lsrs	r3, r3, #16
 80128ac:	2010      	movs	r0, #16
 80128ae:	b2d9      	uxtb	r1, r3
 80128b0:	b909      	cbnz	r1, 80128b6 <__lo0bits+0x32>
 80128b2:	3008      	adds	r0, #8
 80128b4:	0a1b      	lsrs	r3, r3, #8
 80128b6:	0719      	lsls	r1, r3, #28
 80128b8:	bf04      	itt	eq
 80128ba:	091b      	lsreq	r3, r3, #4
 80128bc:	3004      	addeq	r0, #4
 80128be:	0799      	lsls	r1, r3, #30
 80128c0:	bf04      	itt	eq
 80128c2:	089b      	lsreq	r3, r3, #2
 80128c4:	3002      	addeq	r0, #2
 80128c6:	07d9      	lsls	r1, r3, #31
 80128c8:	d403      	bmi.n	80128d2 <__lo0bits+0x4e>
 80128ca:	085b      	lsrs	r3, r3, #1
 80128cc:	f100 0001 	add.w	r0, r0, #1
 80128d0:	d003      	beq.n	80128da <__lo0bits+0x56>
 80128d2:	6013      	str	r3, [r2, #0]
 80128d4:	4770      	bx	lr
 80128d6:	2000      	movs	r0, #0
 80128d8:	4770      	bx	lr
 80128da:	2020      	movs	r0, #32
 80128dc:	4770      	bx	lr
	...

080128e0 <__i2b>:
 80128e0:	b510      	push	{r4, lr}
 80128e2:	460c      	mov	r4, r1
 80128e4:	2101      	movs	r1, #1
 80128e6:	f7ff ff05 	bl	80126f4 <_Balloc>
 80128ea:	4602      	mov	r2, r0
 80128ec:	b928      	cbnz	r0, 80128fa <__i2b+0x1a>
 80128ee:	4b05      	ldr	r3, [pc, #20]	; (8012904 <__i2b+0x24>)
 80128f0:	4805      	ldr	r0, [pc, #20]	; (8012908 <__i2b+0x28>)
 80128f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80128f6:	f000 fcd9 	bl	80132ac <__assert_func>
 80128fa:	2301      	movs	r3, #1
 80128fc:	6144      	str	r4, [r0, #20]
 80128fe:	6103      	str	r3, [r0, #16]
 8012900:	bd10      	pop	{r4, pc}
 8012902:	bf00      	nop
 8012904:	08015a5f 	.word	0x08015a5f
 8012908:	08015a70 	.word	0x08015a70

0801290c <__multiply>:
 801290c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012910:	4691      	mov	r9, r2
 8012912:	690a      	ldr	r2, [r1, #16]
 8012914:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012918:	429a      	cmp	r2, r3
 801291a:	bfb8      	it	lt
 801291c:	460b      	movlt	r3, r1
 801291e:	460c      	mov	r4, r1
 8012920:	bfbc      	itt	lt
 8012922:	464c      	movlt	r4, r9
 8012924:	4699      	movlt	r9, r3
 8012926:	6927      	ldr	r7, [r4, #16]
 8012928:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801292c:	68a3      	ldr	r3, [r4, #8]
 801292e:	6861      	ldr	r1, [r4, #4]
 8012930:	eb07 060a 	add.w	r6, r7, sl
 8012934:	42b3      	cmp	r3, r6
 8012936:	b085      	sub	sp, #20
 8012938:	bfb8      	it	lt
 801293a:	3101      	addlt	r1, #1
 801293c:	f7ff feda 	bl	80126f4 <_Balloc>
 8012940:	b930      	cbnz	r0, 8012950 <__multiply+0x44>
 8012942:	4602      	mov	r2, r0
 8012944:	4b43      	ldr	r3, [pc, #268]	; (8012a54 <__multiply+0x148>)
 8012946:	4844      	ldr	r0, [pc, #272]	; (8012a58 <__multiply+0x14c>)
 8012948:	f240 115d 	movw	r1, #349	; 0x15d
 801294c:	f000 fcae 	bl	80132ac <__assert_func>
 8012950:	f100 0514 	add.w	r5, r0, #20
 8012954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012958:	462b      	mov	r3, r5
 801295a:	2200      	movs	r2, #0
 801295c:	4543      	cmp	r3, r8
 801295e:	d321      	bcc.n	80129a4 <__multiply+0x98>
 8012960:	f104 0314 	add.w	r3, r4, #20
 8012964:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012968:	f109 0314 	add.w	r3, r9, #20
 801296c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012970:	9202      	str	r2, [sp, #8]
 8012972:	1b3a      	subs	r2, r7, r4
 8012974:	3a15      	subs	r2, #21
 8012976:	f022 0203 	bic.w	r2, r2, #3
 801297a:	3204      	adds	r2, #4
 801297c:	f104 0115 	add.w	r1, r4, #21
 8012980:	428f      	cmp	r7, r1
 8012982:	bf38      	it	cc
 8012984:	2204      	movcc	r2, #4
 8012986:	9201      	str	r2, [sp, #4]
 8012988:	9a02      	ldr	r2, [sp, #8]
 801298a:	9303      	str	r3, [sp, #12]
 801298c:	429a      	cmp	r2, r3
 801298e:	d80c      	bhi.n	80129aa <__multiply+0x9e>
 8012990:	2e00      	cmp	r6, #0
 8012992:	dd03      	ble.n	801299c <__multiply+0x90>
 8012994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012998:	2b00      	cmp	r3, #0
 801299a:	d059      	beq.n	8012a50 <__multiply+0x144>
 801299c:	6106      	str	r6, [r0, #16]
 801299e:	b005      	add	sp, #20
 80129a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a4:	f843 2b04 	str.w	r2, [r3], #4
 80129a8:	e7d8      	b.n	801295c <__multiply+0x50>
 80129aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80129ae:	f1ba 0f00 	cmp.w	sl, #0
 80129b2:	d023      	beq.n	80129fc <__multiply+0xf0>
 80129b4:	f104 0e14 	add.w	lr, r4, #20
 80129b8:	46a9      	mov	r9, r5
 80129ba:	f04f 0c00 	mov.w	ip, #0
 80129be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80129c2:	f8d9 1000 	ldr.w	r1, [r9]
 80129c6:	fa1f fb82 	uxth.w	fp, r2
 80129ca:	b289      	uxth	r1, r1
 80129cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80129d0:	4461      	add	r1, ip
 80129d2:	f8d9 c000 	ldr.w	ip, [r9]
 80129d6:	0c12      	lsrs	r2, r2, #16
 80129d8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80129dc:	fb0a c202 	mla	r2, sl, r2, ip
 80129e0:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80129e4:	b289      	uxth	r1, r1
 80129e6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80129ea:	4577      	cmp	r7, lr
 80129ec:	f849 1b04 	str.w	r1, [r9], #4
 80129f0:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80129f4:	d8e3      	bhi.n	80129be <__multiply+0xb2>
 80129f6:	9a01      	ldr	r2, [sp, #4]
 80129f8:	f845 c002 	str.w	ip, [r5, r2]
 80129fc:	9a03      	ldr	r2, [sp, #12]
 80129fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012a02:	3304      	adds	r3, #4
 8012a04:	f1b9 0f00 	cmp.w	r9, #0
 8012a08:	d020      	beq.n	8012a4c <__multiply+0x140>
 8012a0a:	6829      	ldr	r1, [r5, #0]
 8012a0c:	f104 0c14 	add.w	ip, r4, #20
 8012a10:	46ae      	mov	lr, r5
 8012a12:	f04f 0a00 	mov.w	sl, #0
 8012a16:	f8bc b000 	ldrh.w	fp, [ip]
 8012a1a:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012a1e:	fb09 220b 	mla	r2, r9, fp, r2
 8012a22:	4492      	add	sl, r2
 8012a24:	b289      	uxth	r1, r1
 8012a26:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012a2a:	f84e 1b04 	str.w	r1, [lr], #4
 8012a2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012a32:	f8be 1000 	ldrh.w	r1, [lr]
 8012a36:	0c12      	lsrs	r2, r2, #16
 8012a38:	fb09 1102 	mla	r1, r9, r2, r1
 8012a3c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012a40:	4567      	cmp	r7, ip
 8012a42:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012a46:	d8e6      	bhi.n	8012a16 <__multiply+0x10a>
 8012a48:	9a01      	ldr	r2, [sp, #4]
 8012a4a:	50a9      	str	r1, [r5, r2]
 8012a4c:	3504      	adds	r5, #4
 8012a4e:	e79b      	b.n	8012988 <__multiply+0x7c>
 8012a50:	3e01      	subs	r6, #1
 8012a52:	e79d      	b.n	8012990 <__multiply+0x84>
 8012a54:	08015a5f 	.word	0x08015a5f
 8012a58:	08015a70 	.word	0x08015a70

08012a5c <__pow5mult>:
 8012a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a60:	4615      	mov	r5, r2
 8012a62:	f012 0203 	ands.w	r2, r2, #3
 8012a66:	4606      	mov	r6, r0
 8012a68:	460f      	mov	r7, r1
 8012a6a:	d007      	beq.n	8012a7c <__pow5mult+0x20>
 8012a6c:	4c25      	ldr	r4, [pc, #148]	; (8012b04 <__pow5mult+0xa8>)
 8012a6e:	3a01      	subs	r2, #1
 8012a70:	2300      	movs	r3, #0
 8012a72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a76:	f7ff fe9f 	bl	80127b8 <__multadd>
 8012a7a:	4607      	mov	r7, r0
 8012a7c:	10ad      	asrs	r5, r5, #2
 8012a7e:	d03d      	beq.n	8012afc <__pow5mult+0xa0>
 8012a80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012a82:	b97c      	cbnz	r4, 8012aa4 <__pow5mult+0x48>
 8012a84:	2010      	movs	r0, #16
 8012a86:	f7ff fe2d 	bl	80126e4 <malloc>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	6270      	str	r0, [r6, #36]	; 0x24
 8012a8e:	b928      	cbnz	r0, 8012a9c <__pow5mult+0x40>
 8012a90:	4b1d      	ldr	r3, [pc, #116]	; (8012b08 <__pow5mult+0xac>)
 8012a92:	481e      	ldr	r0, [pc, #120]	; (8012b0c <__pow5mult+0xb0>)
 8012a94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012a98:	f000 fc08 	bl	80132ac <__assert_func>
 8012a9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012aa0:	6004      	str	r4, [r0, #0]
 8012aa2:	60c4      	str	r4, [r0, #12]
 8012aa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012aa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012aac:	b94c      	cbnz	r4, 8012ac2 <__pow5mult+0x66>
 8012aae:	f240 2171 	movw	r1, #625	; 0x271
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f7ff ff14 	bl	80128e0 <__i2b>
 8012ab8:	2300      	movs	r3, #0
 8012aba:	f8c8 0008 	str.w	r0, [r8, #8]
 8012abe:	4604      	mov	r4, r0
 8012ac0:	6003      	str	r3, [r0, #0]
 8012ac2:	f04f 0900 	mov.w	r9, #0
 8012ac6:	07eb      	lsls	r3, r5, #31
 8012ac8:	d50a      	bpl.n	8012ae0 <__pow5mult+0x84>
 8012aca:	4639      	mov	r1, r7
 8012acc:	4622      	mov	r2, r4
 8012ace:	4630      	mov	r0, r6
 8012ad0:	f7ff ff1c 	bl	801290c <__multiply>
 8012ad4:	4639      	mov	r1, r7
 8012ad6:	4680      	mov	r8, r0
 8012ad8:	4630      	mov	r0, r6
 8012ada:	f7ff fe4b 	bl	8012774 <_Bfree>
 8012ade:	4647      	mov	r7, r8
 8012ae0:	106d      	asrs	r5, r5, #1
 8012ae2:	d00b      	beq.n	8012afc <__pow5mult+0xa0>
 8012ae4:	6820      	ldr	r0, [r4, #0]
 8012ae6:	b938      	cbnz	r0, 8012af8 <__pow5mult+0x9c>
 8012ae8:	4622      	mov	r2, r4
 8012aea:	4621      	mov	r1, r4
 8012aec:	4630      	mov	r0, r6
 8012aee:	f7ff ff0d 	bl	801290c <__multiply>
 8012af2:	6020      	str	r0, [r4, #0]
 8012af4:	f8c0 9000 	str.w	r9, [r0]
 8012af8:	4604      	mov	r4, r0
 8012afa:	e7e4      	b.n	8012ac6 <__pow5mult+0x6a>
 8012afc:	4638      	mov	r0, r7
 8012afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b02:	bf00      	nop
 8012b04:	08015bc0 	.word	0x08015bc0
 8012b08:	080159ed 	.word	0x080159ed
 8012b0c:	08015a70 	.word	0x08015a70

08012b10 <__lshift>:
 8012b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b14:	460c      	mov	r4, r1
 8012b16:	6849      	ldr	r1, [r1, #4]
 8012b18:	6923      	ldr	r3, [r4, #16]
 8012b1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b1e:	68a3      	ldr	r3, [r4, #8]
 8012b20:	4607      	mov	r7, r0
 8012b22:	4691      	mov	r9, r2
 8012b24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b28:	f108 0601 	add.w	r6, r8, #1
 8012b2c:	42b3      	cmp	r3, r6
 8012b2e:	db0b      	blt.n	8012b48 <__lshift+0x38>
 8012b30:	4638      	mov	r0, r7
 8012b32:	f7ff fddf 	bl	80126f4 <_Balloc>
 8012b36:	4605      	mov	r5, r0
 8012b38:	b948      	cbnz	r0, 8012b4e <__lshift+0x3e>
 8012b3a:	4602      	mov	r2, r0
 8012b3c:	4b2a      	ldr	r3, [pc, #168]	; (8012be8 <__lshift+0xd8>)
 8012b3e:	482b      	ldr	r0, [pc, #172]	; (8012bec <__lshift+0xdc>)
 8012b40:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012b44:	f000 fbb2 	bl	80132ac <__assert_func>
 8012b48:	3101      	adds	r1, #1
 8012b4a:	005b      	lsls	r3, r3, #1
 8012b4c:	e7ee      	b.n	8012b2c <__lshift+0x1c>
 8012b4e:	2300      	movs	r3, #0
 8012b50:	f100 0114 	add.w	r1, r0, #20
 8012b54:	f100 0210 	add.w	r2, r0, #16
 8012b58:	4618      	mov	r0, r3
 8012b5a:	4553      	cmp	r3, sl
 8012b5c:	db37      	blt.n	8012bce <__lshift+0xbe>
 8012b5e:	6920      	ldr	r0, [r4, #16]
 8012b60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b64:	f104 0314 	add.w	r3, r4, #20
 8012b68:	f019 091f 	ands.w	r9, r9, #31
 8012b6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012b74:	d02f      	beq.n	8012bd6 <__lshift+0xc6>
 8012b76:	f1c9 0e20 	rsb	lr, r9, #32
 8012b7a:	468a      	mov	sl, r1
 8012b7c:	f04f 0c00 	mov.w	ip, #0
 8012b80:	681a      	ldr	r2, [r3, #0]
 8012b82:	fa02 f209 	lsl.w	r2, r2, r9
 8012b86:	ea42 020c 	orr.w	r2, r2, ip
 8012b8a:	f84a 2b04 	str.w	r2, [sl], #4
 8012b8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b92:	4298      	cmp	r0, r3
 8012b94:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012b98:	d8f2      	bhi.n	8012b80 <__lshift+0x70>
 8012b9a:	1b03      	subs	r3, r0, r4
 8012b9c:	3b15      	subs	r3, #21
 8012b9e:	f023 0303 	bic.w	r3, r3, #3
 8012ba2:	3304      	adds	r3, #4
 8012ba4:	f104 0215 	add.w	r2, r4, #21
 8012ba8:	4290      	cmp	r0, r2
 8012baa:	bf38      	it	cc
 8012bac:	2304      	movcc	r3, #4
 8012bae:	f841 c003 	str.w	ip, [r1, r3]
 8012bb2:	f1bc 0f00 	cmp.w	ip, #0
 8012bb6:	d001      	beq.n	8012bbc <__lshift+0xac>
 8012bb8:	f108 0602 	add.w	r6, r8, #2
 8012bbc:	3e01      	subs	r6, #1
 8012bbe:	4638      	mov	r0, r7
 8012bc0:	612e      	str	r6, [r5, #16]
 8012bc2:	4621      	mov	r1, r4
 8012bc4:	f7ff fdd6 	bl	8012774 <_Bfree>
 8012bc8:	4628      	mov	r0, r5
 8012bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bce:	f842 0f04 	str.w	r0, [r2, #4]!
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	e7c1      	b.n	8012b5a <__lshift+0x4a>
 8012bd6:	3904      	subs	r1, #4
 8012bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bdc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012be0:	4298      	cmp	r0, r3
 8012be2:	d8f9      	bhi.n	8012bd8 <__lshift+0xc8>
 8012be4:	e7ea      	b.n	8012bbc <__lshift+0xac>
 8012be6:	bf00      	nop
 8012be8:	08015a5f 	.word	0x08015a5f
 8012bec:	08015a70 	.word	0x08015a70

08012bf0 <__mcmp>:
 8012bf0:	690a      	ldr	r2, [r1, #16]
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	6900      	ldr	r0, [r0, #16]
 8012bf6:	1a80      	subs	r0, r0, r2
 8012bf8:	b530      	push	{r4, r5, lr}
 8012bfa:	d10d      	bne.n	8012c18 <__mcmp+0x28>
 8012bfc:	3314      	adds	r3, #20
 8012bfe:	3114      	adds	r1, #20
 8012c00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012c04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012c08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012c0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012c10:	4295      	cmp	r5, r2
 8012c12:	d002      	beq.n	8012c1a <__mcmp+0x2a>
 8012c14:	d304      	bcc.n	8012c20 <__mcmp+0x30>
 8012c16:	2001      	movs	r0, #1
 8012c18:	bd30      	pop	{r4, r5, pc}
 8012c1a:	42a3      	cmp	r3, r4
 8012c1c:	d3f4      	bcc.n	8012c08 <__mcmp+0x18>
 8012c1e:	e7fb      	b.n	8012c18 <__mcmp+0x28>
 8012c20:	f04f 30ff 	mov.w	r0, #4294967295
 8012c24:	e7f8      	b.n	8012c18 <__mcmp+0x28>
	...

08012c28 <__mdiff>:
 8012c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c2c:	460d      	mov	r5, r1
 8012c2e:	4607      	mov	r7, r0
 8012c30:	4611      	mov	r1, r2
 8012c32:	4628      	mov	r0, r5
 8012c34:	4614      	mov	r4, r2
 8012c36:	f7ff ffdb 	bl	8012bf0 <__mcmp>
 8012c3a:	1e06      	subs	r6, r0, #0
 8012c3c:	d111      	bne.n	8012c62 <__mdiff+0x3a>
 8012c3e:	4631      	mov	r1, r6
 8012c40:	4638      	mov	r0, r7
 8012c42:	f7ff fd57 	bl	80126f4 <_Balloc>
 8012c46:	4602      	mov	r2, r0
 8012c48:	b928      	cbnz	r0, 8012c56 <__mdiff+0x2e>
 8012c4a:	4b39      	ldr	r3, [pc, #228]	; (8012d30 <__mdiff+0x108>)
 8012c4c:	f240 2132 	movw	r1, #562	; 0x232
 8012c50:	4838      	ldr	r0, [pc, #224]	; (8012d34 <__mdiff+0x10c>)
 8012c52:	f000 fb2b 	bl	80132ac <__assert_func>
 8012c56:	2301      	movs	r3, #1
 8012c58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c62:	bfa4      	itt	ge
 8012c64:	4623      	movge	r3, r4
 8012c66:	462c      	movge	r4, r5
 8012c68:	4638      	mov	r0, r7
 8012c6a:	6861      	ldr	r1, [r4, #4]
 8012c6c:	bfa6      	itte	ge
 8012c6e:	461d      	movge	r5, r3
 8012c70:	2600      	movge	r6, #0
 8012c72:	2601      	movlt	r6, #1
 8012c74:	f7ff fd3e 	bl	80126f4 <_Balloc>
 8012c78:	4602      	mov	r2, r0
 8012c7a:	b918      	cbnz	r0, 8012c84 <__mdiff+0x5c>
 8012c7c:	4b2c      	ldr	r3, [pc, #176]	; (8012d30 <__mdiff+0x108>)
 8012c7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012c82:	e7e5      	b.n	8012c50 <__mdiff+0x28>
 8012c84:	6927      	ldr	r7, [r4, #16]
 8012c86:	60c6      	str	r6, [r0, #12]
 8012c88:	692e      	ldr	r6, [r5, #16]
 8012c8a:	f104 0014 	add.w	r0, r4, #20
 8012c8e:	f105 0914 	add.w	r9, r5, #20
 8012c92:	f102 0e14 	add.w	lr, r2, #20
 8012c96:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8012c9a:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012c9e:	3410      	adds	r4, #16
 8012ca0:	46f2      	mov	sl, lr
 8012ca2:	2100      	movs	r1, #0
 8012ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ca8:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8012cac:	fa1f f883 	uxth.w	r8, r3
 8012cb0:	fa11 f18b 	uxtah	r1, r1, fp
 8012cb4:	0c1b      	lsrs	r3, r3, #16
 8012cb6:	eba1 0808 	sub.w	r8, r1, r8
 8012cba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012cbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012cc2:	fa1f f888 	uxth.w	r8, r8
 8012cc6:	1419      	asrs	r1, r3, #16
 8012cc8:	454e      	cmp	r6, r9
 8012cca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012cce:	f84a 3b04 	str.w	r3, [sl], #4
 8012cd2:	d8e7      	bhi.n	8012ca4 <__mdiff+0x7c>
 8012cd4:	1b73      	subs	r3, r6, r5
 8012cd6:	3b15      	subs	r3, #21
 8012cd8:	f023 0303 	bic.w	r3, r3, #3
 8012cdc:	3304      	adds	r3, #4
 8012cde:	3515      	adds	r5, #21
 8012ce0:	42ae      	cmp	r6, r5
 8012ce2:	bf38      	it	cc
 8012ce4:	2304      	movcc	r3, #4
 8012ce6:	4418      	add	r0, r3
 8012ce8:	4473      	add	r3, lr
 8012cea:	469e      	mov	lr, r3
 8012cec:	4606      	mov	r6, r0
 8012cee:	4566      	cmp	r6, ip
 8012cf0:	d30e      	bcc.n	8012d10 <__mdiff+0xe8>
 8012cf2:	f10c 0103 	add.w	r1, ip, #3
 8012cf6:	1a09      	subs	r1, r1, r0
 8012cf8:	f021 0103 	bic.w	r1, r1, #3
 8012cfc:	3803      	subs	r0, #3
 8012cfe:	4584      	cmp	ip, r0
 8012d00:	bf38      	it	cc
 8012d02:	2100      	movcc	r1, #0
 8012d04:	4419      	add	r1, r3
 8012d06:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012d0a:	b17b      	cbz	r3, 8012d2c <__mdiff+0x104>
 8012d0c:	6117      	str	r7, [r2, #16]
 8012d0e:	e7a5      	b.n	8012c5c <__mdiff+0x34>
 8012d10:	f856 8b04 	ldr.w	r8, [r6], #4
 8012d14:	fa11 f488 	uxtah	r4, r1, r8
 8012d18:	1425      	asrs	r5, r4, #16
 8012d1a:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8012d1e:	b2a4      	uxth	r4, r4
 8012d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8012d24:	f84e 4b04 	str.w	r4, [lr], #4
 8012d28:	1429      	asrs	r1, r5, #16
 8012d2a:	e7e0      	b.n	8012cee <__mdiff+0xc6>
 8012d2c:	3f01      	subs	r7, #1
 8012d2e:	e7ea      	b.n	8012d06 <__mdiff+0xde>
 8012d30:	08015a5f 	.word	0x08015a5f
 8012d34:	08015a70 	.word	0x08015a70

08012d38 <__d2b>:
 8012d38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012d3c:	2101      	movs	r1, #1
 8012d3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8012d42:	4690      	mov	r8, r2
 8012d44:	461d      	mov	r5, r3
 8012d46:	f7ff fcd5 	bl	80126f4 <_Balloc>
 8012d4a:	4604      	mov	r4, r0
 8012d4c:	b930      	cbnz	r0, 8012d5c <__d2b+0x24>
 8012d4e:	4602      	mov	r2, r0
 8012d50:	4b25      	ldr	r3, [pc, #148]	; (8012de8 <__d2b+0xb0>)
 8012d52:	4826      	ldr	r0, [pc, #152]	; (8012dec <__d2b+0xb4>)
 8012d54:	f240 310a 	movw	r1, #778	; 0x30a
 8012d58:	f000 faa8 	bl	80132ac <__assert_func>
 8012d5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8012d60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8012d64:	bb2d      	cbnz	r5, 8012db2 <__d2b+0x7a>
 8012d66:	9301      	str	r3, [sp, #4]
 8012d68:	f1b8 0300 	subs.w	r3, r8, #0
 8012d6c:	d026      	beq.n	8012dbc <__d2b+0x84>
 8012d6e:	4668      	mov	r0, sp
 8012d70:	9300      	str	r3, [sp, #0]
 8012d72:	f7ff fd87 	bl	8012884 <__lo0bits>
 8012d76:	9900      	ldr	r1, [sp, #0]
 8012d78:	b1f0      	cbz	r0, 8012db8 <__d2b+0x80>
 8012d7a:	9a01      	ldr	r2, [sp, #4]
 8012d7c:	f1c0 0320 	rsb	r3, r0, #32
 8012d80:	fa02 f303 	lsl.w	r3, r2, r3
 8012d84:	430b      	orrs	r3, r1
 8012d86:	40c2      	lsrs	r2, r0
 8012d88:	6163      	str	r3, [r4, #20]
 8012d8a:	9201      	str	r2, [sp, #4]
 8012d8c:	9b01      	ldr	r3, [sp, #4]
 8012d8e:	61a3      	str	r3, [r4, #24]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	bf14      	ite	ne
 8012d94:	2102      	movne	r1, #2
 8012d96:	2101      	moveq	r1, #1
 8012d98:	6121      	str	r1, [r4, #16]
 8012d9a:	b1c5      	cbz	r5, 8012dce <__d2b+0x96>
 8012d9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012da0:	4405      	add	r5, r0
 8012da2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012da6:	603d      	str	r5, [r7, #0]
 8012da8:	6030      	str	r0, [r6, #0]
 8012daa:	4620      	mov	r0, r4
 8012dac:	b002      	add	sp, #8
 8012dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012db6:	e7d6      	b.n	8012d66 <__d2b+0x2e>
 8012db8:	6161      	str	r1, [r4, #20]
 8012dba:	e7e7      	b.n	8012d8c <__d2b+0x54>
 8012dbc:	a801      	add	r0, sp, #4
 8012dbe:	f7ff fd61 	bl	8012884 <__lo0bits>
 8012dc2:	9b01      	ldr	r3, [sp, #4]
 8012dc4:	6163      	str	r3, [r4, #20]
 8012dc6:	2101      	movs	r1, #1
 8012dc8:	6121      	str	r1, [r4, #16]
 8012dca:	3020      	adds	r0, #32
 8012dcc:	e7e5      	b.n	8012d9a <__d2b+0x62>
 8012dce:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8012dd2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012dd6:	6038      	str	r0, [r7, #0]
 8012dd8:	6918      	ldr	r0, [r3, #16]
 8012dda:	f7ff fd33 	bl	8012844 <__hi0bits>
 8012dde:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8012de2:	6031      	str	r1, [r6, #0]
 8012de4:	e7e1      	b.n	8012daa <__d2b+0x72>
 8012de6:	bf00      	nop
 8012de8:	08015a5f 	.word	0x08015a5f
 8012dec:	08015a70 	.word	0x08015a70

08012df0 <_calloc_r>:
 8012df0:	b570      	push	{r4, r5, r6, lr}
 8012df2:	fba1 5402 	umull	r5, r4, r1, r2
 8012df6:	b934      	cbnz	r4, 8012e06 <_calloc_r+0x16>
 8012df8:	4629      	mov	r1, r5
 8012dfa:	f000 f877 	bl	8012eec <_malloc_r>
 8012dfe:	4606      	mov	r6, r0
 8012e00:	b928      	cbnz	r0, 8012e0e <_calloc_r+0x1e>
 8012e02:	4630      	mov	r0, r6
 8012e04:	bd70      	pop	{r4, r5, r6, pc}
 8012e06:	220c      	movs	r2, #12
 8012e08:	6002      	str	r2, [r0, #0]
 8012e0a:	2600      	movs	r6, #0
 8012e0c:	e7f9      	b.n	8012e02 <_calloc_r+0x12>
 8012e0e:	462a      	mov	r2, r5
 8012e10:	4621      	mov	r1, r4
 8012e12:	f7fe f895 	bl	8010f40 <memset>
 8012e16:	e7f4      	b.n	8012e02 <_calloc_r+0x12>

08012e18 <_free_r>:
 8012e18:	b538      	push	{r3, r4, r5, lr}
 8012e1a:	4605      	mov	r5, r0
 8012e1c:	2900      	cmp	r1, #0
 8012e1e:	d041      	beq.n	8012ea4 <_free_r+0x8c>
 8012e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e24:	1f0c      	subs	r4, r1, #4
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	bfb8      	it	lt
 8012e2a:	18e4      	addlt	r4, r4, r3
 8012e2c:	f000 fa9a 	bl	8013364 <__malloc_lock>
 8012e30:	4a1d      	ldr	r2, [pc, #116]	; (8012ea8 <_free_r+0x90>)
 8012e32:	6813      	ldr	r3, [r2, #0]
 8012e34:	b933      	cbnz	r3, 8012e44 <_free_r+0x2c>
 8012e36:	6063      	str	r3, [r4, #4]
 8012e38:	6014      	str	r4, [r2, #0]
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e40:	f000 ba96 	b.w	8013370 <__malloc_unlock>
 8012e44:	42a3      	cmp	r3, r4
 8012e46:	d908      	bls.n	8012e5a <_free_r+0x42>
 8012e48:	6820      	ldr	r0, [r4, #0]
 8012e4a:	1821      	adds	r1, r4, r0
 8012e4c:	428b      	cmp	r3, r1
 8012e4e:	bf01      	itttt	eq
 8012e50:	6819      	ldreq	r1, [r3, #0]
 8012e52:	685b      	ldreq	r3, [r3, #4]
 8012e54:	1809      	addeq	r1, r1, r0
 8012e56:	6021      	streq	r1, [r4, #0]
 8012e58:	e7ed      	b.n	8012e36 <_free_r+0x1e>
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	b10b      	cbz	r3, 8012e64 <_free_r+0x4c>
 8012e60:	42a3      	cmp	r3, r4
 8012e62:	d9fa      	bls.n	8012e5a <_free_r+0x42>
 8012e64:	6811      	ldr	r1, [r2, #0]
 8012e66:	1850      	adds	r0, r2, r1
 8012e68:	42a0      	cmp	r0, r4
 8012e6a:	d10b      	bne.n	8012e84 <_free_r+0x6c>
 8012e6c:	6820      	ldr	r0, [r4, #0]
 8012e6e:	4401      	add	r1, r0
 8012e70:	1850      	adds	r0, r2, r1
 8012e72:	4283      	cmp	r3, r0
 8012e74:	6011      	str	r1, [r2, #0]
 8012e76:	d1e0      	bne.n	8012e3a <_free_r+0x22>
 8012e78:	6818      	ldr	r0, [r3, #0]
 8012e7a:	685b      	ldr	r3, [r3, #4]
 8012e7c:	6053      	str	r3, [r2, #4]
 8012e7e:	4401      	add	r1, r0
 8012e80:	6011      	str	r1, [r2, #0]
 8012e82:	e7da      	b.n	8012e3a <_free_r+0x22>
 8012e84:	d902      	bls.n	8012e8c <_free_r+0x74>
 8012e86:	230c      	movs	r3, #12
 8012e88:	602b      	str	r3, [r5, #0]
 8012e8a:	e7d6      	b.n	8012e3a <_free_r+0x22>
 8012e8c:	6820      	ldr	r0, [r4, #0]
 8012e8e:	1821      	adds	r1, r4, r0
 8012e90:	428b      	cmp	r3, r1
 8012e92:	bf04      	itt	eq
 8012e94:	6819      	ldreq	r1, [r3, #0]
 8012e96:	685b      	ldreq	r3, [r3, #4]
 8012e98:	6063      	str	r3, [r4, #4]
 8012e9a:	bf04      	itt	eq
 8012e9c:	1809      	addeq	r1, r1, r0
 8012e9e:	6021      	streq	r1, [r4, #0]
 8012ea0:	6054      	str	r4, [r2, #4]
 8012ea2:	e7ca      	b.n	8012e3a <_free_r+0x22>
 8012ea4:	bd38      	pop	{r3, r4, r5, pc}
 8012ea6:	bf00      	nop
 8012ea8:	20000f50 	.word	0x20000f50

08012eac <sbrk_aligned>:
 8012eac:	b570      	push	{r4, r5, r6, lr}
 8012eae:	4e0e      	ldr	r6, [pc, #56]	; (8012ee8 <sbrk_aligned+0x3c>)
 8012eb0:	460c      	mov	r4, r1
 8012eb2:	6831      	ldr	r1, [r6, #0]
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	b911      	cbnz	r1, 8012ebe <sbrk_aligned+0x12>
 8012eb8:	f000 f9e8 	bl	801328c <_sbrk_r>
 8012ebc:	6030      	str	r0, [r6, #0]
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	f000 f9e3 	bl	801328c <_sbrk_r>
 8012ec6:	1c43      	adds	r3, r0, #1
 8012ec8:	d00a      	beq.n	8012ee0 <sbrk_aligned+0x34>
 8012eca:	1cc4      	adds	r4, r0, #3
 8012ecc:	f024 0403 	bic.w	r4, r4, #3
 8012ed0:	42a0      	cmp	r0, r4
 8012ed2:	d007      	beq.n	8012ee4 <sbrk_aligned+0x38>
 8012ed4:	1a21      	subs	r1, r4, r0
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	f000 f9d8 	bl	801328c <_sbrk_r>
 8012edc:	3001      	adds	r0, #1
 8012ede:	d101      	bne.n	8012ee4 <sbrk_aligned+0x38>
 8012ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8012ee4:	4620      	mov	r0, r4
 8012ee6:	bd70      	pop	{r4, r5, r6, pc}
 8012ee8:	20000f54 	.word	0x20000f54

08012eec <_malloc_r>:
 8012eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ef0:	1ccd      	adds	r5, r1, #3
 8012ef2:	f025 0503 	bic.w	r5, r5, #3
 8012ef6:	3508      	adds	r5, #8
 8012ef8:	2d0c      	cmp	r5, #12
 8012efa:	bf38      	it	cc
 8012efc:	250c      	movcc	r5, #12
 8012efe:	2d00      	cmp	r5, #0
 8012f00:	4607      	mov	r7, r0
 8012f02:	db01      	blt.n	8012f08 <_malloc_r+0x1c>
 8012f04:	42a9      	cmp	r1, r5
 8012f06:	d905      	bls.n	8012f14 <_malloc_r+0x28>
 8012f08:	230c      	movs	r3, #12
 8012f0a:	603b      	str	r3, [r7, #0]
 8012f0c:	2600      	movs	r6, #0
 8012f0e:	4630      	mov	r0, r6
 8012f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f14:	4e2e      	ldr	r6, [pc, #184]	; (8012fd0 <_malloc_r+0xe4>)
 8012f16:	f000 fa25 	bl	8013364 <__malloc_lock>
 8012f1a:	6833      	ldr	r3, [r6, #0]
 8012f1c:	461c      	mov	r4, r3
 8012f1e:	bb34      	cbnz	r4, 8012f6e <_malloc_r+0x82>
 8012f20:	4629      	mov	r1, r5
 8012f22:	4638      	mov	r0, r7
 8012f24:	f7ff ffc2 	bl	8012eac <sbrk_aligned>
 8012f28:	1c43      	adds	r3, r0, #1
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	d14d      	bne.n	8012fca <_malloc_r+0xde>
 8012f2e:	6834      	ldr	r4, [r6, #0]
 8012f30:	4626      	mov	r6, r4
 8012f32:	2e00      	cmp	r6, #0
 8012f34:	d140      	bne.n	8012fb8 <_malloc_r+0xcc>
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	4631      	mov	r1, r6
 8012f3a:	4638      	mov	r0, r7
 8012f3c:	eb04 0803 	add.w	r8, r4, r3
 8012f40:	f000 f9a4 	bl	801328c <_sbrk_r>
 8012f44:	4580      	cmp	r8, r0
 8012f46:	d13a      	bne.n	8012fbe <_malloc_r+0xd2>
 8012f48:	6821      	ldr	r1, [r4, #0]
 8012f4a:	3503      	adds	r5, #3
 8012f4c:	1a6d      	subs	r5, r5, r1
 8012f4e:	f025 0503 	bic.w	r5, r5, #3
 8012f52:	3508      	adds	r5, #8
 8012f54:	2d0c      	cmp	r5, #12
 8012f56:	bf38      	it	cc
 8012f58:	250c      	movcc	r5, #12
 8012f5a:	4629      	mov	r1, r5
 8012f5c:	4638      	mov	r0, r7
 8012f5e:	f7ff ffa5 	bl	8012eac <sbrk_aligned>
 8012f62:	3001      	adds	r0, #1
 8012f64:	d02b      	beq.n	8012fbe <_malloc_r+0xd2>
 8012f66:	6823      	ldr	r3, [r4, #0]
 8012f68:	442b      	add	r3, r5
 8012f6a:	6023      	str	r3, [r4, #0]
 8012f6c:	e00e      	b.n	8012f8c <_malloc_r+0xa0>
 8012f6e:	6822      	ldr	r2, [r4, #0]
 8012f70:	1b52      	subs	r2, r2, r5
 8012f72:	d41e      	bmi.n	8012fb2 <_malloc_r+0xc6>
 8012f74:	2a0b      	cmp	r2, #11
 8012f76:	d916      	bls.n	8012fa6 <_malloc_r+0xba>
 8012f78:	1961      	adds	r1, r4, r5
 8012f7a:	42a3      	cmp	r3, r4
 8012f7c:	6025      	str	r5, [r4, #0]
 8012f7e:	bf18      	it	ne
 8012f80:	6059      	strne	r1, [r3, #4]
 8012f82:	6863      	ldr	r3, [r4, #4]
 8012f84:	bf08      	it	eq
 8012f86:	6031      	streq	r1, [r6, #0]
 8012f88:	5162      	str	r2, [r4, r5]
 8012f8a:	604b      	str	r3, [r1, #4]
 8012f8c:	4638      	mov	r0, r7
 8012f8e:	f104 060b 	add.w	r6, r4, #11
 8012f92:	f000 f9ed 	bl	8013370 <__malloc_unlock>
 8012f96:	f026 0607 	bic.w	r6, r6, #7
 8012f9a:	1d23      	adds	r3, r4, #4
 8012f9c:	1af2      	subs	r2, r6, r3
 8012f9e:	d0b6      	beq.n	8012f0e <_malloc_r+0x22>
 8012fa0:	1b9b      	subs	r3, r3, r6
 8012fa2:	50a3      	str	r3, [r4, r2]
 8012fa4:	e7b3      	b.n	8012f0e <_malloc_r+0x22>
 8012fa6:	6862      	ldr	r2, [r4, #4]
 8012fa8:	42a3      	cmp	r3, r4
 8012faa:	bf0c      	ite	eq
 8012fac:	6032      	streq	r2, [r6, #0]
 8012fae:	605a      	strne	r2, [r3, #4]
 8012fb0:	e7ec      	b.n	8012f8c <_malloc_r+0xa0>
 8012fb2:	4623      	mov	r3, r4
 8012fb4:	6864      	ldr	r4, [r4, #4]
 8012fb6:	e7b2      	b.n	8012f1e <_malloc_r+0x32>
 8012fb8:	4634      	mov	r4, r6
 8012fba:	6876      	ldr	r6, [r6, #4]
 8012fbc:	e7b9      	b.n	8012f32 <_malloc_r+0x46>
 8012fbe:	230c      	movs	r3, #12
 8012fc0:	603b      	str	r3, [r7, #0]
 8012fc2:	4638      	mov	r0, r7
 8012fc4:	f000 f9d4 	bl	8013370 <__malloc_unlock>
 8012fc8:	e7a1      	b.n	8012f0e <_malloc_r+0x22>
 8012fca:	6025      	str	r5, [r4, #0]
 8012fcc:	e7de      	b.n	8012f8c <_malloc_r+0xa0>
 8012fce:	bf00      	nop
 8012fd0:	20000f50 	.word	0x20000f50

08012fd4 <__ssputs_r>:
 8012fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd8:	688e      	ldr	r6, [r1, #8]
 8012fda:	429e      	cmp	r6, r3
 8012fdc:	4682      	mov	sl, r0
 8012fde:	460c      	mov	r4, r1
 8012fe0:	4690      	mov	r8, r2
 8012fe2:	461f      	mov	r7, r3
 8012fe4:	d838      	bhi.n	8013058 <__ssputs_r+0x84>
 8012fe6:	898a      	ldrh	r2, [r1, #12]
 8012fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012fec:	d032      	beq.n	8013054 <__ssputs_r+0x80>
 8012fee:	6825      	ldr	r5, [r4, #0]
 8012ff0:	6909      	ldr	r1, [r1, #16]
 8012ff2:	eba5 0901 	sub.w	r9, r5, r1
 8012ff6:	6965      	ldr	r5, [r4, #20]
 8012ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013000:	3301      	adds	r3, #1
 8013002:	444b      	add	r3, r9
 8013004:	106d      	asrs	r5, r5, #1
 8013006:	429d      	cmp	r5, r3
 8013008:	bf38      	it	cc
 801300a:	461d      	movcc	r5, r3
 801300c:	0553      	lsls	r3, r2, #21
 801300e:	d531      	bpl.n	8013074 <__ssputs_r+0xa0>
 8013010:	4629      	mov	r1, r5
 8013012:	f7ff ff6b 	bl	8012eec <_malloc_r>
 8013016:	4606      	mov	r6, r0
 8013018:	b950      	cbnz	r0, 8013030 <__ssputs_r+0x5c>
 801301a:	230c      	movs	r3, #12
 801301c:	f8ca 3000 	str.w	r3, [sl]
 8013020:	89a3      	ldrh	r3, [r4, #12]
 8013022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013026:	81a3      	strh	r3, [r4, #12]
 8013028:	f04f 30ff 	mov.w	r0, #4294967295
 801302c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013030:	6921      	ldr	r1, [r4, #16]
 8013032:	464a      	mov	r2, r9
 8013034:	f7fd ff76 	bl	8010f24 <memcpy>
 8013038:	89a3      	ldrh	r3, [r4, #12]
 801303a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801303e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013042:	81a3      	strh	r3, [r4, #12]
 8013044:	6126      	str	r6, [r4, #16]
 8013046:	6165      	str	r5, [r4, #20]
 8013048:	444e      	add	r6, r9
 801304a:	eba5 0509 	sub.w	r5, r5, r9
 801304e:	6026      	str	r6, [r4, #0]
 8013050:	60a5      	str	r5, [r4, #8]
 8013052:	463e      	mov	r6, r7
 8013054:	42be      	cmp	r6, r7
 8013056:	d900      	bls.n	801305a <__ssputs_r+0x86>
 8013058:	463e      	mov	r6, r7
 801305a:	6820      	ldr	r0, [r4, #0]
 801305c:	4632      	mov	r2, r6
 801305e:	4641      	mov	r1, r8
 8013060:	f000 f966 	bl	8013330 <memmove>
 8013064:	68a3      	ldr	r3, [r4, #8]
 8013066:	1b9b      	subs	r3, r3, r6
 8013068:	60a3      	str	r3, [r4, #8]
 801306a:	6823      	ldr	r3, [r4, #0]
 801306c:	4433      	add	r3, r6
 801306e:	6023      	str	r3, [r4, #0]
 8013070:	2000      	movs	r0, #0
 8013072:	e7db      	b.n	801302c <__ssputs_r+0x58>
 8013074:	462a      	mov	r2, r5
 8013076:	f000 f981 	bl	801337c <_realloc_r>
 801307a:	4606      	mov	r6, r0
 801307c:	2800      	cmp	r0, #0
 801307e:	d1e1      	bne.n	8013044 <__ssputs_r+0x70>
 8013080:	6921      	ldr	r1, [r4, #16]
 8013082:	4650      	mov	r0, sl
 8013084:	f7ff fec8 	bl	8012e18 <_free_r>
 8013088:	e7c7      	b.n	801301a <__ssputs_r+0x46>
	...

0801308c <_svfiprintf_r>:
 801308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013090:	4698      	mov	r8, r3
 8013092:	898b      	ldrh	r3, [r1, #12]
 8013094:	061b      	lsls	r3, r3, #24
 8013096:	b09d      	sub	sp, #116	; 0x74
 8013098:	4607      	mov	r7, r0
 801309a:	460d      	mov	r5, r1
 801309c:	4614      	mov	r4, r2
 801309e:	d50e      	bpl.n	80130be <_svfiprintf_r+0x32>
 80130a0:	690b      	ldr	r3, [r1, #16]
 80130a2:	b963      	cbnz	r3, 80130be <_svfiprintf_r+0x32>
 80130a4:	2140      	movs	r1, #64	; 0x40
 80130a6:	f7ff ff21 	bl	8012eec <_malloc_r>
 80130aa:	6028      	str	r0, [r5, #0]
 80130ac:	6128      	str	r0, [r5, #16]
 80130ae:	b920      	cbnz	r0, 80130ba <_svfiprintf_r+0x2e>
 80130b0:	230c      	movs	r3, #12
 80130b2:	603b      	str	r3, [r7, #0]
 80130b4:	f04f 30ff 	mov.w	r0, #4294967295
 80130b8:	e0d1      	b.n	801325e <_svfiprintf_r+0x1d2>
 80130ba:	2340      	movs	r3, #64	; 0x40
 80130bc:	616b      	str	r3, [r5, #20]
 80130be:	2300      	movs	r3, #0
 80130c0:	9309      	str	r3, [sp, #36]	; 0x24
 80130c2:	2320      	movs	r3, #32
 80130c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80130cc:	2330      	movs	r3, #48	; 0x30
 80130ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013278 <_svfiprintf_r+0x1ec>
 80130d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130d6:	f04f 0901 	mov.w	r9, #1
 80130da:	4623      	mov	r3, r4
 80130dc:	469a      	mov	sl, r3
 80130de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130e2:	b10a      	cbz	r2, 80130e8 <_svfiprintf_r+0x5c>
 80130e4:	2a25      	cmp	r2, #37	; 0x25
 80130e6:	d1f9      	bne.n	80130dc <_svfiprintf_r+0x50>
 80130e8:	ebba 0b04 	subs.w	fp, sl, r4
 80130ec:	d00b      	beq.n	8013106 <_svfiprintf_r+0x7a>
 80130ee:	465b      	mov	r3, fp
 80130f0:	4622      	mov	r2, r4
 80130f2:	4629      	mov	r1, r5
 80130f4:	4638      	mov	r0, r7
 80130f6:	f7ff ff6d 	bl	8012fd4 <__ssputs_r>
 80130fa:	3001      	adds	r0, #1
 80130fc:	f000 80aa 	beq.w	8013254 <_svfiprintf_r+0x1c8>
 8013100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013102:	445a      	add	r2, fp
 8013104:	9209      	str	r2, [sp, #36]	; 0x24
 8013106:	f89a 3000 	ldrb.w	r3, [sl]
 801310a:	2b00      	cmp	r3, #0
 801310c:	f000 80a2 	beq.w	8013254 <_svfiprintf_r+0x1c8>
 8013110:	2300      	movs	r3, #0
 8013112:	f04f 32ff 	mov.w	r2, #4294967295
 8013116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801311a:	f10a 0a01 	add.w	sl, sl, #1
 801311e:	9304      	str	r3, [sp, #16]
 8013120:	9307      	str	r3, [sp, #28]
 8013122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013126:	931a      	str	r3, [sp, #104]	; 0x68
 8013128:	4654      	mov	r4, sl
 801312a:	2205      	movs	r2, #5
 801312c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013130:	4851      	ldr	r0, [pc, #324]	; (8013278 <_svfiprintf_r+0x1ec>)
 8013132:	f7ed f82d 	bl	8000190 <memchr>
 8013136:	9a04      	ldr	r2, [sp, #16]
 8013138:	b9d8      	cbnz	r0, 8013172 <_svfiprintf_r+0xe6>
 801313a:	06d0      	lsls	r0, r2, #27
 801313c:	bf44      	itt	mi
 801313e:	2320      	movmi	r3, #32
 8013140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013144:	0711      	lsls	r1, r2, #28
 8013146:	bf44      	itt	mi
 8013148:	232b      	movmi	r3, #43	; 0x2b
 801314a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801314e:	f89a 3000 	ldrb.w	r3, [sl]
 8013152:	2b2a      	cmp	r3, #42	; 0x2a
 8013154:	d015      	beq.n	8013182 <_svfiprintf_r+0xf6>
 8013156:	9a07      	ldr	r2, [sp, #28]
 8013158:	4654      	mov	r4, sl
 801315a:	2000      	movs	r0, #0
 801315c:	f04f 0c0a 	mov.w	ip, #10
 8013160:	4621      	mov	r1, r4
 8013162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013166:	3b30      	subs	r3, #48	; 0x30
 8013168:	2b09      	cmp	r3, #9
 801316a:	d94e      	bls.n	801320a <_svfiprintf_r+0x17e>
 801316c:	b1b0      	cbz	r0, 801319c <_svfiprintf_r+0x110>
 801316e:	9207      	str	r2, [sp, #28]
 8013170:	e014      	b.n	801319c <_svfiprintf_r+0x110>
 8013172:	eba0 0308 	sub.w	r3, r0, r8
 8013176:	fa09 f303 	lsl.w	r3, r9, r3
 801317a:	4313      	orrs	r3, r2
 801317c:	9304      	str	r3, [sp, #16]
 801317e:	46a2      	mov	sl, r4
 8013180:	e7d2      	b.n	8013128 <_svfiprintf_r+0x9c>
 8013182:	9b03      	ldr	r3, [sp, #12]
 8013184:	1d19      	adds	r1, r3, #4
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	9103      	str	r1, [sp, #12]
 801318a:	2b00      	cmp	r3, #0
 801318c:	bfbb      	ittet	lt
 801318e:	425b      	neglt	r3, r3
 8013190:	f042 0202 	orrlt.w	r2, r2, #2
 8013194:	9307      	strge	r3, [sp, #28]
 8013196:	9307      	strlt	r3, [sp, #28]
 8013198:	bfb8      	it	lt
 801319a:	9204      	strlt	r2, [sp, #16]
 801319c:	7823      	ldrb	r3, [r4, #0]
 801319e:	2b2e      	cmp	r3, #46	; 0x2e
 80131a0:	d10c      	bne.n	80131bc <_svfiprintf_r+0x130>
 80131a2:	7863      	ldrb	r3, [r4, #1]
 80131a4:	2b2a      	cmp	r3, #42	; 0x2a
 80131a6:	d135      	bne.n	8013214 <_svfiprintf_r+0x188>
 80131a8:	9b03      	ldr	r3, [sp, #12]
 80131aa:	1d1a      	adds	r2, r3, #4
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	9203      	str	r2, [sp, #12]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	bfb8      	it	lt
 80131b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80131b8:	3402      	adds	r4, #2
 80131ba:	9305      	str	r3, [sp, #20]
 80131bc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801327c <_svfiprintf_r+0x1f0>
 80131c0:	7821      	ldrb	r1, [r4, #0]
 80131c2:	2203      	movs	r2, #3
 80131c4:	4650      	mov	r0, sl
 80131c6:	f7ec ffe3 	bl	8000190 <memchr>
 80131ca:	b140      	cbz	r0, 80131de <_svfiprintf_r+0x152>
 80131cc:	2340      	movs	r3, #64	; 0x40
 80131ce:	eba0 000a 	sub.w	r0, r0, sl
 80131d2:	fa03 f000 	lsl.w	r0, r3, r0
 80131d6:	9b04      	ldr	r3, [sp, #16]
 80131d8:	4303      	orrs	r3, r0
 80131da:	3401      	adds	r4, #1
 80131dc:	9304      	str	r3, [sp, #16]
 80131de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131e2:	4827      	ldr	r0, [pc, #156]	; (8013280 <_svfiprintf_r+0x1f4>)
 80131e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131e8:	2206      	movs	r2, #6
 80131ea:	f7ec ffd1 	bl	8000190 <memchr>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	d038      	beq.n	8013264 <_svfiprintf_r+0x1d8>
 80131f2:	4b24      	ldr	r3, [pc, #144]	; (8013284 <_svfiprintf_r+0x1f8>)
 80131f4:	bb1b      	cbnz	r3, 801323e <_svfiprintf_r+0x1b2>
 80131f6:	9b03      	ldr	r3, [sp, #12]
 80131f8:	3307      	adds	r3, #7
 80131fa:	f023 0307 	bic.w	r3, r3, #7
 80131fe:	3308      	adds	r3, #8
 8013200:	9303      	str	r3, [sp, #12]
 8013202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013204:	4433      	add	r3, r6
 8013206:	9309      	str	r3, [sp, #36]	; 0x24
 8013208:	e767      	b.n	80130da <_svfiprintf_r+0x4e>
 801320a:	fb0c 3202 	mla	r2, ip, r2, r3
 801320e:	460c      	mov	r4, r1
 8013210:	2001      	movs	r0, #1
 8013212:	e7a5      	b.n	8013160 <_svfiprintf_r+0xd4>
 8013214:	2300      	movs	r3, #0
 8013216:	3401      	adds	r4, #1
 8013218:	9305      	str	r3, [sp, #20]
 801321a:	4619      	mov	r1, r3
 801321c:	f04f 0c0a 	mov.w	ip, #10
 8013220:	4620      	mov	r0, r4
 8013222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013226:	3a30      	subs	r2, #48	; 0x30
 8013228:	2a09      	cmp	r2, #9
 801322a:	d903      	bls.n	8013234 <_svfiprintf_r+0x1a8>
 801322c:	2b00      	cmp	r3, #0
 801322e:	d0c5      	beq.n	80131bc <_svfiprintf_r+0x130>
 8013230:	9105      	str	r1, [sp, #20]
 8013232:	e7c3      	b.n	80131bc <_svfiprintf_r+0x130>
 8013234:	fb0c 2101 	mla	r1, ip, r1, r2
 8013238:	4604      	mov	r4, r0
 801323a:	2301      	movs	r3, #1
 801323c:	e7f0      	b.n	8013220 <_svfiprintf_r+0x194>
 801323e:	ab03      	add	r3, sp, #12
 8013240:	9300      	str	r3, [sp, #0]
 8013242:	462a      	mov	r2, r5
 8013244:	4b10      	ldr	r3, [pc, #64]	; (8013288 <_svfiprintf_r+0x1fc>)
 8013246:	a904      	add	r1, sp, #16
 8013248:	4638      	mov	r0, r7
 801324a:	f7fd ff1f 	bl	801108c <_printf_float>
 801324e:	1c42      	adds	r2, r0, #1
 8013250:	4606      	mov	r6, r0
 8013252:	d1d6      	bne.n	8013202 <_svfiprintf_r+0x176>
 8013254:	89ab      	ldrh	r3, [r5, #12]
 8013256:	065b      	lsls	r3, r3, #25
 8013258:	f53f af2c 	bmi.w	80130b4 <_svfiprintf_r+0x28>
 801325c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801325e:	b01d      	add	sp, #116	; 0x74
 8013260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013264:	ab03      	add	r3, sp, #12
 8013266:	9300      	str	r3, [sp, #0]
 8013268:	462a      	mov	r2, r5
 801326a:	4b07      	ldr	r3, [pc, #28]	; (8013288 <_svfiprintf_r+0x1fc>)
 801326c:	a904      	add	r1, sp, #16
 801326e:	4638      	mov	r0, r7
 8013270:	f7fe f9a4 	bl	80115bc <_printf_i>
 8013274:	e7eb      	b.n	801324e <_svfiprintf_r+0x1c2>
 8013276:	bf00      	nop
 8013278:	08015bcc 	.word	0x08015bcc
 801327c:	08015bd2 	.word	0x08015bd2
 8013280:	08015bd6 	.word	0x08015bd6
 8013284:	0801108d 	.word	0x0801108d
 8013288:	08012fd5 	.word	0x08012fd5

0801328c <_sbrk_r>:
 801328c:	b538      	push	{r3, r4, r5, lr}
 801328e:	4d06      	ldr	r5, [pc, #24]	; (80132a8 <_sbrk_r+0x1c>)
 8013290:	2300      	movs	r3, #0
 8013292:	4604      	mov	r4, r0
 8013294:	4608      	mov	r0, r1
 8013296:	602b      	str	r3, [r5, #0]
 8013298:	f7ef faa2 	bl	80027e0 <_sbrk>
 801329c:	1c43      	adds	r3, r0, #1
 801329e:	d102      	bne.n	80132a6 <_sbrk_r+0x1a>
 80132a0:	682b      	ldr	r3, [r5, #0]
 80132a2:	b103      	cbz	r3, 80132a6 <_sbrk_r+0x1a>
 80132a4:	6023      	str	r3, [r4, #0]
 80132a6:	bd38      	pop	{r3, r4, r5, pc}
 80132a8:	20000f58 	.word	0x20000f58

080132ac <__assert_func>:
 80132ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80132ae:	4614      	mov	r4, r2
 80132b0:	461a      	mov	r2, r3
 80132b2:	4b09      	ldr	r3, [pc, #36]	; (80132d8 <__assert_func+0x2c>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	4605      	mov	r5, r0
 80132b8:	68d8      	ldr	r0, [r3, #12]
 80132ba:	b14c      	cbz	r4, 80132d0 <__assert_func+0x24>
 80132bc:	4b07      	ldr	r3, [pc, #28]	; (80132dc <__assert_func+0x30>)
 80132be:	9100      	str	r1, [sp, #0]
 80132c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80132c4:	4906      	ldr	r1, [pc, #24]	; (80132e0 <__assert_func+0x34>)
 80132c6:	462b      	mov	r3, r5
 80132c8:	f000 f80e 	bl	80132e8 <fiprintf>
 80132cc:	f000 faaa 	bl	8013824 <abort>
 80132d0:	4b04      	ldr	r3, [pc, #16]	; (80132e4 <__assert_func+0x38>)
 80132d2:	461c      	mov	r4, r3
 80132d4:	e7f3      	b.n	80132be <__assert_func+0x12>
 80132d6:	bf00      	nop
 80132d8:	2000005c 	.word	0x2000005c
 80132dc:	08015bdd 	.word	0x08015bdd
 80132e0:	08015bea 	.word	0x08015bea
 80132e4:	08015c18 	.word	0x08015c18

080132e8 <fiprintf>:
 80132e8:	b40e      	push	{r1, r2, r3}
 80132ea:	b503      	push	{r0, r1, lr}
 80132ec:	4601      	mov	r1, r0
 80132ee:	ab03      	add	r3, sp, #12
 80132f0:	4805      	ldr	r0, [pc, #20]	; (8013308 <fiprintf+0x20>)
 80132f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80132f6:	6800      	ldr	r0, [r0, #0]
 80132f8:	9301      	str	r3, [sp, #4]
 80132fa:	f000 f895 	bl	8013428 <_vfiprintf_r>
 80132fe:	b002      	add	sp, #8
 8013300:	f85d eb04 	ldr.w	lr, [sp], #4
 8013304:	b003      	add	sp, #12
 8013306:	4770      	bx	lr
 8013308:	2000005c 	.word	0x2000005c

0801330c <__ascii_mbtowc>:
 801330c:	b082      	sub	sp, #8
 801330e:	b901      	cbnz	r1, 8013312 <__ascii_mbtowc+0x6>
 8013310:	a901      	add	r1, sp, #4
 8013312:	b142      	cbz	r2, 8013326 <__ascii_mbtowc+0x1a>
 8013314:	b14b      	cbz	r3, 801332a <__ascii_mbtowc+0x1e>
 8013316:	7813      	ldrb	r3, [r2, #0]
 8013318:	600b      	str	r3, [r1, #0]
 801331a:	7812      	ldrb	r2, [r2, #0]
 801331c:	1e10      	subs	r0, r2, #0
 801331e:	bf18      	it	ne
 8013320:	2001      	movne	r0, #1
 8013322:	b002      	add	sp, #8
 8013324:	4770      	bx	lr
 8013326:	4610      	mov	r0, r2
 8013328:	e7fb      	b.n	8013322 <__ascii_mbtowc+0x16>
 801332a:	f06f 0001 	mvn.w	r0, #1
 801332e:	e7f8      	b.n	8013322 <__ascii_mbtowc+0x16>

08013330 <memmove>:
 8013330:	4288      	cmp	r0, r1
 8013332:	b510      	push	{r4, lr}
 8013334:	eb01 0402 	add.w	r4, r1, r2
 8013338:	d902      	bls.n	8013340 <memmove+0x10>
 801333a:	4284      	cmp	r4, r0
 801333c:	4623      	mov	r3, r4
 801333e:	d807      	bhi.n	8013350 <memmove+0x20>
 8013340:	1e43      	subs	r3, r0, #1
 8013342:	42a1      	cmp	r1, r4
 8013344:	d008      	beq.n	8013358 <memmove+0x28>
 8013346:	f811 2b01 	ldrb.w	r2, [r1], #1
 801334a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801334e:	e7f8      	b.n	8013342 <memmove+0x12>
 8013350:	4402      	add	r2, r0
 8013352:	4601      	mov	r1, r0
 8013354:	428a      	cmp	r2, r1
 8013356:	d100      	bne.n	801335a <memmove+0x2a>
 8013358:	bd10      	pop	{r4, pc}
 801335a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801335e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013362:	e7f7      	b.n	8013354 <memmove+0x24>

08013364 <__malloc_lock>:
 8013364:	4801      	ldr	r0, [pc, #4]	; (801336c <__malloc_lock+0x8>)
 8013366:	f000 bc19 	b.w	8013b9c <__retarget_lock_acquire_recursive>
 801336a:	bf00      	nop
 801336c:	20000f5c 	.word	0x20000f5c

08013370 <__malloc_unlock>:
 8013370:	4801      	ldr	r0, [pc, #4]	; (8013378 <__malloc_unlock+0x8>)
 8013372:	f000 bc14 	b.w	8013b9e <__retarget_lock_release_recursive>
 8013376:	bf00      	nop
 8013378:	20000f5c 	.word	0x20000f5c

0801337c <_realloc_r>:
 801337c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013380:	4680      	mov	r8, r0
 8013382:	4614      	mov	r4, r2
 8013384:	460e      	mov	r6, r1
 8013386:	b921      	cbnz	r1, 8013392 <_realloc_r+0x16>
 8013388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801338c:	4611      	mov	r1, r2
 801338e:	f7ff bdad 	b.w	8012eec <_malloc_r>
 8013392:	b92a      	cbnz	r2, 80133a0 <_realloc_r+0x24>
 8013394:	f7ff fd40 	bl	8012e18 <_free_r>
 8013398:	4625      	mov	r5, r4
 801339a:	4628      	mov	r0, r5
 801339c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133a0:	f000 fc64 	bl	8013c6c <_malloc_usable_size_r>
 80133a4:	4284      	cmp	r4, r0
 80133a6:	4607      	mov	r7, r0
 80133a8:	d802      	bhi.n	80133b0 <_realloc_r+0x34>
 80133aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80133ae:	d812      	bhi.n	80133d6 <_realloc_r+0x5a>
 80133b0:	4621      	mov	r1, r4
 80133b2:	4640      	mov	r0, r8
 80133b4:	f7ff fd9a 	bl	8012eec <_malloc_r>
 80133b8:	4605      	mov	r5, r0
 80133ba:	2800      	cmp	r0, #0
 80133bc:	d0ed      	beq.n	801339a <_realloc_r+0x1e>
 80133be:	42bc      	cmp	r4, r7
 80133c0:	4622      	mov	r2, r4
 80133c2:	4631      	mov	r1, r6
 80133c4:	bf28      	it	cs
 80133c6:	463a      	movcs	r2, r7
 80133c8:	f7fd fdac 	bl	8010f24 <memcpy>
 80133cc:	4631      	mov	r1, r6
 80133ce:	4640      	mov	r0, r8
 80133d0:	f7ff fd22 	bl	8012e18 <_free_r>
 80133d4:	e7e1      	b.n	801339a <_realloc_r+0x1e>
 80133d6:	4635      	mov	r5, r6
 80133d8:	e7df      	b.n	801339a <_realloc_r+0x1e>

080133da <__sfputc_r>:
 80133da:	6893      	ldr	r3, [r2, #8]
 80133dc:	3b01      	subs	r3, #1
 80133de:	2b00      	cmp	r3, #0
 80133e0:	b410      	push	{r4}
 80133e2:	6093      	str	r3, [r2, #8]
 80133e4:	da07      	bge.n	80133f6 <__sfputc_r+0x1c>
 80133e6:	6994      	ldr	r4, [r2, #24]
 80133e8:	42a3      	cmp	r3, r4
 80133ea:	db01      	blt.n	80133f0 <__sfputc_r+0x16>
 80133ec:	290a      	cmp	r1, #10
 80133ee:	d102      	bne.n	80133f6 <__sfputc_r+0x1c>
 80133f0:	bc10      	pop	{r4}
 80133f2:	f000 b949 	b.w	8013688 <__swbuf_r>
 80133f6:	6813      	ldr	r3, [r2, #0]
 80133f8:	1c58      	adds	r0, r3, #1
 80133fa:	6010      	str	r0, [r2, #0]
 80133fc:	7019      	strb	r1, [r3, #0]
 80133fe:	4608      	mov	r0, r1
 8013400:	bc10      	pop	{r4}
 8013402:	4770      	bx	lr

08013404 <__sfputs_r>:
 8013404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013406:	4606      	mov	r6, r0
 8013408:	460f      	mov	r7, r1
 801340a:	4614      	mov	r4, r2
 801340c:	18d5      	adds	r5, r2, r3
 801340e:	42ac      	cmp	r4, r5
 8013410:	d101      	bne.n	8013416 <__sfputs_r+0x12>
 8013412:	2000      	movs	r0, #0
 8013414:	e007      	b.n	8013426 <__sfputs_r+0x22>
 8013416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801341a:	463a      	mov	r2, r7
 801341c:	4630      	mov	r0, r6
 801341e:	f7ff ffdc 	bl	80133da <__sfputc_r>
 8013422:	1c43      	adds	r3, r0, #1
 8013424:	d1f3      	bne.n	801340e <__sfputs_r+0xa>
 8013426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013428 <_vfiprintf_r>:
 8013428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801342c:	460d      	mov	r5, r1
 801342e:	b09d      	sub	sp, #116	; 0x74
 8013430:	4614      	mov	r4, r2
 8013432:	4698      	mov	r8, r3
 8013434:	4606      	mov	r6, r0
 8013436:	b118      	cbz	r0, 8013440 <_vfiprintf_r+0x18>
 8013438:	6983      	ldr	r3, [r0, #24]
 801343a:	b90b      	cbnz	r3, 8013440 <_vfiprintf_r+0x18>
 801343c:	f000 fb10 	bl	8013a60 <__sinit>
 8013440:	4b89      	ldr	r3, [pc, #548]	; (8013668 <_vfiprintf_r+0x240>)
 8013442:	429d      	cmp	r5, r3
 8013444:	d11b      	bne.n	801347e <_vfiprintf_r+0x56>
 8013446:	6875      	ldr	r5, [r6, #4]
 8013448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801344a:	07d9      	lsls	r1, r3, #31
 801344c:	d405      	bmi.n	801345a <_vfiprintf_r+0x32>
 801344e:	89ab      	ldrh	r3, [r5, #12]
 8013450:	059a      	lsls	r2, r3, #22
 8013452:	d402      	bmi.n	801345a <_vfiprintf_r+0x32>
 8013454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013456:	f000 fba1 	bl	8013b9c <__retarget_lock_acquire_recursive>
 801345a:	89ab      	ldrh	r3, [r5, #12]
 801345c:	071b      	lsls	r3, r3, #28
 801345e:	d501      	bpl.n	8013464 <_vfiprintf_r+0x3c>
 8013460:	692b      	ldr	r3, [r5, #16]
 8013462:	b9eb      	cbnz	r3, 80134a0 <_vfiprintf_r+0x78>
 8013464:	4629      	mov	r1, r5
 8013466:	4630      	mov	r0, r6
 8013468:	f000 f96e 	bl	8013748 <__swsetup_r>
 801346c:	b1c0      	cbz	r0, 80134a0 <_vfiprintf_r+0x78>
 801346e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013470:	07dc      	lsls	r4, r3, #31
 8013472:	d50e      	bpl.n	8013492 <_vfiprintf_r+0x6a>
 8013474:	f04f 30ff 	mov.w	r0, #4294967295
 8013478:	b01d      	add	sp, #116	; 0x74
 801347a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801347e:	4b7b      	ldr	r3, [pc, #492]	; (801366c <_vfiprintf_r+0x244>)
 8013480:	429d      	cmp	r5, r3
 8013482:	d101      	bne.n	8013488 <_vfiprintf_r+0x60>
 8013484:	68b5      	ldr	r5, [r6, #8]
 8013486:	e7df      	b.n	8013448 <_vfiprintf_r+0x20>
 8013488:	4b79      	ldr	r3, [pc, #484]	; (8013670 <_vfiprintf_r+0x248>)
 801348a:	429d      	cmp	r5, r3
 801348c:	bf08      	it	eq
 801348e:	68f5      	ldreq	r5, [r6, #12]
 8013490:	e7da      	b.n	8013448 <_vfiprintf_r+0x20>
 8013492:	89ab      	ldrh	r3, [r5, #12]
 8013494:	0598      	lsls	r0, r3, #22
 8013496:	d4ed      	bmi.n	8013474 <_vfiprintf_r+0x4c>
 8013498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801349a:	f000 fb80 	bl	8013b9e <__retarget_lock_release_recursive>
 801349e:	e7e9      	b.n	8013474 <_vfiprintf_r+0x4c>
 80134a0:	2300      	movs	r3, #0
 80134a2:	9309      	str	r3, [sp, #36]	; 0x24
 80134a4:	2320      	movs	r3, #32
 80134a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80134ae:	2330      	movs	r3, #48	; 0x30
 80134b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013674 <_vfiprintf_r+0x24c>
 80134b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134b8:	f04f 0901 	mov.w	r9, #1
 80134bc:	4623      	mov	r3, r4
 80134be:	469a      	mov	sl, r3
 80134c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134c4:	b10a      	cbz	r2, 80134ca <_vfiprintf_r+0xa2>
 80134c6:	2a25      	cmp	r2, #37	; 0x25
 80134c8:	d1f9      	bne.n	80134be <_vfiprintf_r+0x96>
 80134ca:	ebba 0b04 	subs.w	fp, sl, r4
 80134ce:	d00b      	beq.n	80134e8 <_vfiprintf_r+0xc0>
 80134d0:	465b      	mov	r3, fp
 80134d2:	4622      	mov	r2, r4
 80134d4:	4629      	mov	r1, r5
 80134d6:	4630      	mov	r0, r6
 80134d8:	f7ff ff94 	bl	8013404 <__sfputs_r>
 80134dc:	3001      	adds	r0, #1
 80134de:	f000 80aa 	beq.w	8013636 <_vfiprintf_r+0x20e>
 80134e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134e4:	445a      	add	r2, fp
 80134e6:	9209      	str	r2, [sp, #36]	; 0x24
 80134e8:	f89a 3000 	ldrb.w	r3, [sl]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	f000 80a2 	beq.w	8013636 <_vfiprintf_r+0x20e>
 80134f2:	2300      	movs	r3, #0
 80134f4:	f04f 32ff 	mov.w	r2, #4294967295
 80134f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134fc:	f10a 0a01 	add.w	sl, sl, #1
 8013500:	9304      	str	r3, [sp, #16]
 8013502:	9307      	str	r3, [sp, #28]
 8013504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013508:	931a      	str	r3, [sp, #104]	; 0x68
 801350a:	4654      	mov	r4, sl
 801350c:	2205      	movs	r2, #5
 801350e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013512:	4858      	ldr	r0, [pc, #352]	; (8013674 <_vfiprintf_r+0x24c>)
 8013514:	f7ec fe3c 	bl	8000190 <memchr>
 8013518:	9a04      	ldr	r2, [sp, #16]
 801351a:	b9d8      	cbnz	r0, 8013554 <_vfiprintf_r+0x12c>
 801351c:	06d1      	lsls	r1, r2, #27
 801351e:	bf44      	itt	mi
 8013520:	2320      	movmi	r3, #32
 8013522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013526:	0713      	lsls	r3, r2, #28
 8013528:	bf44      	itt	mi
 801352a:	232b      	movmi	r3, #43	; 0x2b
 801352c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013530:	f89a 3000 	ldrb.w	r3, [sl]
 8013534:	2b2a      	cmp	r3, #42	; 0x2a
 8013536:	d015      	beq.n	8013564 <_vfiprintf_r+0x13c>
 8013538:	9a07      	ldr	r2, [sp, #28]
 801353a:	4654      	mov	r4, sl
 801353c:	2000      	movs	r0, #0
 801353e:	f04f 0c0a 	mov.w	ip, #10
 8013542:	4621      	mov	r1, r4
 8013544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013548:	3b30      	subs	r3, #48	; 0x30
 801354a:	2b09      	cmp	r3, #9
 801354c:	d94e      	bls.n	80135ec <_vfiprintf_r+0x1c4>
 801354e:	b1b0      	cbz	r0, 801357e <_vfiprintf_r+0x156>
 8013550:	9207      	str	r2, [sp, #28]
 8013552:	e014      	b.n	801357e <_vfiprintf_r+0x156>
 8013554:	eba0 0308 	sub.w	r3, r0, r8
 8013558:	fa09 f303 	lsl.w	r3, r9, r3
 801355c:	4313      	orrs	r3, r2
 801355e:	9304      	str	r3, [sp, #16]
 8013560:	46a2      	mov	sl, r4
 8013562:	e7d2      	b.n	801350a <_vfiprintf_r+0xe2>
 8013564:	9b03      	ldr	r3, [sp, #12]
 8013566:	1d19      	adds	r1, r3, #4
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	9103      	str	r1, [sp, #12]
 801356c:	2b00      	cmp	r3, #0
 801356e:	bfbb      	ittet	lt
 8013570:	425b      	neglt	r3, r3
 8013572:	f042 0202 	orrlt.w	r2, r2, #2
 8013576:	9307      	strge	r3, [sp, #28]
 8013578:	9307      	strlt	r3, [sp, #28]
 801357a:	bfb8      	it	lt
 801357c:	9204      	strlt	r2, [sp, #16]
 801357e:	7823      	ldrb	r3, [r4, #0]
 8013580:	2b2e      	cmp	r3, #46	; 0x2e
 8013582:	d10c      	bne.n	801359e <_vfiprintf_r+0x176>
 8013584:	7863      	ldrb	r3, [r4, #1]
 8013586:	2b2a      	cmp	r3, #42	; 0x2a
 8013588:	d135      	bne.n	80135f6 <_vfiprintf_r+0x1ce>
 801358a:	9b03      	ldr	r3, [sp, #12]
 801358c:	1d1a      	adds	r2, r3, #4
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	9203      	str	r2, [sp, #12]
 8013592:	2b00      	cmp	r3, #0
 8013594:	bfb8      	it	lt
 8013596:	f04f 33ff 	movlt.w	r3, #4294967295
 801359a:	3402      	adds	r4, #2
 801359c:	9305      	str	r3, [sp, #20]
 801359e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8013678 <_vfiprintf_r+0x250>
 80135a2:	7821      	ldrb	r1, [r4, #0]
 80135a4:	2203      	movs	r2, #3
 80135a6:	4650      	mov	r0, sl
 80135a8:	f7ec fdf2 	bl	8000190 <memchr>
 80135ac:	b140      	cbz	r0, 80135c0 <_vfiprintf_r+0x198>
 80135ae:	2340      	movs	r3, #64	; 0x40
 80135b0:	eba0 000a 	sub.w	r0, r0, sl
 80135b4:	fa03 f000 	lsl.w	r0, r3, r0
 80135b8:	9b04      	ldr	r3, [sp, #16]
 80135ba:	4303      	orrs	r3, r0
 80135bc:	3401      	adds	r4, #1
 80135be:	9304      	str	r3, [sp, #16]
 80135c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135c4:	482d      	ldr	r0, [pc, #180]	; (801367c <_vfiprintf_r+0x254>)
 80135c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135ca:	2206      	movs	r2, #6
 80135cc:	f7ec fde0 	bl	8000190 <memchr>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d03f      	beq.n	8013654 <_vfiprintf_r+0x22c>
 80135d4:	4b2a      	ldr	r3, [pc, #168]	; (8013680 <_vfiprintf_r+0x258>)
 80135d6:	bb1b      	cbnz	r3, 8013620 <_vfiprintf_r+0x1f8>
 80135d8:	9b03      	ldr	r3, [sp, #12]
 80135da:	3307      	adds	r3, #7
 80135dc:	f023 0307 	bic.w	r3, r3, #7
 80135e0:	3308      	adds	r3, #8
 80135e2:	9303      	str	r3, [sp, #12]
 80135e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135e6:	443b      	add	r3, r7
 80135e8:	9309      	str	r3, [sp, #36]	; 0x24
 80135ea:	e767      	b.n	80134bc <_vfiprintf_r+0x94>
 80135ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80135f0:	460c      	mov	r4, r1
 80135f2:	2001      	movs	r0, #1
 80135f4:	e7a5      	b.n	8013542 <_vfiprintf_r+0x11a>
 80135f6:	2300      	movs	r3, #0
 80135f8:	3401      	adds	r4, #1
 80135fa:	9305      	str	r3, [sp, #20]
 80135fc:	4619      	mov	r1, r3
 80135fe:	f04f 0c0a 	mov.w	ip, #10
 8013602:	4620      	mov	r0, r4
 8013604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013608:	3a30      	subs	r2, #48	; 0x30
 801360a:	2a09      	cmp	r2, #9
 801360c:	d903      	bls.n	8013616 <_vfiprintf_r+0x1ee>
 801360e:	2b00      	cmp	r3, #0
 8013610:	d0c5      	beq.n	801359e <_vfiprintf_r+0x176>
 8013612:	9105      	str	r1, [sp, #20]
 8013614:	e7c3      	b.n	801359e <_vfiprintf_r+0x176>
 8013616:	fb0c 2101 	mla	r1, ip, r1, r2
 801361a:	4604      	mov	r4, r0
 801361c:	2301      	movs	r3, #1
 801361e:	e7f0      	b.n	8013602 <_vfiprintf_r+0x1da>
 8013620:	ab03      	add	r3, sp, #12
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	462a      	mov	r2, r5
 8013626:	4b17      	ldr	r3, [pc, #92]	; (8013684 <_vfiprintf_r+0x25c>)
 8013628:	a904      	add	r1, sp, #16
 801362a:	4630      	mov	r0, r6
 801362c:	f7fd fd2e 	bl	801108c <_printf_float>
 8013630:	4607      	mov	r7, r0
 8013632:	1c78      	adds	r0, r7, #1
 8013634:	d1d6      	bne.n	80135e4 <_vfiprintf_r+0x1bc>
 8013636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013638:	07d9      	lsls	r1, r3, #31
 801363a:	d405      	bmi.n	8013648 <_vfiprintf_r+0x220>
 801363c:	89ab      	ldrh	r3, [r5, #12]
 801363e:	059a      	lsls	r2, r3, #22
 8013640:	d402      	bmi.n	8013648 <_vfiprintf_r+0x220>
 8013642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013644:	f000 faab 	bl	8013b9e <__retarget_lock_release_recursive>
 8013648:	89ab      	ldrh	r3, [r5, #12]
 801364a:	065b      	lsls	r3, r3, #25
 801364c:	f53f af12 	bmi.w	8013474 <_vfiprintf_r+0x4c>
 8013650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013652:	e711      	b.n	8013478 <_vfiprintf_r+0x50>
 8013654:	ab03      	add	r3, sp, #12
 8013656:	9300      	str	r3, [sp, #0]
 8013658:	462a      	mov	r2, r5
 801365a:	4b0a      	ldr	r3, [pc, #40]	; (8013684 <_vfiprintf_r+0x25c>)
 801365c:	a904      	add	r1, sp, #16
 801365e:	4630      	mov	r0, r6
 8013660:	f7fd ffac 	bl	80115bc <_printf_i>
 8013664:	e7e4      	b.n	8013630 <_vfiprintf_r+0x208>
 8013666:	bf00      	nop
 8013668:	08015c44 	.word	0x08015c44
 801366c:	08015c64 	.word	0x08015c64
 8013670:	08015c24 	.word	0x08015c24
 8013674:	08015bcc 	.word	0x08015bcc
 8013678:	08015bd2 	.word	0x08015bd2
 801367c:	08015bd6 	.word	0x08015bd6
 8013680:	0801108d 	.word	0x0801108d
 8013684:	08013405 	.word	0x08013405

08013688 <__swbuf_r>:
 8013688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801368a:	460e      	mov	r6, r1
 801368c:	4614      	mov	r4, r2
 801368e:	4605      	mov	r5, r0
 8013690:	b118      	cbz	r0, 801369a <__swbuf_r+0x12>
 8013692:	6983      	ldr	r3, [r0, #24]
 8013694:	b90b      	cbnz	r3, 801369a <__swbuf_r+0x12>
 8013696:	f000 f9e3 	bl	8013a60 <__sinit>
 801369a:	4b21      	ldr	r3, [pc, #132]	; (8013720 <__swbuf_r+0x98>)
 801369c:	429c      	cmp	r4, r3
 801369e:	d12b      	bne.n	80136f8 <__swbuf_r+0x70>
 80136a0:	686c      	ldr	r4, [r5, #4]
 80136a2:	69a3      	ldr	r3, [r4, #24]
 80136a4:	60a3      	str	r3, [r4, #8]
 80136a6:	89a3      	ldrh	r3, [r4, #12]
 80136a8:	071a      	lsls	r2, r3, #28
 80136aa:	d52f      	bpl.n	801370c <__swbuf_r+0x84>
 80136ac:	6923      	ldr	r3, [r4, #16]
 80136ae:	b36b      	cbz	r3, 801370c <__swbuf_r+0x84>
 80136b0:	6923      	ldr	r3, [r4, #16]
 80136b2:	6820      	ldr	r0, [r4, #0]
 80136b4:	1ac0      	subs	r0, r0, r3
 80136b6:	6963      	ldr	r3, [r4, #20]
 80136b8:	b2f6      	uxtb	r6, r6
 80136ba:	4283      	cmp	r3, r0
 80136bc:	4637      	mov	r7, r6
 80136be:	dc04      	bgt.n	80136ca <__swbuf_r+0x42>
 80136c0:	4621      	mov	r1, r4
 80136c2:	4628      	mov	r0, r5
 80136c4:	f000 f938 	bl	8013938 <_fflush_r>
 80136c8:	bb30      	cbnz	r0, 8013718 <__swbuf_r+0x90>
 80136ca:	68a3      	ldr	r3, [r4, #8]
 80136cc:	3b01      	subs	r3, #1
 80136ce:	60a3      	str	r3, [r4, #8]
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	1c5a      	adds	r2, r3, #1
 80136d4:	6022      	str	r2, [r4, #0]
 80136d6:	701e      	strb	r6, [r3, #0]
 80136d8:	6963      	ldr	r3, [r4, #20]
 80136da:	3001      	adds	r0, #1
 80136dc:	4283      	cmp	r3, r0
 80136de:	d004      	beq.n	80136ea <__swbuf_r+0x62>
 80136e0:	89a3      	ldrh	r3, [r4, #12]
 80136e2:	07db      	lsls	r3, r3, #31
 80136e4:	d506      	bpl.n	80136f4 <__swbuf_r+0x6c>
 80136e6:	2e0a      	cmp	r6, #10
 80136e8:	d104      	bne.n	80136f4 <__swbuf_r+0x6c>
 80136ea:	4621      	mov	r1, r4
 80136ec:	4628      	mov	r0, r5
 80136ee:	f000 f923 	bl	8013938 <_fflush_r>
 80136f2:	b988      	cbnz	r0, 8013718 <__swbuf_r+0x90>
 80136f4:	4638      	mov	r0, r7
 80136f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136f8:	4b0a      	ldr	r3, [pc, #40]	; (8013724 <__swbuf_r+0x9c>)
 80136fa:	429c      	cmp	r4, r3
 80136fc:	d101      	bne.n	8013702 <__swbuf_r+0x7a>
 80136fe:	68ac      	ldr	r4, [r5, #8]
 8013700:	e7cf      	b.n	80136a2 <__swbuf_r+0x1a>
 8013702:	4b09      	ldr	r3, [pc, #36]	; (8013728 <__swbuf_r+0xa0>)
 8013704:	429c      	cmp	r4, r3
 8013706:	bf08      	it	eq
 8013708:	68ec      	ldreq	r4, [r5, #12]
 801370a:	e7ca      	b.n	80136a2 <__swbuf_r+0x1a>
 801370c:	4621      	mov	r1, r4
 801370e:	4628      	mov	r0, r5
 8013710:	f000 f81a 	bl	8013748 <__swsetup_r>
 8013714:	2800      	cmp	r0, #0
 8013716:	d0cb      	beq.n	80136b0 <__swbuf_r+0x28>
 8013718:	f04f 37ff 	mov.w	r7, #4294967295
 801371c:	e7ea      	b.n	80136f4 <__swbuf_r+0x6c>
 801371e:	bf00      	nop
 8013720:	08015c44 	.word	0x08015c44
 8013724:	08015c64 	.word	0x08015c64
 8013728:	08015c24 	.word	0x08015c24

0801372c <__ascii_wctomb>:
 801372c:	4603      	mov	r3, r0
 801372e:	4608      	mov	r0, r1
 8013730:	b141      	cbz	r1, 8013744 <__ascii_wctomb+0x18>
 8013732:	2aff      	cmp	r2, #255	; 0xff
 8013734:	d904      	bls.n	8013740 <__ascii_wctomb+0x14>
 8013736:	228a      	movs	r2, #138	; 0x8a
 8013738:	601a      	str	r2, [r3, #0]
 801373a:	f04f 30ff 	mov.w	r0, #4294967295
 801373e:	4770      	bx	lr
 8013740:	700a      	strb	r2, [r1, #0]
 8013742:	2001      	movs	r0, #1
 8013744:	4770      	bx	lr
	...

08013748 <__swsetup_r>:
 8013748:	4b32      	ldr	r3, [pc, #200]	; (8013814 <__swsetup_r+0xcc>)
 801374a:	b570      	push	{r4, r5, r6, lr}
 801374c:	681d      	ldr	r5, [r3, #0]
 801374e:	4606      	mov	r6, r0
 8013750:	460c      	mov	r4, r1
 8013752:	b125      	cbz	r5, 801375e <__swsetup_r+0x16>
 8013754:	69ab      	ldr	r3, [r5, #24]
 8013756:	b913      	cbnz	r3, 801375e <__swsetup_r+0x16>
 8013758:	4628      	mov	r0, r5
 801375a:	f000 f981 	bl	8013a60 <__sinit>
 801375e:	4b2e      	ldr	r3, [pc, #184]	; (8013818 <__swsetup_r+0xd0>)
 8013760:	429c      	cmp	r4, r3
 8013762:	d10f      	bne.n	8013784 <__swsetup_r+0x3c>
 8013764:	686c      	ldr	r4, [r5, #4]
 8013766:	89a3      	ldrh	r3, [r4, #12]
 8013768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801376c:	0719      	lsls	r1, r3, #28
 801376e:	d42c      	bmi.n	80137ca <__swsetup_r+0x82>
 8013770:	06dd      	lsls	r5, r3, #27
 8013772:	d411      	bmi.n	8013798 <__swsetup_r+0x50>
 8013774:	2309      	movs	r3, #9
 8013776:	6033      	str	r3, [r6, #0]
 8013778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801377c:	81a3      	strh	r3, [r4, #12]
 801377e:	f04f 30ff 	mov.w	r0, #4294967295
 8013782:	e03e      	b.n	8013802 <__swsetup_r+0xba>
 8013784:	4b25      	ldr	r3, [pc, #148]	; (801381c <__swsetup_r+0xd4>)
 8013786:	429c      	cmp	r4, r3
 8013788:	d101      	bne.n	801378e <__swsetup_r+0x46>
 801378a:	68ac      	ldr	r4, [r5, #8]
 801378c:	e7eb      	b.n	8013766 <__swsetup_r+0x1e>
 801378e:	4b24      	ldr	r3, [pc, #144]	; (8013820 <__swsetup_r+0xd8>)
 8013790:	429c      	cmp	r4, r3
 8013792:	bf08      	it	eq
 8013794:	68ec      	ldreq	r4, [r5, #12]
 8013796:	e7e6      	b.n	8013766 <__swsetup_r+0x1e>
 8013798:	0758      	lsls	r0, r3, #29
 801379a:	d512      	bpl.n	80137c2 <__swsetup_r+0x7a>
 801379c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801379e:	b141      	cbz	r1, 80137b2 <__swsetup_r+0x6a>
 80137a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80137a4:	4299      	cmp	r1, r3
 80137a6:	d002      	beq.n	80137ae <__swsetup_r+0x66>
 80137a8:	4630      	mov	r0, r6
 80137aa:	f7ff fb35 	bl	8012e18 <_free_r>
 80137ae:	2300      	movs	r3, #0
 80137b0:	6363      	str	r3, [r4, #52]	; 0x34
 80137b2:	89a3      	ldrh	r3, [r4, #12]
 80137b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80137b8:	81a3      	strh	r3, [r4, #12]
 80137ba:	2300      	movs	r3, #0
 80137bc:	6063      	str	r3, [r4, #4]
 80137be:	6923      	ldr	r3, [r4, #16]
 80137c0:	6023      	str	r3, [r4, #0]
 80137c2:	89a3      	ldrh	r3, [r4, #12]
 80137c4:	f043 0308 	orr.w	r3, r3, #8
 80137c8:	81a3      	strh	r3, [r4, #12]
 80137ca:	6923      	ldr	r3, [r4, #16]
 80137cc:	b94b      	cbnz	r3, 80137e2 <__swsetup_r+0x9a>
 80137ce:	89a3      	ldrh	r3, [r4, #12]
 80137d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80137d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137d8:	d003      	beq.n	80137e2 <__swsetup_r+0x9a>
 80137da:	4621      	mov	r1, r4
 80137dc:	4630      	mov	r0, r6
 80137de:	f000 fa05 	bl	8013bec <__smakebuf_r>
 80137e2:	89a0      	ldrh	r0, [r4, #12]
 80137e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80137e8:	f010 0301 	ands.w	r3, r0, #1
 80137ec:	d00a      	beq.n	8013804 <__swsetup_r+0xbc>
 80137ee:	2300      	movs	r3, #0
 80137f0:	60a3      	str	r3, [r4, #8]
 80137f2:	6963      	ldr	r3, [r4, #20]
 80137f4:	425b      	negs	r3, r3
 80137f6:	61a3      	str	r3, [r4, #24]
 80137f8:	6923      	ldr	r3, [r4, #16]
 80137fa:	b943      	cbnz	r3, 801380e <__swsetup_r+0xc6>
 80137fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013800:	d1ba      	bne.n	8013778 <__swsetup_r+0x30>
 8013802:	bd70      	pop	{r4, r5, r6, pc}
 8013804:	0781      	lsls	r1, r0, #30
 8013806:	bf58      	it	pl
 8013808:	6963      	ldrpl	r3, [r4, #20]
 801380a:	60a3      	str	r3, [r4, #8]
 801380c:	e7f4      	b.n	80137f8 <__swsetup_r+0xb0>
 801380e:	2000      	movs	r0, #0
 8013810:	e7f7      	b.n	8013802 <__swsetup_r+0xba>
 8013812:	bf00      	nop
 8013814:	2000005c 	.word	0x2000005c
 8013818:	08015c44 	.word	0x08015c44
 801381c:	08015c64 	.word	0x08015c64
 8013820:	08015c24 	.word	0x08015c24

08013824 <abort>:
 8013824:	b508      	push	{r3, lr}
 8013826:	2006      	movs	r0, #6
 8013828:	f000 fa50 	bl	8013ccc <raise>
 801382c:	2001      	movs	r0, #1
 801382e:	f7ee ff64 	bl	80026fa <_exit>
	...

08013834 <__sflush_r>:
 8013834:	898a      	ldrh	r2, [r1, #12]
 8013836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013838:	4605      	mov	r5, r0
 801383a:	0710      	lsls	r0, r2, #28
 801383c:	460c      	mov	r4, r1
 801383e:	d457      	bmi.n	80138f0 <__sflush_r+0xbc>
 8013840:	684b      	ldr	r3, [r1, #4]
 8013842:	2b00      	cmp	r3, #0
 8013844:	dc04      	bgt.n	8013850 <__sflush_r+0x1c>
 8013846:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013848:	2b00      	cmp	r3, #0
 801384a:	dc01      	bgt.n	8013850 <__sflush_r+0x1c>
 801384c:	2000      	movs	r0, #0
 801384e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013852:	2e00      	cmp	r6, #0
 8013854:	d0fa      	beq.n	801384c <__sflush_r+0x18>
 8013856:	2300      	movs	r3, #0
 8013858:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801385c:	682f      	ldr	r7, [r5, #0]
 801385e:	602b      	str	r3, [r5, #0]
 8013860:	d032      	beq.n	80138c8 <__sflush_r+0x94>
 8013862:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013864:	89a3      	ldrh	r3, [r4, #12]
 8013866:	075a      	lsls	r2, r3, #29
 8013868:	d505      	bpl.n	8013876 <__sflush_r+0x42>
 801386a:	6863      	ldr	r3, [r4, #4]
 801386c:	1ac0      	subs	r0, r0, r3
 801386e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013870:	b10b      	cbz	r3, 8013876 <__sflush_r+0x42>
 8013872:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013874:	1ac0      	subs	r0, r0, r3
 8013876:	2300      	movs	r3, #0
 8013878:	4602      	mov	r2, r0
 801387a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801387c:	6a21      	ldr	r1, [r4, #32]
 801387e:	4628      	mov	r0, r5
 8013880:	47b0      	blx	r6
 8013882:	1c43      	adds	r3, r0, #1
 8013884:	89a3      	ldrh	r3, [r4, #12]
 8013886:	d106      	bne.n	8013896 <__sflush_r+0x62>
 8013888:	6829      	ldr	r1, [r5, #0]
 801388a:	291d      	cmp	r1, #29
 801388c:	d82c      	bhi.n	80138e8 <__sflush_r+0xb4>
 801388e:	4a29      	ldr	r2, [pc, #164]	; (8013934 <__sflush_r+0x100>)
 8013890:	40ca      	lsrs	r2, r1
 8013892:	07d6      	lsls	r6, r2, #31
 8013894:	d528      	bpl.n	80138e8 <__sflush_r+0xb4>
 8013896:	2200      	movs	r2, #0
 8013898:	6062      	str	r2, [r4, #4]
 801389a:	04d9      	lsls	r1, r3, #19
 801389c:	6922      	ldr	r2, [r4, #16]
 801389e:	6022      	str	r2, [r4, #0]
 80138a0:	d504      	bpl.n	80138ac <__sflush_r+0x78>
 80138a2:	1c42      	adds	r2, r0, #1
 80138a4:	d101      	bne.n	80138aa <__sflush_r+0x76>
 80138a6:	682b      	ldr	r3, [r5, #0]
 80138a8:	b903      	cbnz	r3, 80138ac <__sflush_r+0x78>
 80138aa:	6560      	str	r0, [r4, #84]	; 0x54
 80138ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138ae:	602f      	str	r7, [r5, #0]
 80138b0:	2900      	cmp	r1, #0
 80138b2:	d0cb      	beq.n	801384c <__sflush_r+0x18>
 80138b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138b8:	4299      	cmp	r1, r3
 80138ba:	d002      	beq.n	80138c2 <__sflush_r+0x8e>
 80138bc:	4628      	mov	r0, r5
 80138be:	f7ff faab 	bl	8012e18 <_free_r>
 80138c2:	2000      	movs	r0, #0
 80138c4:	6360      	str	r0, [r4, #52]	; 0x34
 80138c6:	e7c2      	b.n	801384e <__sflush_r+0x1a>
 80138c8:	6a21      	ldr	r1, [r4, #32]
 80138ca:	2301      	movs	r3, #1
 80138cc:	4628      	mov	r0, r5
 80138ce:	47b0      	blx	r6
 80138d0:	1c41      	adds	r1, r0, #1
 80138d2:	d1c7      	bne.n	8013864 <__sflush_r+0x30>
 80138d4:	682b      	ldr	r3, [r5, #0]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d0c4      	beq.n	8013864 <__sflush_r+0x30>
 80138da:	2b1d      	cmp	r3, #29
 80138dc:	d001      	beq.n	80138e2 <__sflush_r+0xae>
 80138de:	2b16      	cmp	r3, #22
 80138e0:	d101      	bne.n	80138e6 <__sflush_r+0xb2>
 80138e2:	602f      	str	r7, [r5, #0]
 80138e4:	e7b2      	b.n	801384c <__sflush_r+0x18>
 80138e6:	89a3      	ldrh	r3, [r4, #12]
 80138e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138ec:	81a3      	strh	r3, [r4, #12]
 80138ee:	e7ae      	b.n	801384e <__sflush_r+0x1a>
 80138f0:	690f      	ldr	r7, [r1, #16]
 80138f2:	2f00      	cmp	r7, #0
 80138f4:	d0aa      	beq.n	801384c <__sflush_r+0x18>
 80138f6:	0793      	lsls	r3, r2, #30
 80138f8:	680e      	ldr	r6, [r1, #0]
 80138fa:	bf08      	it	eq
 80138fc:	694b      	ldreq	r3, [r1, #20]
 80138fe:	600f      	str	r7, [r1, #0]
 8013900:	bf18      	it	ne
 8013902:	2300      	movne	r3, #0
 8013904:	1bf6      	subs	r6, r6, r7
 8013906:	608b      	str	r3, [r1, #8]
 8013908:	2e00      	cmp	r6, #0
 801390a:	dd9f      	ble.n	801384c <__sflush_r+0x18>
 801390c:	6a21      	ldr	r1, [r4, #32]
 801390e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8013912:	4633      	mov	r3, r6
 8013914:	463a      	mov	r2, r7
 8013916:	4628      	mov	r0, r5
 8013918:	47e0      	blx	ip
 801391a:	2800      	cmp	r0, #0
 801391c:	dc06      	bgt.n	801392c <__sflush_r+0xf8>
 801391e:	89a3      	ldrh	r3, [r4, #12]
 8013920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013924:	81a3      	strh	r3, [r4, #12]
 8013926:	f04f 30ff 	mov.w	r0, #4294967295
 801392a:	e790      	b.n	801384e <__sflush_r+0x1a>
 801392c:	4407      	add	r7, r0
 801392e:	1a36      	subs	r6, r6, r0
 8013930:	e7ea      	b.n	8013908 <__sflush_r+0xd4>
 8013932:	bf00      	nop
 8013934:	20400001 	.word	0x20400001

08013938 <_fflush_r>:
 8013938:	b538      	push	{r3, r4, r5, lr}
 801393a:	690b      	ldr	r3, [r1, #16]
 801393c:	4605      	mov	r5, r0
 801393e:	460c      	mov	r4, r1
 8013940:	b913      	cbnz	r3, 8013948 <_fflush_r+0x10>
 8013942:	2500      	movs	r5, #0
 8013944:	4628      	mov	r0, r5
 8013946:	bd38      	pop	{r3, r4, r5, pc}
 8013948:	b118      	cbz	r0, 8013952 <_fflush_r+0x1a>
 801394a:	6983      	ldr	r3, [r0, #24]
 801394c:	b90b      	cbnz	r3, 8013952 <_fflush_r+0x1a>
 801394e:	f000 f887 	bl	8013a60 <__sinit>
 8013952:	4b14      	ldr	r3, [pc, #80]	; (80139a4 <_fflush_r+0x6c>)
 8013954:	429c      	cmp	r4, r3
 8013956:	d11b      	bne.n	8013990 <_fflush_r+0x58>
 8013958:	686c      	ldr	r4, [r5, #4]
 801395a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d0ef      	beq.n	8013942 <_fflush_r+0xa>
 8013962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013964:	07d0      	lsls	r0, r2, #31
 8013966:	d404      	bmi.n	8013972 <_fflush_r+0x3a>
 8013968:	0599      	lsls	r1, r3, #22
 801396a:	d402      	bmi.n	8013972 <_fflush_r+0x3a>
 801396c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801396e:	f000 f915 	bl	8013b9c <__retarget_lock_acquire_recursive>
 8013972:	4628      	mov	r0, r5
 8013974:	4621      	mov	r1, r4
 8013976:	f7ff ff5d 	bl	8013834 <__sflush_r>
 801397a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801397c:	07da      	lsls	r2, r3, #31
 801397e:	4605      	mov	r5, r0
 8013980:	d4e0      	bmi.n	8013944 <_fflush_r+0xc>
 8013982:	89a3      	ldrh	r3, [r4, #12]
 8013984:	059b      	lsls	r3, r3, #22
 8013986:	d4dd      	bmi.n	8013944 <_fflush_r+0xc>
 8013988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801398a:	f000 f908 	bl	8013b9e <__retarget_lock_release_recursive>
 801398e:	e7d9      	b.n	8013944 <_fflush_r+0xc>
 8013990:	4b05      	ldr	r3, [pc, #20]	; (80139a8 <_fflush_r+0x70>)
 8013992:	429c      	cmp	r4, r3
 8013994:	d101      	bne.n	801399a <_fflush_r+0x62>
 8013996:	68ac      	ldr	r4, [r5, #8]
 8013998:	e7df      	b.n	801395a <_fflush_r+0x22>
 801399a:	4b04      	ldr	r3, [pc, #16]	; (80139ac <_fflush_r+0x74>)
 801399c:	429c      	cmp	r4, r3
 801399e:	bf08      	it	eq
 80139a0:	68ec      	ldreq	r4, [r5, #12]
 80139a2:	e7da      	b.n	801395a <_fflush_r+0x22>
 80139a4:	08015c44 	.word	0x08015c44
 80139a8:	08015c64 	.word	0x08015c64
 80139ac:	08015c24 	.word	0x08015c24

080139b0 <std>:
 80139b0:	2300      	movs	r3, #0
 80139b2:	b510      	push	{r4, lr}
 80139b4:	4604      	mov	r4, r0
 80139b6:	e9c0 3300 	strd	r3, r3, [r0]
 80139ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139be:	6083      	str	r3, [r0, #8]
 80139c0:	8181      	strh	r1, [r0, #12]
 80139c2:	6643      	str	r3, [r0, #100]	; 0x64
 80139c4:	81c2      	strh	r2, [r0, #14]
 80139c6:	6183      	str	r3, [r0, #24]
 80139c8:	4619      	mov	r1, r3
 80139ca:	2208      	movs	r2, #8
 80139cc:	305c      	adds	r0, #92	; 0x5c
 80139ce:	f7fd fab7 	bl	8010f40 <memset>
 80139d2:	4b05      	ldr	r3, [pc, #20]	; (80139e8 <std+0x38>)
 80139d4:	6263      	str	r3, [r4, #36]	; 0x24
 80139d6:	4b05      	ldr	r3, [pc, #20]	; (80139ec <std+0x3c>)
 80139d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80139da:	4b05      	ldr	r3, [pc, #20]	; (80139f0 <std+0x40>)
 80139dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80139de:	4b05      	ldr	r3, [pc, #20]	; (80139f4 <std+0x44>)
 80139e0:	6224      	str	r4, [r4, #32]
 80139e2:	6323      	str	r3, [r4, #48]	; 0x30
 80139e4:	bd10      	pop	{r4, pc}
 80139e6:	bf00      	nop
 80139e8:	08013d05 	.word	0x08013d05
 80139ec:	08013d27 	.word	0x08013d27
 80139f0:	08013d5f 	.word	0x08013d5f
 80139f4:	08013d83 	.word	0x08013d83

080139f8 <_cleanup_r>:
 80139f8:	4901      	ldr	r1, [pc, #4]	; (8013a00 <_cleanup_r+0x8>)
 80139fa:	f000 b8af 	b.w	8013b5c <_fwalk_reent>
 80139fe:	bf00      	nop
 8013a00:	08013939 	.word	0x08013939

08013a04 <__sfmoreglue>:
 8013a04:	b570      	push	{r4, r5, r6, lr}
 8013a06:	2268      	movs	r2, #104	; 0x68
 8013a08:	1e4d      	subs	r5, r1, #1
 8013a0a:	4355      	muls	r5, r2
 8013a0c:	460e      	mov	r6, r1
 8013a0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013a12:	f7ff fa6b 	bl	8012eec <_malloc_r>
 8013a16:	4604      	mov	r4, r0
 8013a18:	b140      	cbz	r0, 8013a2c <__sfmoreglue+0x28>
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	e9c0 1600 	strd	r1, r6, [r0]
 8013a20:	300c      	adds	r0, #12
 8013a22:	60a0      	str	r0, [r4, #8]
 8013a24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013a28:	f7fd fa8a 	bl	8010f40 <memset>
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	bd70      	pop	{r4, r5, r6, pc}

08013a30 <__sfp_lock_acquire>:
 8013a30:	4801      	ldr	r0, [pc, #4]	; (8013a38 <__sfp_lock_acquire+0x8>)
 8013a32:	f000 b8b3 	b.w	8013b9c <__retarget_lock_acquire_recursive>
 8013a36:	bf00      	nop
 8013a38:	20000f5d 	.word	0x20000f5d

08013a3c <__sfp_lock_release>:
 8013a3c:	4801      	ldr	r0, [pc, #4]	; (8013a44 <__sfp_lock_release+0x8>)
 8013a3e:	f000 b8ae 	b.w	8013b9e <__retarget_lock_release_recursive>
 8013a42:	bf00      	nop
 8013a44:	20000f5d 	.word	0x20000f5d

08013a48 <__sinit_lock_acquire>:
 8013a48:	4801      	ldr	r0, [pc, #4]	; (8013a50 <__sinit_lock_acquire+0x8>)
 8013a4a:	f000 b8a7 	b.w	8013b9c <__retarget_lock_acquire_recursive>
 8013a4e:	bf00      	nop
 8013a50:	20000f5e 	.word	0x20000f5e

08013a54 <__sinit_lock_release>:
 8013a54:	4801      	ldr	r0, [pc, #4]	; (8013a5c <__sinit_lock_release+0x8>)
 8013a56:	f000 b8a2 	b.w	8013b9e <__retarget_lock_release_recursive>
 8013a5a:	bf00      	nop
 8013a5c:	20000f5e 	.word	0x20000f5e

08013a60 <__sinit>:
 8013a60:	b510      	push	{r4, lr}
 8013a62:	4604      	mov	r4, r0
 8013a64:	f7ff fff0 	bl	8013a48 <__sinit_lock_acquire>
 8013a68:	69a3      	ldr	r3, [r4, #24]
 8013a6a:	b11b      	cbz	r3, 8013a74 <__sinit+0x14>
 8013a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a70:	f7ff bff0 	b.w	8013a54 <__sinit_lock_release>
 8013a74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013a78:	6523      	str	r3, [r4, #80]	; 0x50
 8013a7a:	4b13      	ldr	r3, [pc, #76]	; (8013ac8 <__sinit+0x68>)
 8013a7c:	4a13      	ldr	r2, [pc, #76]	; (8013acc <__sinit+0x6c>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	62a2      	str	r2, [r4, #40]	; 0x28
 8013a82:	42a3      	cmp	r3, r4
 8013a84:	bf04      	itt	eq
 8013a86:	2301      	moveq	r3, #1
 8013a88:	61a3      	streq	r3, [r4, #24]
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f000 f820 	bl	8013ad0 <__sfp>
 8013a90:	6060      	str	r0, [r4, #4]
 8013a92:	4620      	mov	r0, r4
 8013a94:	f000 f81c 	bl	8013ad0 <__sfp>
 8013a98:	60a0      	str	r0, [r4, #8]
 8013a9a:	4620      	mov	r0, r4
 8013a9c:	f000 f818 	bl	8013ad0 <__sfp>
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	60e0      	str	r0, [r4, #12]
 8013aa4:	2104      	movs	r1, #4
 8013aa6:	6860      	ldr	r0, [r4, #4]
 8013aa8:	f7ff ff82 	bl	80139b0 <std>
 8013aac:	68a0      	ldr	r0, [r4, #8]
 8013aae:	2201      	movs	r2, #1
 8013ab0:	2109      	movs	r1, #9
 8013ab2:	f7ff ff7d 	bl	80139b0 <std>
 8013ab6:	68e0      	ldr	r0, [r4, #12]
 8013ab8:	2202      	movs	r2, #2
 8013aba:	2112      	movs	r1, #18
 8013abc:	f7ff ff78 	bl	80139b0 <std>
 8013ac0:	2301      	movs	r3, #1
 8013ac2:	61a3      	str	r3, [r4, #24]
 8013ac4:	e7d2      	b.n	8013a6c <__sinit+0xc>
 8013ac6:	bf00      	nop
 8013ac8:	080159a8 	.word	0x080159a8
 8013acc:	080139f9 	.word	0x080139f9

08013ad0 <__sfp>:
 8013ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ad2:	4607      	mov	r7, r0
 8013ad4:	f7ff ffac 	bl	8013a30 <__sfp_lock_acquire>
 8013ad8:	4b1e      	ldr	r3, [pc, #120]	; (8013b54 <__sfp+0x84>)
 8013ada:	681e      	ldr	r6, [r3, #0]
 8013adc:	69b3      	ldr	r3, [r6, #24]
 8013ade:	b913      	cbnz	r3, 8013ae6 <__sfp+0x16>
 8013ae0:	4630      	mov	r0, r6
 8013ae2:	f7ff ffbd 	bl	8013a60 <__sinit>
 8013ae6:	3648      	adds	r6, #72	; 0x48
 8013ae8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013aec:	3b01      	subs	r3, #1
 8013aee:	d503      	bpl.n	8013af8 <__sfp+0x28>
 8013af0:	6833      	ldr	r3, [r6, #0]
 8013af2:	b30b      	cbz	r3, 8013b38 <__sfp+0x68>
 8013af4:	6836      	ldr	r6, [r6, #0]
 8013af6:	e7f7      	b.n	8013ae8 <__sfp+0x18>
 8013af8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013afc:	b9d5      	cbnz	r5, 8013b34 <__sfp+0x64>
 8013afe:	4b16      	ldr	r3, [pc, #88]	; (8013b58 <__sfp+0x88>)
 8013b00:	60e3      	str	r3, [r4, #12]
 8013b02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013b06:	6665      	str	r5, [r4, #100]	; 0x64
 8013b08:	f000 f847 	bl	8013b9a <__retarget_lock_init_recursive>
 8013b0c:	f7ff ff96 	bl	8013a3c <__sfp_lock_release>
 8013b10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013b14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013b18:	6025      	str	r5, [r4, #0]
 8013b1a:	61a5      	str	r5, [r4, #24]
 8013b1c:	2208      	movs	r2, #8
 8013b1e:	4629      	mov	r1, r5
 8013b20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013b24:	f7fd fa0c 	bl	8010f40 <memset>
 8013b28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013b2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013b30:	4620      	mov	r0, r4
 8013b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b34:	3468      	adds	r4, #104	; 0x68
 8013b36:	e7d9      	b.n	8013aec <__sfp+0x1c>
 8013b38:	2104      	movs	r1, #4
 8013b3a:	4638      	mov	r0, r7
 8013b3c:	f7ff ff62 	bl	8013a04 <__sfmoreglue>
 8013b40:	4604      	mov	r4, r0
 8013b42:	6030      	str	r0, [r6, #0]
 8013b44:	2800      	cmp	r0, #0
 8013b46:	d1d5      	bne.n	8013af4 <__sfp+0x24>
 8013b48:	f7ff ff78 	bl	8013a3c <__sfp_lock_release>
 8013b4c:	230c      	movs	r3, #12
 8013b4e:	603b      	str	r3, [r7, #0]
 8013b50:	e7ee      	b.n	8013b30 <__sfp+0x60>
 8013b52:	bf00      	nop
 8013b54:	080159a8 	.word	0x080159a8
 8013b58:	ffff0001 	.word	0xffff0001

08013b5c <_fwalk_reent>:
 8013b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b60:	4606      	mov	r6, r0
 8013b62:	4688      	mov	r8, r1
 8013b64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013b68:	2700      	movs	r7, #0
 8013b6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b6e:	f1b9 0901 	subs.w	r9, r9, #1
 8013b72:	d505      	bpl.n	8013b80 <_fwalk_reent+0x24>
 8013b74:	6824      	ldr	r4, [r4, #0]
 8013b76:	2c00      	cmp	r4, #0
 8013b78:	d1f7      	bne.n	8013b6a <_fwalk_reent+0xe>
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b80:	89ab      	ldrh	r3, [r5, #12]
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d907      	bls.n	8013b96 <_fwalk_reent+0x3a>
 8013b86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	d003      	beq.n	8013b96 <_fwalk_reent+0x3a>
 8013b8e:	4629      	mov	r1, r5
 8013b90:	4630      	mov	r0, r6
 8013b92:	47c0      	blx	r8
 8013b94:	4307      	orrs	r7, r0
 8013b96:	3568      	adds	r5, #104	; 0x68
 8013b98:	e7e9      	b.n	8013b6e <_fwalk_reent+0x12>

08013b9a <__retarget_lock_init_recursive>:
 8013b9a:	4770      	bx	lr

08013b9c <__retarget_lock_acquire_recursive>:
 8013b9c:	4770      	bx	lr

08013b9e <__retarget_lock_release_recursive>:
 8013b9e:	4770      	bx	lr

08013ba0 <__swhatbuf_r>:
 8013ba0:	b570      	push	{r4, r5, r6, lr}
 8013ba2:	460e      	mov	r6, r1
 8013ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ba8:	2900      	cmp	r1, #0
 8013baa:	b096      	sub	sp, #88	; 0x58
 8013bac:	4614      	mov	r4, r2
 8013bae:	461d      	mov	r5, r3
 8013bb0:	da08      	bge.n	8013bc4 <__swhatbuf_r+0x24>
 8013bb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	602a      	str	r2, [r5, #0]
 8013bba:	061a      	lsls	r2, r3, #24
 8013bbc:	d410      	bmi.n	8013be0 <__swhatbuf_r+0x40>
 8013bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013bc2:	e00e      	b.n	8013be2 <__swhatbuf_r+0x42>
 8013bc4:	466a      	mov	r2, sp
 8013bc6:	f000 f903 	bl	8013dd0 <_fstat_r>
 8013bca:	2800      	cmp	r0, #0
 8013bcc:	dbf1      	blt.n	8013bb2 <__swhatbuf_r+0x12>
 8013bce:	9a01      	ldr	r2, [sp, #4]
 8013bd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013bd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013bd8:	425a      	negs	r2, r3
 8013bda:	415a      	adcs	r2, r3
 8013bdc:	602a      	str	r2, [r5, #0]
 8013bde:	e7ee      	b.n	8013bbe <__swhatbuf_r+0x1e>
 8013be0:	2340      	movs	r3, #64	; 0x40
 8013be2:	2000      	movs	r0, #0
 8013be4:	6023      	str	r3, [r4, #0]
 8013be6:	b016      	add	sp, #88	; 0x58
 8013be8:	bd70      	pop	{r4, r5, r6, pc}
	...

08013bec <__smakebuf_r>:
 8013bec:	898b      	ldrh	r3, [r1, #12]
 8013bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013bf0:	079d      	lsls	r5, r3, #30
 8013bf2:	4606      	mov	r6, r0
 8013bf4:	460c      	mov	r4, r1
 8013bf6:	d507      	bpl.n	8013c08 <__smakebuf_r+0x1c>
 8013bf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013bfc:	6023      	str	r3, [r4, #0]
 8013bfe:	6123      	str	r3, [r4, #16]
 8013c00:	2301      	movs	r3, #1
 8013c02:	6163      	str	r3, [r4, #20]
 8013c04:	b002      	add	sp, #8
 8013c06:	bd70      	pop	{r4, r5, r6, pc}
 8013c08:	ab01      	add	r3, sp, #4
 8013c0a:	466a      	mov	r2, sp
 8013c0c:	f7ff ffc8 	bl	8013ba0 <__swhatbuf_r>
 8013c10:	9900      	ldr	r1, [sp, #0]
 8013c12:	4605      	mov	r5, r0
 8013c14:	4630      	mov	r0, r6
 8013c16:	f7ff f969 	bl	8012eec <_malloc_r>
 8013c1a:	b948      	cbnz	r0, 8013c30 <__smakebuf_r+0x44>
 8013c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c20:	059a      	lsls	r2, r3, #22
 8013c22:	d4ef      	bmi.n	8013c04 <__smakebuf_r+0x18>
 8013c24:	f023 0303 	bic.w	r3, r3, #3
 8013c28:	f043 0302 	orr.w	r3, r3, #2
 8013c2c:	81a3      	strh	r3, [r4, #12]
 8013c2e:	e7e3      	b.n	8013bf8 <__smakebuf_r+0xc>
 8013c30:	4b0d      	ldr	r3, [pc, #52]	; (8013c68 <__smakebuf_r+0x7c>)
 8013c32:	62b3      	str	r3, [r6, #40]	; 0x28
 8013c34:	89a3      	ldrh	r3, [r4, #12]
 8013c36:	6020      	str	r0, [r4, #0]
 8013c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c3c:	81a3      	strh	r3, [r4, #12]
 8013c3e:	9b00      	ldr	r3, [sp, #0]
 8013c40:	6163      	str	r3, [r4, #20]
 8013c42:	9b01      	ldr	r3, [sp, #4]
 8013c44:	6120      	str	r0, [r4, #16]
 8013c46:	b15b      	cbz	r3, 8013c60 <__smakebuf_r+0x74>
 8013c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f000 f8d1 	bl	8013df4 <_isatty_r>
 8013c52:	b128      	cbz	r0, 8013c60 <__smakebuf_r+0x74>
 8013c54:	89a3      	ldrh	r3, [r4, #12]
 8013c56:	f023 0303 	bic.w	r3, r3, #3
 8013c5a:	f043 0301 	orr.w	r3, r3, #1
 8013c5e:	81a3      	strh	r3, [r4, #12]
 8013c60:	89a0      	ldrh	r0, [r4, #12]
 8013c62:	4305      	orrs	r5, r0
 8013c64:	81a5      	strh	r5, [r4, #12]
 8013c66:	e7cd      	b.n	8013c04 <__smakebuf_r+0x18>
 8013c68:	080139f9 	.word	0x080139f9

08013c6c <_malloc_usable_size_r>:
 8013c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c70:	1f18      	subs	r0, r3, #4
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	bfbc      	itt	lt
 8013c76:	580b      	ldrlt	r3, [r1, r0]
 8013c78:	18c0      	addlt	r0, r0, r3
 8013c7a:	4770      	bx	lr

08013c7c <_raise_r>:
 8013c7c:	291f      	cmp	r1, #31
 8013c7e:	b538      	push	{r3, r4, r5, lr}
 8013c80:	4604      	mov	r4, r0
 8013c82:	460d      	mov	r5, r1
 8013c84:	d904      	bls.n	8013c90 <_raise_r+0x14>
 8013c86:	2316      	movs	r3, #22
 8013c88:	6003      	str	r3, [r0, #0]
 8013c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c8e:	bd38      	pop	{r3, r4, r5, pc}
 8013c90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c92:	b112      	cbz	r2, 8013c9a <_raise_r+0x1e>
 8013c94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c98:	b94b      	cbnz	r3, 8013cae <_raise_r+0x32>
 8013c9a:	4620      	mov	r0, r4
 8013c9c:	f000 f830 	bl	8013d00 <_getpid_r>
 8013ca0:	462a      	mov	r2, r5
 8013ca2:	4601      	mov	r1, r0
 8013ca4:	4620      	mov	r0, r4
 8013ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013caa:	f000 b817 	b.w	8013cdc <_kill_r>
 8013cae:	2b01      	cmp	r3, #1
 8013cb0:	d00a      	beq.n	8013cc8 <_raise_r+0x4c>
 8013cb2:	1c59      	adds	r1, r3, #1
 8013cb4:	d103      	bne.n	8013cbe <_raise_r+0x42>
 8013cb6:	2316      	movs	r3, #22
 8013cb8:	6003      	str	r3, [r0, #0]
 8013cba:	2001      	movs	r0, #1
 8013cbc:	e7e7      	b.n	8013c8e <_raise_r+0x12>
 8013cbe:	2400      	movs	r4, #0
 8013cc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013cc4:	4628      	mov	r0, r5
 8013cc6:	4798      	blx	r3
 8013cc8:	2000      	movs	r0, #0
 8013cca:	e7e0      	b.n	8013c8e <_raise_r+0x12>

08013ccc <raise>:
 8013ccc:	4b02      	ldr	r3, [pc, #8]	; (8013cd8 <raise+0xc>)
 8013cce:	4601      	mov	r1, r0
 8013cd0:	6818      	ldr	r0, [r3, #0]
 8013cd2:	f7ff bfd3 	b.w	8013c7c <_raise_r>
 8013cd6:	bf00      	nop
 8013cd8:	2000005c 	.word	0x2000005c

08013cdc <_kill_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	4d07      	ldr	r5, [pc, #28]	; (8013cfc <_kill_r+0x20>)
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	4611      	mov	r1, r2
 8013ce8:	602b      	str	r3, [r5, #0]
 8013cea:	f7ee fcf6 	bl	80026da <_kill>
 8013cee:	1c43      	adds	r3, r0, #1
 8013cf0:	d102      	bne.n	8013cf8 <_kill_r+0x1c>
 8013cf2:	682b      	ldr	r3, [r5, #0]
 8013cf4:	b103      	cbz	r3, 8013cf8 <_kill_r+0x1c>
 8013cf6:	6023      	str	r3, [r4, #0]
 8013cf8:	bd38      	pop	{r3, r4, r5, pc}
 8013cfa:	bf00      	nop
 8013cfc:	20000f58 	.word	0x20000f58

08013d00 <_getpid_r>:
 8013d00:	f7ee bce4 	b.w	80026cc <_getpid>

08013d04 <__sread>:
 8013d04:	b510      	push	{r4, lr}
 8013d06:	460c      	mov	r4, r1
 8013d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d0c:	f000 f894 	bl	8013e38 <_read_r>
 8013d10:	2800      	cmp	r0, #0
 8013d12:	bfab      	itete	ge
 8013d14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d16:	89a3      	ldrhlt	r3, [r4, #12]
 8013d18:	181b      	addge	r3, r3, r0
 8013d1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d1e:	bfac      	ite	ge
 8013d20:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d22:	81a3      	strhlt	r3, [r4, #12]
 8013d24:	bd10      	pop	{r4, pc}

08013d26 <__swrite>:
 8013d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d2a:	461f      	mov	r7, r3
 8013d2c:	898b      	ldrh	r3, [r1, #12]
 8013d2e:	05db      	lsls	r3, r3, #23
 8013d30:	4605      	mov	r5, r0
 8013d32:	460c      	mov	r4, r1
 8013d34:	4616      	mov	r6, r2
 8013d36:	d505      	bpl.n	8013d44 <__swrite+0x1e>
 8013d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d3c:	2302      	movs	r3, #2
 8013d3e:	2200      	movs	r2, #0
 8013d40:	f000 f868 	bl	8013e14 <_lseek_r>
 8013d44:	89a3      	ldrh	r3, [r4, #12]
 8013d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d4e:	81a3      	strh	r3, [r4, #12]
 8013d50:	4632      	mov	r2, r6
 8013d52:	463b      	mov	r3, r7
 8013d54:	4628      	mov	r0, r5
 8013d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d5a:	f000 b817 	b.w	8013d8c <_write_r>

08013d5e <__sseek>:
 8013d5e:	b510      	push	{r4, lr}
 8013d60:	460c      	mov	r4, r1
 8013d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d66:	f000 f855 	bl	8013e14 <_lseek_r>
 8013d6a:	1c43      	adds	r3, r0, #1
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	bf15      	itete	ne
 8013d70:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d7a:	81a3      	strheq	r3, [r4, #12]
 8013d7c:	bf18      	it	ne
 8013d7e:	81a3      	strhne	r3, [r4, #12]
 8013d80:	bd10      	pop	{r4, pc}

08013d82 <__sclose>:
 8013d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d86:	f000 b813 	b.w	8013db0 <_close_r>
	...

08013d8c <_write_r>:
 8013d8c:	b538      	push	{r3, r4, r5, lr}
 8013d8e:	4d07      	ldr	r5, [pc, #28]	; (8013dac <_write_r+0x20>)
 8013d90:	4604      	mov	r4, r0
 8013d92:	4608      	mov	r0, r1
 8013d94:	4611      	mov	r1, r2
 8013d96:	2200      	movs	r2, #0
 8013d98:	602a      	str	r2, [r5, #0]
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	f7ee fcd4 	bl	8002748 <_write>
 8013da0:	1c43      	adds	r3, r0, #1
 8013da2:	d102      	bne.n	8013daa <_write_r+0x1e>
 8013da4:	682b      	ldr	r3, [r5, #0]
 8013da6:	b103      	cbz	r3, 8013daa <_write_r+0x1e>
 8013da8:	6023      	str	r3, [r4, #0]
 8013daa:	bd38      	pop	{r3, r4, r5, pc}
 8013dac:	20000f58 	.word	0x20000f58

08013db0 <_close_r>:
 8013db0:	b538      	push	{r3, r4, r5, lr}
 8013db2:	4d06      	ldr	r5, [pc, #24]	; (8013dcc <_close_r+0x1c>)
 8013db4:	2300      	movs	r3, #0
 8013db6:	4604      	mov	r4, r0
 8013db8:	4608      	mov	r0, r1
 8013dba:	602b      	str	r3, [r5, #0]
 8013dbc:	f7ee fce0 	bl	8002780 <_close>
 8013dc0:	1c43      	adds	r3, r0, #1
 8013dc2:	d102      	bne.n	8013dca <_close_r+0x1a>
 8013dc4:	682b      	ldr	r3, [r5, #0]
 8013dc6:	b103      	cbz	r3, 8013dca <_close_r+0x1a>
 8013dc8:	6023      	str	r3, [r4, #0]
 8013dca:	bd38      	pop	{r3, r4, r5, pc}
 8013dcc:	20000f58 	.word	0x20000f58

08013dd0 <_fstat_r>:
 8013dd0:	b538      	push	{r3, r4, r5, lr}
 8013dd2:	4d07      	ldr	r5, [pc, #28]	; (8013df0 <_fstat_r+0x20>)
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	4608      	mov	r0, r1
 8013dda:	4611      	mov	r1, r2
 8013ddc:	602b      	str	r3, [r5, #0]
 8013dde:	f7ee fcda 	bl	8002796 <_fstat>
 8013de2:	1c43      	adds	r3, r0, #1
 8013de4:	d102      	bne.n	8013dec <_fstat_r+0x1c>
 8013de6:	682b      	ldr	r3, [r5, #0]
 8013de8:	b103      	cbz	r3, 8013dec <_fstat_r+0x1c>
 8013dea:	6023      	str	r3, [r4, #0]
 8013dec:	bd38      	pop	{r3, r4, r5, pc}
 8013dee:	bf00      	nop
 8013df0:	20000f58 	.word	0x20000f58

08013df4 <_isatty_r>:
 8013df4:	b538      	push	{r3, r4, r5, lr}
 8013df6:	4d06      	ldr	r5, [pc, #24]	; (8013e10 <_isatty_r+0x1c>)
 8013df8:	2300      	movs	r3, #0
 8013dfa:	4604      	mov	r4, r0
 8013dfc:	4608      	mov	r0, r1
 8013dfe:	602b      	str	r3, [r5, #0]
 8013e00:	f7ee fcd8 	bl	80027b4 <_isatty>
 8013e04:	1c43      	adds	r3, r0, #1
 8013e06:	d102      	bne.n	8013e0e <_isatty_r+0x1a>
 8013e08:	682b      	ldr	r3, [r5, #0]
 8013e0a:	b103      	cbz	r3, 8013e0e <_isatty_r+0x1a>
 8013e0c:	6023      	str	r3, [r4, #0]
 8013e0e:	bd38      	pop	{r3, r4, r5, pc}
 8013e10:	20000f58 	.word	0x20000f58

08013e14 <_lseek_r>:
 8013e14:	b538      	push	{r3, r4, r5, lr}
 8013e16:	4d07      	ldr	r5, [pc, #28]	; (8013e34 <_lseek_r+0x20>)
 8013e18:	4604      	mov	r4, r0
 8013e1a:	4608      	mov	r0, r1
 8013e1c:	4611      	mov	r1, r2
 8013e1e:	2200      	movs	r2, #0
 8013e20:	602a      	str	r2, [r5, #0]
 8013e22:	461a      	mov	r2, r3
 8013e24:	f7ee fcd0 	bl	80027c8 <_lseek>
 8013e28:	1c43      	adds	r3, r0, #1
 8013e2a:	d102      	bne.n	8013e32 <_lseek_r+0x1e>
 8013e2c:	682b      	ldr	r3, [r5, #0]
 8013e2e:	b103      	cbz	r3, 8013e32 <_lseek_r+0x1e>
 8013e30:	6023      	str	r3, [r4, #0]
 8013e32:	bd38      	pop	{r3, r4, r5, pc}
 8013e34:	20000f58 	.word	0x20000f58

08013e38 <_read_r>:
 8013e38:	b538      	push	{r3, r4, r5, lr}
 8013e3a:	4d07      	ldr	r5, [pc, #28]	; (8013e58 <_read_r+0x20>)
 8013e3c:	4604      	mov	r4, r0
 8013e3e:	4608      	mov	r0, r1
 8013e40:	4611      	mov	r1, r2
 8013e42:	2200      	movs	r2, #0
 8013e44:	602a      	str	r2, [r5, #0]
 8013e46:	461a      	mov	r2, r3
 8013e48:	f7ee fc61 	bl	800270e <_read>
 8013e4c:	1c43      	adds	r3, r0, #1
 8013e4e:	d102      	bne.n	8013e56 <_read_r+0x1e>
 8013e50:	682b      	ldr	r3, [r5, #0]
 8013e52:	b103      	cbz	r3, 8013e56 <_read_r+0x1e>
 8013e54:	6023      	str	r3, [r4, #0]
 8013e56:	bd38      	pop	{r3, r4, r5, pc}
 8013e58:	20000f58 	.word	0x20000f58

08013e5c <pow>:
 8013e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e60:	4614      	mov	r4, r2
 8013e62:	461d      	mov	r5, r3
 8013e64:	4680      	mov	r8, r0
 8013e66:	4689      	mov	r9, r1
 8013e68:	f000 f862 	bl	8013f30 <__ieee754_pow>
 8013e6c:	4622      	mov	r2, r4
 8013e6e:	4606      	mov	r6, r0
 8013e70:	460f      	mov	r7, r1
 8013e72:	462b      	mov	r3, r5
 8013e74:	4620      	mov	r0, r4
 8013e76:	4629      	mov	r1, r5
 8013e78:	f7ec fe30 	bl	8000adc <__aeabi_dcmpun>
 8013e7c:	bbc8      	cbnz	r0, 8013ef2 <pow+0x96>
 8013e7e:	2200      	movs	r2, #0
 8013e80:	2300      	movs	r3, #0
 8013e82:	4640      	mov	r0, r8
 8013e84:	4649      	mov	r1, r9
 8013e86:	f7ec fdf7 	bl	8000a78 <__aeabi_dcmpeq>
 8013e8a:	b1b8      	cbz	r0, 8013ebc <pow+0x60>
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	2300      	movs	r3, #0
 8013e90:	4620      	mov	r0, r4
 8013e92:	4629      	mov	r1, r5
 8013e94:	f7ec fdf0 	bl	8000a78 <__aeabi_dcmpeq>
 8013e98:	2800      	cmp	r0, #0
 8013e9a:	d141      	bne.n	8013f20 <pow+0xc4>
 8013e9c:	4620      	mov	r0, r4
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	f000 fe39 	bl	8014b16 <finite>
 8013ea4:	b328      	cbz	r0, 8013ef2 <pow+0x96>
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	4620      	mov	r0, r4
 8013eac:	4629      	mov	r1, r5
 8013eae:	f7ec fded 	bl	8000a8c <__aeabi_dcmplt>
 8013eb2:	b1f0      	cbz	r0, 8013ef2 <pow+0x96>
 8013eb4:	f7fd f80c 	bl	8010ed0 <__errno>
 8013eb8:	2322      	movs	r3, #34	; 0x22
 8013eba:	e019      	b.n	8013ef0 <pow+0x94>
 8013ebc:	4630      	mov	r0, r6
 8013ebe:	4639      	mov	r1, r7
 8013ec0:	f000 fe29 	bl	8014b16 <finite>
 8013ec4:	b9c8      	cbnz	r0, 8013efa <pow+0x9e>
 8013ec6:	4640      	mov	r0, r8
 8013ec8:	4649      	mov	r1, r9
 8013eca:	f000 fe24 	bl	8014b16 <finite>
 8013ece:	b1a0      	cbz	r0, 8013efa <pow+0x9e>
 8013ed0:	4620      	mov	r0, r4
 8013ed2:	4629      	mov	r1, r5
 8013ed4:	f000 fe1f 	bl	8014b16 <finite>
 8013ed8:	b178      	cbz	r0, 8013efa <pow+0x9e>
 8013eda:	4632      	mov	r2, r6
 8013edc:	463b      	mov	r3, r7
 8013ede:	4630      	mov	r0, r6
 8013ee0:	4639      	mov	r1, r7
 8013ee2:	f7ec fdfb 	bl	8000adc <__aeabi_dcmpun>
 8013ee6:	2800      	cmp	r0, #0
 8013ee8:	d0e4      	beq.n	8013eb4 <pow+0x58>
 8013eea:	f7fc fff1 	bl	8010ed0 <__errno>
 8013eee:	2321      	movs	r3, #33	; 0x21
 8013ef0:	6003      	str	r3, [r0, #0]
 8013ef2:	4630      	mov	r0, r6
 8013ef4:	4639      	mov	r1, r7
 8013ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013efa:	2200      	movs	r2, #0
 8013efc:	2300      	movs	r3, #0
 8013efe:	4630      	mov	r0, r6
 8013f00:	4639      	mov	r1, r7
 8013f02:	f7ec fdb9 	bl	8000a78 <__aeabi_dcmpeq>
 8013f06:	2800      	cmp	r0, #0
 8013f08:	d0f3      	beq.n	8013ef2 <pow+0x96>
 8013f0a:	4640      	mov	r0, r8
 8013f0c:	4649      	mov	r1, r9
 8013f0e:	f000 fe02 	bl	8014b16 <finite>
 8013f12:	2800      	cmp	r0, #0
 8013f14:	d0ed      	beq.n	8013ef2 <pow+0x96>
 8013f16:	4620      	mov	r0, r4
 8013f18:	4629      	mov	r1, r5
 8013f1a:	f000 fdfc 	bl	8014b16 <finite>
 8013f1e:	e7c8      	b.n	8013eb2 <pow+0x56>
 8013f20:	4f01      	ldr	r7, [pc, #4]	; (8013f28 <pow+0xcc>)
 8013f22:	2600      	movs	r6, #0
 8013f24:	e7e5      	b.n	8013ef2 <pow+0x96>
 8013f26:	bf00      	nop
 8013f28:	3ff00000 	.word	0x3ff00000
 8013f2c:	00000000 	.word	0x00000000

08013f30 <__ieee754_pow>:
 8013f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f34:	b093      	sub	sp, #76	; 0x4c
 8013f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013f3a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8013f3e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8013f42:	4689      	mov	r9, r1
 8013f44:	ea56 0102 	orrs.w	r1, r6, r2
 8013f48:	4680      	mov	r8, r0
 8013f4a:	d111      	bne.n	8013f70 <__ieee754_pow+0x40>
 8013f4c:	1803      	adds	r3, r0, r0
 8013f4e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8013f52:	4152      	adcs	r2, r2
 8013f54:	4299      	cmp	r1, r3
 8013f56:	4b82      	ldr	r3, [pc, #520]	; (8014160 <__ieee754_pow+0x230>)
 8013f58:	4193      	sbcs	r3, r2
 8013f5a:	f080 84b9 	bcs.w	80148d0 <__ieee754_pow+0x9a0>
 8013f5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013f62:	4640      	mov	r0, r8
 8013f64:	4649      	mov	r1, r9
 8013f66:	f7ec f969 	bl	800023c <__adddf3>
 8013f6a:	4683      	mov	fp, r0
 8013f6c:	468c      	mov	ip, r1
 8013f6e:	e06f      	b.n	8014050 <__ieee754_pow+0x120>
 8013f70:	4b7c      	ldr	r3, [pc, #496]	; (8014164 <__ieee754_pow+0x234>)
 8013f72:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8013f76:	429c      	cmp	r4, r3
 8013f78:	464d      	mov	r5, r9
 8013f7a:	4682      	mov	sl, r0
 8013f7c:	dc06      	bgt.n	8013f8c <__ieee754_pow+0x5c>
 8013f7e:	d101      	bne.n	8013f84 <__ieee754_pow+0x54>
 8013f80:	2800      	cmp	r0, #0
 8013f82:	d1ec      	bne.n	8013f5e <__ieee754_pow+0x2e>
 8013f84:	429e      	cmp	r6, r3
 8013f86:	dc01      	bgt.n	8013f8c <__ieee754_pow+0x5c>
 8013f88:	d10f      	bne.n	8013faa <__ieee754_pow+0x7a>
 8013f8a:	b172      	cbz	r2, 8013faa <__ieee754_pow+0x7a>
 8013f8c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013f90:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013f94:	ea55 050a 	orrs.w	r5, r5, sl
 8013f98:	d1e1      	bne.n	8013f5e <__ieee754_pow+0x2e>
 8013f9a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013f9e:	18db      	adds	r3, r3, r3
 8013fa0:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013fa4:	4152      	adcs	r2, r2
 8013fa6:	429d      	cmp	r5, r3
 8013fa8:	e7d5      	b.n	8013f56 <__ieee754_pow+0x26>
 8013faa:	2d00      	cmp	r5, #0
 8013fac:	da39      	bge.n	8014022 <__ieee754_pow+0xf2>
 8013fae:	4b6e      	ldr	r3, [pc, #440]	; (8014168 <__ieee754_pow+0x238>)
 8013fb0:	429e      	cmp	r6, r3
 8013fb2:	dc52      	bgt.n	801405a <__ieee754_pow+0x12a>
 8013fb4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013fb8:	429e      	cmp	r6, r3
 8013fba:	f340 849c 	ble.w	80148f6 <__ieee754_pow+0x9c6>
 8013fbe:	1533      	asrs	r3, r6, #20
 8013fc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013fc4:	2b14      	cmp	r3, #20
 8013fc6:	dd0f      	ble.n	8013fe8 <__ieee754_pow+0xb8>
 8013fc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013fcc:	fa22 f103 	lsr.w	r1, r2, r3
 8013fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8013fd4:	4293      	cmp	r3, r2
 8013fd6:	f040 848e 	bne.w	80148f6 <__ieee754_pow+0x9c6>
 8013fda:	f001 0101 	and.w	r1, r1, #1
 8013fde:	f1c1 0302 	rsb	r3, r1, #2
 8013fe2:	9300      	str	r3, [sp, #0]
 8013fe4:	b182      	cbz	r2, 8014008 <__ieee754_pow+0xd8>
 8013fe6:	e05d      	b.n	80140a4 <__ieee754_pow+0x174>
 8013fe8:	2a00      	cmp	r2, #0
 8013fea:	d159      	bne.n	80140a0 <__ieee754_pow+0x170>
 8013fec:	f1c3 0314 	rsb	r3, r3, #20
 8013ff0:	fa46 f103 	asr.w	r1, r6, r3
 8013ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8013ff8:	42b3      	cmp	r3, r6
 8013ffa:	f040 8479 	bne.w	80148f0 <__ieee754_pow+0x9c0>
 8013ffe:	f001 0101 	and.w	r1, r1, #1
 8014002:	f1c1 0302 	rsb	r3, r1, #2
 8014006:	9300      	str	r3, [sp, #0]
 8014008:	4b58      	ldr	r3, [pc, #352]	; (801416c <__ieee754_pow+0x23c>)
 801400a:	429e      	cmp	r6, r3
 801400c:	d132      	bne.n	8014074 <__ieee754_pow+0x144>
 801400e:	2f00      	cmp	r7, #0
 8014010:	f280 846a 	bge.w	80148e8 <__ieee754_pow+0x9b8>
 8014014:	4955      	ldr	r1, [pc, #340]	; (801416c <__ieee754_pow+0x23c>)
 8014016:	4642      	mov	r2, r8
 8014018:	464b      	mov	r3, r9
 801401a:	2000      	movs	r0, #0
 801401c:	f7ec fbee 	bl	80007fc <__aeabi_ddiv>
 8014020:	e7a3      	b.n	8013f6a <__ieee754_pow+0x3a>
 8014022:	2300      	movs	r3, #0
 8014024:	9300      	str	r3, [sp, #0]
 8014026:	2a00      	cmp	r2, #0
 8014028:	d13c      	bne.n	80140a4 <__ieee754_pow+0x174>
 801402a:	4b4e      	ldr	r3, [pc, #312]	; (8014164 <__ieee754_pow+0x234>)
 801402c:	429e      	cmp	r6, r3
 801402e:	d1eb      	bne.n	8014008 <__ieee754_pow+0xd8>
 8014030:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014034:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014038:	ea53 030a 	orrs.w	r3, r3, sl
 801403c:	f000 8448 	beq.w	80148d0 <__ieee754_pow+0x9a0>
 8014040:	4b4b      	ldr	r3, [pc, #300]	; (8014170 <__ieee754_pow+0x240>)
 8014042:	429c      	cmp	r4, r3
 8014044:	dd0b      	ble.n	801405e <__ieee754_pow+0x12e>
 8014046:	2f00      	cmp	r7, #0
 8014048:	f2c0 8448 	blt.w	80148dc <__ieee754_pow+0x9ac>
 801404c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8014050:	4658      	mov	r0, fp
 8014052:	4661      	mov	r1, ip
 8014054:	b013      	add	sp, #76	; 0x4c
 8014056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801405a:	2302      	movs	r3, #2
 801405c:	e7e2      	b.n	8014024 <__ieee754_pow+0xf4>
 801405e:	2f00      	cmp	r7, #0
 8014060:	f04f 0b00 	mov.w	fp, #0
 8014064:	f04f 0c00 	mov.w	ip, #0
 8014068:	daf2      	bge.n	8014050 <__ieee754_pow+0x120>
 801406a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 801406e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8014072:	e7ed      	b.n	8014050 <__ieee754_pow+0x120>
 8014074:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8014078:	d106      	bne.n	8014088 <__ieee754_pow+0x158>
 801407a:	4642      	mov	r2, r8
 801407c:	464b      	mov	r3, r9
 801407e:	4640      	mov	r0, r8
 8014080:	4649      	mov	r1, r9
 8014082:	f7ec fa91 	bl	80005a8 <__aeabi_dmul>
 8014086:	e770      	b.n	8013f6a <__ieee754_pow+0x3a>
 8014088:	4b3a      	ldr	r3, [pc, #232]	; (8014174 <__ieee754_pow+0x244>)
 801408a:	429f      	cmp	r7, r3
 801408c:	d10a      	bne.n	80140a4 <__ieee754_pow+0x174>
 801408e:	2d00      	cmp	r5, #0
 8014090:	db08      	blt.n	80140a4 <__ieee754_pow+0x174>
 8014092:	4640      	mov	r0, r8
 8014094:	4649      	mov	r1, r9
 8014096:	b013      	add	sp, #76	; 0x4c
 8014098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801409c:	f000 bc5e 	b.w	801495c <__ieee754_sqrt>
 80140a0:	2300      	movs	r3, #0
 80140a2:	9300      	str	r3, [sp, #0]
 80140a4:	4640      	mov	r0, r8
 80140a6:	4649      	mov	r1, r9
 80140a8:	f000 fd32 	bl	8014b10 <fabs>
 80140ac:	4683      	mov	fp, r0
 80140ae:	468c      	mov	ip, r1
 80140b0:	f1ba 0f00 	cmp.w	sl, #0
 80140b4:	d128      	bne.n	8014108 <__ieee754_pow+0x1d8>
 80140b6:	b124      	cbz	r4, 80140c2 <__ieee754_pow+0x192>
 80140b8:	4b2c      	ldr	r3, [pc, #176]	; (801416c <__ieee754_pow+0x23c>)
 80140ba:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80140be:	429a      	cmp	r2, r3
 80140c0:	d122      	bne.n	8014108 <__ieee754_pow+0x1d8>
 80140c2:	2f00      	cmp	r7, #0
 80140c4:	da07      	bge.n	80140d6 <__ieee754_pow+0x1a6>
 80140c6:	465a      	mov	r2, fp
 80140c8:	4663      	mov	r3, ip
 80140ca:	4928      	ldr	r1, [pc, #160]	; (801416c <__ieee754_pow+0x23c>)
 80140cc:	2000      	movs	r0, #0
 80140ce:	f7ec fb95 	bl	80007fc <__aeabi_ddiv>
 80140d2:	4683      	mov	fp, r0
 80140d4:	468c      	mov	ip, r1
 80140d6:	2d00      	cmp	r5, #0
 80140d8:	daba      	bge.n	8014050 <__ieee754_pow+0x120>
 80140da:	9b00      	ldr	r3, [sp, #0]
 80140dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80140e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80140e4:	4323      	orrs	r3, r4
 80140e6:	d108      	bne.n	80140fa <__ieee754_pow+0x1ca>
 80140e8:	465a      	mov	r2, fp
 80140ea:	4663      	mov	r3, ip
 80140ec:	4658      	mov	r0, fp
 80140ee:	4661      	mov	r1, ip
 80140f0:	f7ec f8a2 	bl	8000238 <__aeabi_dsub>
 80140f4:	4602      	mov	r2, r0
 80140f6:	460b      	mov	r3, r1
 80140f8:	e790      	b.n	801401c <__ieee754_pow+0xec>
 80140fa:	9b00      	ldr	r3, [sp, #0]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d1a7      	bne.n	8014050 <__ieee754_pow+0x120>
 8014100:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8014104:	469c      	mov	ip, r3
 8014106:	e7a3      	b.n	8014050 <__ieee754_pow+0x120>
 8014108:	0feb      	lsrs	r3, r5, #31
 801410a:	3b01      	subs	r3, #1
 801410c:	930c      	str	r3, [sp, #48]	; 0x30
 801410e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014110:	9b00      	ldr	r3, [sp, #0]
 8014112:	4313      	orrs	r3, r2
 8014114:	d104      	bne.n	8014120 <__ieee754_pow+0x1f0>
 8014116:	4642      	mov	r2, r8
 8014118:	464b      	mov	r3, r9
 801411a:	4640      	mov	r0, r8
 801411c:	4649      	mov	r1, r9
 801411e:	e7e7      	b.n	80140f0 <__ieee754_pow+0x1c0>
 8014120:	4b15      	ldr	r3, [pc, #84]	; (8014178 <__ieee754_pow+0x248>)
 8014122:	429e      	cmp	r6, r3
 8014124:	f340 80f6 	ble.w	8014314 <__ieee754_pow+0x3e4>
 8014128:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801412c:	429e      	cmp	r6, r3
 801412e:	4b10      	ldr	r3, [pc, #64]	; (8014170 <__ieee754_pow+0x240>)
 8014130:	dd09      	ble.n	8014146 <__ieee754_pow+0x216>
 8014132:	429c      	cmp	r4, r3
 8014134:	dc0c      	bgt.n	8014150 <__ieee754_pow+0x220>
 8014136:	2f00      	cmp	r7, #0
 8014138:	da0c      	bge.n	8014154 <__ieee754_pow+0x224>
 801413a:	2000      	movs	r0, #0
 801413c:	b013      	add	sp, #76	; 0x4c
 801413e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014142:	f000 bce0 	b.w	8014b06 <__math_oflow>
 8014146:	429c      	cmp	r4, r3
 8014148:	dbf5      	blt.n	8014136 <__ieee754_pow+0x206>
 801414a:	4b08      	ldr	r3, [pc, #32]	; (801416c <__ieee754_pow+0x23c>)
 801414c:	429c      	cmp	r4, r3
 801414e:	dd15      	ble.n	801417c <__ieee754_pow+0x24c>
 8014150:	2f00      	cmp	r7, #0
 8014152:	dcf2      	bgt.n	801413a <__ieee754_pow+0x20a>
 8014154:	2000      	movs	r0, #0
 8014156:	b013      	add	sp, #76	; 0x4c
 8014158:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415c:	f000 bcce 	b.w	8014afc <__math_uflow>
 8014160:	fff00000 	.word	0xfff00000
 8014164:	7ff00000 	.word	0x7ff00000
 8014168:	433fffff 	.word	0x433fffff
 801416c:	3ff00000 	.word	0x3ff00000
 8014170:	3fefffff 	.word	0x3fefffff
 8014174:	3fe00000 	.word	0x3fe00000
 8014178:	41e00000 	.word	0x41e00000
 801417c:	4661      	mov	r1, ip
 801417e:	4b60      	ldr	r3, [pc, #384]	; (8014300 <__ieee754_pow+0x3d0>)
 8014180:	2200      	movs	r2, #0
 8014182:	4658      	mov	r0, fp
 8014184:	f7ec f858 	bl	8000238 <__aeabi_dsub>
 8014188:	a355      	add	r3, pc, #340	; (adr r3, 80142e0 <__ieee754_pow+0x3b0>)
 801418a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418e:	4604      	mov	r4, r0
 8014190:	460d      	mov	r5, r1
 8014192:	f7ec fa09 	bl	80005a8 <__aeabi_dmul>
 8014196:	a354      	add	r3, pc, #336	; (adr r3, 80142e8 <__ieee754_pow+0x3b8>)
 8014198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419c:	4606      	mov	r6, r0
 801419e:	460f      	mov	r7, r1
 80141a0:	4620      	mov	r0, r4
 80141a2:	4629      	mov	r1, r5
 80141a4:	f7ec fa00 	bl	80005a8 <__aeabi_dmul>
 80141a8:	4b56      	ldr	r3, [pc, #344]	; (8014304 <__ieee754_pow+0x3d4>)
 80141aa:	4682      	mov	sl, r0
 80141ac:	468b      	mov	fp, r1
 80141ae:	2200      	movs	r2, #0
 80141b0:	4620      	mov	r0, r4
 80141b2:	4629      	mov	r1, r5
 80141b4:	f7ec f9f8 	bl	80005a8 <__aeabi_dmul>
 80141b8:	4602      	mov	r2, r0
 80141ba:	460b      	mov	r3, r1
 80141bc:	a14c      	add	r1, pc, #304	; (adr r1, 80142f0 <__ieee754_pow+0x3c0>)
 80141be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141c2:	f7ec f839 	bl	8000238 <__aeabi_dsub>
 80141c6:	4622      	mov	r2, r4
 80141c8:	462b      	mov	r3, r5
 80141ca:	f7ec f9ed 	bl	80005a8 <__aeabi_dmul>
 80141ce:	4602      	mov	r2, r0
 80141d0:	460b      	mov	r3, r1
 80141d2:	2000      	movs	r0, #0
 80141d4:	494c      	ldr	r1, [pc, #304]	; (8014308 <__ieee754_pow+0x3d8>)
 80141d6:	f7ec f82f 	bl	8000238 <__aeabi_dsub>
 80141da:	4622      	mov	r2, r4
 80141dc:	462b      	mov	r3, r5
 80141de:	4680      	mov	r8, r0
 80141e0:	4689      	mov	r9, r1
 80141e2:	4620      	mov	r0, r4
 80141e4:	4629      	mov	r1, r5
 80141e6:	f7ec f9df 	bl	80005a8 <__aeabi_dmul>
 80141ea:	4602      	mov	r2, r0
 80141ec:	460b      	mov	r3, r1
 80141ee:	4640      	mov	r0, r8
 80141f0:	4649      	mov	r1, r9
 80141f2:	f7ec f9d9 	bl	80005a8 <__aeabi_dmul>
 80141f6:	a340      	add	r3, pc, #256	; (adr r3, 80142f8 <__ieee754_pow+0x3c8>)
 80141f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141fc:	f7ec f9d4 	bl	80005a8 <__aeabi_dmul>
 8014200:	4602      	mov	r2, r0
 8014202:	460b      	mov	r3, r1
 8014204:	4650      	mov	r0, sl
 8014206:	4659      	mov	r1, fp
 8014208:	f7ec f816 	bl	8000238 <__aeabi_dsub>
 801420c:	4602      	mov	r2, r0
 801420e:	460b      	mov	r3, r1
 8014210:	4604      	mov	r4, r0
 8014212:	460d      	mov	r5, r1
 8014214:	4630      	mov	r0, r6
 8014216:	4639      	mov	r1, r7
 8014218:	f7ec f810 	bl	800023c <__adddf3>
 801421c:	f04f 0a00 	mov.w	sl, #0
 8014220:	4632      	mov	r2, r6
 8014222:	463b      	mov	r3, r7
 8014224:	4650      	mov	r0, sl
 8014226:	468b      	mov	fp, r1
 8014228:	f7ec f806 	bl	8000238 <__aeabi_dsub>
 801422c:	4602      	mov	r2, r0
 801422e:	460b      	mov	r3, r1
 8014230:	4620      	mov	r0, r4
 8014232:	4629      	mov	r1, r5
 8014234:	f7ec f800 	bl	8000238 <__aeabi_dsub>
 8014238:	9b00      	ldr	r3, [sp, #0]
 801423a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801423c:	3b01      	subs	r3, #1
 801423e:	4313      	orrs	r3, r2
 8014240:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014244:	bf0c      	ite	eq
 8014246:	4b31      	ldreq	r3, [pc, #196]	; (801430c <__ieee754_pow+0x3dc>)
 8014248:	4b2d      	ldrne	r3, [pc, #180]	; (8014300 <__ieee754_pow+0x3d0>)
 801424a:	2600      	movs	r6, #0
 801424c:	2200      	movs	r2, #0
 801424e:	e9cd 2300 	strd	r2, r3, [sp]
 8014252:	4604      	mov	r4, r0
 8014254:	460d      	mov	r5, r1
 8014256:	4632      	mov	r2, r6
 8014258:	463b      	mov	r3, r7
 801425a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801425e:	f7eb ffeb 	bl	8000238 <__aeabi_dsub>
 8014262:	4652      	mov	r2, sl
 8014264:	465b      	mov	r3, fp
 8014266:	f7ec f99f 	bl	80005a8 <__aeabi_dmul>
 801426a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801426e:	4680      	mov	r8, r0
 8014270:	4689      	mov	r9, r1
 8014272:	4620      	mov	r0, r4
 8014274:	4629      	mov	r1, r5
 8014276:	f7ec f997 	bl	80005a8 <__aeabi_dmul>
 801427a:	4602      	mov	r2, r0
 801427c:	460b      	mov	r3, r1
 801427e:	4640      	mov	r0, r8
 8014280:	4649      	mov	r1, r9
 8014282:	f7eb ffdb 	bl	800023c <__adddf3>
 8014286:	4632      	mov	r2, r6
 8014288:	463b      	mov	r3, r7
 801428a:	4680      	mov	r8, r0
 801428c:	4689      	mov	r9, r1
 801428e:	4650      	mov	r0, sl
 8014290:	4659      	mov	r1, fp
 8014292:	f7ec f989 	bl	80005a8 <__aeabi_dmul>
 8014296:	460b      	mov	r3, r1
 8014298:	4604      	mov	r4, r0
 801429a:	460d      	mov	r5, r1
 801429c:	4602      	mov	r2, r0
 801429e:	4649      	mov	r1, r9
 80142a0:	4640      	mov	r0, r8
 80142a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80142a6:	f7eb ffc9 	bl	800023c <__adddf3>
 80142aa:	4b19      	ldr	r3, [pc, #100]	; (8014310 <__ieee754_pow+0x3e0>)
 80142ac:	4299      	cmp	r1, r3
 80142ae:	4682      	mov	sl, r0
 80142b0:	460f      	mov	r7, r1
 80142b2:	460e      	mov	r6, r1
 80142b4:	f340 82e7 	ble.w	8014886 <__ieee754_pow+0x956>
 80142b8:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80142bc:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80142c0:	4303      	orrs	r3, r0
 80142c2:	f000 81e1 	beq.w	8014688 <__ieee754_pow+0x758>
 80142c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142ca:	2200      	movs	r2, #0
 80142cc:	2300      	movs	r3, #0
 80142ce:	f7ec fbdd 	bl	8000a8c <__aeabi_dcmplt>
 80142d2:	3800      	subs	r0, #0
 80142d4:	bf18      	it	ne
 80142d6:	2001      	movne	r0, #1
 80142d8:	e730      	b.n	801413c <__ieee754_pow+0x20c>
 80142da:	bf00      	nop
 80142dc:	f3af 8000 	nop.w
 80142e0:	60000000 	.word	0x60000000
 80142e4:	3ff71547 	.word	0x3ff71547
 80142e8:	f85ddf44 	.word	0xf85ddf44
 80142ec:	3e54ae0b 	.word	0x3e54ae0b
 80142f0:	55555555 	.word	0x55555555
 80142f4:	3fd55555 	.word	0x3fd55555
 80142f8:	652b82fe 	.word	0x652b82fe
 80142fc:	3ff71547 	.word	0x3ff71547
 8014300:	3ff00000 	.word	0x3ff00000
 8014304:	3fd00000 	.word	0x3fd00000
 8014308:	3fe00000 	.word	0x3fe00000
 801430c:	bff00000 	.word	0xbff00000
 8014310:	408fffff 	.word	0x408fffff
 8014314:	4bd2      	ldr	r3, [pc, #840]	; (8014660 <__ieee754_pow+0x730>)
 8014316:	402b      	ands	r3, r5
 8014318:	2200      	movs	r2, #0
 801431a:	b943      	cbnz	r3, 801432e <__ieee754_pow+0x3fe>
 801431c:	4658      	mov	r0, fp
 801431e:	4bd1      	ldr	r3, [pc, #836]	; (8014664 <__ieee754_pow+0x734>)
 8014320:	4661      	mov	r1, ip
 8014322:	f7ec f941 	bl	80005a8 <__aeabi_dmul>
 8014326:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801432a:	4683      	mov	fp, r0
 801432c:	460c      	mov	r4, r1
 801432e:	1523      	asrs	r3, r4, #20
 8014330:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014334:	4413      	add	r3, r2
 8014336:	930b      	str	r3, [sp, #44]	; 0x2c
 8014338:	4bcb      	ldr	r3, [pc, #812]	; (8014668 <__ieee754_pow+0x738>)
 801433a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801433e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014342:	429c      	cmp	r4, r3
 8014344:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014348:	dd08      	ble.n	801435c <__ieee754_pow+0x42c>
 801434a:	4bc8      	ldr	r3, [pc, #800]	; (801466c <__ieee754_pow+0x73c>)
 801434c:	429c      	cmp	r4, r3
 801434e:	f340 8199 	ble.w	8014684 <__ieee754_pow+0x754>
 8014352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014354:	3301      	adds	r3, #1
 8014356:	930b      	str	r3, [sp, #44]	; 0x2c
 8014358:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801435c:	2600      	movs	r6, #0
 801435e:	00f3      	lsls	r3, r6, #3
 8014360:	930d      	str	r3, [sp, #52]	; 0x34
 8014362:	4bc3      	ldr	r3, [pc, #780]	; (8014670 <__ieee754_pow+0x740>)
 8014364:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014368:	e9d3 3400 	ldrd	r3, r4, [r3]
 801436c:	4658      	mov	r0, fp
 801436e:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8014372:	461a      	mov	r2, r3
 8014374:	4629      	mov	r1, r5
 8014376:	4623      	mov	r3, r4
 8014378:	f7eb ff5e 	bl	8000238 <__aeabi_dsub>
 801437c:	46da      	mov	sl, fp
 801437e:	4652      	mov	r2, sl
 8014380:	462b      	mov	r3, r5
 8014382:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014386:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801438a:	f7eb ff57 	bl	800023c <__adddf3>
 801438e:	4602      	mov	r2, r0
 8014390:	460b      	mov	r3, r1
 8014392:	2000      	movs	r0, #0
 8014394:	49b7      	ldr	r1, [pc, #732]	; (8014674 <__ieee754_pow+0x744>)
 8014396:	f7ec fa31 	bl	80007fc <__aeabi_ddiv>
 801439a:	4602      	mov	r2, r0
 801439c:	460b      	mov	r3, r1
 801439e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80143a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80143a6:	f7ec f8ff 	bl	80005a8 <__aeabi_dmul>
 80143aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80143ae:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80143b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80143b6:	2300      	movs	r3, #0
 80143b8:	9304      	str	r3, [sp, #16]
 80143ba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80143be:	46ab      	mov	fp, r5
 80143c0:	106d      	asrs	r5, r5, #1
 80143c2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80143c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80143ca:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80143ce:	2200      	movs	r2, #0
 80143d0:	4640      	mov	r0, r8
 80143d2:	4649      	mov	r1, r9
 80143d4:	4614      	mov	r4, r2
 80143d6:	461d      	mov	r5, r3
 80143d8:	f7ec f8e6 	bl	80005a8 <__aeabi_dmul>
 80143dc:	4602      	mov	r2, r0
 80143de:	460b      	mov	r3, r1
 80143e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80143e4:	f7eb ff28 	bl	8000238 <__aeabi_dsub>
 80143e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80143ec:	4606      	mov	r6, r0
 80143ee:	460f      	mov	r7, r1
 80143f0:	4620      	mov	r0, r4
 80143f2:	4629      	mov	r1, r5
 80143f4:	f7eb ff20 	bl	8000238 <__aeabi_dsub>
 80143f8:	4602      	mov	r2, r0
 80143fa:	460b      	mov	r3, r1
 80143fc:	4650      	mov	r0, sl
 80143fe:	4659      	mov	r1, fp
 8014400:	f7eb ff1a 	bl	8000238 <__aeabi_dsub>
 8014404:	4642      	mov	r2, r8
 8014406:	464b      	mov	r3, r9
 8014408:	f7ec f8ce 	bl	80005a8 <__aeabi_dmul>
 801440c:	4602      	mov	r2, r0
 801440e:	460b      	mov	r3, r1
 8014410:	4630      	mov	r0, r6
 8014412:	4639      	mov	r1, r7
 8014414:	f7eb ff10 	bl	8000238 <__aeabi_dsub>
 8014418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801441c:	f7ec f8c4 	bl	80005a8 <__aeabi_dmul>
 8014420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014424:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014428:	4610      	mov	r0, r2
 801442a:	4619      	mov	r1, r3
 801442c:	f7ec f8bc 	bl	80005a8 <__aeabi_dmul>
 8014430:	a379      	add	r3, pc, #484	; (adr r3, 8014618 <__ieee754_pow+0x6e8>)
 8014432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014436:	4604      	mov	r4, r0
 8014438:	460d      	mov	r5, r1
 801443a:	f7ec f8b5 	bl	80005a8 <__aeabi_dmul>
 801443e:	a378      	add	r3, pc, #480	; (adr r3, 8014620 <__ieee754_pow+0x6f0>)
 8014440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014444:	f7eb fefa 	bl	800023c <__adddf3>
 8014448:	4622      	mov	r2, r4
 801444a:	462b      	mov	r3, r5
 801444c:	f7ec f8ac 	bl	80005a8 <__aeabi_dmul>
 8014450:	a375      	add	r3, pc, #468	; (adr r3, 8014628 <__ieee754_pow+0x6f8>)
 8014452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014456:	f7eb fef1 	bl	800023c <__adddf3>
 801445a:	4622      	mov	r2, r4
 801445c:	462b      	mov	r3, r5
 801445e:	f7ec f8a3 	bl	80005a8 <__aeabi_dmul>
 8014462:	a373      	add	r3, pc, #460	; (adr r3, 8014630 <__ieee754_pow+0x700>)
 8014464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014468:	f7eb fee8 	bl	800023c <__adddf3>
 801446c:	4622      	mov	r2, r4
 801446e:	462b      	mov	r3, r5
 8014470:	f7ec f89a 	bl	80005a8 <__aeabi_dmul>
 8014474:	a370      	add	r3, pc, #448	; (adr r3, 8014638 <__ieee754_pow+0x708>)
 8014476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447a:	f7eb fedf 	bl	800023c <__adddf3>
 801447e:	4622      	mov	r2, r4
 8014480:	462b      	mov	r3, r5
 8014482:	f7ec f891 	bl	80005a8 <__aeabi_dmul>
 8014486:	a36e      	add	r3, pc, #440	; (adr r3, 8014640 <__ieee754_pow+0x710>)
 8014488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801448c:	f7eb fed6 	bl	800023c <__adddf3>
 8014490:	4622      	mov	r2, r4
 8014492:	4606      	mov	r6, r0
 8014494:	460f      	mov	r7, r1
 8014496:	462b      	mov	r3, r5
 8014498:	4620      	mov	r0, r4
 801449a:	4629      	mov	r1, r5
 801449c:	f7ec f884 	bl	80005a8 <__aeabi_dmul>
 80144a0:	4602      	mov	r2, r0
 80144a2:	460b      	mov	r3, r1
 80144a4:	4630      	mov	r0, r6
 80144a6:	4639      	mov	r1, r7
 80144a8:	f7ec f87e 	bl	80005a8 <__aeabi_dmul>
 80144ac:	4642      	mov	r2, r8
 80144ae:	4604      	mov	r4, r0
 80144b0:	460d      	mov	r5, r1
 80144b2:	464b      	mov	r3, r9
 80144b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80144b8:	f7eb fec0 	bl	800023c <__adddf3>
 80144bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80144c0:	f7ec f872 	bl	80005a8 <__aeabi_dmul>
 80144c4:	4622      	mov	r2, r4
 80144c6:	462b      	mov	r3, r5
 80144c8:	f7eb feb8 	bl	800023c <__adddf3>
 80144cc:	4642      	mov	r2, r8
 80144ce:	4606      	mov	r6, r0
 80144d0:	460f      	mov	r7, r1
 80144d2:	464b      	mov	r3, r9
 80144d4:	4640      	mov	r0, r8
 80144d6:	4649      	mov	r1, r9
 80144d8:	f7ec f866 	bl	80005a8 <__aeabi_dmul>
 80144dc:	4b66      	ldr	r3, [pc, #408]	; (8014678 <__ieee754_pow+0x748>)
 80144de:	2200      	movs	r2, #0
 80144e0:	4682      	mov	sl, r0
 80144e2:	468b      	mov	fp, r1
 80144e4:	f7eb feaa 	bl	800023c <__adddf3>
 80144e8:	4632      	mov	r2, r6
 80144ea:	463b      	mov	r3, r7
 80144ec:	f7eb fea6 	bl	800023c <__adddf3>
 80144f0:	2400      	movs	r4, #0
 80144f2:	460d      	mov	r5, r1
 80144f4:	4622      	mov	r2, r4
 80144f6:	460b      	mov	r3, r1
 80144f8:	4640      	mov	r0, r8
 80144fa:	4649      	mov	r1, r9
 80144fc:	f7ec f854 	bl	80005a8 <__aeabi_dmul>
 8014500:	4b5d      	ldr	r3, [pc, #372]	; (8014678 <__ieee754_pow+0x748>)
 8014502:	4680      	mov	r8, r0
 8014504:	4689      	mov	r9, r1
 8014506:	2200      	movs	r2, #0
 8014508:	4620      	mov	r0, r4
 801450a:	4629      	mov	r1, r5
 801450c:	f7eb fe94 	bl	8000238 <__aeabi_dsub>
 8014510:	4652      	mov	r2, sl
 8014512:	465b      	mov	r3, fp
 8014514:	f7eb fe90 	bl	8000238 <__aeabi_dsub>
 8014518:	4602      	mov	r2, r0
 801451a:	460b      	mov	r3, r1
 801451c:	4630      	mov	r0, r6
 801451e:	4639      	mov	r1, r7
 8014520:	f7eb fe8a 	bl	8000238 <__aeabi_dsub>
 8014524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014528:	f7ec f83e 	bl	80005a8 <__aeabi_dmul>
 801452c:	4622      	mov	r2, r4
 801452e:	4606      	mov	r6, r0
 8014530:	460f      	mov	r7, r1
 8014532:	462b      	mov	r3, r5
 8014534:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014538:	f7ec f836 	bl	80005a8 <__aeabi_dmul>
 801453c:	4602      	mov	r2, r0
 801453e:	460b      	mov	r3, r1
 8014540:	4630      	mov	r0, r6
 8014542:	4639      	mov	r1, r7
 8014544:	f7eb fe7a 	bl	800023c <__adddf3>
 8014548:	4606      	mov	r6, r0
 801454a:	460f      	mov	r7, r1
 801454c:	4602      	mov	r2, r0
 801454e:	460b      	mov	r3, r1
 8014550:	4640      	mov	r0, r8
 8014552:	4649      	mov	r1, r9
 8014554:	f7eb fe72 	bl	800023c <__adddf3>
 8014558:	2400      	movs	r4, #0
 801455a:	a33b      	add	r3, pc, #236	; (adr r3, 8014648 <__ieee754_pow+0x718>)
 801455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014560:	4620      	mov	r0, r4
 8014562:	460d      	mov	r5, r1
 8014564:	f7ec f820 	bl	80005a8 <__aeabi_dmul>
 8014568:	4642      	mov	r2, r8
 801456a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801456e:	464b      	mov	r3, r9
 8014570:	4620      	mov	r0, r4
 8014572:	4629      	mov	r1, r5
 8014574:	f7eb fe60 	bl	8000238 <__aeabi_dsub>
 8014578:	4602      	mov	r2, r0
 801457a:	460b      	mov	r3, r1
 801457c:	4630      	mov	r0, r6
 801457e:	4639      	mov	r1, r7
 8014580:	f7eb fe5a 	bl	8000238 <__aeabi_dsub>
 8014584:	a332      	add	r3, pc, #200	; (adr r3, 8014650 <__ieee754_pow+0x720>)
 8014586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458a:	f7ec f80d 	bl	80005a8 <__aeabi_dmul>
 801458e:	a332      	add	r3, pc, #200	; (adr r3, 8014658 <__ieee754_pow+0x728>)
 8014590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014594:	4606      	mov	r6, r0
 8014596:	460f      	mov	r7, r1
 8014598:	4620      	mov	r0, r4
 801459a:	4629      	mov	r1, r5
 801459c:	f7ec f804 	bl	80005a8 <__aeabi_dmul>
 80145a0:	4602      	mov	r2, r0
 80145a2:	460b      	mov	r3, r1
 80145a4:	4630      	mov	r0, r6
 80145a6:	4639      	mov	r1, r7
 80145a8:	f7eb fe48 	bl	800023c <__adddf3>
 80145ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145ae:	4b33      	ldr	r3, [pc, #204]	; (801467c <__ieee754_pow+0x74c>)
 80145b0:	4413      	add	r3, r2
 80145b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b6:	f7eb fe41 	bl	800023c <__adddf3>
 80145ba:	4680      	mov	r8, r0
 80145bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80145be:	4689      	mov	r9, r1
 80145c0:	f7eb ff88 	bl	80004d4 <__aeabi_i2d>
 80145c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145c6:	4b2e      	ldr	r3, [pc, #184]	; (8014680 <__ieee754_pow+0x750>)
 80145c8:	4413      	add	r3, r2
 80145ca:	e9d3 6700 	ldrd	r6, r7, [r3]
 80145ce:	4604      	mov	r4, r0
 80145d0:	460d      	mov	r5, r1
 80145d2:	4642      	mov	r2, r8
 80145d4:	464b      	mov	r3, r9
 80145d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145da:	f7eb fe2f 	bl	800023c <__adddf3>
 80145de:	4632      	mov	r2, r6
 80145e0:	463b      	mov	r3, r7
 80145e2:	f7eb fe2b 	bl	800023c <__adddf3>
 80145e6:	4622      	mov	r2, r4
 80145e8:	462b      	mov	r3, r5
 80145ea:	f7eb fe27 	bl	800023c <__adddf3>
 80145ee:	f04f 0a00 	mov.w	sl, #0
 80145f2:	4622      	mov	r2, r4
 80145f4:	462b      	mov	r3, r5
 80145f6:	4650      	mov	r0, sl
 80145f8:	468b      	mov	fp, r1
 80145fa:	f7eb fe1d 	bl	8000238 <__aeabi_dsub>
 80145fe:	4632      	mov	r2, r6
 8014600:	463b      	mov	r3, r7
 8014602:	f7eb fe19 	bl	8000238 <__aeabi_dsub>
 8014606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801460a:	f7eb fe15 	bl	8000238 <__aeabi_dsub>
 801460e:	4602      	mov	r2, r0
 8014610:	460b      	mov	r3, r1
 8014612:	4640      	mov	r0, r8
 8014614:	4649      	mov	r1, r9
 8014616:	e60d      	b.n	8014234 <__ieee754_pow+0x304>
 8014618:	4a454eef 	.word	0x4a454eef
 801461c:	3fca7e28 	.word	0x3fca7e28
 8014620:	93c9db65 	.word	0x93c9db65
 8014624:	3fcd864a 	.word	0x3fcd864a
 8014628:	a91d4101 	.word	0xa91d4101
 801462c:	3fd17460 	.word	0x3fd17460
 8014630:	518f264d 	.word	0x518f264d
 8014634:	3fd55555 	.word	0x3fd55555
 8014638:	db6fabff 	.word	0xdb6fabff
 801463c:	3fdb6db6 	.word	0x3fdb6db6
 8014640:	33333303 	.word	0x33333303
 8014644:	3fe33333 	.word	0x3fe33333
 8014648:	e0000000 	.word	0xe0000000
 801464c:	3feec709 	.word	0x3feec709
 8014650:	dc3a03fd 	.word	0xdc3a03fd
 8014654:	3feec709 	.word	0x3feec709
 8014658:	145b01f5 	.word	0x145b01f5
 801465c:	be3e2fe0 	.word	0xbe3e2fe0
 8014660:	7ff00000 	.word	0x7ff00000
 8014664:	43400000 	.word	0x43400000
 8014668:	0003988e 	.word	0x0003988e
 801466c:	000bb679 	.word	0x000bb679
 8014670:	08015c88 	.word	0x08015c88
 8014674:	3ff00000 	.word	0x3ff00000
 8014678:	40080000 	.word	0x40080000
 801467c:	08015ca8 	.word	0x08015ca8
 8014680:	08015c98 	.word	0x08015c98
 8014684:	2601      	movs	r6, #1
 8014686:	e66a      	b.n	801435e <__ieee754_pow+0x42e>
 8014688:	a39d      	add	r3, pc, #628	; (adr r3, 8014900 <__ieee754_pow+0x9d0>)
 801468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468e:	4640      	mov	r0, r8
 8014690:	4649      	mov	r1, r9
 8014692:	f7eb fdd3 	bl	800023c <__adddf3>
 8014696:	4622      	mov	r2, r4
 8014698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801469c:	462b      	mov	r3, r5
 801469e:	4650      	mov	r0, sl
 80146a0:	4639      	mov	r1, r7
 80146a2:	f7eb fdc9 	bl	8000238 <__aeabi_dsub>
 80146a6:	4602      	mov	r2, r0
 80146a8:	460b      	mov	r3, r1
 80146aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146ae:	f7ec fa0b 	bl	8000ac8 <__aeabi_dcmpgt>
 80146b2:	2800      	cmp	r0, #0
 80146b4:	f47f ae07 	bne.w	80142c6 <__ieee754_pow+0x396>
 80146b8:	4aa3      	ldr	r2, [pc, #652]	; (8014948 <__ieee754_pow+0xa18>)
 80146ba:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80146be:	4293      	cmp	r3, r2
 80146c0:	f340 8101 	ble.w	80148c6 <__ieee754_pow+0x996>
 80146c4:	151b      	asrs	r3, r3, #20
 80146c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80146ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80146ce:	fa4a f303 	asr.w	r3, sl, r3
 80146d2:	4433      	add	r3, r6
 80146d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80146d8:	4f9c      	ldr	r7, [pc, #624]	; (801494c <__ieee754_pow+0xa1c>)
 80146da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80146de:	4117      	asrs	r7, r2
 80146e0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80146e4:	2000      	movs	r0, #0
 80146e6:	ea23 0107 	bic.w	r1, r3, r7
 80146ea:	f1c2 0214 	rsb	r2, r2, #20
 80146ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80146f2:	fa4a fa02 	asr.w	sl, sl, r2
 80146f6:	2e00      	cmp	r6, #0
 80146f8:	4602      	mov	r2, r0
 80146fa:	460b      	mov	r3, r1
 80146fc:	4620      	mov	r0, r4
 80146fe:	4629      	mov	r1, r5
 8014700:	bfb8      	it	lt
 8014702:	f1ca 0a00 	rsblt	sl, sl, #0
 8014706:	f7eb fd97 	bl	8000238 <__aeabi_dsub>
 801470a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801470e:	4642      	mov	r2, r8
 8014710:	464b      	mov	r3, r9
 8014712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014716:	f7eb fd91 	bl	800023c <__adddf3>
 801471a:	2400      	movs	r4, #0
 801471c:	a37a      	add	r3, pc, #488	; (adr r3, 8014908 <__ieee754_pow+0x9d8>)
 801471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014722:	4620      	mov	r0, r4
 8014724:	460d      	mov	r5, r1
 8014726:	f7eb ff3f 	bl	80005a8 <__aeabi_dmul>
 801472a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801472e:	4606      	mov	r6, r0
 8014730:	460f      	mov	r7, r1
 8014732:	4620      	mov	r0, r4
 8014734:	4629      	mov	r1, r5
 8014736:	f7eb fd7f 	bl	8000238 <__aeabi_dsub>
 801473a:	4602      	mov	r2, r0
 801473c:	460b      	mov	r3, r1
 801473e:	4640      	mov	r0, r8
 8014740:	4649      	mov	r1, r9
 8014742:	f7eb fd79 	bl	8000238 <__aeabi_dsub>
 8014746:	a372      	add	r3, pc, #456	; (adr r3, 8014910 <__ieee754_pow+0x9e0>)
 8014748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474c:	f7eb ff2c 	bl	80005a8 <__aeabi_dmul>
 8014750:	a371      	add	r3, pc, #452	; (adr r3, 8014918 <__ieee754_pow+0x9e8>)
 8014752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014756:	4680      	mov	r8, r0
 8014758:	4689      	mov	r9, r1
 801475a:	4620      	mov	r0, r4
 801475c:	4629      	mov	r1, r5
 801475e:	f7eb ff23 	bl	80005a8 <__aeabi_dmul>
 8014762:	4602      	mov	r2, r0
 8014764:	460b      	mov	r3, r1
 8014766:	4640      	mov	r0, r8
 8014768:	4649      	mov	r1, r9
 801476a:	f7eb fd67 	bl	800023c <__adddf3>
 801476e:	4604      	mov	r4, r0
 8014770:	460d      	mov	r5, r1
 8014772:	4602      	mov	r2, r0
 8014774:	460b      	mov	r3, r1
 8014776:	4630      	mov	r0, r6
 8014778:	4639      	mov	r1, r7
 801477a:	f7eb fd5f 	bl	800023c <__adddf3>
 801477e:	4632      	mov	r2, r6
 8014780:	463b      	mov	r3, r7
 8014782:	4680      	mov	r8, r0
 8014784:	4689      	mov	r9, r1
 8014786:	f7eb fd57 	bl	8000238 <__aeabi_dsub>
 801478a:	4602      	mov	r2, r0
 801478c:	460b      	mov	r3, r1
 801478e:	4620      	mov	r0, r4
 8014790:	4629      	mov	r1, r5
 8014792:	f7eb fd51 	bl	8000238 <__aeabi_dsub>
 8014796:	4642      	mov	r2, r8
 8014798:	4606      	mov	r6, r0
 801479a:	460f      	mov	r7, r1
 801479c:	464b      	mov	r3, r9
 801479e:	4640      	mov	r0, r8
 80147a0:	4649      	mov	r1, r9
 80147a2:	f7eb ff01 	bl	80005a8 <__aeabi_dmul>
 80147a6:	a35e      	add	r3, pc, #376	; (adr r3, 8014920 <__ieee754_pow+0x9f0>)
 80147a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ac:	4604      	mov	r4, r0
 80147ae:	460d      	mov	r5, r1
 80147b0:	f7eb fefa 	bl	80005a8 <__aeabi_dmul>
 80147b4:	a35c      	add	r3, pc, #368	; (adr r3, 8014928 <__ieee754_pow+0x9f8>)
 80147b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ba:	f7eb fd3d 	bl	8000238 <__aeabi_dsub>
 80147be:	4622      	mov	r2, r4
 80147c0:	462b      	mov	r3, r5
 80147c2:	f7eb fef1 	bl	80005a8 <__aeabi_dmul>
 80147c6:	a35a      	add	r3, pc, #360	; (adr r3, 8014930 <__ieee754_pow+0xa00>)
 80147c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147cc:	f7eb fd36 	bl	800023c <__adddf3>
 80147d0:	4622      	mov	r2, r4
 80147d2:	462b      	mov	r3, r5
 80147d4:	f7eb fee8 	bl	80005a8 <__aeabi_dmul>
 80147d8:	a357      	add	r3, pc, #348	; (adr r3, 8014938 <__ieee754_pow+0xa08>)
 80147da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147de:	f7eb fd2b 	bl	8000238 <__aeabi_dsub>
 80147e2:	4622      	mov	r2, r4
 80147e4:	462b      	mov	r3, r5
 80147e6:	f7eb fedf 	bl	80005a8 <__aeabi_dmul>
 80147ea:	a355      	add	r3, pc, #340	; (adr r3, 8014940 <__ieee754_pow+0xa10>)
 80147ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f0:	f7eb fd24 	bl	800023c <__adddf3>
 80147f4:	4622      	mov	r2, r4
 80147f6:	462b      	mov	r3, r5
 80147f8:	f7eb fed6 	bl	80005a8 <__aeabi_dmul>
 80147fc:	4602      	mov	r2, r0
 80147fe:	460b      	mov	r3, r1
 8014800:	4640      	mov	r0, r8
 8014802:	4649      	mov	r1, r9
 8014804:	f7eb fd18 	bl	8000238 <__aeabi_dsub>
 8014808:	4604      	mov	r4, r0
 801480a:	460d      	mov	r5, r1
 801480c:	4602      	mov	r2, r0
 801480e:	460b      	mov	r3, r1
 8014810:	4640      	mov	r0, r8
 8014812:	4649      	mov	r1, r9
 8014814:	f7eb fec8 	bl	80005a8 <__aeabi_dmul>
 8014818:	2200      	movs	r2, #0
 801481a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801481e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014822:	4620      	mov	r0, r4
 8014824:	4629      	mov	r1, r5
 8014826:	f7eb fd07 	bl	8000238 <__aeabi_dsub>
 801482a:	4602      	mov	r2, r0
 801482c:	460b      	mov	r3, r1
 801482e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014832:	f7eb ffe3 	bl	80007fc <__aeabi_ddiv>
 8014836:	4632      	mov	r2, r6
 8014838:	4604      	mov	r4, r0
 801483a:	460d      	mov	r5, r1
 801483c:	463b      	mov	r3, r7
 801483e:	4640      	mov	r0, r8
 8014840:	4649      	mov	r1, r9
 8014842:	f7eb feb1 	bl	80005a8 <__aeabi_dmul>
 8014846:	4632      	mov	r2, r6
 8014848:	463b      	mov	r3, r7
 801484a:	f7eb fcf7 	bl	800023c <__adddf3>
 801484e:	4602      	mov	r2, r0
 8014850:	460b      	mov	r3, r1
 8014852:	4620      	mov	r0, r4
 8014854:	4629      	mov	r1, r5
 8014856:	f7eb fcef 	bl	8000238 <__aeabi_dsub>
 801485a:	4642      	mov	r2, r8
 801485c:	464b      	mov	r3, r9
 801485e:	f7eb fceb 	bl	8000238 <__aeabi_dsub>
 8014862:	4602      	mov	r2, r0
 8014864:	460b      	mov	r3, r1
 8014866:	2000      	movs	r0, #0
 8014868:	4939      	ldr	r1, [pc, #228]	; (8014950 <__ieee754_pow+0xa20>)
 801486a:	f7eb fce5 	bl	8000238 <__aeabi_dsub>
 801486e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014872:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014876:	da29      	bge.n	80148cc <__ieee754_pow+0x99c>
 8014878:	4652      	mov	r2, sl
 801487a:	f000 f955 	bl	8014b28 <scalbn>
 801487e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014882:	f7ff bbfe 	b.w	8014082 <__ieee754_pow+0x152>
 8014886:	4b33      	ldr	r3, [pc, #204]	; (8014954 <__ieee754_pow+0xa24>)
 8014888:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 801488c:	429f      	cmp	r7, r3
 801488e:	f77f af13 	ble.w	80146b8 <__ieee754_pow+0x788>
 8014892:	4b31      	ldr	r3, [pc, #196]	; (8014958 <__ieee754_pow+0xa28>)
 8014894:	440b      	add	r3, r1
 8014896:	4303      	orrs	r3, r0
 8014898:	d009      	beq.n	80148ae <__ieee754_pow+0x97e>
 801489a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801489e:	2200      	movs	r2, #0
 80148a0:	2300      	movs	r3, #0
 80148a2:	f7ec f8f3 	bl	8000a8c <__aeabi_dcmplt>
 80148a6:	3800      	subs	r0, #0
 80148a8:	bf18      	it	ne
 80148aa:	2001      	movne	r0, #1
 80148ac:	e453      	b.n	8014156 <__ieee754_pow+0x226>
 80148ae:	4622      	mov	r2, r4
 80148b0:	462b      	mov	r3, r5
 80148b2:	f7eb fcc1 	bl	8000238 <__aeabi_dsub>
 80148b6:	4642      	mov	r2, r8
 80148b8:	464b      	mov	r3, r9
 80148ba:	f7ec f8fb 	bl	8000ab4 <__aeabi_dcmpge>
 80148be:	2800      	cmp	r0, #0
 80148c0:	f43f aefa 	beq.w	80146b8 <__ieee754_pow+0x788>
 80148c4:	e7e9      	b.n	801489a <__ieee754_pow+0x96a>
 80148c6:	f04f 0a00 	mov.w	sl, #0
 80148ca:	e720      	b.n	801470e <__ieee754_pow+0x7de>
 80148cc:	4621      	mov	r1, r4
 80148ce:	e7d6      	b.n	801487e <__ieee754_pow+0x94e>
 80148d0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014950 <__ieee754_pow+0xa20>
 80148d4:	f04f 0b00 	mov.w	fp, #0
 80148d8:	f7ff bbba 	b.w	8014050 <__ieee754_pow+0x120>
 80148dc:	f04f 0b00 	mov.w	fp, #0
 80148e0:	f04f 0c00 	mov.w	ip, #0
 80148e4:	f7ff bbb4 	b.w	8014050 <__ieee754_pow+0x120>
 80148e8:	4640      	mov	r0, r8
 80148ea:	4649      	mov	r1, r9
 80148ec:	f7ff bb3d 	b.w	8013f6a <__ieee754_pow+0x3a>
 80148f0:	9200      	str	r2, [sp, #0]
 80148f2:	f7ff bb89 	b.w	8014008 <__ieee754_pow+0xd8>
 80148f6:	2300      	movs	r3, #0
 80148f8:	f7ff bb73 	b.w	8013fe2 <__ieee754_pow+0xb2>
 80148fc:	f3af 8000 	nop.w
 8014900:	652b82fe 	.word	0x652b82fe
 8014904:	3c971547 	.word	0x3c971547
 8014908:	00000000 	.word	0x00000000
 801490c:	3fe62e43 	.word	0x3fe62e43
 8014910:	fefa39ef 	.word	0xfefa39ef
 8014914:	3fe62e42 	.word	0x3fe62e42
 8014918:	0ca86c39 	.word	0x0ca86c39
 801491c:	be205c61 	.word	0xbe205c61
 8014920:	72bea4d0 	.word	0x72bea4d0
 8014924:	3e663769 	.word	0x3e663769
 8014928:	c5d26bf1 	.word	0xc5d26bf1
 801492c:	3ebbbd41 	.word	0x3ebbbd41
 8014930:	af25de2c 	.word	0xaf25de2c
 8014934:	3f11566a 	.word	0x3f11566a
 8014938:	16bebd93 	.word	0x16bebd93
 801493c:	3f66c16c 	.word	0x3f66c16c
 8014940:	5555553e 	.word	0x5555553e
 8014944:	3fc55555 	.word	0x3fc55555
 8014948:	3fe00000 	.word	0x3fe00000
 801494c:	000fffff 	.word	0x000fffff
 8014950:	3ff00000 	.word	0x3ff00000
 8014954:	4090cbff 	.word	0x4090cbff
 8014958:	3f6f3400 	.word	0x3f6f3400

0801495c <__ieee754_sqrt>:
 801495c:	f8df c154 	ldr.w	ip, [pc, #340]	; 8014ab4 <__ieee754_sqrt+0x158>
 8014960:	ea3c 0c01 	bics.w	ip, ip, r1
 8014964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014968:	460a      	mov	r2, r1
 801496a:	4606      	mov	r6, r0
 801496c:	460d      	mov	r5, r1
 801496e:	460c      	mov	r4, r1
 8014970:	4607      	mov	r7, r0
 8014972:	4603      	mov	r3, r0
 8014974:	d10f      	bne.n	8014996 <__ieee754_sqrt+0x3a>
 8014976:	4602      	mov	r2, r0
 8014978:	460b      	mov	r3, r1
 801497a:	f7eb fe15 	bl	80005a8 <__aeabi_dmul>
 801497e:	4602      	mov	r2, r0
 8014980:	460b      	mov	r3, r1
 8014982:	4630      	mov	r0, r6
 8014984:	4629      	mov	r1, r5
 8014986:	f7eb fc59 	bl	800023c <__adddf3>
 801498a:	4606      	mov	r6, r0
 801498c:	460d      	mov	r5, r1
 801498e:	4630      	mov	r0, r6
 8014990:	4629      	mov	r1, r5
 8014992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014996:	2900      	cmp	r1, #0
 8014998:	dc0e      	bgt.n	80149b8 <__ieee754_sqrt+0x5c>
 801499a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 801499e:	ea5c 0707 	orrs.w	r7, ip, r7
 80149a2:	d0f4      	beq.n	801498e <__ieee754_sqrt+0x32>
 80149a4:	b141      	cbz	r1, 80149b8 <__ieee754_sqrt+0x5c>
 80149a6:	4602      	mov	r2, r0
 80149a8:	460b      	mov	r3, r1
 80149aa:	f7eb fc45 	bl	8000238 <__aeabi_dsub>
 80149ae:	4602      	mov	r2, r0
 80149b0:	460b      	mov	r3, r1
 80149b2:	f7eb ff23 	bl	80007fc <__aeabi_ddiv>
 80149b6:	e7e8      	b.n	801498a <__ieee754_sqrt+0x2e>
 80149b8:	1521      	asrs	r1, r4, #20
 80149ba:	d074      	beq.n	8014aa6 <__ieee754_sqrt+0x14a>
 80149bc:	07cc      	lsls	r4, r1, #31
 80149be:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80149c2:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80149c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80149ca:	bf5e      	ittt	pl
 80149cc:	0fd9      	lsrpl	r1, r3, #31
 80149ce:	005b      	lslpl	r3, r3, #1
 80149d0:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80149d4:	2400      	movs	r4, #0
 80149d6:	0fd9      	lsrs	r1, r3, #31
 80149d8:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80149dc:	107f      	asrs	r7, r7, #1
 80149de:	005b      	lsls	r3, r3, #1
 80149e0:	2516      	movs	r5, #22
 80149e2:	4620      	mov	r0, r4
 80149e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80149e8:	1846      	adds	r6, r0, r1
 80149ea:	4296      	cmp	r6, r2
 80149ec:	bfde      	ittt	le
 80149ee:	1b92      	suble	r2, r2, r6
 80149f0:	1870      	addle	r0, r6, r1
 80149f2:	1864      	addle	r4, r4, r1
 80149f4:	0052      	lsls	r2, r2, #1
 80149f6:	3d01      	subs	r5, #1
 80149f8:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80149fc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014a04:	d1f0      	bne.n	80149e8 <__ieee754_sqrt+0x8c>
 8014a06:	4629      	mov	r1, r5
 8014a08:	f04f 0e20 	mov.w	lr, #32
 8014a0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014a10:	4282      	cmp	r2, r0
 8014a12:	eb06 0c05 	add.w	ip, r6, r5
 8014a16:	dc02      	bgt.n	8014a1e <__ieee754_sqrt+0xc2>
 8014a18:	d113      	bne.n	8014a42 <__ieee754_sqrt+0xe6>
 8014a1a:	459c      	cmp	ip, r3
 8014a1c:	d811      	bhi.n	8014a42 <__ieee754_sqrt+0xe6>
 8014a1e:	f1bc 0f00 	cmp.w	ip, #0
 8014a22:	eb0c 0506 	add.w	r5, ip, r6
 8014a26:	da43      	bge.n	8014ab0 <__ieee754_sqrt+0x154>
 8014a28:	2d00      	cmp	r5, #0
 8014a2a:	db41      	blt.n	8014ab0 <__ieee754_sqrt+0x154>
 8014a2c:	f100 0801 	add.w	r8, r0, #1
 8014a30:	1a12      	subs	r2, r2, r0
 8014a32:	459c      	cmp	ip, r3
 8014a34:	bf88      	it	hi
 8014a36:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014a3a:	eba3 030c 	sub.w	r3, r3, ip
 8014a3e:	4431      	add	r1, r6
 8014a40:	4640      	mov	r0, r8
 8014a42:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8014a46:	f1be 0e01 	subs.w	lr, lr, #1
 8014a4a:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8014a4e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014a52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014a56:	d1db      	bne.n	8014a10 <__ieee754_sqrt+0xb4>
 8014a58:	4313      	orrs	r3, r2
 8014a5a:	d006      	beq.n	8014a6a <__ieee754_sqrt+0x10e>
 8014a5c:	1c48      	adds	r0, r1, #1
 8014a5e:	bf13      	iteet	ne
 8014a60:	3101      	addne	r1, #1
 8014a62:	3401      	addeq	r4, #1
 8014a64:	4671      	moveq	r1, lr
 8014a66:	f021 0101 	bicne.w	r1, r1, #1
 8014a6a:	1063      	asrs	r3, r4, #1
 8014a6c:	0849      	lsrs	r1, r1, #1
 8014a6e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014a72:	07e2      	lsls	r2, r4, #31
 8014a74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014a78:	bf48      	it	mi
 8014a7a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014a7e:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8014a82:	460e      	mov	r6, r1
 8014a84:	e783      	b.n	801498e <__ieee754_sqrt+0x32>
 8014a86:	0ada      	lsrs	r2, r3, #11
 8014a88:	3815      	subs	r0, #21
 8014a8a:	055b      	lsls	r3, r3, #21
 8014a8c:	2a00      	cmp	r2, #0
 8014a8e:	d0fa      	beq.n	8014a86 <__ieee754_sqrt+0x12a>
 8014a90:	02d5      	lsls	r5, r2, #11
 8014a92:	d50a      	bpl.n	8014aaa <__ieee754_sqrt+0x14e>
 8014a94:	f1c1 0420 	rsb	r4, r1, #32
 8014a98:	fa23 f404 	lsr.w	r4, r3, r4
 8014a9c:	1e4d      	subs	r5, r1, #1
 8014a9e:	408b      	lsls	r3, r1
 8014aa0:	4322      	orrs	r2, r4
 8014aa2:	1b41      	subs	r1, r0, r5
 8014aa4:	e78a      	b.n	80149bc <__ieee754_sqrt+0x60>
 8014aa6:	4608      	mov	r0, r1
 8014aa8:	e7f0      	b.n	8014a8c <__ieee754_sqrt+0x130>
 8014aaa:	0052      	lsls	r2, r2, #1
 8014aac:	3101      	adds	r1, #1
 8014aae:	e7ef      	b.n	8014a90 <__ieee754_sqrt+0x134>
 8014ab0:	4680      	mov	r8, r0
 8014ab2:	e7bd      	b.n	8014a30 <__ieee754_sqrt+0xd4>
 8014ab4:	7ff00000 	.word	0x7ff00000

08014ab8 <with_errno>:
 8014ab8:	b570      	push	{r4, r5, r6, lr}
 8014aba:	4604      	mov	r4, r0
 8014abc:	460d      	mov	r5, r1
 8014abe:	4616      	mov	r6, r2
 8014ac0:	f7fc fa06 	bl	8010ed0 <__errno>
 8014ac4:	4629      	mov	r1, r5
 8014ac6:	6006      	str	r6, [r0, #0]
 8014ac8:	4620      	mov	r0, r4
 8014aca:	bd70      	pop	{r4, r5, r6, pc}

08014acc <xflow>:
 8014acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ace:	4615      	mov	r5, r2
 8014ad0:	461c      	mov	r4, r3
 8014ad2:	b180      	cbz	r0, 8014af6 <xflow+0x2a>
 8014ad4:	4610      	mov	r0, r2
 8014ad6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014ada:	e9cd 0100 	strd	r0, r1, [sp]
 8014ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ae2:	4628      	mov	r0, r5
 8014ae4:	4621      	mov	r1, r4
 8014ae6:	f7eb fd5f 	bl	80005a8 <__aeabi_dmul>
 8014aea:	2222      	movs	r2, #34	; 0x22
 8014aec:	b003      	add	sp, #12
 8014aee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014af2:	f7ff bfe1 	b.w	8014ab8 <with_errno>
 8014af6:	4610      	mov	r0, r2
 8014af8:	4619      	mov	r1, r3
 8014afa:	e7ee      	b.n	8014ada <xflow+0xe>

08014afc <__math_uflow>:
 8014afc:	2200      	movs	r2, #0
 8014afe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014b02:	f7ff bfe3 	b.w	8014acc <xflow>

08014b06 <__math_oflow>:
 8014b06:	2200      	movs	r2, #0
 8014b08:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014b0c:	f7ff bfde 	b.w	8014acc <xflow>

08014b10 <fabs>:
 8014b10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014b14:	4770      	bx	lr

08014b16 <finite>:
 8014b16:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8014b1a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014b1e:	0fc0      	lsrs	r0, r0, #31
 8014b20:	4770      	bx	lr
 8014b22:	0000      	movs	r0, r0
 8014b24:	0000      	movs	r0, r0
	...

08014b28 <scalbn>:
 8014b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8014b2e:	4604      	mov	r4, r0
 8014b30:	460d      	mov	r5, r1
 8014b32:	4617      	mov	r7, r2
 8014b34:	460b      	mov	r3, r1
 8014b36:	b996      	cbnz	r6, 8014b5e <scalbn+0x36>
 8014b38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014b3c:	4303      	orrs	r3, r0
 8014b3e:	d039      	beq.n	8014bb4 <scalbn+0x8c>
 8014b40:	4b33      	ldr	r3, [pc, #204]	; (8014c10 <scalbn+0xe8>)
 8014b42:	2200      	movs	r2, #0
 8014b44:	f7eb fd30 	bl	80005a8 <__aeabi_dmul>
 8014b48:	4b32      	ldr	r3, [pc, #200]	; (8014c14 <scalbn+0xec>)
 8014b4a:	429f      	cmp	r7, r3
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	460d      	mov	r5, r1
 8014b50:	da0f      	bge.n	8014b72 <scalbn+0x4a>
 8014b52:	a32b      	add	r3, pc, #172	; (adr r3, 8014c00 <scalbn+0xd8>)
 8014b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b58:	f7eb fd26 	bl	80005a8 <__aeabi_dmul>
 8014b5c:	e006      	b.n	8014b6c <scalbn+0x44>
 8014b5e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014b62:	4296      	cmp	r6, r2
 8014b64:	d10a      	bne.n	8014b7c <scalbn+0x54>
 8014b66:	4602      	mov	r2, r0
 8014b68:	f7eb fb68 	bl	800023c <__adddf3>
 8014b6c:	4604      	mov	r4, r0
 8014b6e:	460d      	mov	r5, r1
 8014b70:	e020      	b.n	8014bb4 <scalbn+0x8c>
 8014b72:	460b      	mov	r3, r1
 8014b74:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014b78:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8014b7c:	19b9      	adds	r1, r7, r6
 8014b7e:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8014b82:	4291      	cmp	r1, r2
 8014b84:	dd0e      	ble.n	8014ba4 <scalbn+0x7c>
 8014b86:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8014b8a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8014b8e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8014b92:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8014b96:	a31c      	add	r3, pc, #112	; (adr r3, 8014c08 <scalbn+0xe0>)
 8014b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9c:	481e      	ldr	r0, [pc, #120]	; (8014c18 <scalbn+0xf0>)
 8014b9e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8014ba2:	e7d9      	b.n	8014b58 <scalbn+0x30>
 8014ba4:	2900      	cmp	r1, #0
 8014ba6:	dd08      	ble.n	8014bba <scalbn+0x92>
 8014ba8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014bac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014bb0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bba:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8014bbe:	da12      	bge.n	8014be6 <scalbn+0xbe>
 8014bc0:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014bc4:	429f      	cmp	r7, r3
 8014bc6:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8014bca:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8014bce:	dcdc      	bgt.n	8014b8a <scalbn+0x62>
 8014bd0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8014bd4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8014bd8:	a309      	add	r3, pc, #36	; (adr r3, 8014c00 <scalbn+0xd8>)
 8014bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bde:	480f      	ldr	r0, [pc, #60]	; (8014c1c <scalbn+0xf4>)
 8014be0:	f041 011f 	orr.w	r1, r1, #31
 8014be4:	e7b8      	b.n	8014b58 <scalbn+0x30>
 8014be6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014bea:	3136      	adds	r1, #54	; 0x36
 8014bec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014bf0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8014bf4:	4620      	mov	r0, r4
 8014bf6:	4b0a      	ldr	r3, [pc, #40]	; (8014c20 <scalbn+0xf8>)
 8014bf8:	4629      	mov	r1, r5
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	e7ac      	b.n	8014b58 <scalbn+0x30>
 8014bfe:	bf00      	nop
 8014c00:	c2f8f359 	.word	0xc2f8f359
 8014c04:	01a56e1f 	.word	0x01a56e1f
 8014c08:	8800759c 	.word	0x8800759c
 8014c0c:	7e37e43c 	.word	0x7e37e43c
 8014c10:	43500000 	.word	0x43500000
 8014c14:	ffff3cb0 	.word	0xffff3cb0
 8014c18:	8800759c 	.word	0x8800759c
 8014c1c:	c2f8f359 	.word	0xc2f8f359
 8014c20:	3c900000 	.word	0x3c900000

08014c24 <_init>:
 8014c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c26:	bf00      	nop
 8014c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c2a:	bc08      	pop	{r3}
 8014c2c:	469e      	mov	lr, r3
 8014c2e:	4770      	bx	lr

08014c30 <_fini>:
 8014c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c32:	bf00      	nop
 8014c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c36:	bc08      	pop	{r3}
 8014c38:	469e      	mov	lr, r3
 8014c3a:	4770      	bx	lr
