
_Final_Master_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014af4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001098  08014c38  08014c38  00024c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cd0  08015cd0  0003022c  2**0
                  CONTENTS
  4 .ARM          00000008  08015cd0  08015cd0  00025cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015cd8  08015cd8  0003022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cd8  08015cd8  00025cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015cdc  08015cdc  00025cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08015ce0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d30  20000230  08015f0c  00030230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000f60  08015f0c  00030f60  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ede  00000000  00000000  00030256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007196  00000000  00000000  00059134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000024f0  00000000  00000000  000602d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f0  00000000  00000000  000627c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246b3  00000000  00000000  000649b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c67f  00000000  00000000  00089063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bebef  00000000  00000000  000b56e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001742d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ab6c  00000000  00000000  00174324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000230 	.word	0x20000230
 800015c:	00000000 	.word	0x00000000
 8000160:	08014c1c 	.word	0x08014c1c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000234 	.word	0x20000234
 800017c:	08014c1c 	.word	0x08014c1c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	; 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e66:	2afd      	cmp	r2, #253	; 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	; 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	; 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	; 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_uldivmod>:
 80011a0:	b953      	cbnz	r3, 80011b8 <__aeabi_uldivmod+0x18>
 80011a2:	b94a      	cbnz	r2, 80011b8 <__aeabi_uldivmod+0x18>
 80011a4:	2900      	cmp	r1, #0
 80011a6:	bf08      	it	eq
 80011a8:	2800      	cmpeq	r0, #0
 80011aa:	bf1c      	itt	ne
 80011ac:	f04f 31ff 	movne.w	r1, #4294967295
 80011b0:	f04f 30ff 	movne.w	r0, #4294967295
 80011b4:	f000 b992 	b.w	80014dc <__aeabi_idiv0>
 80011b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011c0:	f000 f824 	bl	800120c <__udivmoddi4>
 80011c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011cc:	b004      	add	sp, #16
 80011ce:	4770      	bx	lr

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f9e5 	bl	80005a8 <__aeabi_dmul>
 80011de:	f000 f97f 	bl	80014e0 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f966 	bl	80004b4 <__aeabi_ui2d>
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f7ff f9dc 	bl	80005a8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7ff f81e 	bl	8000238 <__aeabi_dsub>
 80011fc:	f000 f970 	bl	80014e0 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <__udivmoddi4>:
 800120c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001210:	9e08      	ldr	r6, [sp, #32]
 8001212:	460d      	mov	r5, r1
 8001214:	4604      	mov	r4, r0
 8001216:	4688      	mov	r8, r1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d14d      	bne.n	80012b8 <__udivmoddi4+0xac>
 800121c:	428a      	cmp	r2, r1
 800121e:	4694      	mov	ip, r2
 8001220:	d968      	bls.n	80012f4 <__udivmoddi4+0xe8>
 8001222:	fab2 f282 	clz	r2, r2
 8001226:	b152      	cbz	r2, 800123e <__udivmoddi4+0x32>
 8001228:	fa01 f302 	lsl.w	r3, r1, r2
 800122c:	f1c2 0120 	rsb	r1, r2, #32
 8001230:	fa20 f101 	lsr.w	r1, r0, r1
 8001234:	fa0c fc02 	lsl.w	ip, ip, r2
 8001238:	ea41 0803 	orr.w	r8, r1, r3
 800123c:	4094      	lsls	r4, r2
 800123e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8001242:	0c21      	lsrs	r1, r4, #16
 8001244:	fbb8 fef5 	udiv	lr, r8, r5
 8001248:	fa1f f78c 	uxth.w	r7, ip
 800124c:	fb05 831e 	mls	r3, r5, lr, r8
 8001250:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001254:	fb0e f107 	mul.w	r1, lr, r7
 8001258:	4299      	cmp	r1, r3
 800125a:	d90b      	bls.n	8001274 <__udivmoddi4+0x68>
 800125c:	eb1c 0303 	adds.w	r3, ip, r3
 8001260:	f10e 30ff 	add.w	r0, lr, #4294967295
 8001264:	f080 811e 	bcs.w	80014a4 <__udivmoddi4+0x298>
 8001268:	4299      	cmp	r1, r3
 800126a:	f240 811b 	bls.w	80014a4 <__udivmoddi4+0x298>
 800126e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001272:	4463      	add	r3, ip
 8001274:	1a5b      	subs	r3, r3, r1
 8001276:	b2a4      	uxth	r4, r4
 8001278:	fbb3 f0f5 	udiv	r0, r3, r5
 800127c:	fb05 3310 	mls	r3, r5, r0, r3
 8001280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001284:	fb00 f707 	mul.w	r7, r0, r7
 8001288:	42a7      	cmp	r7, r4
 800128a:	d90a      	bls.n	80012a2 <__udivmoddi4+0x96>
 800128c:	eb1c 0404 	adds.w	r4, ip, r4
 8001290:	f100 33ff 	add.w	r3, r0, #4294967295
 8001294:	f080 8108 	bcs.w	80014a8 <__udivmoddi4+0x29c>
 8001298:	42a7      	cmp	r7, r4
 800129a:	f240 8105 	bls.w	80014a8 <__udivmoddi4+0x29c>
 800129e:	4464      	add	r4, ip
 80012a0:	3802      	subs	r0, #2
 80012a2:	1be4      	subs	r4, r4, r7
 80012a4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80012a8:	2100      	movs	r1, #0
 80012aa:	b11e      	cbz	r6, 80012b4 <__udivmoddi4+0xa8>
 80012ac:	40d4      	lsrs	r4, r2
 80012ae:	2300      	movs	r3, #0
 80012b0:	e9c6 4300 	strd	r4, r3, [r6]
 80012b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012b8:	428b      	cmp	r3, r1
 80012ba:	d908      	bls.n	80012ce <__udivmoddi4+0xc2>
 80012bc:	2e00      	cmp	r6, #0
 80012be:	f000 80ee 	beq.w	800149e <__udivmoddi4+0x292>
 80012c2:	2100      	movs	r1, #0
 80012c4:	e9c6 0500 	strd	r0, r5, [r6]
 80012c8:	4608      	mov	r0, r1
 80012ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ce:	fab3 f183 	clz	r1, r3
 80012d2:	2900      	cmp	r1, #0
 80012d4:	d14a      	bne.n	800136c <__udivmoddi4+0x160>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d302      	bcc.n	80012e0 <__udivmoddi4+0xd4>
 80012da:	4282      	cmp	r2, r0
 80012dc:	f200 80f9 	bhi.w	80014d2 <__udivmoddi4+0x2c6>
 80012e0:	1a84      	subs	r4, r0, r2
 80012e2:	eb65 0303 	sbc.w	r3, r5, r3
 80012e6:	2001      	movs	r0, #1
 80012e8:	4698      	mov	r8, r3
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d0e2      	beq.n	80012b4 <__udivmoddi4+0xa8>
 80012ee:	e9c6 4800 	strd	r4, r8, [r6]
 80012f2:	e7df      	b.n	80012b4 <__udivmoddi4+0xa8>
 80012f4:	b902      	cbnz	r2, 80012f8 <__udivmoddi4+0xec>
 80012f6:	deff      	udf	#255	; 0xff
 80012f8:	fab2 f282 	clz	r2, r2
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	f040 8091 	bne.w	8001424 <__udivmoddi4+0x218>
 8001302:	eba1 050c 	sub.w	r5, r1, ip
 8001306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800130a:	fa1f fe8c 	uxth.w	lr, ip
 800130e:	2101      	movs	r1, #1
 8001310:	fbb5 f3f7 	udiv	r3, r5, r7
 8001314:	fb07 5013 	mls	r0, r7, r3, r5
 8001318:	0c25      	lsrs	r5, r4, #16
 800131a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800131e:	fb0e f003 	mul.w	r0, lr, r3
 8001322:	42a8      	cmp	r0, r5
 8001324:	d908      	bls.n	8001338 <__udivmoddi4+0x12c>
 8001326:	eb1c 0505 	adds.w	r5, ip, r5
 800132a:	f103 38ff 	add.w	r8, r3, #4294967295
 800132e:	d202      	bcs.n	8001336 <__udivmoddi4+0x12a>
 8001330:	42a8      	cmp	r0, r5
 8001332:	f200 80cb 	bhi.w	80014cc <__udivmoddi4+0x2c0>
 8001336:	4643      	mov	r3, r8
 8001338:	1a2d      	subs	r5, r5, r0
 800133a:	b2a4      	uxth	r4, r4
 800133c:	fbb5 f0f7 	udiv	r0, r5, r7
 8001340:	fb07 5510 	mls	r5, r7, r0, r5
 8001344:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001348:	fb0e fe00 	mul.w	lr, lr, r0
 800134c:	45a6      	cmp	lr, r4
 800134e:	d908      	bls.n	8001362 <__udivmoddi4+0x156>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f100 35ff 	add.w	r5, r0, #4294967295
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x154>
 800135a:	45a6      	cmp	lr, r4
 800135c:	f200 80bb 	bhi.w	80014d6 <__udivmoddi4+0x2ca>
 8001360:	4628      	mov	r0, r5
 8001362:	eba4 040e 	sub.w	r4, r4, lr
 8001366:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800136a:	e79e      	b.n	80012aa <__udivmoddi4+0x9e>
 800136c:	f1c1 0720 	rsb	r7, r1, #32
 8001370:	408b      	lsls	r3, r1
 8001372:	fa22 fc07 	lsr.w	ip, r2, r7
 8001376:	ea4c 0c03 	orr.w	ip, ip, r3
 800137a:	fa20 f407 	lsr.w	r4, r0, r7
 800137e:	fa05 f301 	lsl.w	r3, r5, r1
 8001382:	431c      	orrs	r4, r3
 8001384:	40fd      	lsrs	r5, r7
 8001386:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800138a:	fa00 f301 	lsl.w	r3, r0, r1
 800138e:	fbb5 f8f9 	udiv	r8, r5, r9
 8001392:	0c20      	lsrs	r0, r4, #16
 8001394:	fa1f fe8c 	uxth.w	lr, ip
 8001398:	fb09 5518 	mls	r5, r9, r8, r5
 800139c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80013a0:	fb08 f00e 	mul.w	r0, r8, lr
 80013a4:	42a8      	cmp	r0, r5
 80013a6:	fa02 f201 	lsl.w	r2, r2, r1
 80013aa:	d90b      	bls.n	80013c4 <__udivmoddi4+0x1b8>
 80013ac:	eb1c 0505 	adds.w	r5, ip, r5
 80013b0:	f108 3aff 	add.w	sl, r8, #4294967295
 80013b4:	f080 8088 	bcs.w	80014c8 <__udivmoddi4+0x2bc>
 80013b8:	42a8      	cmp	r0, r5
 80013ba:	f240 8085 	bls.w	80014c8 <__udivmoddi4+0x2bc>
 80013be:	f1a8 0802 	sub.w	r8, r8, #2
 80013c2:	4465      	add	r5, ip
 80013c4:	1a2d      	subs	r5, r5, r0
 80013c6:	b2a4      	uxth	r4, r4
 80013c8:	fbb5 f0f9 	udiv	r0, r5, r9
 80013cc:	fb09 5510 	mls	r5, r9, r0, r5
 80013d0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80013d4:	fb00 fe0e 	mul.w	lr, r0, lr
 80013d8:	45ae      	cmp	lr, r5
 80013da:	d908      	bls.n	80013ee <__udivmoddi4+0x1e2>
 80013dc:	eb1c 0505 	adds.w	r5, ip, r5
 80013e0:	f100 34ff 	add.w	r4, r0, #4294967295
 80013e4:	d26c      	bcs.n	80014c0 <__udivmoddi4+0x2b4>
 80013e6:	45ae      	cmp	lr, r5
 80013e8:	d96a      	bls.n	80014c0 <__udivmoddi4+0x2b4>
 80013ea:	3802      	subs	r0, #2
 80013ec:	4465      	add	r5, ip
 80013ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80013f2:	fba0 9402 	umull	r9, r4, r0, r2
 80013f6:	eba5 050e 	sub.w	r5, r5, lr
 80013fa:	42a5      	cmp	r5, r4
 80013fc:	46c8      	mov	r8, r9
 80013fe:	46a6      	mov	lr, r4
 8001400:	d356      	bcc.n	80014b0 <__udivmoddi4+0x2a4>
 8001402:	d053      	beq.n	80014ac <__udivmoddi4+0x2a0>
 8001404:	b15e      	cbz	r6, 800141e <__udivmoddi4+0x212>
 8001406:	ebb3 0208 	subs.w	r2, r3, r8
 800140a:	eb65 050e 	sbc.w	r5, r5, lr
 800140e:	fa05 f707 	lsl.w	r7, r5, r7
 8001412:	fa22 f301 	lsr.w	r3, r2, r1
 8001416:	40cd      	lsrs	r5, r1
 8001418:	431f      	orrs	r7, r3
 800141a:	e9c6 7500 	strd	r7, r5, [r6]
 800141e:	2100      	movs	r1, #0
 8001420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001424:	f1c2 0320 	rsb	r3, r2, #32
 8001428:	fa20 f103 	lsr.w	r1, r0, r3
 800142c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001430:	fa25 f303 	lsr.w	r3, r5, r3
 8001434:	4095      	lsls	r5, r2
 8001436:	430d      	orrs	r5, r1
 8001438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800143c:	fa1f fe8c 	uxth.w	lr, ip
 8001440:	fbb3 f1f7 	udiv	r1, r3, r7
 8001444:	fb07 3011 	mls	r0, r7, r1, r3
 8001448:	0c2b      	lsrs	r3, r5, #16
 800144a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800144e:	fb01 f00e 	mul.w	r0, r1, lr
 8001452:	4298      	cmp	r0, r3
 8001454:	fa04 f402 	lsl.w	r4, r4, r2
 8001458:	d908      	bls.n	800146c <__udivmoddi4+0x260>
 800145a:	eb1c 0303 	adds.w	r3, ip, r3
 800145e:	f101 38ff 	add.w	r8, r1, #4294967295
 8001462:	d22f      	bcs.n	80014c4 <__udivmoddi4+0x2b8>
 8001464:	4298      	cmp	r0, r3
 8001466:	d92d      	bls.n	80014c4 <__udivmoddi4+0x2b8>
 8001468:	3902      	subs	r1, #2
 800146a:	4463      	add	r3, ip
 800146c:	1a1b      	subs	r3, r3, r0
 800146e:	b2ad      	uxth	r5, r5
 8001470:	fbb3 f0f7 	udiv	r0, r3, r7
 8001474:	fb07 3310 	mls	r3, r7, r0, r3
 8001478:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800147c:	fb00 f30e 	mul.w	r3, r0, lr
 8001480:	42ab      	cmp	r3, r5
 8001482:	d908      	bls.n	8001496 <__udivmoddi4+0x28a>
 8001484:	eb1c 0505 	adds.w	r5, ip, r5
 8001488:	f100 38ff 	add.w	r8, r0, #4294967295
 800148c:	d216      	bcs.n	80014bc <__udivmoddi4+0x2b0>
 800148e:	42ab      	cmp	r3, r5
 8001490:	d914      	bls.n	80014bc <__udivmoddi4+0x2b0>
 8001492:	3802      	subs	r0, #2
 8001494:	4465      	add	r5, ip
 8001496:	1aed      	subs	r5, r5, r3
 8001498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800149c:	e738      	b.n	8001310 <__udivmoddi4+0x104>
 800149e:	4631      	mov	r1, r6
 80014a0:	4630      	mov	r0, r6
 80014a2:	e707      	b.n	80012b4 <__udivmoddi4+0xa8>
 80014a4:	4686      	mov	lr, r0
 80014a6:	e6e5      	b.n	8001274 <__udivmoddi4+0x68>
 80014a8:	4618      	mov	r0, r3
 80014aa:	e6fa      	b.n	80012a2 <__udivmoddi4+0x96>
 80014ac:	454b      	cmp	r3, r9
 80014ae:	d2a9      	bcs.n	8001404 <__udivmoddi4+0x1f8>
 80014b0:	ebb9 0802 	subs.w	r8, r9, r2
 80014b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80014b8:	3801      	subs	r0, #1
 80014ba:	e7a3      	b.n	8001404 <__udivmoddi4+0x1f8>
 80014bc:	4640      	mov	r0, r8
 80014be:	e7ea      	b.n	8001496 <__udivmoddi4+0x28a>
 80014c0:	4620      	mov	r0, r4
 80014c2:	e794      	b.n	80013ee <__udivmoddi4+0x1e2>
 80014c4:	4641      	mov	r1, r8
 80014c6:	e7d1      	b.n	800146c <__udivmoddi4+0x260>
 80014c8:	46d0      	mov	r8, sl
 80014ca:	e77b      	b.n	80013c4 <__udivmoddi4+0x1b8>
 80014cc:	3b02      	subs	r3, #2
 80014ce:	4465      	add	r5, ip
 80014d0:	e732      	b.n	8001338 <__udivmoddi4+0x12c>
 80014d2:	4608      	mov	r0, r1
 80014d4:	e709      	b.n	80012ea <__udivmoddi4+0xde>
 80014d6:	4464      	add	r4, ip
 80014d8:	3802      	subs	r0, #2
 80014da:	e742      	b.n	8001362 <__udivmoddi4+0x156>

080014dc <__aeabi_idiv0>:
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop

080014e0 <__aeabi_d2uiz>:
 80014e0:	004a      	lsls	r2, r1, #1
 80014e2:	d211      	bcs.n	8001508 <__aeabi_d2uiz+0x28>
 80014e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80014e8:	d211      	bcs.n	800150e <__aeabi_d2uiz+0x2e>
 80014ea:	d50d      	bpl.n	8001508 <__aeabi_d2uiz+0x28>
 80014ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80014f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80014f4:	d40e      	bmi.n	8001514 <__aeabi_d2uiz+0x34>
 80014f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80014fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001502:	fa23 f002 	lsr.w	r0, r3, r2
 8001506:	4770      	bx	lr
 8001508:	f04f 0000 	mov.w	r0, #0
 800150c:	4770      	bx	lr
 800150e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001512:	d102      	bne.n	800151a <__aeabi_d2uiz+0x3a>
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	4770      	bx	lr
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	4770      	bx	lr

08001520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800152e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4313      	orrs	r3, r2
 8001536:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4013      	ands	r3, r2
 8001542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001544:	68fb      	ldr	r3, [r7, #12]
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800155e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4313      	orrs	r3, r2
 8001566:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001574:	68fb      	ldr	r3, [r7, #12]
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */
	 ADC_ChannelConfTypeDef sConfig = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]

	  /* USER CODE END ADC_Init 1 */

	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc.Instance = ADC;
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <MX_ADC_Init+0xc4>)
 8001592:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <MX_ADC_Init+0xc8>)
 8001594:	601a      	str	r2, [r3, #0]
	  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_ADC_Init+0xc4>)
 8001598:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800159c:	605a      	str	r2, [r3, #4]
	  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800159e:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_ADC_Init+0xc4>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
	  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015a4:	4b27      	ldr	r3, [pc, #156]	; (8001644 <MX_ADC_Init+0xc4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
	  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015aa:	4b26      	ldr	r3, [pc, #152]	; (8001644 <MX_ADC_Init+0xc4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
	  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <MX_ADC_Init+0xc4>)
 80015b2:	2204      	movs	r2, #4
 80015b4:	615a      	str	r2, [r3, #20]
	  hadc.Init.LowPowerAutoWait = DISABLE;
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <MX_ADC_Init+0xc4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	761a      	strb	r2, [r3, #24]
	  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <MX_ADC_Init+0xc4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	765a      	strb	r2, [r3, #25]
	  hadc.Init.ContinuousConvMode = DISABLE;
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <MX_ADC_Init+0xc4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	769a      	strb	r2, [r3, #26]
	  hadc.Init.NbrOfConversion = 1;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <MX_ADC_Init+0xc4>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	61da      	str	r2, [r3, #28]
	  hadc.Init.DiscontinuousConvMode = DISABLE;
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <MX_ADC_Init+0xc4>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2020 	strb.w	r2, [r3, #32]
	  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <MX_ADC_Init+0xc4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
	  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <MX_ADC_Init+0xc4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	629a      	str	r2, [r3, #40]	; 0x28
	  hadc.Init.DMAContinuousRequests = DISABLE;
 80015e2:	4b18      	ldr	r3, [pc, #96]	; (8001644 <MX_ADC_Init+0xc4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <MX_ADC_Init+0xc4>)
 80015ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
	  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <MX_ADC_Init+0xc4>)
 80015f4:	2206      	movs	r2, #6
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
	  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <MX_ADC_Init+0xc4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
	  hadc.Init.OversamplingMode = DISABLE;
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <MX_ADC_Init+0xc4>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001606:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_ADC_Init+0xc4>)
 8001608:	2200      	movs	r2, #0
 800160a:	64da      	str	r2, [r3, #76]	; 0x4c
	  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <MX_ADC_Init+0xc4>)
 800160e:	f004 fae1 	bl	8005bd4 <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC_Init+0x9c>
	  {
	    Error_Handler();
 8001618:	f000 fdd0 	bl	80021bc <Error_Handler>


	  /* USER CODE BEGIN ADC_Init 2 */
	  /** Configure Regular Channel
		  */
		  sConfig.Channel = ADC_CHANNEL_3;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_ADC_Init+0xcc>)
 800161e:	607b      	str	r3, [r7, #4]
		  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
		  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
		  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_ADC_Init+0xc4>)
 800162e:	f004 fd6f 	bl	8006110 <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC_Init+0xbc>
		  {
		    Error_Handler();
 8001638:	f000 fdc0 	bl	80021bc <Error_Handler>
		  }
	  /* USER CODE END ADC_Init 2 */


}
 800163c:	bf00      	nop
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	2000024c 	.word	0x2000024c
 8001648:	40012400 	.word	0x40012400
 800164c:	0c000008 	.word	0x0c000008

08001650 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <HAL_ADC_MspInit+0x50>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d112      	bne.n	8001698 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001676:	f7ff ff6b 	bl	8001550 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	2002      	movs	r0, #2
 800167c:	f7ff ff50 	bl	8001520 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001680:	2310      	movs	r3, #16
 8001682:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001684:	2303      	movs	r3, #3
 8001686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4619      	mov	r1, r3
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <HAL_ADC_MspInit+0x54>)
 8001694:	f005 fe44 	bl	8007320 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40012400 	.word	0x40012400
 80016a4:	48000400 	.word	0x48000400

080016a8 <Berechnung_Akkustand>:
/* Berechnung des Akkustands
 * Einstellen der Parameter (R1,R2)
 * Übergabe: /
 * Rückgabe: berechneter Akkustand
 */
float Berechnung_Akkustand(uint32_t R1, uint32_t R2) {
 80016a8:	b590      	push	{r4, r7, lr}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]

	//Wegen Wakeup neuinit nötig!
	MX_ADC_Init();
 80016b2:	f7ff ff65 	bl	8001580 <MX_ADC_Init>
	uint32_t adc0;
	float Vin;
	float Vakku;

	HAL_ADC_Start(&hadc);
 80016b6:	4828      	ldr	r0, [pc, #160]	; (8001758 <Berechnung_Akkustand+0xb0>)
 80016b8:	f004 fc40 	bl	8005f3c <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc, 1000) == HAL_OK) //ADC Conversion True
 80016bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016c0:	4825      	ldr	r0, [pc, #148]	; (8001758 <Berechnung_Akkustand+0xb0>)
 80016c2:	f004 fc81 	bl	8005fc8 <HAL_ADC_PollForConversion>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d139      	bne.n	8001740 <Berechnung_Akkustand+0x98>
			{
		adc0 = HAL_ADC_GetValue(&hadc); ///Wert der Conversion in adc0 speichern
 80016cc:	4822      	ldr	r0, [pc, #136]	; (8001758 <Berechnung_Akkustand+0xb0>)
 80016ce:	f004 fd12 	bl	80060f6 <HAL_ADC_GetValue>
 80016d2:	6138      	str	r0, [r7, #16]
		Vin = (((float)adc0 / BITMAX) * VMAX);
 80016d4:	6938      	ldr	r0, [r7, #16]
 80016d6:	f7ff fb45 	bl	8000d64 <__aeabi_ui2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	491f      	ldr	r1, [pc, #124]	; (800175c <Berechnung_Akkustand+0xb4>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fc4c 	bl	8000f7c <__aeabi_fdiv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7fe ff06 	bl	80004f8 <__aeabi_f2d>
 80016ec:	a318      	add	r3, pc, #96	; (adr r3, 8001750 <Berechnung_Akkustand+0xa8>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe ff59 	bl	80005a8 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	f7ff fa2b 	bl	8000b58 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	60fb      	str	r3, [r7, #12]
		Vakku = Vin * (((float)R2 + (float)R1) / (float)R2); //Vin Berechnen (Spg.teiler mit einbezogen)
 8001706:	6838      	ldr	r0, [r7, #0]
 8001708:	f7ff fb2c 	bl	8000d64 <__aeabi_ui2f>
 800170c:	4604      	mov	r4, r0
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fb28 	bl	8000d64 <__aeabi_ui2f>
 8001714:	4603      	mov	r3, r0
 8001716:	4619      	mov	r1, r3
 8001718:	4620      	mov	r0, r4
 800171a:	f7ff fa73 	bl	8000c04 <__addsf3>
 800171e:	4603      	mov	r3, r0
 8001720:	461c      	mov	r4, r3
 8001722:	6838      	ldr	r0, [r7, #0]
 8001724:	f7ff fb1e 	bl	8000d64 <__aeabi_ui2f>
 8001728:	4603      	mov	r3, r0
 800172a:	4619      	mov	r1, r3
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff fc25 	bl	8000f7c <__aeabi_fdiv>
 8001732:	4603      	mov	r3, r0
 8001734:	4619      	mov	r1, r3
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f7ff fb6c 	bl	8000e14 <__aeabi_fmul>
 800173c:	4603      	mov	r3, r0
 800173e:	617b      	str	r3, [r7, #20]
	}

	return Vakku;
 8001740:	697b      	ldr	r3, [r7, #20]
}
 8001742:	4618      	mov	r0, r3
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	f3af 8000 	nop.w
 8001750:	66666666 	.word	0x66666666
 8001754:	400a6666 	.word	0x400a6666
 8001758:	2000024c 	.word	0x2000024c
 800175c:	457ff000 	.word	0x457ff000

08001760 <Ausgabe_Akkustand>:

/* Ausgabe des Prozentwerts und der Spannung über UART
 * Übergabe: berechneter Akkustand
 * Rückgabe: berechneter Prozentwert
 */
int Ausgabe_Akkustand(float Vakku) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	int Prozentwert;

	if (Vakku >= 4.1) {
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7fe fec5 	bl	80004f8 <__aeabi_f2d>
 800176e:	a350      	add	r3, pc, #320	; (adr r3, 80018b0 <Ausgabe_Akkustand+0x150>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7ff f99e 	bl	8000ab4 <__aeabi_dcmpge>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <Ausgabe_Akkustand+0x24>
		Prozentwert = 100; //100%
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e08d      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 4.0) && (Vakku <= 4.1)) {
 8001784:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fcf5 	bl	8001178 <__aeabi_fcmpge>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d00d      	beq.n	80017b0 <Ausgabe_Akkustand+0x50>
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe feaf 	bl	80004f8 <__aeabi_f2d>
 800179a:	a345      	add	r3, pc, #276	; (adr r3, 80018b0 <Ausgabe_Akkustand+0x150>)
 800179c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a0:	f7ff f97e 	bl	8000aa0 <__aeabi_dcmple>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <Ausgabe_Akkustand+0x50>
		Prozentwert = 90;		//90
 80017aa:	235a      	movs	r3, #90	; 0x5a
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e077      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.9) && (Vakku <= 4.0)) {
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7fe fea1 	bl	80004f8 <__aeabi_f2d>
 80017b6:	a340      	add	r3, pc, #256	; (adr r3, 80018b8 <Ausgabe_Akkustand+0x158>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7ff f97a 	bl	8000ab4 <__aeabi_dcmpge>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00a      	beq.n	80017dc <Ausgabe_Akkustand+0x7c>
 80017c6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fcca 	bl	8001164 <__aeabi_fcmple>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <Ausgabe_Akkustand+0x7c>
		Prozentwert = 80;		//80%
 80017d6:	2350      	movs	r3, #80	; 0x50
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e061      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.8) && (Vakku <= 3.9)) {
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7fe fe8b 	bl	80004f8 <__aeabi_f2d>
 80017e2:	a337      	add	r3, pc, #220	; (adr r3, 80018c0 <Ausgabe_Akkustand+0x160>)
 80017e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e8:	f7ff f964 	bl	8000ab4 <__aeabi_dcmpge>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00d      	beq.n	800180e <Ausgabe_Akkustand+0xae>
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fe80 	bl	80004f8 <__aeabi_f2d>
 80017f8:	a32f      	add	r3, pc, #188	; (adr r3, 80018b8 <Ausgabe_Akkustand+0x158>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7ff f94f 	bl	8000aa0 <__aeabi_dcmple>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <Ausgabe_Akkustand+0xae>
		Prozentwert = 60;		//60%
 8001808:	233c      	movs	r3, #60	; 0x3c
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e048      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.7) && (Vakku <= 3.8)) {
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fe72 	bl	80004f8 <__aeabi_f2d>
 8001814:	a32c      	add	r3, pc, #176	; (adr r3, 80018c8 <Ausgabe_Akkustand+0x168>)
 8001816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181a:	f7ff f94b 	bl	8000ab4 <__aeabi_dcmpge>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00d      	beq.n	8001840 <Ausgabe_Akkustand+0xe0>
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7fe fe67 	bl	80004f8 <__aeabi_f2d>
 800182a:	a325      	add	r3, pc, #148	; (adr r3, 80018c0 <Ausgabe_Akkustand+0x160>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7ff f936 	bl	8000aa0 <__aeabi_dcmple>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <Ausgabe_Akkustand+0xe0>
		Prozentwert = 40;		//40%
 800183a:	2328      	movs	r3, #40	; 0x28
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	e02f      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku >= 3.6) && (Vakku <= 3.7)) {
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7fe fe59 	bl	80004f8 <__aeabi_f2d>
 8001846:	a322      	add	r3, pc, #136	; (adr r3, 80018d0 <Ausgabe_Akkustand+0x170>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7ff f932 	bl	8000ab4 <__aeabi_dcmpge>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <Ausgabe_Akkustand+0x112>
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7fe fe4e 	bl	80004f8 <__aeabi_f2d>
 800185c:	a31a      	add	r3, pc, #104	; (adr r3, 80018c8 <Ausgabe_Akkustand+0x168>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7ff f91d 	bl	8000aa0 <__aeabi_dcmple>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <Ausgabe_Akkustand+0x112>
		Prozentwert = 20;		//20%
 800186c:	2314      	movs	r3, #20
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	e016      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else if ((Vakku <= 3.6) && (Vakku > 3)) {
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fe40 	bl	80004f8 <__aeabi_f2d>
 8001878:	a315      	add	r3, pc, #84	; (adr r3, 80018d0 <Ausgabe_Akkustand+0x170>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7ff f90f 	bl	8000aa0 <__aeabi_dcmple>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <Ausgabe_Akkustand+0x13c>
 8001888:	4913      	ldr	r1, [pc, #76]	; (80018d8 <Ausgabe_Akkustand+0x178>)
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fc7e 	bl	800118c <__aeabi_fcmpgt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <Ausgabe_Akkustand+0x13c>
		Prozentwert = 0;		//0%
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	e001      	b.n	80018a0 <Ausgabe_Akkustand+0x140>
	} else
		Prozentwert = 255;
 800189c:	23ff      	movs	r3, #255	; 0xff
 800189e:	60fb      	str	r3, [r7, #12]
	return (Prozentwert);
 80018a0:	68fb      	ldr	r3, [r7, #12]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	66666666 	.word	0x66666666
 80018b4:	40106666 	.word	0x40106666
 80018b8:	33333333 	.word	0x33333333
 80018bc:	400f3333 	.word	0x400f3333
 80018c0:	66666666 	.word	0x66666666
 80018c4:	400e6666 	.word	0x400e6666
 80018c8:	9999999a 	.word	0x9999999a
 80018cc:	400d9999 	.word	0x400d9999
 80018d0:	cccccccd 	.word	0xcccccccd
 80018d4:	400ccccc 	.word	0x400ccccc
 80018d8:	40400000 	.word	0x40400000

080018dc <BT_UART_RXCallback>:
static void memcpy_char_dword(uint64_t * targetword, uint8_t * chararray);

/*FDEF*/


void BT_UART_RXCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	807b      	strh	r3, [r7, #2]
	oldPos = newPos;
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <BT_UART_RXCallback+0x150>)
 80018ea:	881a      	ldrh	r2, [r3, #0]
 80018ec:	4b50      	ldr	r3, [pc, #320]	; (8001a30 <BT_UART_RXCallback+0x154>)
 80018ee:	801a      	strh	r2, [r3, #0]

	if (oldPos+Size > MainBuf_SIZE) {
 80018f0:	4b4f      	ldr	r3, [pc, #316]	; (8001a30 <BT_UART_RXCallback+0x154>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	887b      	ldrh	r3, [r7, #2]
 80018f8:	4413      	add	r3, r2
 80018fa:	2bc8      	cmp	r3, #200	; 0xc8
 80018fc:	dd22      	ble.n	8001944 <BT_UART_RXCallback+0x68>
		uint16_t datatocopy = MainBuf_SIZE-oldPos;
 80018fe:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <BT_UART_RXCallback+0x154>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8001906:	81fb      	strh	r3, [r7, #14]
		memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);
 8001908:	4b49      	ldr	r3, [pc, #292]	; (8001a30 <BT_UART_RXCallback+0x154>)
 800190a:	881b      	ldrh	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b49      	ldr	r3, [pc, #292]	; (8001a34 <BT_UART_RXCallback+0x158>)
 8001910:	4413      	add	r3, r2
 8001912:	89fa      	ldrh	r2, [r7, #14]
 8001914:	4948      	ldr	r1, [pc, #288]	; (8001a38 <BT_UART_RXCallback+0x15c>)
 8001916:	4618      	mov	r0, r3
 8001918:	f00f fafe 	bl	8010f18 <memcpy>
			oldPos = 0;
 800191c:	4b44      	ldr	r3, [pc, #272]	; (8001a30 <BT_UART_RXCallback+0x154>)
 800191e:	2200      	movs	r2, #0
 8001920:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	4a44      	ldr	r2, [pc, #272]	; (8001a38 <BT_UART_RXCallback+0x15c>)
 8001926:	1899      	adds	r1, r3, r2
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	89fb      	ldrh	r3, [r7, #14]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	461a      	mov	r2, r3
 8001930:	4840      	ldr	r0, [pc, #256]	; (8001a34 <BT_UART_RXCallback+0x158>)
 8001932:	f00f faf1 	bl	8010f18 <memcpy>
			newPos = (Size-datatocopy);
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	89fb      	ldrh	r3, [r7, #14]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <BT_UART_RXCallback+0x150>)
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	e010      	b.n	8001966 <BT_UART_RXCallback+0x8a>
	}

	else {
		memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 8001944:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <BT_UART_RXCallback+0x154>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <BT_UART_RXCallback+0x158>)
 800194c:	4413      	add	r3, r2
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	4939      	ldr	r1, [pc, #228]	; (8001a38 <BT_UART_RXCallback+0x15c>)
 8001952:	4618      	mov	r0, r3
 8001954:	f00f fae0 	bl	8010f18 <memcpy>
		newPos = Size+oldPos;
 8001958:	4b35      	ldr	r3, [pc, #212]	; (8001a30 <BT_UART_RXCallback+0x154>)
 800195a:	881a      	ldrh	r2, [r3, #0]
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	4413      	add	r3, r2
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <BT_UART_RXCallback+0x150>)
 8001964:	801a      	strh	r2, [r3, #0]
	}

	rxSize = Size;
 8001966:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <BT_UART_RXCallback+0x160>)
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	8013      	strh	r3, [r2, #0]
	flag_RX_Done = 1;
 800196c:	4b34      	ldr	r3, [pc, #208]	; (8001a40 <BT_UART_RXCallback+0x164>)
 800196e:	2201      	movs	r2, #1
 8001970:	701a      	strb	r2, [r3, #0]

	/*Abort reception while received data is evaluated*/
	HAL_UART_AbortReceive(&hlpuart1);
 8001972:	4834      	ldr	r0, [pc, #208]	; (8001a44 <BT_UART_RXCallback+0x168>)
 8001974:	f008 fd2e 	bl	800a3d4 <HAL_UART_AbortReceive>


	/*Evaluate received data*/
	if (strncmp((char*)MainBuf, "GSMTest", 7) == 0){
 8001978:	2207      	movs	r2, #7
 800197a:	4933      	ldr	r1, [pc, #204]	; (8001a48 <BT_UART_RXCallback+0x16c>)
 800197c:	482d      	ldr	r0, [pc, #180]	; (8001a34 <BT_UART_RXCallback+0x158>)
 800197e:	f00f ff81 	bl	8011884 <strncmp>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <BT_UART_RXCallback+0xb4>
		commandflag = 1;
 8001988:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <BT_UART_RXCallback+0x170>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
	/*If more Data is expected: */
	//HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
	//__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);


}
 800198e:	e049      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "Batterytest", 11) == 0){
 8001990:	220b      	movs	r2, #11
 8001992:	492f      	ldr	r1, [pc, #188]	; (8001a50 <BT_UART_RXCallback+0x174>)
 8001994:	4827      	ldr	r0, [pc, #156]	; (8001a34 <BT_UART_RXCallback+0x158>)
 8001996:	f00f ff75 	bl	8011884 <strncmp>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d103      	bne.n	80019a8 <BT_UART_RXCallback+0xcc>
		commandflag = 2;
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <BT_UART_RXCallback+0x170>)
 80019a2:	2202      	movs	r2, #2
 80019a4:	701a      	strb	r2, [r3, #0]
}
 80019a6:	e03d      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "LoRaDevices", 11) == 0){
 80019a8:	220b      	movs	r2, #11
 80019aa:	492a      	ldr	r1, [pc, #168]	; (8001a54 <BT_UART_RXCallback+0x178>)
 80019ac:	4821      	ldr	r0, [pc, #132]	; (8001a34 <BT_UART_RXCallback+0x158>)
 80019ae:	f00f ff69 	bl	8011884 <strncmp>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d103      	bne.n	80019c0 <BT_UART_RXCallback+0xe4>
		commandflag = 3;
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <BT_UART_RXCallback+0x170>)
 80019ba:	2203      	movs	r2, #3
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	e031      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "Startsleep", 10) == 0){
 80019c0:	220a      	movs	r2, #10
 80019c2:	4925      	ldr	r1, [pc, #148]	; (8001a58 <BT_UART_RXCallback+0x17c>)
 80019c4:	481b      	ldr	r0, [pc, #108]	; (8001a34 <BT_UART_RXCallback+0x158>)
 80019c6:	f00f ff5d 	bl	8011884 <strncmp>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <BT_UART_RXCallback+0xfc>
		commandflag = 4;
 80019d0:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <BT_UART_RXCallback+0x170>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	701a      	strb	r2, [r3, #0]
}
 80019d6:	e025      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "NewNr: ", 6) == 0){
 80019d8:	2206      	movs	r2, #6
 80019da:	4920      	ldr	r1, [pc, #128]	; (8001a5c <BT_UART_RXCallback+0x180>)
 80019dc:	4815      	ldr	r0, [pc, #84]	; (8001a34 <BT_UART_RXCallback+0x158>)
 80019de:	f00f ff51 	bl	8011884 <strncmp>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10a      	bne.n	80019fe <BT_UART_RXCallback+0x122>
		commandflag = 5;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <BT_UART_RXCallback+0x170>)
 80019ea:	2205      	movs	r2, #5
 80019ec:	701a      	strb	r2, [r3, #0]
		memcpy(mobilenr_set, MainBuf+sizeof("NewNr: ")-1, 14);
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <BT_UART_RXCallback+0x184>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	491c      	ldr	r1, [pc, #112]	; (8001a64 <BT_UART_RXCallback+0x188>)
 80019f4:	220e      	movs	r2, #14
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00f fa8e 	bl	8010f18 <memcpy>
}
 80019fc:	e012      	b.n	8001a24 <BT_UART_RXCallback+0x148>
	else if (strncmp((char*)MainBuf, "NewWakeup: ", 10) == 0){
 80019fe:	220a      	movs	r2, #10
 8001a00:	4919      	ldr	r1, [pc, #100]	; (8001a68 <BT_UART_RXCallback+0x18c>)
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <BT_UART_RXCallback+0x158>)
 8001a04:	f00f ff3e 	bl	8011884 <strncmp>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d108      	bne.n	8001a20 <BT_UART_RXCallback+0x144>
		commandflag = 6;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <BT_UART_RXCallback+0x170>)
 8001a10:	2206      	movs	r2, #6
 8001a12:	701a      	strb	r2, [r3, #0]
		memcpy_char_dword(&wakeup_set, MainBuf+sizeof("NewWakeup: ")-1);
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <BT_UART_RXCallback+0x190>)
 8001a16:	4619      	mov	r1, r3
 8001a18:	4815      	ldr	r0, [pc, #84]	; (8001a70 <BT_UART_RXCallback+0x194>)
 8001a1a:	f000 f867 	bl	8001aec <memcpy_char_dword>
}
 8001a1e:	e001      	b.n	8001a24 <BT_UART_RXCallback+0x148>
		SetUpTXRXCycle_BTUART();
 8001a20:	f000 f828 	bl	8001a74 <SetUpTXRXCycle_BTUART>
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200003e2 	.word	0x200003e2
 8001a30:	200003e0 	.word	0x200003e0
 8001a34:	20000318 	.word	0x20000318
 8001a38:	200002b4 	.word	0x200002b4
 8001a3c:	200003e4 	.word	0x200003e4
 8001a40:	200002b1 	.word	0x200002b1
 8001a44:	20000478 	.word	0x20000478
 8001a48:	08014c38 	.word	0x08014c38
 8001a4c:	20000960 	.word	0x20000960
 8001a50:	08014c40 	.word	0x08014c40
 8001a54:	08014c4c 	.word	0x08014c4c
 8001a58:	08014c58 	.word	0x08014c58
 8001a5c:	08014c64 	.word	0x08014c64
 8001a60:	20000000 	.word	0x20000000
 8001a64:	2000031f 	.word	0x2000031f
 8001a68:	08014c6c 	.word	0x08014c6c
 8001a6c:	20000323 	.word	0x20000323
 8001a70:	200008e0 	.word	0x200008e0

08001a74 <SetUpTXRXCycle_BTUART>:

void SetUpTXRXCycle_BTUART(void){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	/*clear Buffer and flags*/
	memset(RxBuf, 0, RxBuf_SIZE);
 8001a78:	2264      	movs	r2, #100	; 0x64
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4812      	ldr	r0, [pc, #72]	; (8001ac8 <SetUpTXRXCycle_BTUART+0x54>)
 8001a7e:	f00f fa59 	bl	8010f34 <memset>
	memset(MainBuf, 0, MainBuf_SIZE);
 8001a82:	22c8      	movs	r2, #200	; 0xc8
 8001a84:	2100      	movs	r1, #0
 8001a86:	4811      	ldr	r0, [pc, #68]	; (8001acc <SetUpTXRXCycle_BTUART+0x58>)
 8001a88:	f00f fa54 	bl	8010f34 <memset>
	oldPos = 0;
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <SetUpTXRXCycle_BTUART+0x5c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <SetUpTXRXCycle_BTUART+0x60>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	801a      	strh	r2, [r3, #0]
	flag_RX_Done = 0;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <SetUpTXRXCycle_BTUART+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
	rxSize = 0;
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <SetUpTXRXCycle_BTUART+0x68>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	801a      	strh	r2, [r3, #0]
	flag_timeout = 0;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <SetUpTXRXCycle_BTUART+0x6c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]

	/*Start DMA to be prepared for RX*/
	HAL_UARTEx_ReceiveToIdle_DMA(&hlpuart1, RxBuf, RxBuf_SIZE);
 8001aaa:	2264      	movs	r2, #100	; 0x64
 8001aac:	4906      	ldr	r1, [pc, #24]	; (8001ac8 <SetUpTXRXCycle_BTUART+0x54>)
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <SetUpTXRXCycle_BTUART+0x70>)
 8001ab0:	f00a fe59 	bl	800c766 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <SetUpTXRXCycle_BTUART+0x74>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <SetUpTXRXCycle_BTUART+0x74>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	200002b4 	.word	0x200002b4
 8001acc:	20000318 	.word	0x20000318
 8001ad0:	200003e0 	.word	0x200003e0
 8001ad4:	200003e2 	.word	0x200003e2
 8001ad8:	200002b1 	.word	0x200002b1
 8001adc:	200003e4 	.word	0x200003e4
 8001ae0:	200002b0 	.word	0x200002b0
 8001ae4:	20000478 	.word	0x20000478
 8001ae8:	20000628 	.word	0x20000628

08001aec <memcpy_char_dword>:


/*
 * Memcopy for char array of 8 to doubleword -> for example '0''0''0''1''2''5''5''5'' => 12555
 */
static void memcpy_char_dword(uint64_t * targetword, uint8_t * chararray){
 8001aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	*targetword = 0;
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 7; i >= 0; i--){
 8001b06:	2307      	movs	r3, #7
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e032      	b.n	8001b72 <memcpy_char_dword+0x86>
		*targetword += (chararray[i]-48) * (uint64_t)pow(10, (double)(8-(i+1)));
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	3b30      	subs	r3, #48	; 0x30
 8001b16:	17da      	asrs	r2, r3, #31
 8001b18:	4698      	mov	r8, r3
 8001b1a:	4691      	mov	r9, r2
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fcd6 	bl	80004d4 <__aeabi_i2d>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	f04f 0000 	mov.w	r0, #0
 8001b30:	4914      	ldr	r1, [pc, #80]	; (8001b84 <memcpy_char_dword+0x98>)
 8001b32:	f012 f98f 	bl	8013e54 <pow>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff fb47 	bl	80011d0 <__aeabi_d2ulz>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	fb02 f009 	mul.w	r0, r2, r9
 8001b4a:	fb08 f103 	mul.w	r1, r8, r3
 8001b4e:	4401      	add	r1, r0
 8001b50:	fba8 4502 	umull	r4, r5, r8, r2
 8001b54:	194b      	adds	r3, r1, r5
 8001b56:	461d      	mov	r5, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	eb14 0a02 	adds.w	sl, r4, r2
 8001b62:	eb45 0b03 	adc.w	fp, r5, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	e9c3 ab00 	strd	sl, fp, [r3]
	for (int i = 7; i >= 0; i--){
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	dac9      	bge.n	8001b0c <memcpy_char_dword+0x20>
	}
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b84:	40240000 	.word	0x40240000

08001b88 <HAL_GPIO_EXTI_Callback>:
/*private function prototypes*/
static void onButtonTimmerEvent(void *context);

//Overwrite weak callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af02      	add	r7, sp, #8
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  /* When user button Interrupt came */
  if (GPIO_Pin == BUT_BOOT_Pin) {
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b98:	d10d      	bne.n	8001bb6 <HAL_GPIO_EXTI_Callback+0x2e>
	  commandflag = 0;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_GPIO_EXTI_Callback+0x38>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
	  //Create and start timer of 200ms
	  UTIL_TIMER_Create(&timerButton, BUTTONREAD_TIME_MS, UTIL_TIMER_ONESHOT, onButtonTimmerEvent, NULL);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	21c8      	movs	r1, #200	; 0xc8
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001bac:	f00e fca0 	bl	80104f0 <UTIL_TIMER_Create>

	  UTIL_TIMER_Start(&timerButton);
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_GPIO_EXTI_Callback+0x40>)
 8001bb2:	f00e fcd3 	bl	801055c <UTIL_TIMER_Start>
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000960 	.word	0x20000960
 8001bc4:	08001bcd 	.word	0x08001bcd
 8001bc8:	200003e8 	.word	0x200003e8

08001bcc <onButtonTimmerEvent>:


static void onButtonTimmerEvent(void *context) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	buttontimesctr++;
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001bde:	801a      	strh	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(BUT_BOOT_GPIO_Port, BUT_BOOT_Pin) == 0){
 8001be0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be4:	4823      	ldr	r0, [pc, #140]	; (8001c74 <onButtonTimmerEvent+0xa8>)
 8001be6:	f005 fdc9 	bl	800777c <HAL_GPIO_ReadPin>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <onButtonTimmerEvent+0x2c>
		//if button still pressed then start timer again
		UTIL_TIMER_Start(&timerButton);
 8001bf0:	4821      	ldr	r0, [pc, #132]	; (8001c78 <onButtonTimmerEvent+0xac>)
 8001bf2:	f00e fcb3 	bl	801055c <UTIL_TIMER_Start>
			//if button is pressed longer than 10 seconds, commandflag is 4
			 commandflag = 4;
			 buttontimesctr = 0;
		}
	}
}
 8001bf6:	e036      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
		if (buttontimesctr < 10) {
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d809      	bhi.n	8001c14 <onButtonTimmerEvent+0x48>
			commandflag = 1;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <onButtonTimmerEvent+0xb0>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
			buttonpressdone = 1;
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <onButtonTimmerEvent+0xb4>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
			buttontimesctr = 0;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	801a      	strh	r2, [r3, #0]
}
 8001c12:	e028      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
		else if (buttontimesctr >= 10 && buttontimesctr < 25 ) {
 8001c14:	4b16      	ldr	r3, [pc, #88]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d90a      	bls.n	8001c32 <onButtonTimmerEvent+0x66>
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	2b18      	cmp	r3, #24
 8001c22:	d806      	bhi.n	8001c32 <onButtonTimmerEvent+0x66>
			commandflag = 2;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <onButtonTimmerEvent+0xb0>)
 8001c26:	2202      	movs	r2, #2
 8001c28:	701a      	strb	r2, [r3, #0]
			buttontimesctr = 0;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
 8001c30:	e019      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
		else if (buttontimesctr >= 25 && buttontimesctr < 50){
 8001c32:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	2b18      	cmp	r3, #24
 8001c38:	d90a      	bls.n	8001c50 <onButtonTimmerEvent+0x84>
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c3c:	881b      	ldrh	r3, [r3, #0]
 8001c3e:	2b31      	cmp	r3, #49	; 0x31
 8001c40:	d806      	bhi.n	8001c50 <onButtonTimmerEvent+0x84>
			commandflag = 3;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <onButtonTimmerEvent+0xb0>)
 8001c44:	2203      	movs	r2, #3
 8001c46:	701a      	strb	r2, [r3, #0]
			buttontimesctr = 0;
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	801a      	strh	r2, [r3, #0]
 8001c4e:	e00a      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
		else if (buttontimesctr >= 50){
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	2b31      	cmp	r3, #49	; 0x31
 8001c56:	d906      	bls.n	8001c66 <onButtonTimmerEvent+0x9a>
			 commandflag = 4;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <onButtonTimmerEvent+0xb0>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	701a      	strb	r2, [r3, #0]
			 buttontimesctr = 0;
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <onButtonTimmerEvent+0xa4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	801a      	strh	r2, [r3, #0]
}
 8001c64:	e7ff      	b.n	8001c66 <onButtonTimmerEvent+0x9a>
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000400 	.word	0x20000400
 8001c74:	48000400 	.word	0x48000400
 8001c78:	200003e8 	.word	0x200003e8
 8001c7c:	20000960 	.word	0x20000960
 8001c80:	20000961 	.word	0x20000961

08001c84 <LL_AHB1_GRP1_EnableClock>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
}
 8001caa:	bf00      	nop
 8001cac:	3714      	adds	r7, #20
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001cb8:	2004      	movs	r0, #4
 8001cba:	f7ff ffe3 	bl	8001c84 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff ffe0 	bl	8001c84 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f7ff ffdd 	bl	8001c84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2102      	movs	r1, #2
 8001cce:	200f      	movs	r0, #15
 8001cd0:	f004 fcd3 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001cd4:	200f      	movs	r0, #15
 8001cd6:	f004 fcea 	bl	80066ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2010      	movs	r0, #16
 8001ce0:	f004 fccb 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001ce4:	2010      	movs	r0, #16
 8001ce6:	f004 fce2 	bl	80066ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	203a      	movs	r0, #58	; 0x3a
 8001cf0:	f004 fcc3 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8001cf4:	203a      	movs	r0, #58	; 0x3a
 8001cf6:	f004 fcda 	bl	80066ae <HAL_NVIC_EnableIRQ>

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <Eraseflash_func>:
static uint32_t GetPage(uint32_t Address);



/*PFDs*/
void Eraseflash_func(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	/* Erase the user Flash area (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
	HAL_FLASH_Unlock();
 8001d04:	f005 f936 	bl	8006f74 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <Eraseflash_func+0x5c>)
 8001d0a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d0e:	611a      	str	r2, [r3, #16]
	FirstPage = GetPage(FLASH_USER_START_ADDR);
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <Eraseflash_func+0x60>)
 8001d12:	f000 f91b 	bl	8001f4c <GetPage>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <Eraseflash_func+0x64>)
 8001d1a:	6013      	str	r3, [r2, #0]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8001d1c:	4812      	ldr	r0, [pc, #72]	; (8001d68 <Eraseflash_func+0x68>)
 8001d1e:	f000 f915 	bl	8001f4c <GetPage>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <Eraseflash_func+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <Eraseflash_func+0x6c>)
 8001d2e:	6013      	str	r3, [r2, #0]

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001d30:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <Eraseflash_func+0x70>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = FirstPage;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <Eraseflash_func+0x64>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <Eraseflash_func+0x70>)
 8001d3c:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbPages = NbOfPages;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <Eraseflash_func+0x6c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <Eraseflash_func+0x70>)
 8001d44:	6093      	str	r3, [r2, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 8001d46:	490b      	ldr	r1, [pc, #44]	; (8001d74 <Eraseflash_func+0x74>)
 8001d48:	4809      	ldr	r0, [pc, #36]	; (8001d70 <Eraseflash_func+0x70>)
 8001d4a:	f005 fa15 	bl	8007178 <HAL_FLASHEx_Erase>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d000      	beq.n	8001d56 <Eraseflash_func+0x56>
		while (1) {}
 8001d54:	e7fe      	b.n	8001d54 <Eraseflash_func+0x54>
		HAL_FLASH_Lock();
	}
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	58004000 	.word	0x58004000
 8001d60:	08030000 	.word	0x08030000
 8001d64:	20000404 	.word	0x20000404
 8001d68:	0803ffff 	.word	0x0803ffff
 8001d6c:	20000408 	.word	0x20000408
 8001d70:	20000418 	.word	0x20000418
 8001d74:	20000410 	.word	0x20000410

08001d78 <Writeflash_func>:


/* Die Übergebene Struktur "Parameter" wird in den Speicher geschrieben, dafür muss die größe der char Arrays beachtet werden, da der
 * Handynummer Array größer als ein doubleword ist, wird dieses auf zwei Arrays aufgeteilt. Die typkonvertierung findet mit memcpy statt.*/

void Writeflash_func(uint64_t Handynr1, uint64_t Handynr2, uint64_t wakeupmins) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d82:	e9c7 2300 	strd	r2, r3, [r7]

	HAL_FLASH_Unlock();
 8001d86:	f005 f8f5 	bl	8006f74 <HAL_FLASH_Unlock>
	Address = FLASH_USER_START_ADDR;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <Writeflash_func+0x94>)
 8001d8c:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <Writeflash_func+0x98>)
 8001d8e:	601a      	str	r2, [r3, #0]

	int err = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
	err = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Handynr1);
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <Writeflash_func+0x94>)
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f005 f8a5 	bl	8006eec <HAL_FLASH_Program>
 8001da2:	4603      	mov	r3, r0
 8001da4:	617b      	str	r3, [r7, #20]
	if (err == HAL_OK) {
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10f      	bne.n	8001dcc <Writeflash_func+0x54>
		Address = Address + 8; /* increment to next double word*/
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <Writeflash_func+0x94>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3308      	adds	r3, #8
 8001db2:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <Writeflash_func+0x94>)
 8001db4:	6013      	str	r3, [r2, #0]
	} else {
		while (1) {}
	}

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Handynr2) == HAL_OK) {
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <Writeflash_func+0x94>)
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f005 f894 	bl	8006eec <HAL_FLASH_Program>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d111      	bne.n	8001dee <Writeflash_func+0x76>
 8001dca:	e000      	b.n	8001dce <Writeflash_func+0x56>
		while (1) {}
 8001dcc:	e7fe      	b.n	8001dcc <Writeflash_func+0x54>
		Address = Address + 8; /* increment to next double word*/
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <Writeflash_func+0x94>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <Writeflash_func+0x94>)
 8001dd6:	6013      	str	r3, [r2, #0]
	} else {
		while (1) {}
	}

	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, wakeupmins) == HAL_OK) {
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <Writeflash_func+0x94>)
 8001dda:	6819      	ldr	r1, [r3, #0]
 8001ddc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001de0:	2001      	movs	r0, #1
 8001de2:	f005 f883 	bl	8006eec <HAL_FLASH_Program>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d107      	bne.n	8001dfc <Writeflash_func+0x84>
 8001dec:	e000      	b.n	8001df0 <Writeflash_func+0x78>
		while (1) {}
 8001dee:	e7fe      	b.n	8001dee <Writeflash_func+0x76>
		Address = Address + 8; /* increment to next double word*/
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <Writeflash_func+0x94>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3308      	adds	r3, #8
 8001df6:	4a05      	ldr	r2, [pc, #20]	; (8001e0c <Writeflash_func+0x94>)
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e000      	b.n	8001dfe <Writeflash_func+0x86>
	} else {
		while (1) {}
 8001dfc:	e7fe      	b.n	8001dfc <Writeflash_func+0x84>
	}

	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8001dfe:	f005 f8db 	bl	8006fb8 <HAL_FLASH_Lock>

}
 8001e02:	bf00      	nop
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000040c 	.word	0x2000040c
 8001e10:	08030000 	.word	0x08030000

08001e14 <Readflash_func>:

/* Die Funktion schreibt die im Flash abgelegten Daten in eine Struktur "Auslesen" und gibt diese zurück. Da beim schreiben des Flashs
 * die char Arrays als doubleword geschrieben werden, muss noch eine Typkonvertierung zurück in char stattfinden. Diese wird mittels memcpy erledigt.
 * Das Array der Handynummer wird am Ende aus den zwei gelesenen doublewords zusammengefügt.*/

Parametersatztype Readflash_func(void) {
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b092      	sub	sp, #72	; 0x48
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

	Parametersatztype Auslesen = {0};
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	2230      	movs	r2, #48	; 0x30
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f00f f885 	bl	8010f34 <memset>

	Address = FLASH_USER_START_ADDR;
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <Readflash_func+0x128>)
 8001e2c:	4a44      	ldr	r2, [pc, #272]	; (8001f40 <Readflash_func+0x12c>)
 8001e2e:	601a      	str	r2, [r3, #0]
	MemoryProgramStatus = 0x0;
 8001e30:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <Readflash_func+0x130>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
	uint64_t speicher;

	if (Address < FLASH_USER_END_ADDR) {
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <Readflash_func+0x128>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a43      	ldr	r2, [pc, #268]	; (8001f48 <Readflash_func+0x134>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d20a      	bcs.n	8001e56 <Readflash_func+0x42>
		speicher = *(__IO uint64_t*) Address;
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <Readflash_func+0x128>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Address = Address + 8;
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <Readflash_func+0x128>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3308      	adds	r3, #8
 8001e52:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <Readflash_func+0x128>)
 8001e54:	6013      	str	r3, [r2, #0]
	}
	memcpy(Auslesen.Handynummer1, &speicher, sizeof(char) * 8);
 8001e56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e5a:	f107 0208 	add.w	r2, r7, #8
 8001e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e62:	e883 0003 	stmia.w	r3, {r0, r1}

	if (Address < FLASH_USER_END_ADDR) {
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <Readflash_func+0x128>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a37      	ldr	r2, [pc, #220]	; (8001f48 <Readflash_func+0x134>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d20a      	bcs.n	8001e86 <Readflash_func+0x72>
		speicher = *(__IO uint64_t*) Address;
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <Readflash_func+0x128>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Address = Address + 8;
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <Readflash_func+0x128>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3308      	adds	r3, #8
 8001e82:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <Readflash_func+0x128>)
 8001e84:	6013      	str	r3, [r2, #0]
	}
	memcpy(Auslesen.Handynummer2, &speicher, sizeof(char) * 8);
 8001e86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e8a:	f107 0208 	add.w	r2, r7, #8
 8001e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e92:	e883 0003 	stmia.w	r3, {r0, r1}

	if (Address < FLASH_USER_END_ADDR) {
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <Readflash_func+0x128>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <Readflash_func+0x134>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d20a      	bcs.n	8001eb6 <Readflash_func+0xa2>
		speicher = *(__IO uint64_t*) Address;
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <Readflash_func+0x128>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		Address = Address + 8;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <Readflash_func+0x128>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3308      	adds	r3, #8
 8001eb2:	4a22      	ldr	r2, [pc, #136]	; (8001f3c <Readflash_func+0x128>)
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
	}
	memcpy(&Auslesen.Wakeup, &speicher, sizeof(uint64_t));
 8001eba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	for (int i = 0; i <= 15; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ec2:	e028      	b.n	8001f16 <Readflash_func+0x102>
		if (i <= 7)
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec6:	2b07      	cmp	r3, #7
 8001ec8:	dc0b      	bgt.n	8001ee2 <Readflash_func+0xce>
			Auslesen.Handynummer[i] = Auslesen.Handynummer1[i];
 8001eca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed0:	4413      	add	r3, r2
 8001ed2:	7819      	ldrb	r1, [r3, #0]
 8001ed4:	f107 0210 	add.w	r2, r7, #16
 8001ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eda:	4413      	add	r3, r2
 8001edc:	460a      	mov	r2, r1
 8001ede:	701a      	strb	r2, [r3, #0]
 8001ee0:	e016      	b.n	8001f10 <Readflash_func+0xfc>
		else {
			for (int f = (i - 8); (i - f) == 8; f++) {
 8001ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee4:	3b08      	subs	r3, #8
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee8:	e00d      	b.n	8001f06 <Readflash_func+0xf2>
				Auslesen.Handynummer[i] = Auslesen.Handynummer2[f];
 8001eea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef0:	4413      	add	r3, r2
 8001ef2:	7819      	ldrb	r1, [r3, #0]
 8001ef4:	f107 0210 	add.w	r2, r7, #16
 8001ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001efa:	4413      	add	r3, r2
 8001efc:	460a      	mov	r2, r1
 8001efe:	701a      	strb	r2, [r3, #0]
			for (int f = (i - 8); (i - f) == 8; f++) {
 8001f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f02:	3301      	adds	r3, #1
 8001f04:	643b      	str	r3, [r7, #64]	; 0x40
 8001f06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d0ec      	beq.n	8001eea <Readflash_func+0xd6>
	for (int i = 0; i <= 15; i++) {
 8001f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f12:	3301      	adds	r3, #1
 8001f14:	647b      	str	r3, [r7, #68]	; 0x44
 8001f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	ddd3      	ble.n	8001ec4 <Readflash_func+0xb0>
			}

		}
	}

	return Auslesen;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	461d      	mov	r5, r3
 8001f20:	f107 0410 	add.w	r4, r7, #16
 8001f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

}
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	3748      	adds	r7, #72	; 0x48
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f3c:	2000040c 	.word	0x2000040c
 8001f40:	08030000 	.word	0x08030000
 8001f44:	20000414 	.word	0x20000414
 8001f48:	0803ffff 	.word	0x0803ffff

08001f4c <GetPage>:
/**
 * @brief  Gets the page of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The page of a given address
 */
static uint32_t GetPage(uint32_t Addr) {
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001f5a:	0adb      	lsrs	r3, r3, #11
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <LL_AHB2_GRP1_EnableClock>:
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
	...

08001f98 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	2001      	movs	r0, #1
 8001fae:	f7ff ffda 	bl	8001f66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7ff ffd7 	bl	8001f66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	2004      	movs	r0, #4
 8001fba:	f7ff ffd4 	bl	8001f66 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fbe:	2080      	movs	r0, #128	; 0x80
 8001fc0:	f7ff ffd1 	bl	8001f66 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Green_Pin|LED_Red_Pin|LED_Board_Pin, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f244 2120 	movw	r1, #16928	; 0x4220
 8001fca:	4835      	ldr	r0, [pc, #212]	; (80020a0 <MX_GPIO_Init+0x108>)
 8001fcc:	f005 fbed 	bl	80077aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GSM_RSTPin_Pin|GSM_Switch_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f240 2101 	movw	r1, #513	; 0x201
 8001fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fda:	f005 fbe6 	bl	80077aa <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); */

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = REEDPin_Pin;
 8001fde:	2308      	movs	r3, #8
 8001fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(REEDPin_GPIO_Port, &GPIO_InitStruct);
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	482c      	ldr	r0, [pc, #176]	; (80020a0 <MX_GPIO_Init+0x108>)
 8001ff0:	f005 f996 	bl	8007320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Red_Pin;
 8001ff4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ff8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4619      	mov	r1, r3
 800200a:	4825      	ldr	r0, [pc, #148]	; (80020a0 <MX_GPIO_Init+0x108>)
 800200c:	f005 f988 	bl	8007320 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); */

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Board_Pin;
 8002010:	2320      	movs	r3, #32
 8002012:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002014:	2301      	movs	r3, #1
 8002016:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201c:	2302      	movs	r3, #2
 800201e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_Board_GPIO_Port, &GPIO_InitStruct);
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4619      	mov	r1, r3
 8002024:	481e      	ldr	r0, [pc, #120]	; (80020a0 <MX_GPIO_Init+0x108>)
 8002026:	f005 f97b 	bl	8007320 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GSM_RSTPin_Pin|GSM_Switch_Pin;
 800202a:	f240 2301 	movw	r3, #513	; 0x201
 800202e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	4619      	mov	r1, r3
 8002040:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002044:	f005 f96c 	bl	8007320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT_BOOT_Pin;
 8002048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800204c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800204e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002052:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002054:	2301      	movs	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT_BOOT_GPIO_Port, &GPIO_InitStruct);
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	4619      	mov	r1, r3
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <MX_GPIO_Init+0x108>)
 800205e:	f005 f95f 	bl	8007320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002062:	2308      	movs	r3, #8
 8002064:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002066:	2303      	movs	r3, #3
 8002068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	4619      	mov	r1, r3
 8002072:	480c      	ldr	r0, [pc, #48]	; (80020a4 <MX_GPIO_Init+0x10c>)
 8002074:	f005 f954 	bl	8007320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	2009      	movs	r0, #9
 800207e:	f004 fafc 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002082:	2009      	movs	r0, #9
 8002084:	f004 fb13 	bl	80066ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2100      	movs	r1, #0
 800208c:	2029      	movs	r0, #41	; 0x29
 800208e:	f004 faf4 	bl	800667a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002092:	2029      	movs	r0, #41	; 0x29
 8002094:	f004 fb0b 	bl	80066ae <HAL_NVIC_EnableIRQ>

}
 8002098:	bf00      	nop
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	48000400 	.word	0x48000400
 80020a4:	48001c00 	.word	0x48001c00

080020a8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f023 0218 	bic.w	r2, r3, #24
 80020bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
	...

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020d8:	f003 fbf4 	bl	80058c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020dc:	f000 f814 	bl	8002108 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e0:	f7ff ff5a 	bl	8001f98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020e4:	f000 ff20 	bl	8002f28 <MX_USART2_UART_Init>
  MX_SubGHz_Phy_Init();
 80020e8:	f001 ff01 	bl	8003eee <MX_SubGHz_Phy_Init>
  MX_ADC_Init();
 80020ec:	f7ff fa48 	bl	8001580 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 80020f0:	f000 fe80 	bl	8002df4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Write LEDBoard Pin high (off)
  HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 1);
 80020f4:	2201      	movs	r2, #1
 80020f6:	2120      	movs	r1, #32
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <main+0x30>)
 80020fa:	f005 fb56 	bl	80077aa <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80020fe:	f001 fefe 	bl	8003efe <MX_SubGHz_Phy_Process>
 8002102:	e7fc      	b.n	80020fe <main+0x2a>
 8002104:	48000400 	.word	0x48000400

08002108 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b09a      	sub	sp, #104	; 0x68
 800210c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800210e:	f107 0320 	add.w	r3, r7, #32
 8002112:	2248      	movs	r2, #72	; 0x48
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f00e ff0c 	bl	8010f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800211c:	f107 0308 	add.w	r3, r7, #8
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800212e:	f005 fb85 	bl	800783c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002132:	2000      	movs	r0, #0
 8002134:	f7ff ffb8 	bl	80020a8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002138:	4b1f      	ldr	r3, [pc, #124]	; (80021b8 <SystemClock_Config+0xb0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002140:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <SystemClock_Config+0xb0>)
 8002142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002146:	6013      	str	r3, [r2, #0]
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <SystemClock_Config+0xb0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002154:	2324      	movs	r3, #36	; 0x24
 8002156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002158:	2381      	movs	r3, #129	; 0x81
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800215c:	2301      	movs	r3, #1
 800215e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002160:	2300      	movs	r3, #0
 8002162:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002164:	23b0      	movs	r3, #176	; 0xb0
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002168:	2300      	movs	r3, #0
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800216c:	f107 0320 	add.w	r3, r7, #32
 8002170:	4618      	mov	r0, r3
 8002172:	f005 feaf 	bl	8007ed4 <HAL_RCC_OscConfig>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800217c:	f000 f81e 	bl	80021bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8002180:	234f      	movs	r3, #79	; 0x4f
 8002182:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	2102      	movs	r1, #2
 800219e:	4618      	mov	r0, r3
 80021a0:	f006 fa34 	bl	800860c <HAL_RCC_ClockConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80021aa:	f000 f807 	bl	80021bc <Error_Handler>
  }
}
 80021ae:	bf00      	nop
 80021b0:	3768      	adds	r7, #104	; 0x68
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	58000400 	.word	0x58000400

080021bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c0:	b672      	cpsid	i
}
 80021c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <Error_Handler+0x8>

080021c6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <LL_APB1_GRP1_EnableClock>:
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80021f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
	...

08002218 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	222c      	movs	r2, #44	; 0x2c
 8002222:	2100      	movs	r1, #0
 8002224:	4618      	mov	r0, r3
 8002226:	f00e fe85 	bl	8010f34 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800222a:	4b22      	ldr	r3, [pc, #136]	; (80022b4 <MX_RTC_Init+0x9c>)
 800222c:	4a22      	ldr	r2, [pc, #136]	; (80022b8 <MX_RTC_Init+0xa0>)
 800222e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002232:	221f      	movs	r2, #31
 8002234:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002236:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002238:	2200      	movs	r2, #0
 800223a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <MX_RTC_Init+0x9c>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <MX_RTC_Init+0x9c>)
 800224a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800224e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002252:	2200      	movs	r2, #0
 8002254:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800225e:	4815      	ldr	r0, [pc, #84]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002260:	f006 fe90 	bl	8008f84 <HAL_RTC_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800226a:	f7ff ffa7 	bl	80021bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800226e:	4811      	ldr	r0, [pc, #68]	; (80022b4 <MX_RTC_Init+0x9c>)
 8002270:	f007 f97e 	bl	8009570 <HAL_RTCEx_SetSSRU_IT>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800227a:	f7ff ff9f 	bl	80021bc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800227e:	2300      	movs	r3, #0
 8002280:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800228a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800228e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002294:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	4805      	ldr	r0, [pc, #20]	; (80022b4 <MX_RTC_Init+0x9c>)
 800229e:	f006 feeb 	bl	8009078 <HAL_RTC_SetAlarm_IT>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80022a8:	f7ff ff88 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022ac:	bf00      	nop
 80022ae:	3730      	adds	r7, #48	; 0x30
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000424 	.word	0x20000424
 80022b8:	40002800 	.word	0x40002800

080022bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b090      	sub	sp, #64	; 0x40
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	2238      	movs	r2, #56	; 0x38
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f00e fe31 	bl	8010f34 <memset>
  if(rtcHandle->Instance==RTC)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_RTC_MspInit+0x74>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d125      	bne.n	8002328 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80022e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	4618      	mov	r0, r3
 80022ee:	f006 fd2f 	bl	8008d50 <HAL_RCCEx_PeriphCLKConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80022f8:	f7ff ff60 	bl	80021bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022fc:	f7ff ff63 	bl	80021c6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002300:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002304:	f7ff ff6f 	bl	80021e6 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	2002      	movs	r0, #2
 800230e:	f004 f9b4 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002312:	2002      	movs	r0, #2
 8002314:	f004 f9cb 	bl	80066ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002318:	2200      	movs	r2, #0
 800231a:	2100      	movs	r1, #0
 800231c:	202a      	movs	r0, #42	; 0x2a
 800231e:	f004 f9ac 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002322:	202a      	movs	r0, #42	; 0x2a
 8002324:	f004 f9c3 	bl	80066ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002328:	bf00      	nop
 800232a:	3740      	adds	r7, #64	; 0x40
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40002800 	.word	0x40002800

08002334 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800233a:	2201      	movs	r2, #1
 800233c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	58000400 	.word	0x58000400

0800234c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002368:	f003 facc 	bl	8005904 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800236c:	f7ff ffe2 	bl	8002334 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002370:	2001      	movs	r0, #1
 8002372:	f005 faf5 	bl	8007960 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}

0800237a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800237e:	f003 facf 	bl	8005920 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8002382:	f001 fd35 	bl	8003df0 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}

0800238a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800238e:	f003 fab9 	bl	8005904 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002392:	2101      	movs	r1, #1
 8002394:	2000      	movs	r0, #0
 8002396:	f005 fa5f 	bl	8007858 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}

0800239e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80023a2:	f003 fabd 	bl	8005920 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bc80      	pop	{r7}
 80023b4:	4770      	bx	lr

080023b6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <NMI_Handler+0x4>

080023bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <HardFault_Handler+0x4>

080023c2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <MemManage_Handler+0x4>

080023c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <BusFault_Handler+0x4>

080023ce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <UsageFault_Handler+0x4>

080023d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 800240a:	f007 f8ed 	bl	80095e8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000424 	.word	0x20000424

08002418 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line 3 Interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(REEDPin_Pin);
 800241c:	2008      	movs	r0, #8
 800241e:	f005 f9f5 	bl	800780c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <DMA1_Channel5_IRQHandler+0x10>)
 800242e:	f004 fbe3 	bl	8006bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000688 	.word	0x20000688

0800243c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 6 Interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <DMA1_Channel6_IRQHandler+0x10>)
 8002442:	f004 fbd9 	bl	8006bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000628 	.word	0x20000628

08002450 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <USART1_IRQHandler+0x10>)
 8002456:	f008 f86f 	bl	800a538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000508 	.word	0x20000508

08002464 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <USART2_IRQHandler+0x10>)
 800246a:	f008 f865 	bl	800a538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000598 	.word	0x20000598

08002478 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800247c:	4802      	ldr	r0, [pc, #8]	; (8002488 <LPUART1_IRQHandler+0x10>)
 800247e:	f008 f85b 	bl	800a538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000478 	.word	0x20000478

0800248c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002490:	2029      	movs	r0, #41	; 0x29
 8002492:	f004 f91a 	bl	80066ca <HAL_NVIC_DisableIRQ>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002496:	f3bf 8f4f 	dsb	sy
}
 800249a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800249c:	f3bf 8f6f 	isb	sy
}
 80024a0:	bf00      	nop
  //Ensure, that all IRQ Bits are Set before continuing. This way no second irq will fire accidently
  __DSB();
  __ISB();
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BOOT_Pin);
 80024a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80024a6:	f005 f9b1 	bl	800780c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <RTC_Alarm_IRQHandler+0x10>)
 80024b6:	f006 ff47 	bl	8009348 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000424 	.word	0x20000424

080024c4 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <SUBGHZ_Radio_IRQHandler+0x10>)
 80024ca:	f007 fbf5 	bl	8009cb8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000045c 	.word	0x2000045c

080024d8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 Channel 5 Interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <DMA2_Channel5_IRQHandler+0x10>)
 80024de:	f004 fb8b 	bl	8006bf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	200006e8 	.word	0x200006e8

080024ec <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4313      	orrs	r3, r2
 8002502:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4013      	ands	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002510:	68fb      	ldr	r3, [r7, #12]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_SUBGHZ_Init+0x20>)
 8002522:	2210      	movs	r2, #16
 8002524:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_SUBGHZ_Init+0x20>)
 8002528:	f007 f94a 	bl	80097c0 <HAL_SUBGHZ_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8002532:	f7ff fe43 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000045c 	.word	0x2000045c

08002540 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8002548:	2001      	movs	r0, #1
 800254a:	f7ff ffcf 	bl	80024ec <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2032      	movs	r0, #50	; 0x32
 8002554:	f004 f891 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002558:	2032      	movs	r0, #50	; 0x32
 800255a:	f004 f8a8 	bl	80066ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff ffe8 	bl	8002566 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002596:	f00d ff9b 	bl	80104d0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <SystemApp_Init+0x38>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 80025a0:	f000 f88a 	bl	80026b8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 80025a4:	f00d fa3c 	bl	800fa20 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80025a8:	4807      	ldr	r0, [pc, #28]	; (80025c8 <SystemApp_Init+0x3c>)
 80025aa:	f00d fad5 	bl	800fb58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80025ae:	2002      	movs	r0, #2
 80025b0:	f00d fae0 	bl	800fb74 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80025b4:	f00d fcc8 	bl	800ff48 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80025b8:	2101      	movs	r1, #1
 80025ba:	2001      	movs	r0, #1
 80025bc:	f00d fd04 	bl	800ffc8 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000468 	.word	0x20000468
 80025c8:	080025d9 	.word	0x080025d9

080025cc <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80025d0:	f00d fd2a 	bl	8010028 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f00d ff3a 	bl	8010460 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <TimestampNow+0x3c>)
 80025f6:	2110      	movs	r1, #16
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f81d 	bl	8002638 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fd fdbe 	bl	8000180 <strlen>
 8002604:	4603      	mov	r3, r0
 8002606:	b29a      	uxth	r2, r3
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	08014c78 	.word	0x08014c78

08002618 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800261c:	2101      	movs	r1, #1
 800261e:	2002      	movs	r0, #2
 8002620:	f00d fca2 	bl	800ff68 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002624:	bf00      	nop
 8002626:	bd80      	pop	{r7, pc}

08002628 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800262c:	2100      	movs	r1, #0
 800262e:	2002      	movs	r0, #2
 8002630:	f00d fc9a 	bl	800ff68 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}

08002638 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002638:	b40c      	push	{r2, r3}
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
 8002642:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800264a:	6839      	ldr	r1, [r7, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f00e fae1 	bl	8010c18 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002660:	b002      	add	sp, #8
 8002662:	4770      	bx	lr

08002664 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800266e:	4618      	mov	r0, r3
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr

08002678 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_GetTick+0x24>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800268a:	f000 f99b 	bl	80029c4 <TIMER_IF_GetTimerValue>
 800268e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000468 	.word	0x20000468

080026a0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 fa11 	bl	8002ad2 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80026bc:	f003 f93e 	bl	800593c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80026c0:	f003 f942 	bl	8005948 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80026c4:	f003 f946 	bl	8005954 <HAL_DBGMCU_DisableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
	return 1;
 80026d0:	2301      	movs	r3, #1
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <_kill>:

int _kill(int pid, int sig)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026e4:	f00e fbee 	bl	8010ec4 <__errno>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2216      	movs	r2, #22
 80026ec:	601a      	str	r2, [r3, #0]
	return -1;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <_exit>:

void _exit (int status)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002702:	f04f 31ff 	mov.w	r1, #4294967295
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffe7 	bl	80026da <_kill>
	while (1) {}		/* Make sure we hang here */
 800270c:	e7fe      	b.n	800270c <_exit+0x12>

0800270e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	e00a      	b.n	8002736 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002720:	f3af 8000 	nop.w
 8002724:	4601      	mov	r1, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	60ba      	str	r2, [r7, #8]
 800272c:	b2ca      	uxtb	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	429a      	cmp	r2, r3
 800273c:	dbf0      	blt.n	8002720 <_read+0x12>
	}

return len;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	e009      	b.n	800276e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	60ba      	str	r2, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3301      	adds	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	429a      	cmp	r2, r3
 8002774:	dbf1      	blt.n	800275a <_write+0x12>
	}
	return len;
 8002776:	687b      	ldr	r3, [r7, #4]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_close>:

int _close(int file)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	return -1;
 8002788:	f04f 33ff 	mov.w	r3, #4294967295
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027a6:	605a      	str	r2, [r3, #4]
	return 0;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <_isatty>:

int _isatty(int file)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	return 1;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
	return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f00e fb58 	bl	8010ec4 <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20010000 	.word	0x20010000
 8002840:	00000400 	.word	0x00000400
 8002844:	2000046c 	.word	0x2000046c
 8002848:	20000f60 	.word	0x20000f60

0800284c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <TIMER_IF_Init+0x5c>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	f083 0301 	eor.w	r3, r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01b      	beq.n	80028b4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <TIMER_IF_Init+0x60>)
 800287e:	f04f 32ff 	mov.w	r2, #4294967295
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002884:	f7ff fcc8 	bl	8002218 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002888:	f000 f856 	bl	8002938 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800288c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002890:	480c      	ldr	r0, [pc, #48]	; (80028c4 <TIMER_IF_Init+0x60>)
 8002892:	f006 fcfd 	bl	8009290 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <TIMER_IF_Init+0x60>)
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800289e:	4809      	ldr	r0, [pc, #36]	; (80028c4 <TIMER_IF_Init+0x60>)
 80028a0:	f006 fe34 	bl	800950c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80028a4:	2000      	movs	r0, #0
 80028a6:	f000 f9d3 	bl	8002c50 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80028aa:	f000 f85f 	bl	800296c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <TIMER_IF_Init+0x5c>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80028b4:	79fb      	ldrb	r3, [r7, #7]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000470 	.word	0x20000470
 80028c4:	20000424 	.word	0x20000424

080028c8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08e      	sub	sp, #56	; 0x38
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80028d6:	f107 0308 	add.w	r3, r7, #8
 80028da:	222c      	movs	r2, #44	; 0x2c
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f00e fb28 	bl	8010f34 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80028e4:	f000 f828 	bl	8002938 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <TIMER_IF_StartTimer+0x68>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	43db      	mvns	r3, r3
 80028fa:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002900:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002904:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	2201      	movs	r2, #1
 8002912:	4619      	mov	r1, r3
 8002914:	4807      	ldr	r0, [pc, #28]	; (8002934 <TIMER_IF_StartTimer+0x6c>)
 8002916:	f006 fbaf 	bl	8009078 <HAL_RTC_SetAlarm_IT>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002920:	f7ff fc4c 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002924:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002928:	4618      	mov	r0, r3
 800292a:	3738      	adds	r7, #56	; 0x38
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000474 	.word	0x20000474
 8002934:	20000424 	.word	0x20000424

08002938 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <TIMER_IF_StopTimer+0x2c>)
 8002944:	2201      	movs	r2, #1
 8002946:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002948:	f44f 7180 	mov.w	r1, #256	; 0x100
 800294c:	4806      	ldr	r0, [pc, #24]	; (8002968 <TIMER_IF_StopTimer+0x30>)
 800294e:	f006 fc9f 	bl	8009290 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <TIMER_IF_StopTimer+0x30>)
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800295a:	79fb      	ldrb	r3, [r7, #7]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40002800 	.word	0x40002800
 8002968:	20000424 	.word	0x20000424

0800296c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002970:	f000 f98e 	bl	8002c90 <GetTimerTicks>
 8002974:	4603      	mov	r3, r0
 8002976:	4a03      	ldr	r2, [pc, #12]	; (8002984 <TIMER_IF_SetTimerContext+0x18>)
 8002978:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800297a:	4b02      	ldr	r3, [pc, #8]	; (8002984 <TIMER_IF_SetTimerContext+0x18>)
 800297c:	681b      	ldr	r3, [r3, #0]
}
 800297e:	4618      	mov	r0, r3
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000474 	.word	0x20000474

08002988 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800298c:	4b02      	ldr	r3, [pc, #8]	; (8002998 <TIMER_IF_GetTimerContext+0x10>)
 800298e:	681b      	ldr	r3, [r3, #0]
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	20000474 	.word	0x20000474

0800299c <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80029a6:	f000 f973 	bl	8002c90 <GetTimerTicks>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80029b4:	687b      	ldr	r3, [r7, #4]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000474 	.word	0x20000474

080029c4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80029ce:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <TIMER_IF_GetTimerValue+0x24>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80029d6:	f000 f95b 	bl	8002c90 <GetTimerTicks>
 80029da:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80029dc:	687b      	ldr	r3, [r7, #4]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000470 	.word	0x20000470

080029ec <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80029f6:	2303      	movs	r3, #3
 80029f8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80029fa:	687b      	ldr	r3, [r7, #4]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002a06:	b5b0      	push	{r4, r5, r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a0e:	2100      	movs	r1, #0
 8002a10:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	2000      	movs	r0, #0
 8002a16:	460a      	mov	r2, r1
 8002a18:	4603      	mov	r3, r0
 8002a1a:	0d95      	lsrs	r5, r2, #22
 8002a1c:	0294      	lsls	r4, r2, #10
 8002a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	4620      	mov	r0, r4
 8002a28:	4629      	mov	r1, r5
 8002a2a:	f7fe fbb9 	bl	80011a0 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4613      	mov	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bdb0      	pop	{r4, r5, r7, pc}

08002a40 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002a40:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	2000      	movs	r0, #0
 8002a52:	460c      	mov	r4, r1
 8002a54:	4605      	mov	r5, r0
 8002a56:	4620      	mov	r0, r4
 8002a58:	4629      	mov	r1, r5
 8002a5a:	f04f 0a00 	mov.w	sl, #0
 8002a5e:	f04f 0b00 	mov.w	fp, #0
 8002a62:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002a66:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002a6a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002a6e:	4650      	mov	r0, sl
 8002a70:	4659      	mov	r1, fp
 8002a72:	1b02      	subs	r2, r0, r4
 8002a74:	eb61 0305 	sbc.w	r3, r1, r5
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	0099      	lsls	r1, r3, #2
 8002a82:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002a86:	0090      	lsls	r0, r2, #2
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	eb12 0804 	adds.w	r8, r2, r4
 8002a90:	eb43 0905 	adc.w	r9, r3, r5
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aa0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002aa4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aa8:	4690      	mov	r8, r2
 8002aaa:	4699      	mov	r9, r3
 8002aac:	4640      	mov	r0, r8
 8002aae:	4649      	mov	r1, r9
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	0a82      	lsrs	r2, r0, #10
 8002aba:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002abe:	0a8b      	lsrs	r3, r1, #10
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ad0:	4770      	bx	lr

08002ad2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff93 	bl	8002a06 <TIMER_IF_Convert_ms2Tick>
 8002ae0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002ae2:	f000 f8d5 	bl	8002c90 <GetTimerTicks>
 8002ae6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002ae8:	e000      	b.n	8002aec <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002aea:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002aec:	f000 f8d0 	bl	8002c90 <GetTimerTicks>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d8f6      	bhi.n	8002aea <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002afc:	bf00      	nop
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002b0e:	f00d fe2d 	bl	801076c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002b22:	f000 f8a5 	bl	8002c70 <TIMER_IF_BkUp_Read_MSBticks>
 8002b26:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 f88f 	bl	8002c50 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002b3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002b48:	f000 f8a2 	bl	8002c90 <GetTimerTicks>
 8002b4c:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002b4e:	f000 f88f 	bl	8002c70 <TIMER_IF_BkUp_Read_MSBticks>
 8002b52:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	2200      	movs	r2, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	60fa      	str	r2, [r7, #12]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	000b      	movs	r3, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	460c      	mov	r4, r1
 8002b70:	4605      	mov	r5, r0
 8002b72:	eb12 0804 	adds.w	r8, r2, r4
 8002b76:	eb43 0905 	adc.w	r9, r3, r5
 8002b7a:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002b7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	0a82      	lsrs	r2, r0, #10
 8002b8c:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002b90:	0a8b      	lsrs	r3, r1, #10
 8002b92:	4613      	mov	r3, r2
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002ba4:	f04f 0b00 	mov.w	fp, #0
 8002ba8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff ff46 	bl	8002a40 <TIMER_IF_Convert_Tick2ms>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3730      	adds	r7, #48	; 0x30
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bc8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4803      	ldr	r0, [pc, #12]	; (8002be4 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002bd6:	f006 fd2b 	bl	8009630 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000424 	.word	0x20000424

08002be8 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4803      	ldr	r0, [pc, #12]	; (8002c04 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002bf6:	f006 fd1b 	bl	8009630 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000424 	.word	0x20000424

08002c08 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002c12:	2100      	movs	r1, #0
 8002c14:	4804      	ldr	r0, [pc, #16]	; (8002c28 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002c16:	f006 fd23 	bl	8009660 <HAL_RTCEx_BKUPRead>
 8002c1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002c1c:	687b      	ldr	r3, [r7, #4]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000424 	.word	0x20000424

08002c2c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002c36:	2101      	movs	r1, #1
 8002c38:	4804      	ldr	r0, [pc, #16]	; (8002c4c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002c3a:	f006 fd11 	bl	8009660 <HAL_RTCEx_BKUPRead>
 8002c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000424 	.word	0x20000424

08002c50 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4803      	ldr	r0, [pc, #12]	; (8002c6c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002c5e:	f006 fce7 	bl	8009630 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000424 	.word	0x20000424

08002c70 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002c76:	2102      	movs	r1, #2
 8002c78:	4804      	ldr	r0, [pc, #16]	; (8002c8c <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002c7a:	f006 fcf1 	bl	8009660 <HAL_RTCEx_BKUPRead>
 8002c7e:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002c80:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000424 	.word	0x20000424

08002c90 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002c96:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <GetTimerTicks+0x34>)
 8002c98:	f7ff fdd8 	bl	800284c <LL_RTC_TIME_GetSubSecond>
 8002c9c:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c9e:	e003      	b.n	8002ca8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002ca0:	4808      	ldr	r0, [pc, #32]	; (8002cc4 <GetTimerTicks+0x34>)
 8002ca2:	f7ff fdd3 	bl	800284c <LL_RTC_TIME_GetSubSecond>
 8002ca6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ca8:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <GetTimerTicks+0x34>)
 8002caa:	f7ff fdcf 	bl	800284c <LL_RTC_TIME_GetSubSecond>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d1f4      	bne.n	8002ca0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40002800 	.word	0x40002800

08002cc8 <LL_AHB2_GRP1_EnableClock>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cec:	68fb      	ldr	r3, [r7, #12]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <LL_APB1_GRP1_EnableClock>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <LL_APB1_GRP2_EnableClock>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <LL_APB1_GRP1_DisableClock>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6e:	4013      	ands	r3, r2
 8002d70:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <LL_APB1_GRP2_DisableClock>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d92:	4013      	ands	r3, r2
 8002d94:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <LL_APB2_GRP1_EnableClock>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <LL_APB2_GRP1_DisableClock>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de6:	4013      	ands	r3, r2
 8002de8:	660b      	str	r3, [r1, #96]	; 0x60
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002df8:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002dfa:	4a24      	ldr	r2, [pc, #144]	; (8002e8c <MX_LPUART1_UART_Init+0x98>)
 8002dfc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8002dfe:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e04:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e24:	4b18      	ldr	r3, [pc, #96]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV2;
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_ENABLE;
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002e3c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002e3e:	4812      	ldr	r0, [pc, #72]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e40:	f007 f8f9 	bl	800a036 <HAL_UART_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002e4a:	f7ff f9b7 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	480d      	ldr	r0, [pc, #52]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e52:	f009 fc0c 	bl	800c66e <HAL_UARTEx_SetTxFifoThreshold>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <MX_LPUART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002e5c:	f7ff f9ae 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e60:	2100      	movs	r1, #0
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e64:	f009 fc41 	bl	800c6ea <HAL_UARTEx_SetRxFifoThreshold>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_LPUART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002e6e:	f7ff f9a5 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_LPUART1_UART_Init+0x94>)
 8002e74:	f009 fbc0 	bl	800c5f8 <HAL_UARTEx_EnableFifoMode>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_LPUART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002e7e:	f7ff f99d 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000478 	.word	0x20000478
 8002e8c:	40008000 	.word	0x40008000

08002e90 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e94:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002e96:	4a23      	ldr	r2, [pc, #140]	; (8002f24 <MX_USART1_UART_Init+0x94>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ecc:	4b14      	ldr	r3, [pc, #80]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ed8:	4811      	ldr	r0, [pc, #68]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eda:	f007 f8ac 	bl	800a036 <HAL_UART_Init>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002ee4:	f7ff f96a 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	480d      	ldr	r0, [pc, #52]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002eec:	f009 fbbf 	bl	800c66e <HAL_UARTEx_SetTxFifoThreshold>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ef6:	f7ff f961 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002efa:	2100      	movs	r1, #0
 8002efc:	4808      	ldr	r0, [pc, #32]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002efe:	f009 fbf4 	bl	800c6ea <HAL_UARTEx_SetRxFifoThreshold>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f08:	f7ff f958 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002f0c:	4804      	ldr	r0, [pc, #16]	; (8002f20 <MX_USART1_UART_Init+0x90>)
 8002f0e:	f009 fb73 	bl	800c5f8 <HAL_UARTEx_EnableFifoMode>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f18:	f7ff f950 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20000508 	.word	0x20000508
 8002f24:	40013800 	.word	0x40013800

08002f28 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f2e:	4a23      	ldr	r2, [pc, #140]	; (8002fbc <MX_USART2_UART_Init+0x94>)
 8002f30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002f32:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f34:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002f38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f40:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f4e:	220c      	movs	r2, #12
 8002f50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f70:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f72:	f007 f860 	bl	800a036 <HAL_UART_Init>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002f7c:	f7ff f91e 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f80:	2100      	movs	r1, #0
 8002f82:	480d      	ldr	r0, [pc, #52]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f84:	f009 fb73 	bl	800c66e <HAL_UARTEx_SetTxFifoThreshold>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002f8e:	f7ff f915 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f92:	2100      	movs	r1, #0
 8002f94:	4808      	ldr	r0, [pc, #32]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002f96:	f009 fba8 	bl	800c6ea <HAL_UARTEx_SetRxFifoThreshold>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002fa0:	f7ff f90c 	bl	80021bc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002fa4:	4804      	ldr	r0, [pc, #16]	; (8002fb8 <MX_USART2_UART_Init+0x90>)
 8002fa6:	f009 fb27 	bl	800c5f8 <HAL_UARTEx_EnableFifoMode>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002fb0:	f7ff f904 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000598 	.word	0x20000598
 8002fbc:	40004400 	.word	0x40004400

08002fc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b096      	sub	sp, #88	; 0x58
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fd8:	f107 030c 	add.w	r3, r7, #12
 8002fdc:	2238      	movs	r2, #56	; 0x38
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f00d ffa7 	bl	8010f34 <memset>
  if(uartHandle->Instance==LPUART1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a8b      	ldr	r2, [pc, #556]	; (8003218 <HAL_UART_MspInit+0x258>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d156      	bne.n	800309e <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 8002ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ff8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4618      	mov	r0, r3
 8003000:	f005 fea6 	bl	8008d50 <HAL_RCCEx_PeriphCLKConfig>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800300a:	f7ff f8d7 	bl	80021bc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800300e:	2001      	movs	r0, #1
 8003010:	f7ff fe8a 	bl	8002d28 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003014:	2004      	movs	r0, #4
 8003016:	f7ff fe57 	bl	8002cc8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART_TXPin_Pin|LPUART_RXPin_Pin;
 800301a:	2303      	movs	r3, #3
 800301c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800302a:	2308      	movs	r3, #8
 800302c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800302e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003032:	4619      	mov	r1, r3
 8003034:	4879      	ldr	r0, [pc, #484]	; (800321c <HAL_UART_MspInit+0x25c>)
 8003036:	f004 f973 	bl	8007320 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel6;
 800303a:	4b79      	ldr	r3, [pc, #484]	; (8003220 <HAL_UART_MspInit+0x260>)
 800303c:	4a79      	ldr	r2, [pc, #484]	; (8003224 <HAL_UART_MspInit+0x264>)
 800303e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8003040:	4b77      	ldr	r3, [pc, #476]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003042:	2215      	movs	r2, #21
 8003044:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003046:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304c:	4b74      	ldr	r3, [pc, #464]	; (8003220 <HAL_UART_MspInit+0x260>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003054:	2280      	movs	r2, #128	; 0x80
 8003056:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003058:	4b71      	ldr	r3, [pc, #452]	; (8003220 <HAL_UART_MspInit+0x260>)
 800305a:	2200      	movs	r2, #0
 800305c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800305e:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003060:	2200      	movs	r2, #0
 8003062:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8003064:	4b6e      	ldr	r3, [pc, #440]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003066:	2200      	movs	r2, #0
 8003068:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800306a:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_UART_MspInit+0x260>)
 800306c:	2200      	movs	r2, #0
 800306e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8003070:	486b      	ldr	r0, [pc, #428]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003072:	f003 fb47 	bl	8006704 <HAL_DMA_Init>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800307c:	f7ff f89e 	bl	80021bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a67      	ldr	r2, [pc, #412]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003084:	67da      	str	r2, [r3, #124]	; 0x7c
 8003086:	4a66      	ldr	r2, [pc, #408]	; (8003220 <HAL_UART_MspInit+0x260>)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	2100      	movs	r1, #0
 8003090:	2026      	movs	r0, #38	; 0x26
 8003092:	f003 faf2 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8003096:	2026      	movs	r0, #38	; 0x26
 8003098:	f003 fb09 	bl	80066ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800309c:	e0b7      	b.n	800320e <HAL_UART_MspInit+0x24e>
  else if(uartHandle->Instance==USART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a61      	ldr	r2, [pc, #388]	; (8003228 <HAL_UART_MspInit+0x268>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d156      	bne.n	8003156 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030a8:	2301      	movs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 80030ac:	4b5f      	ldr	r3, [pc, #380]	; (800322c <HAL_UART_MspInit+0x26c>)
 80030ae:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 fe4b 	bl	8008d50 <HAL_RCCEx_PeriphCLKConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_UART_MspInit+0x104>
      Error_Handler();
 80030c0:	f7ff f87c 	bl	80021bc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80030c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030c8:	f7ff fe6a 	bl	8002da0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	2002      	movs	r0, #2
 80030ce:	f7ff fdfb 	bl	8002cc8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = UARTUSB_RXPin_Pin|UARTUSB_TXPin_Pin;
 80030d2:	23c0      	movs	r3, #192	; 0xc0
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030de:	2300      	movs	r3, #0
 80030e0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030e2:	2307      	movs	r3, #7
 80030e4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030ea:	4619      	mov	r1, r3
 80030ec:	4850      	ldr	r0, [pc, #320]	; (8003230 <HAL_UART_MspInit+0x270>)
 80030ee:	f004 f917 	bl	8007320 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel5;
 80030f2:	4b50      	ldr	r3, [pc, #320]	; (8003234 <HAL_UART_MspInit+0x274>)
 80030f4:	4a50      	ldr	r2, [pc, #320]	; (8003238 <HAL_UART_MspInit+0x278>)
 80030f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80030f8:	4b4e      	ldr	r3, [pc, #312]	; (8003234 <HAL_UART_MspInit+0x274>)
 80030fa:	2212      	movs	r2, #18
 80030fc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030fe:	4b4d      	ldr	r3, [pc, #308]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003100:	2210      	movs	r2, #16
 8003102:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003104:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800310a:	4b4a      	ldr	r3, [pc, #296]	; (8003234 <HAL_UART_MspInit+0x274>)
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003110:	4b48      	ldr	r3, [pc, #288]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003116:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800311c:	4b45      	ldr	r3, [pc, #276]	; (8003234 <HAL_UART_MspInit+0x274>)
 800311e:	2200      	movs	r2, #0
 8003120:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003122:	4b44      	ldr	r3, [pc, #272]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003124:	2200      	movs	r2, #0
 8003126:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003128:	4842      	ldr	r0, [pc, #264]	; (8003234 <HAL_UART_MspInit+0x274>)
 800312a:	f003 faeb 	bl	8006704 <HAL_DMA_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8003134:	f7ff f842 	bl	80021bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a3e      	ldr	r2, [pc, #248]	; (8003234 <HAL_UART_MspInit+0x274>)
 800313c:	679a      	str	r2, [r3, #120]	; 0x78
 800313e:	4a3d      	ldr	r2, [pc, #244]	; (8003234 <HAL_UART_MspInit+0x274>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003144:	2200      	movs	r2, #0
 8003146:	2103      	movs	r1, #3
 8003148:	2024      	movs	r0, #36	; 0x24
 800314a:	f003 fa96 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800314e:	2024      	movs	r0, #36	; 0x24
 8003150:	f003 faad 	bl	80066ae <HAL_NVIC_EnableIRQ>
}
 8003154:	e05b      	b.n	800320e <HAL_UART_MspInit+0x24e>
  else if(uartHandle->Instance==USART2)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a38      	ldr	r2, [pc, #224]	; (800323c <HAL_UART_MspInit+0x27c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d156      	bne.n	800320e <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003160:	2302      	movs	r3, #2
 8003162:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8003164:	4b36      	ldr	r3, [pc, #216]	; (8003240 <HAL_UART_MspInit+0x280>)
 8003166:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003168:	f107 030c 	add.w	r3, r7, #12
 800316c:	4618      	mov	r0, r3
 800316e:	f005 fdef 	bl	8008d50 <HAL_RCCEx_PeriphCLKConfig>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8003178:	f7ff f820 	bl	80021bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800317c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003180:	f7ff fdba 	bl	8002cf8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	2001      	movs	r0, #1
 8003186:	f7ff fd9f 	bl	8002cc8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = UARTGSM_RXPin_Pin|UARTGSM_TXPin_Pin;
 800318a:	230c      	movs	r3, #12
 800318c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	2302      	movs	r3, #2
 8003190:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003196:	2300      	movs	r3, #0
 8003198:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800319a:	2307      	movs	r3, #7
 800319c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80031a2:	4619      	mov	r1, r3
 80031a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a8:	f004 f8ba 	bl	8007320 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA2_Channel5;
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031ae:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_UART_MspInit+0x288>)
 80031b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031b4:	2213      	movs	r2, #19
 80031b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031c6:	2280      	movs	r2, #128	; 0x80
 80031c8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031ca:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031d0:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031d8:	2200      	movs	r2, #0
 80031da:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031de:	2200      	movs	r2, #0
 80031e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80031e2:	4818      	ldr	r0, [pc, #96]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031e4:	f003 fa8e 	bl	8006704 <HAL_DMA_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_UART_MspInit+0x232>
      Error_Handler();
 80031ee:	f7fe ffe5 	bl	80021bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031f6:	67da      	str	r2, [r3, #124]	; 0x7c
 80031f8:	4a12      	ldr	r2, [pc, #72]	; (8003244 <HAL_UART_MspInit+0x284>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2102      	movs	r1, #2
 8003202:	2025      	movs	r0, #37	; 0x25
 8003204:	f003 fa39 	bl	800667a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003208:	2025      	movs	r0, #37	; 0x25
 800320a:	f003 fa50 	bl	80066ae <HAL_NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3758      	adds	r7, #88	; 0x58
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40008000 	.word	0x40008000
 800321c:	48000800 	.word	0x48000800
 8003220:	20000628 	.word	0x20000628
 8003224:	4002006c 	.word	0x4002006c
 8003228:	40013800 	.word	0x40013800
 800322c:	00030001 	.word	0x00030001
 8003230:	48000400 	.word	0x48000400
 8003234:	20000688 	.word	0x20000688
 8003238:	40020058 	.word	0x40020058
 800323c:	40004400 	.word	0x40004400
 8003240:	000c0004 	.word	0x000c0004
 8003244:	200006e8 	.word	0x200006e8
 8003248:	40020458 	.word	0x40020458

0800324c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_UART_MspDeInit+0x94>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d10f      	bne.n	800327e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800325e:	2001      	movs	r0, #1
 8003260:	f7ff fd8c 	bl	8002d7c <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    PC0     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOC, LPUART_TXPin_Pin|LPUART_RXPin_Pin);
 8003264:	2103      	movs	r1, #3
 8003266:	481f      	ldr	r0, [pc, #124]	; (80032e4 <HAL_UART_MspDeInit+0x98>)
 8003268:	f004 f9ba 	bl	80075e0 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003270:	4618      	mov	r0, r3
 8003272:	f003 faef 	bl	8006854 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8003276:	2026      	movs	r0, #38	; 0x26
 8003278:	f003 fa27 	bl	80066ca <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800327c:	e02b      	b.n	80032d6 <HAL_UART_MspDeInit+0x8a>
  else if(uartHandle->Instance==USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_UART_MspDeInit+0x9c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d110      	bne.n	80032aa <HAL_UART_MspDeInit+0x5e>
    __HAL_RCC_USART1_CLK_DISABLE();
 8003288:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800328c:	f7ff fda0 	bl	8002dd0 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOB, UARTUSB_RXPin_Pin|UARTUSB_TXPin_Pin);
 8003290:	21c0      	movs	r1, #192	; 0xc0
 8003292:	4816      	ldr	r0, [pc, #88]	; (80032ec <HAL_UART_MspDeInit+0xa0>)
 8003294:	f004 f9a4 	bl	80075e0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fad9 	bl	8006854 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80032a2:	2024      	movs	r0, #36	; 0x24
 80032a4:	f003 fa11 	bl	80066ca <HAL_NVIC_DisableIRQ>
}
 80032a8:	e015      	b.n	80032d6 <HAL_UART_MspDeInit+0x8a>
  else if(uartHandle->Instance==USART2)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_UART_MspDeInit+0xa4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d110      	bne.n	80032d6 <HAL_UART_MspDeInit+0x8a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80032b4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032b8:	f7ff fd4e 	bl	8002d58 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, UARTGSM_RXPin_Pin|UARTGSM_TXPin_Pin);
 80032bc:	210c      	movs	r1, #12
 80032be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c2:	f004 f98d 	bl	80075e0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fac2 	bl	8006854 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80032d0:	2025      	movs	r0, #37	; 0x25
 80032d2:	f003 f9fa 	bl	80066ca <HAL_NVIC_DisableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40008000 	.word	0x40008000
 80032e4:	48000800 	.word	0x48000800
 80032e8:	40013800 	.word	0x40013800
 80032ec:	48000400 	.word	0x48000400
 80032f0:	40004400 	.word	0x40004400

080032f4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart2.Instance) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <HAL_UARTEx_RxEventCallback+0x44>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d105      	bne.n	8003318 <HAL_UARTEx_RxEventCallback+0x24>
		GSM_UART_RXCallback(huart, Size);
 800330c:	887b      	ldrh	r3, [r7, #2]
 800330e:	4619      	mov	r1, r3
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f815 	bl	8003340 <GSM_UART_RXCallback>
	}
	else if (huart->Instance == hlpuart1.Instance) {

		BT_UART_RXCallback(huart, Size);
	}
}
 8003316:	e00a      	b.n	800332e <HAL_UARTEx_RxEventCallback+0x3a>
	else if (huart->Instance == hlpuart1.Instance) {
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <HAL_UARTEx_RxEventCallback+0x48>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d104      	bne.n	800332e <HAL_UARTEx_RxEventCallback+0x3a>
		BT_UART_RXCallback(huart, Size);
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe fad7 	bl	80018dc <BT_UART_RXCallback>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000598 	.word	0x20000598
 800333c:	20000478 	.word	0x20000478

08003340 <GSM_UART_RXCallback>:
static uint16_t oldPos = 0;
static uint16_t newPos = 0;
static uint16_t rxSize = 0;
static uint8_t offst = 0;

void GSM_UART_RXCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
	oldPos = newPos;
 800334c:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <GSM_UART_RXCallback+0xb0>)
 800334e:	881a      	ldrh	r2, [r3, #0]
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 8003352:	801a      	strh	r2, [r3, #0]

	if (oldPos+Size > MainBuf_SIZE) {
 8003354:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	4413      	add	r3, r2
 800335e:	2bc8      	cmp	r3, #200	; 0xc8
 8003360:	dd22      	ble.n	80033a8 <GSM_UART_RXCallback+0x68>
		uint16_t datatocopy = MainBuf_SIZE-oldPos;
 8003362:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800336a:	81fb      	strh	r3, [r7, #14]
		memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <GSM_UART_RXCallback+0xb8>)
 8003374:	4413      	add	r3, r2
 8003376:	89fa      	ldrh	r2, [r7, #14]
 8003378:	4920      	ldr	r1, [pc, #128]	; (80033fc <GSM_UART_RXCallback+0xbc>)
 800337a:	4618      	mov	r0, r3
 800337c:	f00d fdcc 	bl	8010f18 <memcpy>
		oldPos = 0;
 8003380:	4b1c      	ldr	r3, [pc, #112]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 8003382:	2200      	movs	r2, #0
 8003384:	801a      	strh	r2, [r3, #0]
		memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));
 8003386:	89fb      	ldrh	r3, [r7, #14]
 8003388:	4a1c      	ldr	r2, [pc, #112]	; (80033fc <GSM_UART_RXCallback+0xbc>)
 800338a:	1899      	adds	r1, r3, r2
 800338c:	887a      	ldrh	r2, [r7, #2]
 800338e:	89fb      	ldrh	r3, [r7, #14]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	461a      	mov	r2, r3
 8003394:	4818      	ldr	r0, [pc, #96]	; (80033f8 <GSM_UART_RXCallback+0xb8>)
 8003396:	f00d fdbf 	bl	8010f18 <memcpy>
		newPos = (Size-datatocopy);
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	89fb      	ldrh	r3, [r7, #14]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <GSM_UART_RXCallback+0xb0>)
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	e010      	b.n	80033ca <GSM_UART_RXCallback+0x8a>
		}
	else {
		memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <GSM_UART_RXCallback+0xb8>)
 80033b0:	4413      	add	r3, r2
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	4911      	ldr	r1, [pc, #68]	; (80033fc <GSM_UART_RXCallback+0xbc>)
 80033b6:	4618      	mov	r0, r3
 80033b8:	f00d fdae 	bl	8010f18 <memcpy>
		newPos = Size+oldPos;
 80033bc:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <GSM_UART_RXCallback+0xb4>)
 80033be:	881a      	ldrh	r2, [r3, #0]
 80033c0:	887b      	ldrh	r3, [r7, #2]
 80033c2:	4413      	add	r3, r2
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	4b0a      	ldr	r3, [pc, #40]	; (80033f0 <GSM_UART_RXCallback+0xb0>)
 80033c8:	801a      	strh	r2, [r3, #0]
	}

	rxSize = Size;
 80033ca:	4a0d      	ldr	r2, [pc, #52]	; (8003400 <GSM_UART_RXCallback+0xc0>)
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	8013      	strh	r3, [r2, #0]
	flag_RX_Done = 1;
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <GSM_UART_RXCallback+0xc4>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
	UTIL_TIMER_Stop(&timerTimeout);
 80033d6:	480c      	ldr	r0, [pc, #48]	; (8003408 <GSM_UART_RXCallback+0xc8>)
 80033d8:	f00d f92e 	bl	8010638 <UTIL_TIMER_Stop>
	HAL_UART_AbortReceive(huart_gsm);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <GSM_UART_RXCallback+0xcc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f006 fff7 	bl	800a3d4 <HAL_UART_AbortReceive>

	/*If more Data is expected: */
	//HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
	//__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);

}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	20000892 	.word	0x20000892
 80033f4:	20000890 	.word	0x20000890
 80033f8:	200007c8 	.word	0x200007c8
 80033fc:	20000764 	.word	0x20000764
 8003400:	20000894 	.word	0x20000894
 8003404:	20000761 	.word	0x20000761
 8003408:	20000748 	.word	0x20000748
 800340c:	20000004 	.word	0x20000004

08003410 <GSMSimpleAT>:
/*
 * @brief Sends a simple "AT" command to Module, Module should respond with OK. Also necessary for auto bauding function of the module.
 * @retval 1: Ok // 102: Timeout, no response  // 101: unexpected wrong data received (?)
 *
 */
uint8_t GSMSimpleAT(void){
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0

	SetUpTXRXCycle();
 8003414:	f000 fbe4 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT\r", sizeof("AT\r"), 300);
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <GSMSimpleAT+0x60>)
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003420:	2204      	movs	r2, #4
 8003422:	4914      	ldr	r1, [pc, #80]	; (8003474 <GSMSimpleAT+0x64>)
 8003424:	f006 fe57 	bl	800a0d6 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003428:	bf00      	nop
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <GSMSimpleAT+0x68>)
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d103      	bne.n	800343a <GSMSimpleAT+0x2a>
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <GSMSimpleAT+0x6c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f7      	beq.n	800342a <GSMSimpleAT+0x1a>

	if (flag_timeout) {
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <GSMSimpleAT+0x68>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <GSMSimpleAT+0x36>
		return 102;
 8003442:	2366      	movs	r3, #102	; 0x66
 8003444:	e012      	b.n	800346c <GSMSimpleAT+0x5c>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT\r") + 2; //get offset index
 8003446:	4b0e      	ldr	r3, [pc, #56]	; (8003480 <GSMSimpleAT+0x70>)
 8003448:	2206      	movs	r2, #6
 800344a:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "OK", 2) == 0){
 800344c:	4b0c      	ldr	r3, [pc, #48]	; (8003480 <GSMSimpleAT+0x70>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <GSMSimpleAT+0x74>)
 8003454:	4413      	add	r3, r2
 8003456:	2202      	movs	r2, #2
 8003458:	490b      	ldr	r1, [pc, #44]	; (8003488 <GSMSimpleAT+0x78>)
 800345a:	4618      	mov	r0, r3
 800345c:	f00e fa12 	bl	8011884 <strncmp>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <GSMSimpleAT+0x5a>
			return 1;
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <GSMSimpleAT+0x5c>
		}
		else {
			return 101;
 800346a:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000004 	.word	0x20000004
 8003474:	08014c84 	.word	0x08014c84
 8003478:	20000760 	.word	0x20000760
 800347c:	20000761 	.word	0x20000761
 8003480:	20000896 	.word	0x20000896
 8003484:	200007c8 	.word	0x200007c8
 8003488:	08014c88 	.word	0x08014c88

0800348c <GSMCheckSimInsert>:
/*
 * @brief Sends special AT command to Module and evaluates the answer to get Simcard insertion status
 * @retval 1: Sim Inserted // 0: Sim Not inserted // 101: unexpected wrong data received (?) // 102: Timeout, no response
 *
 */
uint8_t GSMCheckSimInsert(void){
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0

	SetUpTXRXCycle();
 8003490:	f000 fba6 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CSMINS?\r", sizeof("AT+CSMINS?\r"), 300);
 8003494:	4b1b      	ldr	r3, [pc, #108]	; (8003504 <GSMCheckSimInsert+0x78>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800349c:	220c      	movs	r2, #12
 800349e:	491a      	ldr	r1, [pc, #104]	; (8003508 <GSMCheckSimInsert+0x7c>)
 80034a0:	f006 fe19 	bl	800a0d6 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 80034a4:	bf00      	nop
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <GSMCheckSimInsert+0x80>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <GSMCheckSimInsert+0x2a>
 80034ae:	4b18      	ldr	r3, [pc, #96]	; (8003510 <GSMCheckSimInsert+0x84>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f7      	beq.n	80034a6 <GSMCheckSimInsert+0x1a>

	if (flag_timeout) {
 80034b6:	4b15      	ldr	r3, [pc, #84]	; (800350c <GSMCheckSimInsert+0x80>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <GSMCheckSimInsert+0x36>
			return 102;
 80034be:	2366      	movs	r3, #102	; 0x66
 80034c0:	e01e      	b.n	8003500 <GSMCheckSimInsert+0x74>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT+CSMINS?\r") + 2; //get offset index
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034c4:	220e      	movs	r2, #14
 80034c6:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "+CSMINS", 7) == 0){
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <GSMCheckSimInsert+0x8c>)
 80034d0:	4413      	add	r3, r2
 80034d2:	2207      	movs	r2, #7
 80034d4:	4911      	ldr	r1, [pc, #68]	; (800351c <GSMCheckSimInsert+0x90>)
 80034d6:	4618      	mov	r0, r3
 80034d8:	f00e f9d4 	bl	8011884 <strncmp>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <GSMCheckSimInsert+0x72>

			offst = offst + 11; //go to sim inserted value
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	330b      	adds	r3, #11
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034ec:	701a      	strb	r2, [r3, #0]

			return (uint8_t)MainBuf[offst] - 48; //convert ASCII 0 or 1 to uint 0 or 1
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <GSMCheckSimInsert+0x88>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <GSMCheckSimInsert+0x8c>)
 80034f6:	5c9b      	ldrb	r3, [r3, r2]
 80034f8:	3b30      	subs	r3, #48	; 0x30
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	e000      	b.n	8003500 <GSMCheckSimInsert+0x74>
		}
		else {
			return 101;
 80034fe:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 8003500:	4618      	mov	r0, r3
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000004 	.word	0x20000004
 8003508:	08014c8c 	.word	0x08014c8c
 800350c:	20000760 	.word	0x20000760
 8003510:	20000761 	.word	0x20000761
 8003514:	20000896 	.word	0x20000896
 8003518:	200007c8 	.word	0x200007c8
 800351c:	08014c98 	.word	0x08014c98

08003520 <GSMGetRegState>:
 *  // 2: Not registered, but MT is currently searching // 3: Registration denied // 4: unknown
 *  // 5: Registered with Roaming
 *  // 101: unexpected wrong data received (?) // 102: Timeout, no response
 *
 */
uint8_t GSMGetRegState(void){
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0

	SetUpTXRXCycle();
 8003524:	f000 fb5c 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CREG?\r", sizeof("AT+CREG?\r"), 300);
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <GSMGetRegState+0x78>)
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003530:	220a      	movs	r2, #10
 8003532:	491a      	ldr	r1, [pc, #104]	; (800359c <GSMGetRegState+0x7c>)
 8003534:	f006 fdcf 	bl	800a0d6 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003538:	bf00      	nop
 800353a:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <GSMGetRegState+0x80>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d103      	bne.n	800354a <GSMGetRegState+0x2a>
 8003542:	4b18      	ldr	r3, [pc, #96]	; (80035a4 <GSMGetRegState+0x84>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d0f7      	beq.n	800353a <GSMGetRegState+0x1a>

	if (flag_timeout) {
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <GSMGetRegState+0x80>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <GSMGetRegState+0x36>
			return 102;
 8003552:	2366      	movs	r3, #102	; 0x66
 8003554:	e01e      	b.n	8003594 <GSMGetRegState+0x74>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT+CREG?\r") + 2; //get offset index
 8003556:	4b14      	ldr	r3, [pc, #80]	; (80035a8 <GSMGetRegState+0x88>)
 8003558:	220c      	movs	r2, #12
 800355a:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "+CREG", 5) == 0){
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <GSMGetRegState+0x88>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <GSMGetRegState+0x8c>)
 8003564:	4413      	add	r3, r2
 8003566:	2205      	movs	r2, #5
 8003568:	4911      	ldr	r1, [pc, #68]	; (80035b0 <GSMGetRegState+0x90>)
 800356a:	4618      	mov	r0, r3
 800356c:	f00e f98a 	bl	8011884 <strncmp>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <GSMGetRegState+0x72>

			offst = offst + 9; //go to net reg value
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <GSMGetRegState+0x88>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	3309      	adds	r3, #9
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <GSMGetRegState+0x88>)
 8003580:	701a      	strb	r2, [r3, #0]

			return (uint8_t)MainBuf[offst] - 48; //convert ASCII to uint
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <GSMGetRegState+0x88>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	4b08      	ldr	r3, [pc, #32]	; (80035ac <GSMGetRegState+0x8c>)
 800358a:	5c9b      	ldrb	r3, [r3, r2]
 800358c:	3b30      	subs	r3, #48	; 0x30
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e000      	b.n	8003594 <GSMGetRegState+0x74>
		}
		else {
			return 101;
 8003592:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000004 	.word	0x20000004
 800359c:	08014ca0 	.word	0x08014ca0
 80035a0:	20000760 	.word	0x20000760
 80035a4:	20000761 	.word	0x20000761
 80035a8:	20000896 	.word	0x20000896
 80035ac:	200007c8 	.word	0x200007c8
 80035b0:	08014cac 	.word	0x08014cac

080035b4 <GSMGetSignalStrength>:
 * @retval [RSSI] 0: -115 dBm or less // 1:  -111 dBm // 2...30:  -110... -54 dBm //
 * 31: -52 dBm or greater // 99:  not known or not detectable //
 *  // 101: unexpected wrong data received (?) // 102: Timeout, no response
 *
 */
uint8_t GSMGetSignalStrength(void){
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0

	SetUpTXRXCycle();
 80035b8:	f000 fb12 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CSQ\r", sizeof("AT+CSQ\r"), 300);
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <GSMGetSignalStrength+0x84>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80035c4:	2208      	movs	r2, #8
 80035c6:	491d      	ldr	r1, [pc, #116]	; (800363c <GSMGetSignalStrength+0x88>)
 80035c8:	f006 fd85 	bl	800a0d6 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 80035cc:	bf00      	nop
 80035ce:	4b1c      	ldr	r3, [pc, #112]	; (8003640 <GSMGetSignalStrength+0x8c>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d103      	bne.n	80035de <GSMGetSignalStrength+0x2a>
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <GSMGetSignalStrength+0x90>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d0f7      	beq.n	80035ce <GSMGetSignalStrength+0x1a>

	if (flag_timeout) {
 80035de:	4b18      	ldr	r3, [pc, #96]	; (8003640 <GSMGetSignalStrength+0x8c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <GSMGetSignalStrength+0x36>
			return 102;
 80035e6:	2366      	movs	r3, #102	; 0x66
 80035e8:	e023      	b.n	8003632 <GSMGetSignalStrength+0x7e>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT+CSQ\r") + 2; //get offset index
 80035ea:	4b17      	ldr	r3, [pc, #92]	; (8003648 <GSMGetSignalStrength+0x94>)
 80035ec:	220a      	movs	r2, #10
 80035ee:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "+CSQ", 4) == 0){
 80035f0:	4b15      	ldr	r3, [pc, #84]	; (8003648 <GSMGetSignalStrength+0x94>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <GSMGetSignalStrength+0x98>)
 80035f8:	4413      	add	r3, r2
 80035fa:	2204      	movs	r2, #4
 80035fc:	4914      	ldr	r1, [pc, #80]	; (8003650 <GSMGetSignalStrength+0x9c>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f00e f940 	bl	8011884 <strncmp>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d112      	bne.n	8003630 <GSMGetSignalStrength+0x7c>

			offst = offst + 6; //go to RSSI value
 800360a:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <GSMGetSignalStrength+0x94>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	3306      	adds	r3, #6
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <GSMGetSignalStrength+0x94>)
 8003614:	701a      	strb	r2, [r3, #0]
			return (uint8_t)strtol((char*)MainBuf+offst, NULL, 10);
 8003616:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <GSMGetSignalStrength+0x94>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <GSMGetSignalStrength+0x98>)
 800361e:	4413      	add	r3, r2
 8003620:	220a      	movs	r2, #10
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f00e f9d3 	bl	80119d0 <strtol>
 800362a:	4603      	mov	r3, r0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	e000      	b.n	8003632 <GSMGetSignalStrength+0x7e>

		}
		else {
			return 101;
 8003630:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 8003632:	4618      	mov	r0, r3
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000004 	.word	0x20000004
 800363c:	08014cb4 	.word	0x08014cb4
 8003640:	20000760 	.word	0x20000760
 8003644:	20000761 	.word	0x20000761
 8003648:	20000896 	.word	0x20000896
 800364c:	200007c8 	.word	0x200007c8
 8003650:	08014cbc 	.word	0x08014cbc

08003654 <GSMGetBatteryCharge>:
 * @param: uint16_t * voltagepntr - Module can write its current supply voltage to this address,
 * 									Format: 4 digit usint, for example 3758 means 3,758 Volts supply
 * @retval 1 - 100: Battery Charge in Percent // 101: unexpected wrong data received (?) // 102: Timeout, no response
 *
 */
uint8_t GSMGetBatteryCharge(uint16_t * voltagepntr){
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

	SetUpTXRXCycle();
 800365c:	f000 fac0 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CBC\r", sizeof("AT+CBC\r"), 300);
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <GSMGetBatteryCharge+0xd0>)
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003668:	2208      	movs	r2, #8
 800366a:	492f      	ldr	r1, [pc, #188]	; (8003728 <GSMGetBatteryCharge+0xd4>)
 800366c:	f006 fd33 	bl	800a0d6 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003670:	bf00      	nop
 8003672:	4b2e      	ldr	r3, [pc, #184]	; (800372c <GSMGetBatteryCharge+0xd8>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <GSMGetBatteryCharge+0x2e>
 800367a:	4b2d      	ldr	r3, [pc, #180]	; (8003730 <GSMGetBatteryCharge+0xdc>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f7      	beq.n	8003672 <GSMGetBatteryCharge+0x1e>

	if (flag_timeout) {
 8003682:	4b2a      	ldr	r3, [pc, #168]	; (800372c <GSMGetBatteryCharge+0xd8>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <GSMGetBatteryCharge+0x3a>
			return 102;
 800368a:	2366      	movs	r3, #102	; 0x66
 800368c:	e045      	b.n	800371a <GSMGetBatteryCharge+0xc6>
	}
	else{
		/* check if expected Data
		 * Module response: (echo of command) + \0 + \r + \n + (RESPONSE STRING acc. to AT-Command-Set) + \r +\n
		 * */
		offst = sizeof("AT+CBC\r") + 2; //get offset index
 800368e:	4b29      	ldr	r3, [pc, #164]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 8003690:	220a      	movs	r2, #10
 8003692:	701a      	strb	r2, [r3, #0]

		if (strncmp((char*)MainBuf+offst, "+CBC", 4) == 0){
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <GSMGetBatteryCharge+0xe4>)
 800369c:	4413      	add	r3, r2
 800369e:	2204      	movs	r2, #4
 80036a0:	4926      	ldr	r1, [pc, #152]	; (800373c <GSMGetBatteryCharge+0xe8>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f00e f8ee 	bl	8011884 <strncmp>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d134      	bne.n	8003718 <GSMGetBatteryCharge+0xc4>
			offst = offst + 8; //go to percent value
 80036ae:	4b21      	ldr	r3, [pc, #132]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	3308      	adds	r3, #8
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	4b1f      	ldr	r3, [pc, #124]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036b8:	701a      	strb	r2, [r3, #0]
			uint8_t percentage = (uint8_t)strtol((char*)MainBuf+offst, NULL, 10);
 80036ba:	4b1e      	ldr	r3, [pc, #120]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <GSMGetBatteryCharge+0xe4>)
 80036c2:	4413      	add	r3, r2
 80036c4:	220a      	movs	r2, #10
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f00e f981 	bl	80119d0 <strtol>
 80036ce:	4603      	mov	r3, r0
 80036d0:	73fb      	strb	r3, [r7, #15]

			if (voltagepntr != NULL) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d01d      	beq.n	8003714 <GSMGetBatteryCharge+0xc0>
				(percentage/10 >= 1) ? (offst += 3) : (offst += 2);
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b09      	cmp	r3, #9
 80036dc:	d906      	bls.n	80036ec <GSMGetBatteryCharge+0x98>
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	3303      	adds	r3, #3
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e005      	b.n	80036f8 <GSMGetBatteryCharge+0xa4>
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	3302      	adds	r3, #2
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036f6:	701a      	strb	r2, [r3, #0]
				*voltagepntr = (uint16_t)strtol((char*)MainBuf+offst, NULL, 10);
 80036f8:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <GSMGetBatteryCharge+0xe0>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	461a      	mov	r2, r3
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <GSMGetBatteryCharge+0xe4>)
 8003700:	4413      	add	r3, r2
 8003702:	220a      	movs	r2, #10
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f00e f962 	bl	80119d0 <strtol>
 800370c:	4603      	mov	r3, r0
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	801a      	strh	r2, [r3, #0]
			}
			return percentage;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	e000      	b.n	800371a <GSMGetBatteryCharge+0xc6>
		}
		else {
			return 101;
 8003718:	2365      	movs	r3, #101	; 0x65
		}
	}
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000004 	.word	0x20000004
 8003728:	08014cc4 	.word	0x08014cc4
 800372c:	20000760 	.word	0x20000760
 8003730:	20000761 	.word	0x20000761
 8003734:	20000896 	.word	0x20000896
 8003738:	200007c8 	.word	0x200007c8
 800373c:	08014ccc 	.word	0x08014ccc

08003740 <GSMSendSMS>:
 * @retval  1: OK, SMS Sent // 101: unexpected wrong data received (Probably Error) //
 * 			102: Timeout, no response - not done//
 * 			103: Message too long
 *
 */
uint8_t GSMSendSMS(const char * targetnr, const char * message){
 8003740:	b590      	push	{r4, r7, lr}
 8003742:	b0ad      	sub	sp, #180	; 0xb4
 8003744:	af02      	add	r7, sp, #8
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]

	char sendtext[SMS_MSG_LEN];
	static uint8_t endmsg_nr = 26;

	if (strlen(message)+1 > SMS_MSG_LEN){ // strlen skips the \0 terminator, but its necessary
 800374a:	6838      	ldr	r0, [r7, #0]
 800374c:	f7fc fd18 	bl	8000180 <strlen>
 8003750:	4603      	mov	r3, r0
 8003752:	3301      	adds	r3, #1
 8003754:	2ba0      	cmp	r3, #160	; 0xa0
 8003756:	d901      	bls.n	800375c <GSMSendSMS+0x1c>
		return 103;
 8003758:	2367      	movs	r3, #103	; 0x67
 800375a:	e0f8      	b.n	800394e <GSMSendSMS+0x20e>
	}



	/*1 .Transmit AT Command for SMS Text Mode in Blocking Mode*/
	SetUpTXRXCycle();
 800375c:	f000 fa40 	bl	8003be0 <SetUpTXRXCycle>
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CMGF=1\r", sizeof("AT+CMGF=1\r"), 300);
 8003760:	4b7d      	ldr	r3, [pc, #500]	; (8003958 <GSMSendSMS+0x218>)
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003768:	220b      	movs	r2, #11
 800376a:	497c      	ldr	r1, [pc, #496]	; (800395c <GSMSendSMS+0x21c>)
 800376c:	f006 fcb3 	bl	800a0d6 <HAL_UART_Transmit>

	/*1.1 Wait until Timeout flag or Data Received flag and verify Answer */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003770:	bf00      	nop
 8003772:	4b7b      	ldr	r3, [pc, #492]	; (8003960 <GSMSendSMS+0x220>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d103      	bne.n	8003782 <GSMSendSMS+0x42>
 800377a:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <GSMSendSMS+0x224>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f7      	beq.n	8003772 <GSMSendSMS+0x32>

	if (flag_timeout) {
 8003782:	4b77      	ldr	r3, [pc, #476]	; (8003960 <GSMSendSMS+0x220>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <GSMSendSMS+0x4e>
			return 102;
 800378a:	2366      	movs	r3, #102	; 0x66
 800378c:	e0df      	b.n	800394e <GSMSendSMS+0x20e>
	}
	offst = sizeof("AT+CMGF=1\r") + 2; //get offset index
 800378e:	4b76      	ldr	r3, [pc, #472]	; (8003968 <GSMSendSMS+0x228>)
 8003790:	220d      	movs	r2, #13
 8003792:	701a      	strb	r2, [r3, #0]
	if (strncmp((char*)MainBuf+offst, "OK", 2) != 0  && strncmp((char*)MainBuf+offst+1, "OK", 2) != 0 ){
 8003794:	4b74      	ldr	r3, [pc, #464]	; (8003968 <GSMSendSMS+0x228>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	4b74      	ldr	r3, [pc, #464]	; (800396c <GSMSendSMS+0x22c>)
 800379c:	4413      	add	r3, r2
 800379e:	2202      	movs	r2, #2
 80037a0:	4973      	ldr	r1, [pc, #460]	; (8003970 <GSMSendSMS+0x230>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	f00e f86e 	bl	8011884 <strncmp>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <GSMSendSMS+0x8c>
 80037ae:	4b6e      	ldr	r3, [pc, #440]	; (8003968 <GSMSendSMS+0x228>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	4a6d      	ldr	r2, [pc, #436]	; (800396c <GSMSendSMS+0x22c>)
 80037b6:	4413      	add	r3, r2
 80037b8:	2202      	movs	r2, #2
 80037ba:	496d      	ldr	r1, [pc, #436]	; (8003970 <GSMSendSMS+0x230>)
 80037bc:	4618      	mov	r0, r3
 80037be:	f00e f861 	bl	8011884 <strncmp>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <GSMSendSMS+0x8c>
		return 101; //Error, probably no SIM Card or not registered to GSM Network
 80037c8:	2365      	movs	r3, #101	; 0x65
 80037ca:	e0c0      	b.n	800394e <GSMSendSMS+0x20e>
	}

	/*2. Transmit AT Switch to Textmode Command for SMS */
	HAL_Delay(300);
 80037cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80037d0:	f7fe ff66 	bl	80026a0 <HAL_Delay>
	SetUpTXRXCycle();
 80037d4:	f000 fa04 	bl	8003be0 <SetUpTXRXCycle>

	strcpy(sendtext, "AT+CMGS=\"");
 80037d8:	f107 0308 	add.w	r3, r7, #8
 80037dc:	4a65      	ldr	r2, [pc, #404]	; (8003974 <GSMSendSMS+0x234>)
 80037de:	ca07      	ldmia	r2, {r0, r1, r2}
 80037e0:	c303      	stmia	r3!, {r0, r1}
 80037e2:	801a      	strh	r2, [r3, #0]
	strcat(sendtext, targetnr);
 80037e4:	f107 0308 	add.w	r3, r7, #8
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f00e f826 	bl	801183c <strcat>
	strcat(sendtext, "\"\r");
 80037f0:	f107 0308 	add.w	r3, r7, #8
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fcc3 	bl	8000180 <strlen>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	f107 0308 	add.w	r3, r7, #8
 8003802:	4413      	add	r3, r2
 8003804:	4a5c      	ldr	r2, [pc, #368]	; (8003978 <GSMSendSMS+0x238>)
 8003806:	8811      	ldrh	r1, [r2, #0]
 8003808:	7892      	ldrb	r2, [r2, #2]
 800380a:	8019      	strh	r1, [r3, #0]
 800380c:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(huart_gsm, (uint8_t *)sendtext, strlen(sendtext), 300);
 800380e:	4b52      	ldr	r3, [pc, #328]	; (8003958 <GSMSendSMS+0x218>)
 8003810:	681c      	ldr	r4, [r3, #0]
 8003812:	f107 0308 	add.w	r3, r7, #8
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fcb2 	bl	8000180 <strlen>
 800381c:	4603      	mov	r3, r0
 800381e:	b29a      	uxth	r2, r3
 8003820:	f107 0108 	add.w	r1, r7, #8
 8003824:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003828:	4620      	mov	r0, r4
 800382a:	f006 fc54 	bl	800a0d6 <HAL_UART_Transmit>
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 800382e:	bf00      	nop
 8003830:	4b4b      	ldr	r3, [pc, #300]	; (8003960 <GSMSendSMS+0x220>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d103      	bne.n	8003840 <GSMSendSMS+0x100>
 8003838:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <GSMSendSMS+0x224>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f7      	beq.n	8003830 <GSMSendSMS+0xf0>

	/*2.1 After Echo is received send text to send */
	HAL_Delay(300);
 8003840:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003844:	f7fe ff2c 	bl	80026a0 <HAL_Delay>
	SetUpTXRXCycle();
 8003848:	f000 f9ca 	bl	8003be0 <SetUpTXRXCycle>

	memset(sendtext, 0, SMS_MSG_LEN);
 800384c:	f107 0308 	add.w	r3, r7, #8
 8003850:	22a0      	movs	r2, #160	; 0xa0
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f00d fb6d 	bl	8010f34 <memset>
	strcpy(sendtext, message);
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	6839      	ldr	r1, [r7, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f00e f807 	bl	8011874 <strcpy>

	HAL_UART_Transmit(huart_gsm, (uint8_t *)sendtext, strlen(sendtext), 300);
 8003866:	4b3c      	ldr	r3, [pc, #240]	; (8003958 <GSMSendSMS+0x218>)
 8003868:	681c      	ldr	r4, [r3, #0]
 800386a:	f107 0308 	add.w	r3, r7, #8
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fc86 	bl	8000180 <strlen>
 8003874:	4603      	mov	r3, r0
 8003876:	b29a      	uxth	r2, r3
 8003878:	f107 0108 	add.w	r1, r7, #8
 800387c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003880:	4620      	mov	r0, r4
 8003882:	f006 fc28 	bl	800a0d6 <HAL_UART_Transmit>
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003886:	bf00      	nop
 8003888:	4b35      	ldr	r3, [pc, #212]	; (8003960 <GSMSendSMS+0x220>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <GSMSendSMS+0x158>
 8003890:	4b34      	ldr	r3, [pc, #208]	; (8003964 <GSMSendSMS+0x224>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f7      	beq.n	8003888 <GSMSendSMS+0x148>


	/*2.2 After Echo is received send END Character to terminate SMS */
	HAL_Delay(300);
 8003898:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800389c:	f7fe ff00 	bl	80026a0 <HAL_Delay>

	/*SetUp Custom TX RX Cycle because of higher Timeout*/
	memset(RxBuf, 0, RxBuf_SIZE);
 80038a0:	2264      	movs	r2, #100	; 0x64
 80038a2:	2100      	movs	r1, #0
 80038a4:	4835      	ldr	r0, [pc, #212]	; (800397c <GSMSendSMS+0x23c>)
 80038a6:	f00d fb45 	bl	8010f34 <memset>
	memset(MainBuf, 0, MainBuf_SIZE);
 80038aa:	22c8      	movs	r2, #200	; 0xc8
 80038ac:	2100      	movs	r1, #0
 80038ae:	482f      	ldr	r0, [pc, #188]	; (800396c <GSMSendSMS+0x22c>)
 80038b0:	f00d fb40 	bl	8010f34 <memset>
	oldPos = 0;
 80038b4:	4b32      	ldr	r3, [pc, #200]	; (8003980 <GSMSendSMS+0x240>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 80038ba:	4b32      	ldr	r3, [pc, #200]	; (8003984 <GSMSendSMS+0x244>)
 80038bc:	2200      	movs	r2, #0
 80038be:	801a      	strh	r2, [r3, #0]
	flag_RX_Done = 0;
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <GSMSendSMS+0x224>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
	rxSize = 0;
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <GSMSendSMS+0x248>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	801a      	strh	r2, [r3, #0]
	flag_timeout = 0;
 80038cc:	4b24      	ldr	r3, [pc, #144]	; (8003960 <GSMSendSMS+0x220>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	701a      	strb	r2, [r3, #0]
	/*Start DMA to be prepared for RX*/
	HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
 80038d2:	4b21      	ldr	r3, [pc, #132]	; (8003958 <GSMSendSMS+0x218>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2264      	movs	r2, #100	; 0x64
 80038d8:	4928      	ldr	r1, [pc, #160]	; (800397c <GSMSendSMS+0x23c>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f008 ff43 	bl	800c766 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);
 80038e0:	4b2a      	ldr	r3, [pc, #168]	; (800398c <GSMSendSMS+0x24c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b28      	ldr	r3, [pc, #160]	; (800398c <GSMSendSMS+0x24c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0204 	bic.w	r2, r2, #4
 80038f2:	601a      	str	r2, [r3, #0]
	/*Create and Start Timer for Timeout Watch*/
	UTIL_TIMER_Create(&timerTimeout, 6000, UTIL_TIMER_ONESHOT, OnRxTimeout, NULL);
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	4b25      	ldr	r3, [pc, #148]	; (8003990 <GSMSendSMS+0x250>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	f241 7170 	movw	r1, #6000	; 0x1770
 8003900:	4824      	ldr	r0, [pc, #144]	; (8003994 <GSMSendSMS+0x254>)
 8003902:	f00c fdf5 	bl	80104f0 <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerTimeout);
 8003906:	4823      	ldr	r0, [pc, #140]	; (8003994 <GSMSendSMS+0x254>)
 8003908:	f00c fe28 	bl	801055c <UTIL_TIMER_Start>
	/*Custom Setup TXRX Cycle End*/

	HAL_UART_Transmit(huart_gsm, &endmsg_nr, 1 , 300);
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <GSMSendSMS+0x218>)
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003914:	2201      	movs	r2, #1
 8003916:	4920      	ldr	r1, [pc, #128]	; (8003998 <GSMSendSMS+0x258>)
 8003918:	f006 fbdd 	bl	800a0d6 <HAL_UART_Transmit>

	/*2.3. Module should Acknowledge the Sending,
	 * Wait until Timeout flag or Data Received flag and verify Answer*/
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 800391c:	bf00      	nop
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <GSMSendSMS+0x220>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d103      	bne.n	800392e <GSMSendSMS+0x1ee>
 8003926:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <GSMSendSMS+0x224>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f7      	beq.n	800391e <GSMSendSMS+0x1de>

	if (flag_timeout) {
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <GSMSendSMS+0x220>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <GSMSendSMS+0x1fa>
			return 102;
 8003936:	2366      	movs	r3, #102	; 0x66
 8003938:	e009      	b.n	800394e <GSMSendSMS+0x20e>
	}
	if (strstr((char*)MainBuf, "OK") == NULL){
 800393a:	490d      	ldr	r1, [pc, #52]	; (8003970 <GSMSendSMS+0x230>)
 800393c:	480b      	ldr	r0, [pc, #44]	; (800396c <GSMSendSMS+0x22c>)
 800393e:	f00d ffb5 	bl	80118ac <strstr>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <GSMSendSMS+0x20c>
			return 101; //Error, Unexpected Answer, no acknoledge from board
 8003948:	2365      	movs	r3, #101	; 0x65
 800394a:	e000      	b.n	800394e <GSMSendSMS+0x20e>
	}

	return 1; //OK
 800394c:	2301      	movs	r3, #1

}
 800394e:	4618      	mov	r0, r3
 8003950:	37ac      	adds	r7, #172	; 0xac
 8003952:	46bd      	mov	sp, r7
 8003954:	bd90      	pop	{r4, r7, pc}
 8003956:	bf00      	nop
 8003958:	20000004 	.word	0x20000004
 800395c:	08014cd4 	.word	0x08014cd4
 8003960:	20000760 	.word	0x20000760
 8003964:	20000761 	.word	0x20000761
 8003968:	20000896 	.word	0x20000896
 800396c:	200007c8 	.word	0x200007c8
 8003970:	08014c88 	.word	0x08014c88
 8003974:	08014ce0 	.word	0x08014ce0
 8003978:	08014cec 	.word	0x08014cec
 800397c:	20000764 	.word	0x20000764
 8003980:	20000890 	.word	0x20000890
 8003984:	20000892 	.word	0x20000892
 8003988:	20000894 	.word	0x20000894
 800398c:	20000008 	.word	0x20000008
 8003990:	08003bad 	.word	0x08003bad
 8003994:	20000748 	.word	0x20000748
 8003998:	2000000c 	.word	0x2000000c

0800399c <GSMGetBalance>:
/*
 * @brief Sends special AT command to Module and evaluates the answer to get Prepaid Balance over USSD code
 * @param: uint16_t * balanceptr -> balance in cents gets written there if valid value from gsm module
 * @retval  //1: Ok, valid value in referenced argument // 101: unexpected wrong data received (?) // 102: Timeout, no response
 */
uint8_t GSMGetBalance(uint16_t * balanceptr){
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	; 0x28
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	6078      	str	r0, [r7, #4]
	char * targetptr = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
	char * endptr = NULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61bb      	str	r3, [r7, #24]
	uint16_t euro = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	82fb      	strh	r3, [r7, #22]
	uint16_t cent = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	82bb      	strh	r3, [r7, #20]
	uint8_t abstnd = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	74fb      	strb	r3, [r7, #19]
	char digitstring[10] = {0};
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	809a      	strh	r2, [r3, #4]

	SetUpTXRXCycle();
 80039c6:	f000 f90b 	bl	8003be0 <SetUpTXRXCycle>

	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CUSD=1, \"*100#\"\r", sizeof("AT+CUSD=1, \"*100#\"\r"), 300);
 80039ca:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <GSMGetBalance+0x1d4>)
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80039d2:	2214      	movs	r2, #20
 80039d4:	4967      	ldr	r1, [pc, #412]	; (8003b74 <GSMGetBalance+0x1d8>)
 80039d6:	f006 fb7e 	bl	800a0d6 <HAL_UART_Transmit>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 80039da:	bf00      	nop
 80039dc:	4b66      	ldr	r3, [pc, #408]	; (8003b78 <GSMGetBalance+0x1dc>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d103      	bne.n	80039ec <GSMGetBalance+0x50>
 80039e4:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <GSMGetBalance+0x1e0>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f7      	beq.n	80039dc <GSMGetBalance+0x40>

	if (flag_timeout) {
 80039ec:	4b62      	ldr	r3, [pc, #392]	; (8003b78 <GSMGetBalance+0x1dc>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <GSMGetBalance+0x5c>
			return 102;
 80039f4:	2366      	movs	r3, #102	; 0x66
 80039f6:	e0b6      	b.n	8003b66 <GSMGetBalance+0x1ca>
	}

	/*Start Custom RX with longer timeout because USSD Code takes some time*/
	memset(RxBuf, 0, RxBuf_SIZE);
 80039f8:	2264      	movs	r2, #100	; 0x64
 80039fa:	2100      	movs	r1, #0
 80039fc:	4860      	ldr	r0, [pc, #384]	; (8003b80 <GSMGetBalance+0x1e4>)
 80039fe:	f00d fa99 	bl	8010f34 <memset>
	memset(MainBuf, 0, MainBuf_SIZE);
 8003a02:	22c8      	movs	r2, #200	; 0xc8
 8003a04:	2100      	movs	r1, #0
 8003a06:	485f      	ldr	r0, [pc, #380]	; (8003b84 <GSMGetBalance+0x1e8>)
 8003a08:	f00d fa94 	bl	8010f34 <memset>
	oldPos = 0;
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <GSMGetBalance+0x1ec>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003a12:	4b5e      	ldr	r3, [pc, #376]	; (8003b8c <GSMGetBalance+0x1f0>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	801a      	strh	r2, [r3, #0]
	flag_RX_Done = 0;
 8003a18:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <GSMGetBalance+0x1e0>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
	rxSize = 0;
 8003a1e:	4b5c      	ldr	r3, [pc, #368]	; (8003b90 <GSMGetBalance+0x1f4>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	801a      	strh	r2, [r3, #0]
	flag_timeout = 0;
 8003a24:	4b54      	ldr	r3, [pc, #336]	; (8003b78 <GSMGetBalance+0x1dc>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]

	/*Start DMA to be prepared for RX*/
	HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
 8003a2a:	4b51      	ldr	r3, [pc, #324]	; (8003b70 <GSMGetBalance+0x1d4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2264      	movs	r2, #100	; 0x64
 8003a30:	4953      	ldr	r1, [pc, #332]	; (8003b80 <GSMGetBalance+0x1e4>)
 8003a32:	4618      	mov	r0, r3
 8003a34:	f008 fe97 	bl	800c766 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);
 8003a38:	4b56      	ldr	r3, [pc, #344]	; (8003b94 <GSMGetBalance+0x1f8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	4b54      	ldr	r3, [pc, #336]	; (8003b94 <GSMGetBalance+0x1f8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0204 	bic.w	r2, r2, #4
 8003a4a:	601a      	str	r2, [r3, #0]

	/*Create and Start Timer for Timeout Watch*/
	UTIL_TIMER_Create(&timerTimeout, 6000, UTIL_TIMER_ONESHOT, OnRxTimeout, NULL);
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <GSMGetBalance+0x1fc>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	f241 7170 	movw	r1, #6000	; 0x1770
 8003a58:	4850      	ldr	r0, [pc, #320]	; (8003b9c <GSMGetBalance+0x200>)
 8003a5a:	f00c fd49 	bl	80104f0 <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerTimeout);
 8003a5e:	484f      	ldr	r0, [pc, #316]	; (8003b9c <GSMGetBalance+0x200>)
 8003a60:	f00c fd7c 	bl	801055c <UTIL_TIMER_Start>

	/*Wait until Timeout flag or Data Received flag */
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003a64:	bf00      	nop
 8003a66:	4b44      	ldr	r3, [pc, #272]	; (8003b78 <GSMGetBalance+0x1dc>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <GSMGetBalance+0xda>
 8003a6e:	4b43      	ldr	r3, [pc, #268]	; (8003b7c <GSMGetBalance+0x1e0>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f7      	beq.n	8003a66 <GSMGetBalance+0xca>

	if (flag_timeout) {
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <GSMGetBalance+0x1dc>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <GSMGetBalance+0xe6>
			return 102;
 8003a7e:	2366      	movs	r3, #102	; 0x66
 8003a80:	e071      	b.n	8003b66 <GSMGetBalance+0x1ca>
	}

	/* check if expected Data
	 * There should be the Substring "Aktuelles Prepaid Guthaben: " followed by the balance */
	targetptr = strstr((char*)MainBuf, "Aktuelles Prepaid Guthaben: ");
 8003a82:	4947      	ldr	r1, [pc, #284]	; (8003ba0 <GSMGetBalance+0x204>)
 8003a84:	483f      	ldr	r0, [pc, #252]	; (8003b84 <GSMGetBalance+0x1e8>)
 8003a86:	f00d ff11 	bl	80118ac <strstr>
 8003a8a:	61f8      	str	r0, [r7, #28]
	if (targetptr != NULL){
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d053      	beq.n	8003b3a <GSMGetBalance+0x19e>
		offst = sizeof("Aktuelles Prepaid Guthaben: ")-1;
 8003a92:	4b44      	ldr	r3, [pc, #272]	; (8003ba4 <GSMGetBalance+0x208>)
 8003a94:	221c      	movs	r2, #28
 8003a96:	701a      	strb	r2, [r3, #0]
		/*EUR*/
		targetptr = targetptr + offst;//go to Balance value
 8003a98:	4b42      	ldr	r3, [pc, #264]	; (8003ba4 <GSMGetBalance+0x208>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	61fb      	str	r3, [r7, #28]
		endptr = strstr(targetptr, ",");
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	69f8      	ldr	r0, [r7, #28]
 8003aa8:	f00d fed7 	bl	801185a <strchr>
 8003aac:	61b8      	str	r0, [r7, #24]
		if (endptr == NULL){
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <GSMGetBalance+0x11c>
			return 101;
 8003ab4:	2365      	movs	r3, #101	; 0x65
 8003ab6:	e056      	b.n	8003b66 <GSMGetBalance+0x1ca>
		}
		abstnd = endptr - targetptr;
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	74fb      	strb	r3, [r7, #19]
		memcpy(digitstring, targetptr, abstnd);
 8003ac0:	7cfa      	ldrb	r2, [r7, #19]
 8003ac2:	f107 0308 	add.w	r3, r7, #8
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f00d fa25 	bl	8010f18 <memcpy>
		digitstring[abstnd+1] = '\0';
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	3320      	adds	r3, #32
 8003ad4:	443b      	add	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f803 2c18 	strb.w	r2, [r3, #-24]
		euro = (uint16_t)strtol(digitstring, NULL, 10);
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	220a      	movs	r2, #10
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f00d ff73 	bl	80119d0 <strtol>
 8003aea:	4603      	mov	r3, r0
 8003aec:	82fb      	strh	r3, [r7, #22]
		/*Cent*/
		targetptr = endptr+1;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	3301      	adds	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
		memcpy(digitstring, targetptr, 2);
 8003afa:	813b      	strh	r3, [r7, #8]
		digitstring[3] = '\0';
 8003afc:	2300      	movs	r3, #0
 8003afe:	72fb      	strb	r3, [r7, #11]
		cent = (uint16_t)strtol(digitstring, NULL, 10);
 8003b00:	f107 0308 	add.w	r3, r7, #8
 8003b04:	220a      	movs	r2, #10
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f00d ff61 	bl	80119d0 <strtol>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	82bb      	strh	r3, [r7, #20]

		if (balanceptr != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d012      	beq.n	8003b3e <GSMGetBalance+0x1a2>
		{
			*balanceptr = euro*100 + cent;
 8003b18:	8afb      	ldrh	r3, [r7, #22]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	0092      	lsls	r2, r2, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	0091      	lsls	r1, r2, #2
 8003b24:	461a      	mov	r2, r3
 8003b26:	460b      	mov	r3, r1
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	8abb      	ldrh	r3, [r7, #20]
 8003b30:	4413      	add	r3, r2
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	801a      	strh	r2, [r3, #0]
 8003b38:	e001      	b.n	8003b3e <GSMGetBalance+0x1a2>
		}

	}
	else {
		return 101;
 8003b3a:	2365      	movs	r3, #101	; 0x65
 8003b3c:	e013      	b.n	8003b66 <GSMGetBalance+0x1ca>
	}

	SetUpTXRXCycle();
 8003b3e:	f000 f84f 	bl	8003be0 <SetUpTXRXCycle>
	/*Transmit AT Command in Blocking Mode*/
	HAL_UART_Transmit(huart_gsm, (uint8_t *)"AT+CUSD=0\r", sizeof("AT+CUSD=0\r"), 300);
 8003b42:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <GSMGetBalance+0x1d4>)
 8003b44:	6818      	ldr	r0, [r3, #0]
 8003b46:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003b4a:	220b      	movs	r2, #11
 8003b4c:	4916      	ldr	r1, [pc, #88]	; (8003ba8 <GSMGetBalance+0x20c>)
 8003b4e:	f006 fac2 	bl	800a0d6 <HAL_UART_Transmit>
	while (flag_timeout == 0 && flag_RX_Done == 0) {}
 8003b52:	bf00      	nop
 8003b54:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <GSMGetBalance+0x1dc>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d103      	bne.n	8003b64 <GSMGetBalance+0x1c8>
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <GSMGetBalance+0x1e0>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f7      	beq.n	8003b54 <GSMGetBalance+0x1b8>
	return 1;
 8003b64:	2301      	movs	r3, #1
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000004 	.word	0x20000004
 8003b74:	08014cf0 	.word	0x08014cf0
 8003b78:	20000760 	.word	0x20000760
 8003b7c:	20000761 	.word	0x20000761
 8003b80:	20000764 	.word	0x20000764
 8003b84:	200007c8 	.word	0x200007c8
 8003b88:	20000890 	.word	0x20000890
 8003b8c:	20000892 	.word	0x20000892
 8003b90:	20000894 	.word	0x20000894
 8003b94:	20000008 	.word	0x20000008
 8003b98:	08003bad 	.word	0x08003bad
 8003b9c:	20000748 	.word	0x20000748
 8003ba0:	08014d04 	.word	0x08014d04
 8003ba4:	20000896 	.word	0x20000896
 8003ba8:	08014d24 	.word	0x08014d24

08003bac <OnRxTimeout>:

static void OnRxTimeout(void *context) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	flag_timeout = 1;
 8003bb4:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <OnRxTimeout+0x28>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
	UTIL_TIMER_Stop(&timerTimeout);
 8003bba:	4807      	ldr	r0, [pc, #28]	; (8003bd8 <OnRxTimeout+0x2c>)
 8003bbc:	f00c fd3c 	bl	8010638 <UTIL_TIMER_Stop>
	HAL_UART_AbortReceive(huart_gsm);
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <OnRxTimeout+0x30>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f006 fc05 	bl	800a3d4 <HAL_UART_AbortReceive>
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000760 	.word	0x20000760
 8003bd8:	20000748 	.word	0x20000748
 8003bdc:	20000004 	.word	0x20000004

08003be0 <SetUpTXRXCycle>:

static void SetUpTXRXCycle(void){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af02      	add	r7, sp, #8
	/*clear Buffer and flags*/
	memset(RxBuf, 0, RxBuf_SIZE);
 8003be6:	2264      	movs	r2, #100	; 0x64
 8003be8:	2100      	movs	r1, #0
 8003bea:	481b      	ldr	r0, [pc, #108]	; (8003c58 <SetUpTXRXCycle+0x78>)
 8003bec:	f00d f9a2 	bl	8010f34 <memset>
	memset(MainBuf, 0, MainBuf_SIZE);
 8003bf0:	22c8      	movs	r2, #200	; 0xc8
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4819      	ldr	r0, [pc, #100]	; (8003c5c <SetUpTXRXCycle+0x7c>)
 8003bf6:	f00d f99d 	bl	8010f34 <memset>
	oldPos = 0;
 8003bfa:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <SetUpTXRXCycle+0x80>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <SetUpTXRXCycle+0x84>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	801a      	strh	r2, [r3, #0]
	flag_RX_Done = 0;
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <SetUpTXRXCycle+0x88>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
	rxSize = 0;
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <SetUpTXRXCycle+0x8c>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	801a      	strh	r2, [r3, #0]
	flag_timeout = 0;
 8003c12:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <SetUpTXRXCycle+0x90>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]

	/*Start DMA to be prepared for RX*/
	HAL_UARTEx_ReceiveToIdle_DMA(huart_gsm, RxBuf, RxBuf_SIZE);
 8003c18:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <SetUpTXRXCycle+0x94>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2264      	movs	r2, #100	; 0x64
 8003c1e:	490e      	ldr	r1, [pc, #56]	; (8003c58 <SetUpTXRXCycle+0x78>)
 8003c20:	4618      	mov	r0, r3
 8003c22:	f008 fda0 	bl	800c766 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(hdma_uart_rx_gsm, DMA_IT_HT);
 8003c26:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <SetUpTXRXCycle+0x98>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <SetUpTXRXCycle+0x98>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0204 	bic.w	r2, r2, #4
 8003c38:	601a      	str	r2, [r3, #0]

	/*Create and Start Timer for Timeout Watch*/
	UTIL_TIMER_Create(&timerTimeout, Receive_TIMEOUT_VALUE, UTIL_TIMER_ONESHOT, OnRxTimeout, NULL);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <SetUpTXRXCycle+0x9c>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8003c46:	480e      	ldr	r0, [pc, #56]	; (8003c80 <SetUpTXRXCycle+0xa0>)
 8003c48:	f00c fc52 	bl	80104f0 <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerTimeout);
 8003c4c:	480c      	ldr	r0, [pc, #48]	; (8003c80 <SetUpTXRXCycle+0xa0>)
 8003c4e:	f00c fc85 	bl	801055c <UTIL_TIMER_Start>
}
 8003c52:	bf00      	nop
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000764 	.word	0x20000764
 8003c5c:	200007c8 	.word	0x200007c8
 8003c60:	20000890 	.word	0x20000890
 8003c64:	20000892 	.word	0x20000892
 8003c68:	20000761 	.word	0x20000761
 8003c6c:	20000894 	.word	0x20000894
 8003c70:	20000760 	.word	0x20000760
 8003c74:	20000004 	.word	0x20000004
 8003c78:	20000008 	.word	0x20000008
 8003c7c:	08003bad 	.word	0x08003bad
 8003c80:	20000748 	.word	0x20000748

08003c84 <LL_APB2_GRP1_ForceReset>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8003c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr

08003ca6 <LL_APB2_GRP1_ReleaseReset>:
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	640b      	str	r3, [r1, #64]	; 0x40
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr
	...

08003ccc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <LL_EXTI_EnableIT_0_31+0x24>)
 8003cd6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003cda:	4905      	ldr	r1, [pc, #20]	; (8003cf0 <LL_EXTI_EnableIT_0_31+0x24>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	58000800 	.word	0x58000800

08003cf4 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <vcom_Init+0x28>)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003d02:	f7fd ffd7 	bl	8001cb4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003d06:	f7ff f8c3 	bl	8002e90 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003d0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003d0e:	f7ff ffdd 	bl	8003ccc <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003d12:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000898 	.word	0x20000898

08003d20 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003d24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d28:	f7ff ffac 	bl	8003c84 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003d2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d30:	f7ff ffb9 	bl	8003ca6 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003d34:	4804      	ldr	r0, [pc, #16]	; (8003d48 <vcom_DeInit+0x28>)
 8003d36:	f7ff fa89 	bl	800324c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003d3a:	200f      	movs	r0, #15
 8003d3c:	f002 fcc5 	bl	80066ca <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003d40:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000508 	.word	0x20000508

08003d4c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	4804      	ldr	r0, [pc, #16]	; (8003d70 <vcom_Trace_DMA+0x24>)
 8003d60:	f006 faa6 	bl	800a2b0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003d64:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000508 	.word	0x20000508

08003d74 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003d7c:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <vcom_ReceiveInit+0x70>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003d82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d86:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8003d88:	f107 0308 	add.w	r3, r7, #8
 8003d8c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d90:	4815      	ldr	r0, [pc, #84]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003d92:	f008 fba4 	bl	800c4de <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8003d96:	bf00      	nop
 8003d98:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da6:	d0f7      	beq.n	8003d98 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8003da8:	bf00      	nop
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db8:	d1f7      	bne.n	8003daa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003dc8:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003dca:	4807      	ldr	r0, [pc, #28]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dcc:	f008 fbe2 	bl	800c594 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4906      	ldr	r1, [pc, #24]	; (8003dec <vcom_ReceiveInit+0x78>)
 8003dd4:	4804      	ldr	r0, [pc, #16]	; (8003de8 <vcom_ReceiveInit+0x74>)
 8003dd6:	f006 fa15 	bl	800a204 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003dda:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	2000089c 	.word	0x2000089c
 8003de8:	20000508 	.word	0x20000508
 8003dec:	20000897 	.word	0x20000897

08003df0 <vcom_Resume>:

void vcom_Resume(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003df4:	4808      	ldr	r0, [pc, #32]	; (8003e18 <vcom_Resume+0x28>)
 8003df6:	f006 f91e 	bl	800a036 <HAL_UART_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003e00:	f7fe f9dc 	bl	80021bc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e04:	4805      	ldr	r0, [pc, #20]	; (8003e1c <vcom_Resume+0x2c>)
 8003e06:	f002 fc7d 	bl	8006704 <HAL_DMA_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003e10:	f7fe f9d4 	bl	80021bc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000508 	.word	0x20000508
 8003e1c:	20000688 	.word	0x20000688

08003e20 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a05      	ldr	r2, [pc, #20]	; (8003e44 <HAL_UART_TxCpltCallback+0x24>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d103      	bne.n	8003e3a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <HAL_UART_TxCpltCallback+0x28>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2000      	movs	r0, #0
 8003e38:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40013800 	.word	0x40013800
 8003e48:	20000898 	.word	0x20000898

08003e4c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0d      	ldr	r2, [pc, #52]	; (8003e90 <HAL_UART_RxCpltCallback+0x44>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d113      	bne.n	8003e86 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_UART_RxCpltCallback+0x48>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_UART_RxCpltCallback+0x30>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_UART_RxCpltCallback+0x48>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2101      	movs	r1, #1
 8003e78:	4807      	ldr	r0, [pc, #28]	; (8003e98 <HAL_UART_RxCpltCallback+0x4c>)
 8003e7a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4906      	ldr	r1, [pc, #24]	; (8003e98 <HAL_UART_RxCpltCallback+0x4c>)
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f006 f9bf 	bl	800a204 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003e86:	bf00      	nop
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	40013800 	.word	0x40013800
 8003e94:	2000089c 	.word	0x2000089c
 8003e98:	20000897 	.word	0x20000897

08003e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003e9c:	480d      	ldr	r0, [pc, #52]	; (8003ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003e9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ea0:	f001 fcdf 	bl	8005862 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ea4:	480c      	ldr	r0, [pc, #48]	; (8003ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ea6:	490d      	ldr	r1, [pc, #52]	; (8003edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	; (8003ee0 <LoopForever+0xe>)
  movs r3, #0
 8003eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eac:	e002      	b.n	8003eb4 <LoopCopyDataInit>

08003eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eb2:	3304      	adds	r3, #4

08003eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb8:	d3f9      	bcc.n	8003eae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ebc:	4c0a      	ldr	r4, [pc, #40]	; (8003ee8 <LoopForever+0x16>)
  movs r3, #0
 8003ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ec0:	e001      	b.n	8003ec6 <LoopFillZerobss>

08003ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec4:	3204      	adds	r2, #4

08003ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec8:	d3fb      	bcc.n	8003ec2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003eca:	f00d f801 	bl	8010ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003ece:	f7fe f901 	bl	80020d4 <main>

08003ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ed2:	e7fe      	b.n	8003ed2 <LoopForever>
  ldr   r0, =_estack
 8003ed4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003edc:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003ee0:	08015ce0 	.word	0x08015ce0
  ldr r2, =_sbss
 8003ee4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003ee8:	20000f60 	.word	0x20000f60

08003eec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003eec:	e7fe      	b.n	8003eec <ADC_IRQHandler>

08003eee <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8003ef2:	f7fe fb4b 	bl	800258c <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8003ef6:	f000 f80b 	bl	8003f10 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}

08003efe <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8003f02:	f04f 30ff 	mov.w	r0, #4294967295
 8003f06:	f00c f8e1 	bl	80100cc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <SubghzApp_Init>:
int digits_only(const char *s);
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	b096      	sub	sp, #88	; 0x58
 8003f14:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

	//Read Params from Flash
  Parameter = Readflash_func();
 8003f16:	4c48      	ldr	r4, [pc, #288]	; (8004038 <SubghzApp_Init+0x128>)
 8003f18:	463b      	mov	r3, r7
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd ff7a 	bl	8001e14 <Readflash_func>
 8003f20:	4625      	mov	r5, r4
 8003f22:	463c      	mov	r4, r7
 8003f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8003f34:	4b41      	ldr	r3, [pc, #260]	; (800403c <SubghzApp_Init+0x12c>)
 8003f36:	4a42      	ldr	r2, [pc, #264]	; (8004040 <SubghzApp_Init+0x130>)
 8003f38:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8003f3a:	4b40      	ldr	r3, [pc, #256]	; (800403c <SubghzApp_Init+0x12c>)
 8003f3c:	4a41      	ldr	r2, [pc, #260]	; (8004044 <SubghzApp_Init+0x134>)
 8003f3e:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8003f40:	4b3e      	ldr	r3, [pc, #248]	; (800403c <SubghzApp_Init+0x12c>)
 8003f42:	4a41      	ldr	r2, [pc, #260]	; (8004048 <SubghzApp_Init+0x138>)
 8003f44:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <SubghzApp_Init+0x12c>)
 8003f48:	4a40      	ldr	r2, [pc, #256]	; (800404c <SubghzApp_Init+0x13c>)
 8003f4a:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	; (800403c <SubghzApp_Init+0x12c>)
 8003f4e:	4a40      	ldr	r2, [pc, #256]	; (8004050 <SubghzApp_Init+0x140>)
 8003f50:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8003f52:	4b40      	ldr	r3, [pc, #256]	; (8004054 <SubghzApp_Init+0x144>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4839      	ldr	r0, [pc, #228]	; (800403c <SubghzApp_Init+0x12c>)
 8003f58:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* Radio Set frequency */
   Radio.SetChannel(RF_FREQUENCY);
 8003f5a:	4b3e      	ldr	r3, [pc, #248]	; (8004054 <SubghzApp_Init+0x144>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	483e      	ldr	r0, [pc, #248]	; (8004058 <SubghzApp_Init+0x148>)
 8003f60:	4798      	blx	r3

   /* Radio configuration */
 #if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
   APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 8003f62:	4b3e      	ldr	r3, [pc, #248]	; (800405c <SubghzApp_Init+0x14c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	2100      	movs	r1, #0
 8003f68:	2002      	movs	r0, #2
 8003f6a:	f00b fd75 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 8003f6e:	4b3c      	ldr	r3, [pc, #240]	; (8004060 <SubghzApp_Init+0x150>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	2002      	movs	r0, #2
 8003f76:	f00b fd6f 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8003f7a:	237d      	movs	r3, #125	; 0x7d
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <SubghzApp_Init+0x154>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	2100      	movs	r1, #0
 8003f84:	2002      	movs	r0, #2
 8003f86:	f00b fd67 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
   APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	4b36      	ldr	r3, [pc, #216]	; (8004068 <SubghzApp_Init+0x158>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	2100      	movs	r1, #0
 8003f94:	2002      	movs	r0, #2
 8003f96:	f00b fd5f 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>

   Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	; (8004054 <SubghzApp_Init+0x144>)
 8003f9c:	69dc      	ldr	r4, [r3, #28]
 8003f9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003fa2:	9308      	str	r3, [sp, #32]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9307      	str	r3, [sp, #28]
 8003fa8:	2300      	movs	r3, #0
 8003faa:	9306      	str	r3, [sp, #24]
 8003fac:	2300      	movs	r3, #0
 8003fae:	9305      	str	r3, [sp, #20]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	9304      	str	r3, [sp, #16]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9303      	str	r3, [sp, #12]
 8003fb8:	2308      	movs	r3, #8
 8003fba:	9302      	str	r3, [sp, #8]
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	210e      	movs	r1, #14
 8003fca:	2001      	movs	r0, #1
 8003fcc:	47a0      	blx	r4
                     LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                     LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                     true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

   Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8003fce:	4b21      	ldr	r3, [pc, #132]	; (8004054 <SubghzApp_Init+0x144>)
 8003fd0:	699c      	ldr	r4, [r3, #24]
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9308      	str	r3, [sp, #32]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	9307      	str	r3, [sp, #28]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	9306      	str	r3, [sp, #24]
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	9305      	str	r3, [sp, #20]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9304      	str	r3, [sp, #16]
 8003fea:	2300      	movs	r3, #0
 8003fec:	9303      	str	r3, [sp, #12]
 8003fee:	2305      	movs	r3, #5
 8003ff0:	9302      	str	r3, [sp, #8]
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	220c      	movs	r2, #12
 8003ffe:	2100      	movs	r1, #0
 8004000:	2001      	movs	r0, #1
 8004002:	47a0      	blx	r4
                     LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
                     LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
                     0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

   Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8004004:	4b13      	ldr	r3, [pc, #76]	; (8004054 <SubghzApp_Init+0x144>)
 8004006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004008:	2108      	movs	r1, #8
 800400a:	2001      	movs	r0, #1
 800400c:	4798      	blx	r3
 #else
 #error "Please define a modulation in the subghz_phy_app.h file."
 #endif /* USE_MODEM_LORA | USE_MODEM_FSK */

   //send Radio to sleep in the beginning
   Radio.Sleep();
 800400e:	4b11      	ldr	r3, [pc, #68]	; (8004054 <SubghzApp_Init+0x144>)
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	4798      	blx	r3

  /*UART task registration*/
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ConfigMode_Idle), UTIL_SEQ_RFU, ConfigModeIdle);
 8004014:	4a15      	ldr	r2, [pc, #84]	; (800406c <SubghzApp_Init+0x15c>)
 8004016:	2100      	movs	r1, #0
 8004018:	2004      	movs	r0, #4
 800401a:	f00c f953 	bl	80102c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SyncedWakeup), UTIL_SEQ_RFU, SyncedWakeup);
 800401e:	4a14      	ldr	r2, [pc, #80]	; (8004070 <SubghzApp_Init+0x160>)
 8004020:	2100      	movs	r1, #0
 8004022:	2008      	movs	r0, #8
 8004024:	f00c f94e 	bl	80102c4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ConfigMode_Idle), CFG_SEQ_Prio_0);
 8004028:	2100      	movs	r1, #0
 800402a:	2004      	movs	r0, #4
 800402c:	f00c f96c 	bl	8010308 <UTIL_SEQ_SetTask>
  /* USER CODE END SubghzApp_Init_2 */
}
 8004030:	bf00      	nop
 8004032:	3730      	adds	r7, #48	; 0x30
 8004034:	46bd      	mov	sp, r7
 8004036:	bdb0      	pop	{r4, r5, r7, pc}
 8004038:	20000010 	.word	0x20000010
 800403c:	200008a0 	.word	0x200008a0
 8004040:	08004075 	.word	0x08004075
 8004044:	0800408d 	.word	0x0800408d
 8004048:	08004105 	.word	0x08004105
 800404c:	0800411d 	.word	0x0800411d
 8004050:	08004135 	.word	0x08004135
 8004054:	08015770 	.word	0x08015770
 8004058:	33bca100 	.word	0x33bca100
 800405c:	08014d30 	.word	0x08014d30
 8004060:	08014d44 	.word	0x08014d44
 8004064:	08014d58 	.word	0x08014d58
 8004068:	08014d6c 	.word	0x08014d6c
 800406c:	0800414d 	.word	0x0800414d
 8004070:	08004765 	.word	0x08004765

08004074 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	State = TX;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <OnTxDone+0x14>)
 800407a:	2204      	movs	r2, #4
 800407c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxDone */
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	bc80      	pop	{r7}
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000a1c 	.word	0x20000a1c

0800408c <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4603      	mov	r3, r0
 800409c:	817b      	strh	r3, [r7, #10]
 800409e:	460b      	mov	r3, r1
 80040a0:	813b      	strh	r3, [r7, #8]
 80040a2:	4613      	mov	r3, r2
 80040a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
	//_BT_PRINT("MSG Received\r");
	/*Only Messages with the correct identifier are relevant*/
	if(payload[0] != 0xFA)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2bfa      	cmp	r3, #250	; 0xfa
 80040ac:	d11a      	bne.n	80040e4 <OnRxDone+0x58>
		return;

	/*If size is not correct, its also not a correct message for master*/
	if (size != PAYLOAD_LEN)
 80040ae:	897b      	ldrh	r3, [r7, #10]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d119      	bne.n	80040e8 <OnRxDone+0x5c>
		return;

	/*Eventuell noch MAster ID einführen, dass nachrichten an anderen Master auch verworfen werden können!!!!*/
	State = RX;
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <OnRxDone+0x64>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	701a      	strb	r2, [r3, #0]
	RxBufferSize = size;
 80040ba:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <OnRxDone+0x68>)
 80040bc:	897b      	ldrh	r3, [r7, #10]
 80040be:	8013      	strh	r3, [r2, #0]
	/*Only Copy if Received Data is less than Buffer availible*/
	if (RxBufferSize < RXBUF_LEN){
 80040c0:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <OnRxDone+0x68>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	2b13      	cmp	r3, #19
 80040c6:	d805      	bhi.n	80040d4 <OnRxDone+0x48>
		memcpy(RxBuffer, payload, size);
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68f9      	ldr	r1, [r7, #12]
 80040ce:	480a      	ldr	r0, [pc, #40]	; (80040f8 <OnRxDone+0x6c>)
 80040d0:	f00c ff22 	bl	8010f18 <memcpy>
	}
	RssiValue = rssi;
 80040d4:	893b      	ldrh	r3, [r7, #8]
 80040d6:	b25a      	sxtb	r2, r3
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <OnRxDone+0x70>)
 80040da:	701a      	strb	r2, [r3, #0]
	SnrValue = LoraSnr_FskCfo;
 80040dc:	4a08      	ldr	r2, [pc, #32]	; (8004100 <OnRxDone+0x74>)
 80040de:	79fb      	ldrb	r3, [r7, #7]
 80040e0:	7013      	strb	r3, [r2, #0]
 80040e2:	e002      	b.n	80040ea <OnRxDone+0x5e>
		return;
 80040e4:	bf00      	nop
 80040e6:	e000      	b.n	80040ea <OnRxDone+0x5e>
		return;
 80040e8:	bf00      	nop
  /* USER CODE END OnRxDone */
}
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000a1c 	.word	0x20000a1c
 80040f4:	20000a28 	.word	0x20000a28
 80040f8:	20000a2c 	.word	0x20000a2c
 80040fc:	20000a2a 	.word	0x20000a2a
 8004100:	20000a2b 	.word	0x20000a2b

08004104 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	State = TX_TIMEOUT;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <OnTxTimeout+0x14>)
 800410a:	2205      	movs	r2, #5
 800410c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnTxTimeout */
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000a1c 	.word	0x20000a1c

0800411c <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	State = RX_TIMEOUT;
 8004120:	4b03      	ldr	r3, [pc, #12]	; (8004130 <OnRxTimeout+0x14>)
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxTimeout */
}
 8004126:	bf00      	nop
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000a1c 	.word	0x20000a1c

08004134 <OnRxError>:

static void OnRxError(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	State = RX_ERROR;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <OnRxError+0x14>)
 800413a:	2203      	movs	r2, #3
 800413c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END OnRxError */
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000a1c 	.word	0x20000a1c

0800414c <ConfigModeIdle>:

/* USER CODE BEGIN PrFD */

static void ConfigModeIdle(void){
 800414c:	b5b0      	push	{r4, r5, r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8


	//Disable Reed Contact Interrupt in Config Mode (in System-Init all IRQs are enabled)
	HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8004152:	2009      	movs	r0, #9
 8004154:	f002 fab9 	bl	80066ca <HAL_NVIC_DisableIRQ>
	//LED Red Blink 1 Hz start
	UTIL_TIMER_Create(&timerLedIdleConf, LEDConfIdle_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledConfIdleEvent, NULL);
 8004158:	2300      	movs	r3, #0
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	4bb8      	ldr	r3, [pc, #736]	; (8004440 <ConfigModeIdle+0x2f4>)
 800415e:	2200      	movs	r2, #0
 8004160:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004164:	48b7      	ldr	r0, [pc, #732]	; (8004444 <ConfigModeIdle+0x2f8>)
 8004166:	f00c f9c3 	bl	80104f0 <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerLedIdleConf);
 800416a:	48b6      	ldr	r0, [pc, #728]	; (8004444 <ConfigModeIdle+0x2f8>)
 800416c:	f00c f9f6 	bl	801055c <UTIL_TIMER_Start>
	_BT_PRINT("Master Trap in Config Mode...\r");
 8004170:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004174:	221e      	movs	r2, #30
 8004176:	49b4      	ldr	r1, [pc, #720]	; (8004448 <ConfigModeIdle+0x2fc>)
 8004178:	48b4      	ldr	r0, [pc, #720]	; (800444c <ConfigModeIdle+0x300>)
 800417a:	f005 ffac 	bl	800a0d6 <HAL_UART_Transmit>
	//In Config Mode the GSM and Bluetooth module - power transistor is enabled
	HAL_GPIO_WritePin(GSM_Switch_GPIO_Port, GSM_Switch_Pin, 1);
 800417e:	2201      	movs	r2, #1
 8004180:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004188:	f003 fb0f 	bl	80077aa <HAL_GPIO_WritePin>
	//Timer to give GSM Module time to register
	UTIL_TIMER_Create(&timerGSMStartConf, GSM_Startuptime_MS, UTIL_TIMER_ONESHOT, OnGSMConfTimeEvent, NULL);
 800418c:	2300      	movs	r3, #0
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	4baf      	ldr	r3, [pc, #700]	; (8004450 <ConfigModeIdle+0x304>)
 8004192:	2200      	movs	r2, #0
 8004194:	f643 2198 	movw	r1, #15000	; 0x3a98
 8004198:	48ae      	ldr	r0, [pc, #696]	; (8004454 <ConfigModeIdle+0x308>)
 800419a:	f00c f9a9 	bl	80104f0 <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&timerGSMStartConf);
 800419e:	48ad      	ldr	r0, [pc, #692]	; (8004454 <ConfigModeIdle+0x308>)
 80041a0:	f00c f9dc 	bl	801055c <UTIL_TIMER_Start>

	//Start RX of BT
	HAL_UART_AbortReceive(&hlpuart1);
 80041a4:	48a9      	ldr	r0, [pc, #676]	; (800444c <ConfigModeIdle+0x300>)
 80041a6:	f006 f915 	bl	800a3d4 <HAL_UART_AbortReceive>
	SetUpTXRXCycle_BTUART();
 80041aa:	f7fd fc63 	bl	8001a74 <SetUpTXRXCycle_BTUART>

	//Wait for commandflag (either buttonpress or BT uart from App)
	//variable "commandflag" as int - defines which command should be initiated and is written by command interrupt
	while (1) {
		//button only pressed quickly -> Perform GSM Test
		if (commandflag == 1){
 80041ae:	4baa      	ldr	r3, [pc, #680]	; (8004458 <ConfigModeIdle+0x30c>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d11f      	bne.n	80041f6 <ConfigModeIdle+0xaa>
			HAL_UART_AbortReceive(&hlpuart1);
 80041b6:	48a5      	ldr	r0, [pc, #660]	; (800444c <ConfigModeIdle+0x300>)
 80041b8:	f006 f90c 	bl	800a3d4 <HAL_UART_AbortReceive>
			commandflag = 0;
 80041bc:	4ba6      	ldr	r3, [pc, #664]	; (8004458 <ConfigModeIdle+0x30c>)
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 80041c2:	48a0      	ldr	r0, [pc, #640]	; (8004444 <ConfigModeIdle+0x2f8>)
 80041c4:	f00c fa38 	bl	8010638 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 80041c8:	2200      	movs	r2, #0
 80041ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041ce:	48a3      	ldr	r0, [pc, #652]	; (800445c <ConfigModeIdle+0x310>)
 80041d0:	f003 faeb 	bl	80077aa <HAL_GPIO_WritePin>
			/*Test GSM Functions*/
			GSMTest();
 80041d4:	f000 fdfc 	bl	8004dd0 <GSMTest>
			buttonpressdone = 0;
 80041d8:	4ba1      	ldr	r3, [pc, #644]	; (8004460 <ConfigModeIdle+0x314>)
 80041da:	2200      	movs	r2, #0
 80041dc:	701a      	strb	r2, [r3, #0]
			/*Clear Pending Interrupts in case button was pressed while GSM Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 80041de:	4ba1      	ldr	r3, [pc, #644]	; (8004464 <ConfigModeIdle+0x318>)
 80041e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041e4:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80041e6:	2029      	movs	r0, #41	; 0x29
 80041e8:	f002 fa7d 	bl	80066e6 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80041ec:	2029      	movs	r0, #41	; 0x29
 80041ee:	f002 fa5e 	bl	80066ae <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 80041f2:	f7fd fc3f 	bl	8001a74 <SetUpTXRXCycle_BTUART>
		}
		//button pressed between 2 and 5 seconds -> Read out Battery voltage
		if (commandflag == 2){
 80041f6:	4b98      	ldr	r3, [pc, #608]	; (8004458 <ConfigModeIdle+0x30c>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d11c      	bne.n	8004238 <ConfigModeIdle+0xec>
			HAL_UART_AbortReceive(&hlpuart1);
 80041fe:	4893      	ldr	r0, [pc, #588]	; (800444c <ConfigModeIdle+0x300>)
 8004200:	f006 f8e8 	bl	800a3d4 <HAL_UART_AbortReceive>
			commandflag = 0;
 8004204:	4b94      	ldr	r3, [pc, #592]	; (8004458 <ConfigModeIdle+0x30c>)
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 800420a:	488e      	ldr	r0, [pc, #568]	; (8004444 <ConfigModeIdle+0x2f8>)
 800420c:	f00c fa14 	bl	8010638 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004210:	2200      	movs	r2, #0
 8004212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004216:	4891      	ldr	r0, [pc, #580]	; (800445c <ConfigModeIdle+0x310>)
 8004218:	f003 fac7 	bl	80077aa <HAL_GPIO_WritePin>
			/*Battery Readout*/
			BatteryReadout();
 800421c:	f000 fd46 	bl	8004cac <BatteryReadout>
			/*Clear Pending Interrupts in case button was pressed while GSM Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 8004220:	4b90      	ldr	r3, [pc, #576]	; (8004464 <ConfigModeIdle+0x318>)
 8004222:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004226:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8004228:	2029      	movs	r0, #41	; 0x29
 800422a:	f002 fa5c 	bl	80066e6 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800422e:	2029      	movs	r0, #41	; 0x29
 8004230:	f002 fa3d 	bl	80066ae <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 8004234:	f7fd fc1e 	bl	8001a74 <SetUpTXRXCycle_BTUART>
		}
		//button over 5s pressed: search and sync slave devices over LoRa
		if (commandflag == 3){
 8004238:	4b87      	ldr	r3, [pc, #540]	; (8004458 <ConfigModeIdle+0x30c>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b03      	cmp	r3, #3
 800423e:	d11c      	bne.n	800427a <ConfigModeIdle+0x12e>
			HAL_UART_AbortReceive(&hlpuart1);
 8004240:	4882      	ldr	r0, [pc, #520]	; (800444c <ConfigModeIdle+0x300>)
 8004242:	f006 f8c7 	bl	800a3d4 <HAL_UART_AbortReceive>
			commandflag = 0;
 8004246:	4b84      	ldr	r3, [pc, #528]	; (8004458 <ConfigModeIdle+0x30c>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 800424c:	487d      	ldr	r0, [pc, #500]	; (8004444 <ConfigModeIdle+0x2f8>)
 800424e:	f00c f9f3 	bl	8010638 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004252:	2200      	movs	r2, #0
 8004254:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004258:	4880      	ldr	r0, [pc, #512]	; (800445c <ConfigModeIdle+0x310>)
 800425a:	f003 faa6 	bl	80077aa <HAL_GPIO_WritePin>
			/*Find, sync and register LoRa Slaves with their ID*/
			LoRa_FindSync();
 800425e:	f000 ff71 	bl	8005144 <LoRa_FindSync>
			/*Clear Pending Interrupts in case button was pressed while GSM Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 8004262:	4b80      	ldr	r3, [pc, #512]	; (8004464 <ConfigModeIdle+0x318>)
 8004264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004268:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800426a:	2029      	movs	r0, #41	; 0x29
 800426c:	f002 fa3b 	bl	80066e6 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004270:	2029      	movs	r0, #41	; 0x29
 8004272:	f002 fa1c 	bl	80066ae <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 8004276:	f7fd fbfd 	bl	8001a74 <SetUpTXRXCycle_BTUART>

		}
		//button over 10s pressed: start LoRa
		if (commandflag == 4){
 800427a:	4b77      	ldr	r3, [pc, #476]	; (8004458 <ConfigModeIdle+0x30c>)
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b04      	cmp	r3, #4
 8004280:	f040 8114 	bne.w	80044ac <ConfigModeIdle+0x360>
			HAL_UART_AbortReceive(&hlpuart1);
 8004284:	4871      	ldr	r0, [pc, #452]	; (800444c <ConfigModeIdle+0x300>)
 8004286:	f006 f8a5 	bl	800a3d4 <HAL_UART_AbortReceive>
			uint8_t readyforsleep_lora = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
			uint8_t validnr = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	75bb      	strb	r3, [r7, #22]
			commandflag = 0;
 8004292:	4b71      	ldr	r3, [pc, #452]	; (8004458 <ConfigModeIdle+0x30c>)
 8004294:	2200      	movs	r2, #0
 8004296:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 8004298:	486a      	ldr	r0, [pc, #424]	; (8004444 <ConfigModeIdle+0x2f8>)
 800429a:	f00c f9cd 	bl	8010638 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 800429e:	2200      	movs	r2, #0
 80042a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042a4:	486d      	ldr	r0, [pc, #436]	; (800445c <ConfigModeIdle+0x310>)
 80042a6:	f003 fa80 	bl	80077aa <HAL_GPIO_WritePin>
			_BT_PRINT("Initializing Sleep for trap mode...\r");
 80042aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80042ae:	2224      	movs	r2, #36	; 0x24
 80042b0:	496d      	ldr	r1, [pc, #436]	; (8004468 <ConfigModeIdle+0x31c>)
 80042b2:	4866      	ldr	r0, [pc, #408]	; (800444c <ConfigModeIdle+0x300>)
 80042b4:	f005 ff0f 	bl	800a0d6 <HAL_UART_Transmit>

			/*Check if Valid nr*/
			if (strncmp(Parameter.Handynummer, "+", 1) == 0 && digits_only(Parameter.Handynummer+1) == 1){
 80042b8:	4b6c      	ldr	r3, [pc, #432]	; (800446c <ConfigModeIdle+0x320>)
 80042ba:	781a      	ldrb	r2, [r3, #0]
 80042bc:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <ConfigModeIdle+0x324>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <ConfigModeIdle+0x18e>
 80042c6:	4b6b      	ldr	r3, [pc, #428]	; (8004474 <ConfigModeIdle+0x328>)
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 f9d1 	bl	8005670 <digits_only>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d102      	bne.n	80042da <ConfigModeIdle+0x18e>
				validnr = 1;
 80042d4:	2301      	movs	r3, #1
 80042d6:	75bb      	strb	r3, [r7, #22]
 80042d8:	e001      	b.n	80042de <ConfigModeIdle+0x192>
			}
			else {
				validnr = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	75bb      	strb	r3, [r7, #22]
			}

			/*Sleep Mode activation over LoRa, if slaves are used*/
			if (slaves_reg != 0){
 80042de:	4b66      	ldr	r3, [pc, #408]	; (8004478 <ConfigModeIdle+0x32c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d004      	beq.n	80042f0 <ConfigModeIdle+0x1a4>
				readyforsleep_lora = LoRa_StartSleep();
 80042e6:	f001 f83f 	bl	8005368 <LoRa_StartSleep>
 80042ea:	4603      	mov	r3, r0
 80042ec:	75fb      	strb	r3, [r7, #23]
 80042ee:	e001      	b.n	80042f4 <ConfigModeIdle+0x1a8>
			}
			else {
				readyforsleep_lora = 1;
 80042f0:	2301      	movs	r3, #1
 80042f2:	75fb      	strb	r3, [r7, #23]
			}


			if (readyforsleep_lora == 0){
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d153      	bne.n	80043a2 <ConfigModeIdle+0x256>
				sprintf(printstr, "Error! Following slave devices did not acknowledge sleep mode: ");
 80042fa:	4960      	ldr	r1, [pc, #384]	; (800447c <ConfigModeIdle+0x330>)
 80042fc:	4860      	ldr	r0, [pc, #384]	; (8004480 <ConfigModeIdle+0x334>)
 80042fe:	f00d fa7d 	bl	80117fc <siprintf>
				for (uint8_t i = 0; i < slaves_reg; i++){
 8004302:	2300      	movs	r3, #0
 8004304:	757b      	strb	r3, [r7, #21]
 8004306:	e019      	b.n	800433c <ConfigModeIdle+0x1f0>
					if (slavestatus[i] == ERROR_BEFORE_SLEEP){	// 8=missing ack, 1 = ok,
 8004308:	7d7b      	ldrb	r3, [r7, #21]
 800430a:	4a5e      	ldr	r2, [pc, #376]	; (8004484 <ConfigModeIdle+0x338>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d111      	bne.n	8004336 <ConfigModeIdle+0x1ea>
						char slaveid_str[5] = {0};
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	2300      	movs	r3, #0
 8004318:	723b      	strb	r3, [r7, #8]
						sprintf(slaveid_str, "%u", slaveaddrss[i]);
 800431a:	7d7b      	ldrb	r3, [r7, #21]
 800431c:	4a5a      	ldr	r2, [pc, #360]	; (8004488 <ConfigModeIdle+0x33c>)
 800431e:	5cd3      	ldrb	r3, [r2, r3]
 8004320:	461a      	mov	r2, r3
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	4959      	ldr	r1, [pc, #356]	; (800448c <ConfigModeIdle+0x340>)
 8004326:	4618      	mov	r0, r3
 8004328:	f00d fa68 	bl	80117fc <siprintf>
						strcat(printstr, slaveid_str);
 800432c:	1d3b      	adds	r3, r7, #4
 800432e:	4619      	mov	r1, r3
 8004330:	4853      	ldr	r0, [pc, #332]	; (8004480 <ConfigModeIdle+0x334>)
 8004332:	f00d fa83 	bl	801183c <strcat>
				for (uint8_t i = 0; i < slaves_reg; i++){
 8004336:	7d7b      	ldrb	r3, [r7, #21]
 8004338:	3301      	adds	r3, #1
 800433a:	757b      	strb	r3, [r7, #21]
 800433c:	4b4e      	ldr	r3, [pc, #312]	; (8004478 <ConfigModeIdle+0x32c>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	7d7a      	ldrb	r2, [r7, #21]
 8004342:	429a      	cmp	r2, r3
 8004344:	d3e0      	bcc.n	8004308 <ConfigModeIdle+0x1bc>
					}
				}
				strcat(printstr, "\r");
 8004346:	484e      	ldr	r0, [pc, #312]	; (8004480 <ConfigModeIdle+0x334>)
 8004348:	f7fb ff1a 	bl	8000180 <strlen>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <ConfigModeIdle+0x334>)
 8004352:	4413      	add	r3, r2
 8004354:	494e      	ldr	r1, [pc, #312]	; (8004490 <ConfigModeIdle+0x344>)
 8004356:	461a      	mov	r2, r3
 8004358:	460b      	mov	r3, r1
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	8013      	strh	r3, [r2, #0]
				_BT_PRINT(printstr);
 800435e:	4848      	ldr	r0, [pc, #288]	; (8004480 <ConfigModeIdle+0x334>)
 8004360:	f7fb ff0e 	bl	8000180 <strlen>
 8004364:	4603      	mov	r3, r0
 8004366:	b29a      	uxth	r2, r3
 8004368:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800436c:	4944      	ldr	r1, [pc, #272]	; (8004480 <ConfigModeIdle+0x334>)
 800436e:	4837      	ldr	r0, [pc, #220]	; (800444c <ConfigModeIdle+0x300>)
 8004370:	f005 feb1 	bl	800a0d6 <HAL_UART_Transmit>
				_BT_PRINT("Initiation of sleep mode canceled.\r");
 8004374:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004378:	2223      	movs	r2, #35	; 0x23
 800437a:	4946      	ldr	r1, [pc, #280]	; (8004494 <ConfigModeIdle+0x348>)
 800437c:	4833      	ldr	r0, [pc, #204]	; (800444c <ConfigModeIdle+0x300>)
 800437e:	f005 feaa 	bl	800a0d6 <HAL_UART_Transmit>
				indicateLED_return(0);
 8004382:	2000      	movs	r0, #0
 8004384:	f001 f8d6 	bl	8005534 <indicateLED_return>
				__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 8004388:	4b36      	ldr	r3, [pc, #216]	; (8004464 <ConfigModeIdle+0x318>)
 800438a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800438e:	60da      	str	r2, [r3, #12]
				HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8004390:	2029      	movs	r0, #41	; 0x29
 8004392:	f002 f9a8 	bl	80066e6 <HAL_NVIC_ClearPendingIRQ>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004396:	2029      	movs	r0, #41	; 0x29
 8004398:	f002 f989 	bl	80066ae <HAL_NVIC_EnableIRQ>
				SetUpTXRXCycle_BTUART();
 800439c:	f7fd fb6a 	bl	8001a74 <SetUpTXRXCycle_BTUART>
 80043a0:	e084      	b.n	80044ac <ConfigModeIdle+0x360>
			}
			else if (validnr == 0){
 80043a2:	7dbb      	ldrb	r3, [r7, #22]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11d      	bne.n	80043e4 <ConfigModeIdle+0x298>
				_BT_PRINT("No valid Mobile-Nr to send SMS to was set. Please specifiy a Number starting with +49..\r");
 80043a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80043ac:	2258      	movs	r2, #88	; 0x58
 80043ae:	493a      	ldr	r1, [pc, #232]	; (8004498 <ConfigModeIdle+0x34c>)
 80043b0:	4826      	ldr	r0, [pc, #152]	; (800444c <ConfigModeIdle+0x300>)
 80043b2:	f005 fe90 	bl	800a0d6 <HAL_UART_Transmit>
				_BT_PRINT("Initiation of sleep mode canceled.\r");
 80043b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80043ba:	2223      	movs	r2, #35	; 0x23
 80043bc:	4935      	ldr	r1, [pc, #212]	; (8004494 <ConfigModeIdle+0x348>)
 80043be:	4823      	ldr	r0, [pc, #140]	; (800444c <ConfigModeIdle+0x300>)
 80043c0:	f005 fe89 	bl	800a0d6 <HAL_UART_Transmit>
				indicateLED_return(0);
 80043c4:	2000      	movs	r0, #0
 80043c6:	f001 f8b5 	bl	8005534 <indicateLED_return>
				__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 80043ca:	4b26      	ldr	r3, [pc, #152]	; (8004464 <ConfigModeIdle+0x318>)
 80043cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043d0:	60da      	str	r2, [r3, #12]
				HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80043d2:	2029      	movs	r0, #41	; 0x29
 80043d4:	f002 f987 	bl	80066e6 <HAL_NVIC_ClearPendingIRQ>
				HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043d8:	2029      	movs	r0, #41	; 0x29
 80043da:	f002 f968 	bl	80066ae <HAL_NVIC_EnableIRQ>
				SetUpTXRXCycle_BTUART();
 80043de:	f7fd fb49 	bl	8001a74 <SetUpTXRXCycle_BTUART>
 80043e2:	e063      	b.n	80044ac <ConfigModeIdle+0x360>
			}
			else{
				if (slaves_reg != 0){
 80043e4:	4b24      	ldr	r3, [pc, #144]	; (8004478 <ConfigModeIdle+0x32c>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <ConfigModeIdle+0x2b0>
					_BT_PRINT("All slaves acknowledged, starting power-down trap mode now... Bluetooth connection will break\r");
 80043ec:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80043f0:	225e      	movs	r2, #94	; 0x5e
 80043f2:	492a      	ldr	r1, [pc, #168]	; (800449c <ConfigModeIdle+0x350>)
 80043f4:	4815      	ldr	r0, [pc, #84]	; (800444c <ConfigModeIdle+0x300>)
 80043f6:	f005 fe6e 	bl	800a0d6 <HAL_UART_Transmit>
 80043fa:	e006      	b.n	800440a <ConfigModeIdle+0x2be>
				}
				else {
					_BT_PRINT("Starting power-down trap mode with no slaves now...Bluetooth connection will break\r");
 80043fc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004400:	2253      	movs	r2, #83	; 0x53
 8004402:	4927      	ldr	r1, [pc, #156]	; (80044a0 <ConfigModeIdle+0x354>)
 8004404:	4811      	ldr	r0, [pc, #68]	; (800444c <ConfigModeIdle+0x300>)
 8004406:	f005 fe66 	bl	800a0d6 <HAL_UART_Transmit>
				}
				HAL_Delay(200);
 800440a:	20c8      	movs	r0, #200	; 0xc8
 800440c:	f7fe f948 	bl	80026a0 <HAL_Delay>

				/*Stop UART BT Reception*/
				HAL_UART_AbortReceive(&hlpuart1);
 8004410:	480e      	ldr	r0, [pc, #56]	; (800444c <ConfigModeIdle+0x300>)
 8004412:	f005 ffdf 	bl	800a3d4 <HAL_UART_AbortReceive>

				/*Shut down GSM and Bluetooth module*/
				HAL_GPIO_WritePin(GSM_Switch_GPIO_Port, GSM_Switch_Pin, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800441c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004420:	f003 f9c3 	bl	80077aa <HAL_GPIO_WritePin>
				UTIL_TIMER_Create(&timerSleepWakeup, 60000, UTIL_TIMER_ONESHOT, timerSleepWakeupEvent, NULL); //every min, mins++
 8004424:	2300      	movs	r3, #0
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <ConfigModeIdle+0x358>)
 800442a:	2200      	movs	r2, #0
 800442c:	f64e 2160 	movw	r1, #60000	; 0xea60
 8004430:	481d      	ldr	r0, [pc, #116]	; (80044a8 <ConfigModeIdle+0x35c>)
 8004432:	f00c f85d 	bl	80104f0 <UTIL_TIMER_Create>
				UTIL_TIMER_Start(&timerSleepWakeup);
 8004436:	481c      	ldr	r0, [pc, #112]	; (80044a8 <ConfigModeIdle+0x35c>)
 8004438:	f00c f890 	bl	801055c <UTIL_TIMER_Start>
				return;
 800443c:	e165      	b.n	800470a <ConfigModeIdle+0x5be>
 800443e:	bf00      	nop
 8004440:	080055ad 	.word	0x080055ad
 8004444:	200008e8 	.word	0x200008e8
 8004448:	08014d7c 	.word	0x08014d7c
 800444c:	20000478 	.word	0x20000478
 8004450:	080055d5 	.word	0x080055d5
 8004454:	20000900 	.word	0x20000900
 8004458:	20000960 	.word	0x20000960
 800445c:	48000400 	.word	0x48000400
 8004460:	20000961 	.word	0x20000961
 8004464:	58000800 	.word	0x58000800
 8004468:	08014d9c 	.word	0x08014d9c
 800446c:	20000010 	.word	0x20000010
 8004470:	08014dc4 	.word	0x08014dc4
 8004474:	20000011 	.word	0x20000011
 8004478:	200009e0 	.word	0x200009e0
 800447c:	08014dc8 	.word	0x08014dc8
 8004480:	20000970 	.word	0x20000970
 8004484:	200009ec 	.word	0x200009ec
 8004488:	200009e4 	.word	0x200009e4
 800448c:	08014e08 	.word	0x08014e08
 8004490:	08014e0c 	.word	0x08014e0c
 8004494:	08014e10 	.word	0x08014e10
 8004498:	08014e34 	.word	0x08014e34
 800449c:	08014e90 	.word	0x08014e90
 80044a0:	08014ef0 	.word	0x08014ef0
 80044a4:	08005611 	.word	0x08005611
 80044a8:	20000918 	.word	0x20000918
			}

		}

		if (commandflag == 5){
 80044ac:	4b98      	ldr	r3, [pc, #608]	; (8004710 <ConfigModeIdle+0x5c4>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b05      	cmp	r3, #5
 80044b2:	f040 80aa 	bne.w	800460a <ConfigModeIdle+0x4be>
			HAL_UART_AbortReceive(&hlpuart1);
 80044b6:	4897      	ldr	r0, [pc, #604]	; (8004714 <ConfigModeIdle+0x5c8>)
 80044b8:	f005 ff8c 	bl	800a3d4 <HAL_UART_AbortReceive>
			commandflag = 0;
 80044bc:	4b94      	ldr	r3, [pc, #592]	; (8004710 <ConfigModeIdle+0x5c4>)
 80044be:	2200      	movs	r2, #0
 80044c0:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 80044c2:	4895      	ldr	r0, [pc, #596]	; (8004718 <ConfigModeIdle+0x5cc>)
 80044c4:	f00c f8b8 	bl	8010638 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 80044c8:	2200      	movs	r2, #0
 80044ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044ce:	4893      	ldr	r0, [pc, #588]	; (800471c <ConfigModeIdle+0x5d0>)
 80044d0:	f003 f96b 	bl	80077aa <HAL_GPIO_WritePin>
			_BT_PRINT("Storing new number...\r");
 80044d4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80044d8:	2216      	movs	r2, #22
 80044da:	4991      	ldr	r1, [pc, #580]	; (8004720 <ConfigModeIdle+0x5d4>)
 80044dc:	488d      	ldr	r0, [pc, #564]	; (8004714 <ConfigModeIdle+0x5c8>)
 80044de:	f005 fdfa 	bl	800a0d6 <HAL_UART_Transmit>
			//Check if valid nr
			if (strncmp(handynr_set, "+", 1) == 0 && digits_only(handynr_set+1) == 1){
 80044e2:	4b90      	ldr	r3, [pc, #576]	; (8004724 <ConfigModeIdle+0x5d8>)
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	4b90      	ldr	r3, [pc, #576]	; (8004728 <ConfigModeIdle+0x5dc>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d176      	bne.n	80045de <ConfigModeIdle+0x492>
 80044f0:	4b8e      	ldr	r3, [pc, #568]	; (800472c <ConfigModeIdle+0x5e0>)
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 f8bc 	bl	8005670 <digits_only>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d16f      	bne.n	80045de <ConfigModeIdle+0x492>
				memcpy(Parameter.Handynummer, handynr_set, 15);
 80044fe:	4a8c      	ldr	r2, [pc, #560]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004500:	4b88      	ldr	r3, [pc, #544]	; (8004724 <ConfigModeIdle+0x5d8>)
 8004502:	4614      	mov	r4, r2
 8004504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004506:	c407      	stmia	r4!, {r0, r1, r2}
 8004508:	8023      	strh	r3, [r4, #0]
 800450a:	3402      	adds	r4, #2
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	7023      	strb	r3, [r4, #0]

				for (int i = 0; i <= 15; i++) {
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e026      	b.n	8004564 <ConfigModeIdle+0x418>
					if (i <= 8)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b08      	cmp	r3, #8
 800451a:	dc0a      	bgt.n	8004532 <ConfigModeIdle+0x3e6>
						Parameter.Handynummer1[i] = Parameter.Handynummer[i];
 800451c:	4a84      	ldr	r2, [pc, #528]	; (8004730 <ConfigModeIdle+0x5e4>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4413      	add	r3, r2
 8004522:	7819      	ldrb	r1, [r3, #0]
 8004524:	4a82      	ldr	r2, [pc, #520]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4413      	add	r3, r2
 800452a:	3320      	adds	r3, #32
 800452c:	460a      	mov	r2, r1
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e015      	b.n	800455e <ConfigModeIdle+0x412>
					else {
						for (int f = (i - 8); (i - f) == 8; f++) {
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3b08      	subs	r3, #8
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	e00c      	b.n	8004554 <ConfigModeIdle+0x408>

							Parameter.Handynummer2[f] = Parameter.Handynummer[i];
 800453a:	4a7d      	ldr	r2, [pc, #500]	; (8004730 <ConfigModeIdle+0x5e4>)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4413      	add	r3, r2
 8004540:	7819      	ldrb	r1, [r3, #0]
 8004542:	4a7b      	ldr	r2, [pc, #492]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4413      	add	r3, r2
 8004548:	3328      	adds	r3, #40	; 0x28
 800454a:	460a      	mov	r2, r1
 800454c:	701a      	strb	r2, [r3, #0]
						for (int f = (i - 8); (i - f) == 8; f++) {
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3301      	adds	r3, #1
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b08      	cmp	r3, #8
 800455c:	d0ed      	beq.n	800453a <ConfigModeIdle+0x3ee>
				for (int i = 0; i <= 15; i++) {
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3301      	adds	r3, #1
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	2b0f      	cmp	r3, #15
 8004568:	ddd5      	ble.n	8004516 <ConfigModeIdle+0x3ca>
 800456a:	4b71      	ldr	r3, [pc, #452]	; (8004730 <ConfigModeIdle+0x5e4>)
 800456c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
						}
					}
				}

				memcpy(&speicherhandynr1, Parameter.Handynummer1, 8);
 8004570:	4970      	ldr	r1, [pc, #448]	; (8004734 <ConfigModeIdle+0x5e8>)
 8004572:	e9c1 2300 	strd	r2, r3, [r1]
 8004576:	4b6e      	ldr	r3, [pc, #440]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004578:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
				memcpy(&speicherhandynr2, Parameter.Handynummer2, 8);
 800457c:	496e      	ldr	r1, [pc, #440]	; (8004738 <ConfigModeIdle+0x5ec>)
 800457e:	e9c1 2300 	strd	r2, r3, [r1]

				Eraseflash_func();
 8004582:	f7fd fbbd 	bl	8001d00 <Eraseflash_func>
				Writeflash_func(speicherhandynr1, speicherhandynr2, Parameter.Wakeup);
 8004586:	4b6b      	ldr	r3, [pc, #428]	; (8004734 <ConfigModeIdle+0x5e8>)
 8004588:	e9d3 0100 	ldrd	r0, r1, [r3]
 800458c:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <ConfigModeIdle+0x5ec>)
 800458e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004592:	4b67      	ldr	r3, [pc, #412]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004594:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004598:	e9cd 2300 	strd	r2, r3, [sp]
 800459c:	4622      	mov	r2, r4
 800459e:	462b      	mov	r3, r5
 80045a0:	f7fd fbea 	bl	8001d78 <Writeflash_func>
				_BT_PRINT("Successfully stored ")
 80045a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045a8:	2214      	movs	r2, #20
 80045aa:	4964      	ldr	r1, [pc, #400]	; (800473c <ConfigModeIdle+0x5f0>)
 80045ac:	4859      	ldr	r0, [pc, #356]	; (8004714 <ConfigModeIdle+0x5c8>)
 80045ae:	f005 fd92 	bl	800a0d6 <HAL_UART_Transmit>
				_BT_PRINT(handynr_set);
 80045b2:	485c      	ldr	r0, [pc, #368]	; (8004724 <ConfigModeIdle+0x5d8>)
 80045b4:	f7fb fde4 	bl	8000180 <strlen>
 80045b8:	4603      	mov	r3, r0
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045c0:	4958      	ldr	r1, [pc, #352]	; (8004724 <ConfigModeIdle+0x5d8>)
 80045c2:	4854      	ldr	r0, [pc, #336]	; (8004714 <ConfigModeIdle+0x5c8>)
 80045c4:	f005 fd87 	bl	800a0d6 <HAL_UART_Transmit>
				_BT_PRINT(" as the number to send SMS to...\r");
 80045c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045cc:	2221      	movs	r2, #33	; 0x21
 80045ce:	495c      	ldr	r1, [pc, #368]	; (8004740 <ConfigModeIdle+0x5f4>)
 80045d0:	4850      	ldr	r0, [pc, #320]	; (8004714 <ConfigModeIdle+0x5c8>)
 80045d2:	f005 fd80 	bl	800a0d6 <HAL_UART_Transmit>
				indicateLED_return(1);
 80045d6:	2001      	movs	r0, #1
 80045d8:	f000 ffac 	bl	8005534 <indicateLED_return>
 80045dc:	e009      	b.n	80045f2 <ConfigModeIdle+0x4a6>
			}
			else {
				_BT_PRINT("No valid Mobile-Nr to send SMS to was set. Please specifiy a Number starting with +49..\r");
 80045de:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80045e2:	2258      	movs	r2, #88	; 0x58
 80045e4:	4957      	ldr	r1, [pc, #348]	; (8004744 <ConfigModeIdle+0x5f8>)
 80045e6:	484b      	ldr	r0, [pc, #300]	; (8004714 <ConfigModeIdle+0x5c8>)
 80045e8:	f005 fd75 	bl	800a0d6 <HAL_UART_Transmit>
				indicateLED_return(0);
 80045ec:	2000      	movs	r0, #0
 80045ee:	f000 ffa1 	bl	8005534 <indicateLED_return>
			}

			/*Clear Pending Interrupts in case button was pressed while Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 80045f2:	4b55      	ldr	r3, [pc, #340]	; (8004748 <ConfigModeIdle+0x5fc>)
 80045f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045f8:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80045fa:	2029      	movs	r0, #41	; 0x29
 80045fc:	f002 f873 	bl	80066e6 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004600:	2029      	movs	r0, #41	; 0x29
 8004602:	f002 f854 	bl	80066ae <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 8004606:	f7fd fa35 	bl	8001a74 <SetUpTXRXCycle_BTUART>

		}
		if (commandflag == 6){
 800460a:	4b41      	ldr	r3, [pc, #260]	; (8004710 <ConfigModeIdle+0x5c4>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b06      	cmp	r3, #6
 8004610:	f47f adcd 	bne.w	80041ae <ConfigModeIdle+0x62>
			HAL_UART_AbortReceive(&hlpuart1);
 8004614:	483f      	ldr	r0, [pc, #252]	; (8004714 <ConfigModeIdle+0x5c8>)
 8004616:	f005 fedd 	bl	800a3d4 <HAL_UART_AbortReceive>
			commandflag = 0;
 800461a:	4b3d      	ldr	r3, [pc, #244]	; (8004710 <ConfigModeIdle+0x5c4>)
 800461c:	2200      	movs	r2, #0
 800461e:	701a      	strb	r2, [r3, #0]
			/*Stop Idle LED Blink*/
			UTIL_TIMER_Stop(&timerLedIdleConf);
 8004620:	483d      	ldr	r0, [pc, #244]	; (8004718 <ConfigModeIdle+0x5cc>)
 8004622:	f00c f809 	bl	8010638 <UTIL_TIMER_Stop>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004626:	2200      	movs	r2, #0
 8004628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800462c:	483b      	ldr	r0, [pc, #236]	; (800471c <ConfigModeIdle+0x5d0>)
 800462e:	f003 f8bc 	bl	80077aa <HAL_GPIO_WritePin>
			_BT_PRINT("Storing new wakeup time interval...\r");
 8004632:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	4944      	ldr	r1, [pc, #272]	; (800474c <ConfigModeIdle+0x600>)
 800463a:	4836      	ldr	r0, [pc, #216]	; (8004714 <ConfigModeIdle+0x5c8>)
 800463c:	f005 fd4b 	bl	800a0d6 <HAL_UART_Transmit>
			//Check if valid nr
			if (wakeup_set > 0){
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <ConfigModeIdle+0x604>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	4313      	orrs	r3, r2
 8004648:	d048      	beq.n	80046dc <ConfigModeIdle+0x590>
				Parameter.Wakeup = wakeup_set;
 800464a:	4b41      	ldr	r3, [pc, #260]	; (8004750 <ConfigModeIdle+0x604>)
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	4937      	ldr	r1, [pc, #220]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004652:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8004656:	4b36      	ldr	r3, [pc, #216]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004658:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
				memcpy(&speicherhandynr1, Parameter.Handynummer1, 8);
 800465c:	4935      	ldr	r1, [pc, #212]	; (8004734 <ConfigModeIdle+0x5e8>)
 800465e:	e9c1 2300 	strd	r2, r3, [r1]
 8004662:	4b33      	ldr	r3, [pc, #204]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004664:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
				memcpy(&speicherhandynr2, Parameter.Handynummer2, 8);
 8004668:	4933      	ldr	r1, [pc, #204]	; (8004738 <ConfigModeIdle+0x5ec>)
 800466a:	e9c1 2300 	strd	r2, r3, [r1]

				Eraseflash_func();
 800466e:	f7fd fb47 	bl	8001d00 <Eraseflash_func>
				Writeflash_func(speicherhandynr1, speicherhandynr2, Parameter.Wakeup);
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <ConfigModeIdle+0x5e8>)
 8004674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004678:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <ConfigModeIdle+0x5ec>)
 800467a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800467e:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <ConfigModeIdle+0x5e4>)
 8004680:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004684:	e9cd 2300 	strd	r2, r3, [sp]
 8004688:	4622      	mov	r2, r4
 800468a:	462b      	mov	r3, r5
 800468c:	f7fd fb74 	bl	8001d78 <Writeflash_func>
				_BT_PRINT("Successfully stored ");
 8004690:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004694:	2214      	movs	r2, #20
 8004696:	4929      	ldr	r1, [pc, #164]	; (800473c <ConfigModeIdle+0x5f0>)
 8004698:	481e      	ldr	r0, [pc, #120]	; (8004714 <ConfigModeIdle+0x5c8>)
 800469a:	f005 fd1c 	bl	800a0d6 <HAL_UART_Transmit>
				sprintf(printstr, "%lu" , (uint32_t)wakeup_set);
 800469e:	4b2c      	ldr	r3, [pc, #176]	; (8004750 <ConfigModeIdle+0x604>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	4613      	mov	r3, r2
 80046a6:	461a      	mov	r2, r3
 80046a8:	492a      	ldr	r1, [pc, #168]	; (8004754 <ConfigModeIdle+0x608>)
 80046aa:	482b      	ldr	r0, [pc, #172]	; (8004758 <ConfigModeIdle+0x60c>)
 80046ac:	f00d f8a6 	bl	80117fc <siprintf>
				_BT_PRINT(printstr);
 80046b0:	4829      	ldr	r0, [pc, #164]	; (8004758 <ConfigModeIdle+0x60c>)
 80046b2:	f7fb fd65 	bl	8000180 <strlen>
 80046b6:	4603      	mov	r3, r0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80046be:	4926      	ldr	r1, [pc, #152]	; (8004758 <ConfigModeIdle+0x60c>)
 80046c0:	4814      	ldr	r0, [pc, #80]	; (8004714 <ConfigModeIdle+0x5c8>)
 80046c2:	f005 fd08 	bl	800a0d6 <HAL_UART_Transmit>
				_BT_PRINT(" minutes as wakeup time interval...\r");
 80046c6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	4923      	ldr	r1, [pc, #140]	; (800475c <ConfigModeIdle+0x610>)
 80046ce:	4811      	ldr	r0, [pc, #68]	; (8004714 <ConfigModeIdle+0x5c8>)
 80046d0:	f005 fd01 	bl	800a0d6 <HAL_UART_Transmit>
				indicateLED_return(1);
 80046d4:	2001      	movs	r0, #1
 80046d6:	f000 ff2d 	bl	8005534 <indicateLED_return>
 80046da:	e009      	b.n	80046f0 <ConfigModeIdle+0x5a4>
			}
			else {
				_BT_PRINT("No valid wakeup time interval in minutes was set, please specify a number over 0..\r");
 80046dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80046e0:	2253      	movs	r2, #83	; 0x53
 80046e2:	491f      	ldr	r1, [pc, #124]	; (8004760 <ConfigModeIdle+0x614>)
 80046e4:	480b      	ldr	r0, [pc, #44]	; (8004714 <ConfigModeIdle+0x5c8>)
 80046e6:	f005 fcf6 	bl	800a0d6 <HAL_UART_Transmit>
				indicateLED_return(0);
 80046ea:	2000      	movs	r0, #0
 80046ec:	f000 ff22 	bl	8005534 <indicateLED_return>
			}

			/*Clear Pending Interrupts in case button was pressed while Process and enable IRQs again*/
			__HAL_GPIO_EXTI_CLEAR_IT(BUT_BOOT_Pin);
 80046f0:	4b15      	ldr	r3, [pc, #84]	; (8004748 <ConfigModeIdle+0x5fc>)
 80046f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046f6:	60da      	str	r2, [r3, #12]
			HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 80046f8:	2029      	movs	r0, #41	; 0x29
 80046fa:	f001 fff4 	bl	80066e6 <HAL_NVIC_ClearPendingIRQ>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046fe:	2029      	movs	r0, #41	; 0x29
 8004700:	f001 ffd5 	bl	80066ae <HAL_NVIC_EnableIRQ>
			SetUpTXRXCycle_BTUART();
 8004704:	f7fd f9b6 	bl	8001a74 <SetUpTXRXCycle_BTUART>
		if (commandflag == 1){
 8004708:	e551      	b.n	80041ae <ConfigModeIdle+0x62>
		}

	}
}
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bdb0      	pop	{r4, r5, r7, pc}
 8004710:	20000960 	.word	0x20000960
 8004714:	20000478 	.word	0x20000478
 8004718:	200008e8 	.word	0x200008e8
 800471c:	48000400 	.word	0x48000400
 8004720:	08014f44 	.word	0x08014f44
 8004724:	200008d0 	.word	0x200008d0
 8004728:	08014dc4 	.word	0x08014dc4
 800472c:	200008d1 	.word	0x200008d1
 8004730:	20000010 	.word	0x20000010
 8004734:	200008c0 	.word	0x200008c0
 8004738:	200008c8 	.word	0x200008c8
 800473c:	08014f5c 	.word	0x08014f5c
 8004740:	08014f74 	.word	0x08014f74
 8004744:	08014e34 	.word	0x08014e34
 8004748:	58000800 	.word	0x58000800
 800474c:	08014f98 	.word	0x08014f98
 8004750:	200008e0 	.word	0x200008e0
 8004754:	08014fc0 	.word	0x08014fc0
 8004758:	20000970 	.word	0x20000970
 800475c:	08014fc4 	.word	0x08014fc4
 8004760:	08014fec 	.word	0x08014fec

08004764 <SyncedWakeup>:

static void SyncedWakeup(void){
 8004764:	b590      	push	{r4, r7, lr}
 8004766:	b0df      	sub	sp, #380	; 0x17c
 8004768:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	2120      	movs	r1, #32
 800476e:	48a3      	ldr	r0, [pc, #652]	; (80049fc <SyncedWakeup+0x298>)
 8004770:	f003 f81b 	bl	80077aa <HAL_GPIO_WritePin>
	uint8_t i = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	uint8_t message_neccessary = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e

	/*Get Slaves status*/
	/*fills tx buffer*/
	memset(BufferTx, 0x0, PAYLOAD_LEN);
 8004780:	2208      	movs	r2, #8
 8004782:	2100      	movs	r1, #0
 8004784:	489e      	ldr	r0, [pc, #632]	; (8004a00 <SyncedWakeup+0x29c>)
 8004786:	f00c fbd5 	bl	8010f34 <memset>
	BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 800478a:	4b9d      	ldr	r3, [pc, #628]	; (8004a00 <SyncedWakeup+0x29c>)
 800478c:	22fa      	movs	r2, #250	; 0xfa
 800478e:	701a      	strb	r2, [r3, #0]
	BufferTx[1] = 0x84; //Function -> Message from Master, Poll Slaves state in trapmode
 8004790:	4b9b      	ldr	r3, [pc, #620]	; (8004a00 <SyncedWakeup+0x29c>)
 8004792:	2284      	movs	r2, #132	; 0x84
 8004794:	705a      	strb	r2, [r3, #1]
	/*Data*/
	BufferTx[3] = 0x00; //
 8004796:	4b9a      	ldr	r3, [pc, #616]	; (8004a00 <SyncedWakeup+0x29c>)
 8004798:	2200      	movs	r2, #0
 800479a:	70da      	strb	r2, [r3, #3]
	BufferTx[4] = 0x00;
 800479c:	4b98      	ldr	r3, [pc, #608]	; (8004a00 <SyncedWakeup+0x29c>)
 800479e:	2200      	movs	r2, #0
 80047a0:	711a      	strb	r2, [r3, #4]
	BufferTx[5] = 0x00;
 80047a2:	4b97      	ldr	r3, [pc, #604]	; (8004a00 <SyncedWakeup+0x29c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	715a      	strb	r2, [r3, #5]
	BufferTx[6] = 0x00;
 80047a8:	4b95      	ldr	r3, [pc, #596]	; (8004a00 <SyncedWakeup+0x29c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	719a      	strb	r2, [r3, #6]
	BufferTx[7] = 0x00;
 80047ae:	4b94      	ldr	r3, [pc, #592]	; (8004a00 <SyncedWakeup+0x29c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	71da      	strb	r2, [r3, #7]

	for (i = 0; i<slaves_reg; i++){
 80047b4:	2300      	movs	r3, #0
 80047b6:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 80047ba:	e091      	b.n	80048e0 <SyncedWakeup+0x17c>
		/*Send to slaves*/
		BufferTx[2] = slaveaddrss[i]<<4; //SlaveID
 80047bc:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80047c0:	4a90      	ldr	r2, [pc, #576]	; (8004a04 <SyncedWakeup+0x2a0>)
 80047c2:	5cd3      	ldrb	r3, [r2, r3]
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	4b8d      	ldr	r3, [pc, #564]	; (8004a00 <SyncedWakeup+0x29c>)
 80047ca:	709a      	strb	r2, [r3, #2]
		State = NONE;
 80047cc:	4b8e      	ldr	r3, [pc, #568]	; (8004a08 <SyncedWakeup+0x2a4>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
		slavestatus[i] = NON;
 80047d2:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80047d6:	4a8d      	ldr	r2, [pc, #564]	; (8004a0c <SyncedWakeup+0x2a8>)
 80047d8:	2100      	movs	r1, #0
 80047da:	54d1      	strb	r1, [r2, r3]
		Radio.Send(BufferTx, PAYLOAD_LEN);
 80047dc:	4b8c      	ldr	r3, [pc, #560]	; (8004a10 <SyncedWakeup+0x2ac>)
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	2108      	movs	r1, #8
 80047e2:	4887      	ldr	r0, [pc, #540]	; (8004a00 <SyncedWakeup+0x29c>)
 80047e4:	4798      	blx	r3
		/*Wait until LoRa module has done something*/
		while (State != TX && State != TX_TIMEOUT);
 80047e6:	bf00      	nop
 80047e8:	4b87      	ldr	r3, [pc, #540]	; (8004a08 <SyncedWakeup+0x2a4>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d003      	beq.n	80047f8 <SyncedWakeup+0x94>
 80047f0:	4b85      	ldr	r3, [pc, #532]	; (8004a08 <SyncedWakeup+0x2a4>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d1f7      	bne.n	80047e8 <SyncedWakeup+0x84>
		if (State == TX_TIMEOUT){
 80047f8:	4b83      	ldr	r3, [pc, #524]	; (8004a08 <SyncedWakeup+0x2a4>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b05      	cmp	r3, #5
 80047fe:	d107      	bne.n	8004810 <SyncedWakeup+0xac>
			 Radio.Sleep();
 8004800:	4b83      	ldr	r3, [pc, #524]	; (8004a10 <SyncedWakeup+0x2ac>)
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	4798      	blx	r3
			 slavestatus[i] = NOT_REACHABLE;
 8004806:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800480a:	4a80      	ldr	r2, [pc, #512]	; (8004a0c <SyncedWakeup+0x2a8>)
 800480c:	2103      	movs	r1, #3
 800480e:	54d1      	strb	r1, [r2, r3]
		}
		/*Start Reception with timeout*/
		State = NONE;
 8004810:	4b7d      	ldr	r3, [pc, #500]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
		Radio.Rx(6000);
 8004816:	4b7e      	ldr	r3, [pc, #504]	; (8004a10 <SyncedWakeup+0x2ac>)
 8004818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481a:	f241 7070 	movw	r0, #6000	; 0x1770
 800481e:	4798      	blx	r3
		/*Wait until something happens*/
		while(State != RX && State != RX_ERROR && State != RX_TIMEOUT);
 8004820:	bf00      	nop
 8004822:	4b79      	ldr	r3, [pc, #484]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d007      	beq.n	800483a <SyncedWakeup+0xd6>
 800482a:	4b77      	ldr	r3, [pc, #476]	; (8004a08 <SyncedWakeup+0x2a4>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b03      	cmp	r3, #3
 8004830:	d003      	beq.n	800483a <SyncedWakeup+0xd6>
 8004832:	4b75      	ldr	r3, [pc, #468]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d1f3      	bne.n	8004822 <SyncedWakeup+0xbe>
		if (State == RX_ERROR || State == RX_TIMEOUT){
 800483a:	4b73      	ldr	r3, [pc, #460]	; (8004a08 <SyncedWakeup+0x2a4>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b03      	cmp	r3, #3
 8004840:	d003      	beq.n	800484a <SyncedWakeup+0xe6>
 8004842:	4b71      	ldr	r3, [pc, #452]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d105      	bne.n	8004856 <SyncedWakeup+0xf2>
			slavestatus[i] = NOT_REACHABLE;
 800484a:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800484e:	4a6f      	ldr	r2, [pc, #444]	; (8004a0c <SyncedWakeup+0x2a8>)
 8004850:	2103      	movs	r1, #3
 8004852:	54d1      	strb	r1, [r2, r3]
 8004854:	e03f      	b.n	80048d6 <SyncedWakeup+0x172>
		}
		else if (State == RX){
 8004856:	4b6c      	ldr	r3, [pc, #432]	; (8004a08 <SyncedWakeup+0x2a4>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d13b      	bne.n	80048d6 <SyncedWakeup+0x172>
			/* check if slave with current address answered*/
			uint8_t currentslaveid = RxBuffer[2] >> 4;
 800485e:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <SyncedWakeup+0x2b0>)
 8004860:	789b      	ldrb	r3, [r3, #2]
 8004862:	091b      	lsrs	r3, r3, #4
 8004864:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
			if (currentslaveid == slaveaddrss[i]){
 8004868:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800486c:	4a65      	ldr	r2, [pc, #404]	; (8004a04 <SyncedWakeup+0x2a0>)
 800486e:	5cd3      	ldrb	r3, [r2, r3]
 8004870:	f897 2167 	ldrb.w	r2, [r7, #359]	; 0x167
 8004874:	429a      	cmp	r2, r3
 8004876:	d129      	bne.n	80048cc <SyncedWakeup+0x168>
				/* if its the correct slave, check data (battery, trap trigger state) */
				slavebatterystate[i] = RxBuffer[3];
 8004878:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800487c:	4a65      	ldr	r2, [pc, #404]	; (8004a14 <SyncedWakeup+0x2b0>)
 800487e:	78d1      	ldrb	r1, [r2, #3]
 8004880:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <SyncedWakeup+0x2b4>)
 8004882:	54d1      	strb	r1, [r2, r3]
				slavetriggerstate[i] = RxBuffer[4];
 8004884:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004888:	4a62      	ldr	r2, [pc, #392]	; (8004a14 <SyncedWakeup+0x2b0>)
 800488a:	7911      	ldrb	r1, [r2, #4]
 800488c:	4a63      	ldr	r2, [pc, #396]	; (8004a1c <SyncedWakeup+0x2b8>)
 800488e:	54d1      	strb	r1, [r2, r3]
				if (slavebatterystate[i] == 255 || slavebatterystate[i] <= 20 || slavetriggerstate[i] == 1){
 8004890:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004894:	4a60      	ldr	r2, [pc, #384]	; (8004a18 <SyncedWakeup+0x2b4>)
 8004896:	5cd3      	ldrb	r3, [r2, r3]
 8004898:	2bff      	cmp	r3, #255	; 0xff
 800489a:	d00b      	beq.n	80048b4 <SyncedWakeup+0x150>
 800489c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80048a0:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <SyncedWakeup+0x2b4>)
 80048a2:	5cd3      	ldrb	r3, [r2, r3]
 80048a4:	2b14      	cmp	r3, #20
 80048a6:	d905      	bls.n	80048b4 <SyncedWakeup+0x150>
 80048a8:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80048ac:	4a5b      	ldr	r2, [pc, #364]	; (8004a1c <SyncedWakeup+0x2b8>)
 80048ae:	5cd3      	ldrb	r3, [r2, r3]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <SyncedWakeup+0x15c>
					slavestatus[i] = BAD_CONDITION;
 80048b4:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80048b8:	4a54      	ldr	r2, [pc, #336]	; (8004a0c <SyncedWakeup+0x2a8>)
 80048ba:	2104      	movs	r1, #4
 80048bc:	54d1      	strb	r1, [r2, r3]
 80048be:	e00a      	b.n	80048d6 <SyncedWakeup+0x172>
				} else {
					slavestatus[i] = ACK; //fine in trap mode
 80048c0:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80048c4:	4a51      	ldr	r2, [pc, #324]	; (8004a0c <SyncedWakeup+0x2a8>)
 80048c6:	2101      	movs	r1, #1
 80048c8:	54d1      	strb	r1, [r2, r3]
 80048ca:	e004      	b.n	80048d6 <SyncedWakeup+0x172>
				}
			}else {
				slavestatus[i] = NOT_REACHABLE;
 80048cc:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80048d0:	4a4e      	ldr	r2, [pc, #312]	; (8004a0c <SyncedWakeup+0x2a8>)
 80048d2:	2103      	movs	r1, #3
 80048d4:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<slaves_reg; i++){
 80048d6:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80048da:	3301      	adds	r3, #1
 80048dc:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 80048e0:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <SyncedWakeup+0x2bc>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 80048e8:	429a      	cmp	r2, r3
 80048ea:	f4ff af67 	bcc.w	80047bc <SyncedWakeup+0x58>
			}
		}
	}
	State = NONE;
 80048ee:	4b46      	ldr	r3, [pc, #280]	; (8004a08 <SyncedWakeup+0x2a4>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
	Radio.Sleep();
 80048f4:	4b46      	ldr	r3, [pc, #280]	; (8004a10 <SyncedWakeup+0x2ac>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4798      	blx	r3
	/*Get Slave Status end*/

	/*Get own status*/
	traptriggered = HAL_GPIO_ReadPin(REEDPin_GPIO_Port, REEDPin_Pin);
 80048fa:	2108      	movs	r1, #8
 80048fc:	483f      	ldr	r0, [pc, #252]	; (80049fc <SyncedWakeup+0x298>)
 80048fe:	f002 ff3d 	bl	800777c <HAL_GPIO_ReadPin>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	4b47      	ldr	r3, [pc, #284]	; (8004a24 <SyncedWakeup+0x2c0>)
 8004908:	701a      	strb	r2, [r3, #0]
	Akku_Prozent = Ausgabe_Akkustand(Berechnung_Akkustand(R9, R8));
 800490a:	f24b 21e8 	movw	r1, #45800	; 0xb2e8
 800490e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8004912:	f7fc fec9 	bl	80016a8 <Berechnung_Akkustand>
 8004916:	4603      	mov	r3, r0
 8004918:	4618      	mov	r0, r3
 800491a:	f7fc ff21 	bl	8001760 <Ausgabe_Akkustand>
 800491e:	4603      	mov	r3, r0
 8004920:	4a41      	ldr	r2, [pc, #260]	; (8004a28 <SyncedWakeup+0x2c4>)
 8004922:	6013      	str	r3, [r2, #0]
	 * -one or more of the slaves or master has low power or faulty battery reading
	 * -one or more of the slaves is not reachable
	 * (Slave conditions are already checked in code above)
	 * BUT ONLY SEND, IF THOSE EVENTS OCCUR THE FIST TIME!
	 */
	for(i = 0; i< slaves_reg; i++)
 8004924:	2300      	movs	r3, #0
 8004926:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 800492a:	e095      	b.n	8004a58 <SyncedWakeup+0x2f4>
	{
		if(slavestatus[i] == NOT_REACHABLE && slaveunreachable_before[i] == 0){
 800492c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004930:	4a36      	ldr	r2, [pc, #216]	; (8004a0c <SyncedWakeup+0x2a8>)
 8004932:	5cd3      	ldrb	r3, [r2, r3]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d10e      	bne.n	8004956 <SyncedWakeup+0x1f2>
 8004938:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800493c:	4a3b      	ldr	r2, [pc, #236]	; (8004a2c <SyncedWakeup+0x2c8>)
 800493e:	5cd3      	ldrb	r3, [r2, r3]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d108      	bne.n	8004956 <SyncedWakeup+0x1f2>
			slaveunreachable_before[i] = 1;
 8004944:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004948:	4a38      	ldr	r2, [pc, #224]	; (8004a2c <SyncedWakeup+0x2c8>)
 800494a:	2101      	movs	r1, #1
 800494c:	54d1      	strb	r1, [r2, r3]
			message_neccessary = 1;
 800494e:	2301      	movs	r3, #1
 8004950:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
 8004954:	e010      	b.n	8004978 <SyncedWakeup+0x214>
		} else if (slavestatus[i] != NOT_REACHABLE && slavestatus[i] != NON) {
 8004956:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800495a:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <SyncedWakeup+0x2a8>)
 800495c:	5cd3      	ldrb	r3, [r2, r3]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d00a      	beq.n	8004978 <SyncedWakeup+0x214>
 8004962:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004966:	4a29      	ldr	r2, [pc, #164]	; (8004a0c <SyncedWakeup+0x2a8>)
 8004968:	5cd3      	ldrb	r3, [r2, r3]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <SyncedWakeup+0x214>
			slaveunreachable_before[i] = 0;  //if slave somehow manages to participate with correct time sync again, it can be evaluated in the next wakeup again
 800496e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004972:	4a2e      	ldr	r2, [pc, #184]	; (8004a2c <SyncedWakeup+0x2c8>)
 8004974:	2100      	movs	r1, #0
 8004976:	54d1      	strb	r1, [r2, r3]
		}
		if((slavebatterystate[i] == 255 || slavebatterystate[i] <= 20) && slavebatterybad_before[i] == 0){
 8004978:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <SyncedWakeup+0x2b4>)
 800497e:	5cd3      	ldrb	r3, [r2, r3]
 8004980:	2bff      	cmp	r3, #255	; 0xff
 8004982:	d005      	beq.n	8004990 <SyncedWakeup+0x22c>
 8004984:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004988:	4a23      	ldr	r2, [pc, #140]	; (8004a18 <SyncedWakeup+0x2b4>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	2b14      	cmp	r3, #20
 800498e:	d80e      	bhi.n	80049ae <SyncedWakeup+0x24a>
 8004990:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004994:	4a26      	ldr	r2, [pc, #152]	; (8004a30 <SyncedWakeup+0x2cc>)
 8004996:	5cd3      	ldrb	r3, [r2, r3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d108      	bne.n	80049ae <SyncedWakeup+0x24a>
			slavebatterybad_before[i] = 1;
 800499c:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80049a0:	4a23      	ldr	r2, [pc, #140]	; (8004a30 <SyncedWakeup+0x2cc>)
 80049a2:	2101      	movs	r1, #1
 80049a4:	54d1      	strb	r1, [r2, r3]
			message_neccessary = 1;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
 80049ac:	e010      	b.n	80049d0 <SyncedWakeup+0x26c>
		} else if ((slavebatterystate[i] != 255 && slavebatterystate[i] > 20)){
 80049ae:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80049b2:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <SyncedWakeup+0x2b4>)
 80049b4:	5cd3      	ldrb	r3, [r2, r3]
 80049b6:	2bff      	cmp	r3, #255	; 0xff
 80049b8:	d00a      	beq.n	80049d0 <SyncedWakeup+0x26c>
 80049ba:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80049be:	4a16      	ldr	r2, [pc, #88]	; (8004a18 <SyncedWakeup+0x2b4>)
 80049c0:	5cd3      	ldrb	r3, [r2, r3]
 80049c2:	2b14      	cmp	r3, #20
 80049c4:	d904      	bls.n	80049d0 <SyncedWakeup+0x26c>
			slavebatterybad_before[i] = 0;  //if slave somehow manages to participate with correct time sync and enough battery again, it can be evaluated in the next wakeup again
 80049c6:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80049ca:	4a19      	ldr	r2, [pc, #100]	; (8004a30 <SyncedWakeup+0x2cc>)
 80049cc:	2100      	movs	r1, #0
 80049ce:	54d1      	strb	r1, [r2, r3]
		}
		if(slavetriggerstate[i] == 1 && slavetriggered_before[i] == 0){
 80049d0:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80049d4:	4a11      	ldr	r2, [pc, #68]	; (8004a1c <SyncedWakeup+0x2b8>)
 80049d6:	5cd3      	ldrb	r3, [r2, r3]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d12d      	bne.n	8004a38 <SyncedWakeup+0x2d4>
 80049dc:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80049e0:	4a14      	ldr	r2, [pc, #80]	; (8004a34 <SyncedWakeup+0x2d0>)
 80049e2:	5cd3      	ldrb	r3, [r2, r3]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d127      	bne.n	8004a38 <SyncedWakeup+0x2d4>
			slavetriggered_before[i] = 1;
 80049e8:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80049ec:	4a11      	ldr	r2, [pc, #68]	; (8004a34 <SyncedWakeup+0x2d0>)
 80049ee:	2101      	movs	r1, #1
 80049f0:	54d1      	strb	r1, [r2, r3]
			message_neccessary = 1;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
 80049f8:	e029      	b.n	8004a4e <SyncedWakeup+0x2ea>
 80049fa:	bf00      	nop
 80049fc:	48000400 	.word	0x48000400
 8004a00:	20000a20 	.word	0x20000a20
 8004a04:	200009e4 	.word	0x200009e4
 8004a08:	20000a1c 	.word	0x20000a1c
 8004a0c:	200009ec 	.word	0x200009ec
 8004a10:	08015770 	.word	0x08015770
 8004a14:	20000a2c 	.word	0x20000a2c
 8004a18:	200009f4 	.word	0x200009f4
 8004a1c:	200009fc 	.word	0x200009fc
 8004a20:	200009e0 	.word	0x200009e0
 8004a24:	2000096d 	.word	0x2000096d
 8004a28:	20000968 	.word	0x20000968
 8004a2c:	20000a14 	.word	0x20000a14
 8004a30:	20000a04 	.word	0x20000a04
 8004a34:	20000a0c 	.word	0x20000a0c
		} else if (slavetriggerstate[i] == 0){
 8004a38:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004a3c:	4a89      	ldr	r2, [pc, #548]	; (8004c64 <SyncedWakeup+0x500>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <SyncedWakeup+0x2ea>
			slavetriggered_before[i] = 0;   //if slave somehow gets its trigger reset and is still on time sync, it can be evaulated in the next wakeup again
 8004a44:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004a48:	4a87      	ldr	r2, [pc, #540]	; (8004c68 <SyncedWakeup+0x504>)
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i< slaves_reg; i++)
 8004a4e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004a52:	3301      	adds	r3, #1
 8004a54:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 8004a58:	4b84      	ldr	r3, [pc, #528]	; (8004c6c <SyncedWakeup+0x508>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 8004a60:	429a      	cmp	r2, r3
 8004a62:	f4ff af63 	bcc.w	800492c <SyncedWakeup+0x1c8>
		}
	}


	if ((Akku_Prozent <= 20 || Akku_Prozent == 255) && masterbatterybad_before == 0){
 8004a66:	4b82      	ldr	r3, [pc, #520]	; (8004c70 <SyncedWakeup+0x50c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b14      	cmp	r3, #20
 8004a6c:	dd03      	ble.n	8004a76 <SyncedWakeup+0x312>
 8004a6e:	4b80      	ldr	r3, [pc, #512]	; (8004c70 <SyncedWakeup+0x50c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2bff      	cmp	r3, #255	; 0xff
 8004a74:	d10a      	bne.n	8004a8c <SyncedWakeup+0x328>
 8004a76:	4b7f      	ldr	r3, [pc, #508]	; (8004c74 <SyncedWakeup+0x510>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <SyncedWakeup+0x328>
		masterbatterybad_before = 1;
 8004a7e:	4b7d      	ldr	r3, [pc, #500]	; (8004c74 <SyncedWakeup+0x510>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
		message_neccessary = 1;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
 8004a8a:	e00a      	b.n	8004aa2 <SyncedWakeup+0x33e>
	} else if ((Akku_Prozent > 20 && Akku_Prozent != 255)) {
 8004a8c:	4b78      	ldr	r3, [pc, #480]	; (8004c70 <SyncedWakeup+0x50c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b14      	cmp	r3, #20
 8004a92:	dd06      	ble.n	8004aa2 <SyncedWakeup+0x33e>
 8004a94:	4b76      	ldr	r3, [pc, #472]	; (8004c70 <SyncedWakeup+0x50c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2bff      	cmp	r3, #255	; 0xff
 8004a9a:	d002      	beq.n	8004aa2 <SyncedWakeup+0x33e>
		masterbatterybad_before = 0;
 8004a9c:	4b75      	ldr	r3, [pc, #468]	; (8004c74 <SyncedWakeup+0x510>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
	}
	if (traptriggered && mastertriggered_before == 0){
 8004aa2:	4b75      	ldr	r3, [pc, #468]	; (8004c78 <SyncedWakeup+0x514>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <SyncedWakeup+0x35c>
 8004aaa:	4b74      	ldr	r3, [pc, #464]	; (8004c7c <SyncedWakeup+0x518>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <SyncedWakeup+0x35c>
		mastertriggered_before = 1;
 8004ab2:	4b72      	ldr	r3, [pc, #456]	; (8004c7c <SyncedWakeup+0x518>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	701a      	strb	r2, [r3, #0]
		message_neccessary = 1;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
 8004abe:	e006      	b.n	8004ace <SyncedWakeup+0x36a>
	} else if (traptriggered == 0) {
 8004ac0:	4b6d      	ldr	r3, [pc, #436]	; (8004c78 <SyncedWakeup+0x514>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <SyncedWakeup+0x36a>
		mastertriggered_before = 0;  // if trigger gets reset while trap is still on time sync, it can be evaluated again
 8004ac8:	4b6c      	ldr	r3, [pc, #432]	; (8004c7c <SyncedWakeup+0x518>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
	}

	if (message_neccessary){
 8004ace:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 80bb 	beq.w	8004c4e <SyncedWakeup+0x4ea>
		//Code for sending an SMS
		HAL_GPIO_WritePin(GSM_Switch_GPIO_Port, GSM_Switch_Pin, 1);
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ae2:	f002 fe62 	bl	80077aa <HAL_GPIO_WritePin>

		/*!!!! Eventuell UART GSM Neuinit nötig nach Wakeup!*/

		/*String bauen für SMS*/
		char message[320] = {0}; //one SMS can only transmit 160 chars, max 2 sms allowed
 8004ae6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004aea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	3304      	adds	r3, #4
 8004af4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f00c fa1a 	bl	8010f34 <memset>
		char strtemp[32];
		sprintf(message, "Event on Trap(s):\nMaster: ");
 8004b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b04:	495e      	ldr	r1, [pc, #376]	; (8004c80 <SyncedWakeup+0x51c>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f00c fe78 	bl	80117fc <siprintf>
		sprintf(strtemp, "Bat: %d%%, Trig: %u\n", Akku_Prozent, traptriggered);
 8004b0c:	4b58      	ldr	r3, [pc, #352]	; (8004c70 <SyncedWakeup+0x50c>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	4b59      	ldr	r3, [pc, #356]	; (8004c78 <SyncedWakeup+0x514>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	1d38      	adds	r0, r7, #4
 8004b16:	495b      	ldr	r1, [pc, #364]	; (8004c84 <SyncedWakeup+0x520>)
 8004b18:	f00c fe70 	bl	80117fc <siprintf>
		strcat(message, strtemp);
 8004b1c:	1d3a      	adds	r2, r7, #4
 8004b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f00c fe89 	bl	801183c <strcat>
		for (i = 0; i<slaves_reg; i++){
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 8004b30:	e046      	b.n	8004bc0 <SyncedWakeup+0x45c>
			if(slavestatus[i] == NOT_REACHABLE){
 8004b32:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004b36:	4a54      	ldr	r2, [pc, #336]	; (8004c88 <SyncedWakeup+0x524>)
 8004b38:	5cd3      	ldrb	r3, [r2, r3]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d10a      	bne.n	8004b54 <SyncedWakeup+0x3f0>
				sprintf(strtemp, "SlaveID: %u: not reachable\n", slaveaddrss[i]);
 8004b3e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004b42:	4a52      	ldr	r2, [pc, #328]	; (8004c8c <SyncedWakeup+0x528>)
 8004b44:	5cd3      	ldrb	r3, [r2, r3]
 8004b46:	461a      	mov	r2, r3
 8004b48:	1d3b      	adds	r3, r7, #4
 8004b4a:	4951      	ldr	r1, [pc, #324]	; (8004c90 <SyncedWakeup+0x52c>)
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f00c fe55 	bl	80117fc <siprintf>
 8004b52:	e029      	b.n	8004ba8 <SyncedWakeup+0x444>
			}else if (slavebatterystate[i] == 255){
 8004b54:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004b58:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <SyncedWakeup+0x530>)
 8004b5a:	5cd3      	ldrb	r3, [r2, r3]
 8004b5c:	2bff      	cmp	r3, #255	; 0xff
 8004b5e:	d10e      	bne.n	8004b7e <SyncedWakeup+0x41a>
				sprintf(strtemp, "SlaveID: %u: Bat: <0%%, Trig: %u\n", slaveaddrss[i], slavetriggerstate[i]);
 8004b60:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004b64:	4a49      	ldr	r2, [pc, #292]	; (8004c8c <SyncedWakeup+0x528>)
 8004b66:	5cd3      	ldrb	r3, [r2, r3]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004b6e:	4a3d      	ldr	r2, [pc, #244]	; (8004c64 <SyncedWakeup+0x500>)
 8004b70:	5cd3      	ldrb	r3, [r2, r3]
 8004b72:	1d38      	adds	r0, r7, #4
 8004b74:	460a      	mov	r2, r1
 8004b76:	4948      	ldr	r1, [pc, #288]	; (8004c98 <SyncedWakeup+0x534>)
 8004b78:	f00c fe40 	bl	80117fc <siprintf>
 8004b7c:	e014      	b.n	8004ba8 <SyncedWakeup+0x444>
			}else{
				sprintf(strtemp, "SlaveID: %u: Bat: <%d%%, Trig: %u\n", slaveaddrss[i], slavebatterystate[i], slavetriggerstate[i]);
 8004b7e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004b82:	4a42      	ldr	r2, [pc, #264]	; (8004c8c <SyncedWakeup+0x528>)
 8004b84:	5cd3      	ldrb	r3, [r2, r3]
 8004b86:	4619      	mov	r1, r3
 8004b88:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004b8c:	4a41      	ldr	r2, [pc, #260]	; (8004c94 <SyncedWakeup+0x530>)
 8004b8e:	5cd3      	ldrb	r3, [r2, r3]
 8004b90:	461c      	mov	r4, r3
 8004b92:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004b96:	4a33      	ldr	r2, [pc, #204]	; (8004c64 <SyncedWakeup+0x500>)
 8004b98:	5cd3      	ldrb	r3, [r2, r3]
 8004b9a:	1d38      	adds	r0, r7, #4
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	460a      	mov	r2, r1
 8004ba2:	493e      	ldr	r1, [pc, #248]	; (8004c9c <SyncedWakeup+0x538>)
 8004ba4:	f00c fe2a 	bl	80117fc <siprintf>
			}
			strcat(message, strtemp);
 8004ba8:	1d3a      	adds	r2, r7, #4
 8004baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bae:	4611      	mov	r1, r2
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f00c fe43 	bl	801183c <strcat>
		for (i = 0; i<slaves_reg; i++){
 8004bb6:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004bba:	3301      	adds	r3, #1
 8004bbc:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 8004bc0:	4b2a      	ldr	r3, [pc, #168]	; (8004c6c <SyncedWakeup+0x508>)
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	f897 216f 	ldrb.w	r2, [r7, #367]	; 0x16f
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d3b2      	bcc.n	8004b32 <SyncedWakeup+0x3ce>
		}

		/*Send SMS*/
		/*Workaround, UART2 may not wake up after Stopmode2, if not reinitialized with expicit call of the MspInit part */
		HAL_UART_MspInit(&huart2);
 8004bcc:	4834      	ldr	r0, [pc, #208]	; (8004ca0 <SyncedWakeup+0x53c>)
 8004bce:	f7fe f9f7 	bl	8002fc0 <HAL_UART_MspInit>
		MX_USART2_UART_Init();
 8004bd2:	f7fe f9a9 	bl	8002f28 <MX_USART2_UART_Init>
		HAL_Delay(20000); //Give GSM Module time to wake up
 8004bd6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8004bda:	f7fd fd61 	bl	80026a0 <HAL_Delay>

		strcat(message, "\0");
		int statussms = GSMSendSMS(Parameter.Handynummer, message);  //GSMSendSMS("+4916094870875", "Hallo123TestKot");
 8004bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004be2:	4619      	mov	r1, r3
 8004be4:	482f      	ldr	r0, [pc, #188]	; (8004ca4 <SyncedWakeup+0x540>)
 8004be6:	f7fe fdab 	bl	8003740 <GSMSendSMS>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

		if (statussms == 101){
 8004bf0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004bf4:	2b65      	cmp	r3, #101	; 0x65
 8004bf6:	d10f      	bne.n	8004c18 <SyncedWakeup+0x4b4>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 1);
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004bfe:	482a      	ldr	r0, [pc, #168]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c00:	f002 fdd3 	bl	80077aa <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 8004c04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c08:	f7fd fd4a 	bl	80026a0 <HAL_Delay>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, 0);
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004c12:	4825      	ldr	r0, [pc, #148]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c14:	f002 fdc9 	bl	80077aa <HAL_GPIO_WritePin>
		}
		if (statussms == 102){
 8004c18:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004c1c:	2b66      	cmp	r3, #102	; 0x66
 8004c1e:	d10f      	bne.n	8004c40 <SyncedWakeup+0x4dc>
					HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 1);
 8004c20:	2201      	movs	r2, #1
 8004c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c26:	4820      	ldr	r0, [pc, #128]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c28:	f002 fdbf 	bl	80077aa <HAL_GPIO_WritePin>
					HAL_Delay(1000);
 8004c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c30:	f7fd fd36 	bl	80026a0 <HAL_Delay>
					HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 8004c34:	2200      	movs	r2, #0
 8004c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c3a:	481b      	ldr	r0, [pc, #108]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c3c:	f002 fdb5 	bl	80077aa <HAL_GPIO_WritePin>
		//strcat(message, "\r");
		//_BT_PRINT(message);


		/*Power down again*/
		HAL_GPIO_WritePin(GSM_Switch_GPIO_Port, GSM_Switch_Pin, 0);
 8004c40:	2200      	movs	r2, #0
 8004c42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c4a:	f002 fdae 	bl	80077aa <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LED_Board_GPIO_Port, LED_Board_Pin, 1);
 8004c4e:	2201      	movs	r2, #1
 8004c50:	2120      	movs	r1, #32
 8004c52:	4815      	ldr	r0, [pc, #84]	; (8004ca8 <SyncedWakeup+0x544>)
 8004c54:	f002 fda9 	bl	80077aa <HAL_GPIO_WritePin>

}
 8004c58:	bf00      	nop
 8004c5a:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd90      	pop	{r4, r7, pc}
 8004c62:	bf00      	nop
 8004c64:	200009fc 	.word	0x200009fc
 8004c68:	20000a0c 	.word	0x20000a0c
 8004c6c:	200009e0 	.word	0x200009e0
 8004c70:	20000968 	.word	0x20000968
 8004c74:	20000a1a 	.word	0x20000a1a
 8004c78:	2000096d 	.word	0x2000096d
 8004c7c:	20000a19 	.word	0x20000a19
 8004c80:	08015040 	.word	0x08015040
 8004c84:	0801505c 	.word	0x0801505c
 8004c88:	200009ec 	.word	0x200009ec
 8004c8c:	200009e4 	.word	0x200009e4
 8004c90:	08015074 	.word	0x08015074
 8004c94:	200009f4 	.word	0x200009f4
 8004c98:	08015090 	.word	0x08015090
 8004c9c:	080150b4 	.word	0x080150b4
 8004ca0:	20000598 	.word	0x20000598
 8004ca4:	20000010 	.word	0x20000010
 8004ca8:	48000400 	.word	0x48000400

08004cac <BatteryReadout>:

static void BatteryReadout(void){
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	/*Read out Voltage and Percent*/
	_BT_PRINT("Reading Battery Voltage...\r");
 8004cb0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004cb4:	221b      	movs	r2, #27
 8004cb6:	493c      	ldr	r1, [pc, #240]	; (8004da8 <BatteryReadout+0xfc>)
 8004cb8:	483c      	ldr	r0, [pc, #240]	; (8004dac <BatteryReadout+0x100>)
 8004cba:	f005 fa0c 	bl	800a0d6 <HAL_UART_Transmit>
	Akkuspannung = Berechnung_Akkustand(R9, R8);
 8004cbe:	f24b 21e8 	movw	r1, #45800	; 0xb2e8
 8004cc2:	f643 2098 	movw	r0, #15000	; 0x3a98
 8004cc6:	f7fc fcef 	bl	80016a8 <Berechnung_Akkustand>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <BatteryReadout+0x104>)
 8004cce:	6013      	str	r3, [r2, #0]
	Akku_Prozent = Ausgabe_Akkustand(Akkuspannung);
 8004cd0:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <BatteryReadout+0x104>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fc fd43 	bl	8001760 <Ausgabe_Akkustand>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4a35      	ldr	r2, [pc, #212]	; (8004db4 <BatteryReadout+0x108>)
 8004cde:	6013      	str	r3, [r2, #0]
	sprintf(printstr, "Battery-Voltage: %.4fV\r", Akkuspannung);
 8004ce0:	4b33      	ldr	r3, [pc, #204]	; (8004db0 <BatteryReadout+0x104>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fb fc07 	bl	80004f8 <__aeabi_f2d>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4932      	ldr	r1, [pc, #200]	; (8004db8 <BatteryReadout+0x10c>)
 8004cf0:	4832      	ldr	r0, [pc, #200]	; (8004dbc <BatteryReadout+0x110>)
 8004cf2:	f00c fd83 	bl	80117fc <siprintf>
	_BT_PRINT(printstr);
 8004cf6:	4831      	ldr	r0, [pc, #196]	; (8004dbc <BatteryReadout+0x110>)
 8004cf8:	f7fb fa42 	bl	8000180 <strlen>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d04:	492d      	ldr	r1, [pc, #180]	; (8004dbc <BatteryReadout+0x110>)
 8004d06:	4829      	ldr	r0, [pc, #164]	; (8004dac <BatteryReadout+0x100>)
 8004d08:	f005 f9e5 	bl	800a0d6 <HAL_UART_Transmit>
	HAL_Delay(300);
 8004d0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004d10:	f7fd fcc6 	bl	80026a0 <HAL_Delay>
	if (Akku_Prozent == 255){
 8004d14:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <BatteryReadout+0x108>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2bff      	cmp	r3, #255	; 0xff
 8004d1a:	d10d      	bne.n	8004d38 <BatteryReadout+0x8c>
		_BT_PRINT("Extreme low battery\r");
 8004d1c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d20:	2214      	movs	r2, #20
 8004d22:	4927      	ldr	r1, [pc, #156]	; (8004dc0 <BatteryReadout+0x114>)
 8004d24:	4821      	ldr	r0, [pc, #132]	; (8004dac <BatteryReadout+0x100>)
 8004d26:	f005 f9d6 	bl	800a0d6 <HAL_UART_Transmit>
		battery_OK = 0;
 8004d2a:	4b26      	ldr	r3, [pc, #152]	; (8004dc4 <BatteryReadout+0x118>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004d30:	2000      	movs	r0, #0
 8004d32:	f000 fbff 	bl	8005534 <indicateLED_return>
		sprintf(printstr, "That's around %d %%\n\r", Akku_Prozent);
		_BT_PRINT(printstr);
		battery_OK = 1;
		indicateLED_return(1);
	}
}
 8004d36:	e034      	b.n	8004da2 <BatteryReadout+0xf6>
	else if (Akku_Prozent == 20) {
 8004d38:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <BatteryReadout+0x108>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b14      	cmp	r3, #20
 8004d3e:	d118      	bne.n	8004d72 <BatteryReadout+0xc6>
		sprintf(printstr, "That's less than %d %%, please charge\r", Akku_Prozent);
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <BatteryReadout+0x108>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	4920      	ldr	r1, [pc, #128]	; (8004dc8 <BatteryReadout+0x11c>)
 8004d48:	481c      	ldr	r0, [pc, #112]	; (8004dbc <BatteryReadout+0x110>)
 8004d4a:	f00c fd57 	bl	80117fc <siprintf>
		_BT_PRINT(printstr);
 8004d4e:	481b      	ldr	r0, [pc, #108]	; (8004dbc <BatteryReadout+0x110>)
 8004d50:	f7fb fa16 	bl	8000180 <strlen>
 8004d54:	4603      	mov	r3, r0
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d5c:	4917      	ldr	r1, [pc, #92]	; (8004dbc <BatteryReadout+0x110>)
 8004d5e:	4813      	ldr	r0, [pc, #76]	; (8004dac <BatteryReadout+0x100>)
 8004d60:	f005 f9b9 	bl	800a0d6 <HAL_UART_Transmit>
		battery_OK = 0;
 8004d64:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <BatteryReadout+0x118>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004d6a:	2000      	movs	r0, #0
 8004d6c:	f000 fbe2 	bl	8005534 <indicateLED_return>
}
 8004d70:	e017      	b.n	8004da2 <BatteryReadout+0xf6>
		sprintf(printstr, "That's around %d %%\n\r", Akku_Prozent);
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <BatteryReadout+0x108>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	4914      	ldr	r1, [pc, #80]	; (8004dcc <BatteryReadout+0x120>)
 8004d7a:	4810      	ldr	r0, [pc, #64]	; (8004dbc <BatteryReadout+0x110>)
 8004d7c:	f00c fd3e 	bl	80117fc <siprintf>
		_BT_PRINT(printstr);
 8004d80:	480e      	ldr	r0, [pc, #56]	; (8004dbc <BatteryReadout+0x110>)
 8004d82:	f7fb f9fd 	bl	8000180 <strlen>
 8004d86:	4603      	mov	r3, r0
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004d8e:	490b      	ldr	r1, [pc, #44]	; (8004dbc <BatteryReadout+0x110>)
 8004d90:	4806      	ldr	r0, [pc, #24]	; (8004dac <BatteryReadout+0x100>)
 8004d92:	f005 f9a0 	bl	800a0d6 <HAL_UART_Transmit>
		battery_OK = 1;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <BatteryReadout+0x118>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
		indicateLED_return(1);
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f000 fbc9 	bl	8005534 <indicateLED_return>
}
 8004da2:	bf00      	nop
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	080150d8 	.word	0x080150d8
 8004dac:	20000478 	.word	0x20000478
 8004db0:	20000964 	.word	0x20000964
 8004db4:	20000968 	.word	0x20000968
 8004db8:	080150f4 	.word	0x080150f4
 8004dbc:	20000970 	.word	0x20000970
 8004dc0:	0801510c 	.word	0x0801510c
 8004dc4:	2000096c 	.word	0x2000096c
 8004dc8:	08015124 	.word	0x08015124
 8004dcc:	0801514c 	.word	0x0801514c

08004dd0 <GSMTest>:

static void GSMTest(void){
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0

	/*Variables*/
	uint8_t statusAT = 255;
 8004dd6:	23ff      	movs	r3, #255	; 0xff
 8004dd8:	73fb      	strb	r3, [r7, #15]
	uint8_t statusSIMCard = 255;
 8004dda:	23ff      	movs	r3, #255	; 0xff
 8004ddc:	73bb      	strb	r3, [r7, #14]
	uint8_t statusReg = 255;
 8004dde:	23ff      	movs	r3, #255	; 0xff
 8004de0:	737b      	strb	r3, [r7, #13]
	uint8_t signalRSSI = 255;
 8004de2:	23ff      	movs	r3, #255	; 0xff
 8004de4:	733b      	strb	r3, [r7, #12]
	uint8_t statusGSMBattery = 255;
 8004de6:	23ff      	movs	r3, #255	; 0xff
 8004de8:	72fb      	strb	r3, [r7, #11]
	uint16_t statusGSMBatteryVOLT = 255;
 8004dea:	23ff      	movs	r3, #255	; 0xff
 8004dec:	813b      	strh	r3, [r7, #8]
	//static uint8_t statusGSMSendSMS = 255;

	/*Workaround, UART2 may not wake up after Stopmode2, if not reinitialized with expicit call of the MspInit part */
	HAL_UART_MspInit(&huart2);
 8004dee:	48a0      	ldr	r0, [pc, #640]	; (8005070 <GSMTest+0x2a0>)
 8004df0:	f7fe f8e6 	bl	8002fc0 <HAL_UART_MspInit>
	MX_USART2_UART_Init();
 8004df4:	f7fe f898 	bl	8002f28 <MX_USART2_UART_Init>
	//if (buttonpressdone)
		//_BT_PRINT("GSMButtonpress!\r");
	_BT_PRINT("GSM-Test started. Please wait...\r");
 8004df8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004dfc:	2221      	movs	r2, #33	; 0x21
 8004dfe:	499d      	ldr	r1, [pc, #628]	; (8005074 <GSMTest+0x2a4>)
 8004e00:	489d      	ldr	r0, [pc, #628]	; (8005078 <GSMTest+0x2a8>)
 8004e02:	f005 f968 	bl	800a0d6 <HAL_UART_Transmit>
	gsmtest_OK = 0;
 8004e06:	4b9d      	ldr	r3, [pc, #628]	; (800507c <GSMTest+0x2ac>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]

	if (strncmp(Parameter.Handynummer, "+", 1) == 0 && digits_only(Parameter.Handynummer+1) == 1){
 8004e0c:	4b9c      	ldr	r3, [pc, #624]	; (8005080 <GSMTest+0x2b0>)
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	4b9c      	ldr	r3, [pc, #624]	; (8005084 <GSMTest+0x2b4>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d120      	bne.n	8004e5c <GSMTest+0x8c>
 8004e1a:	4b9b      	ldr	r3, [pc, #620]	; (8005088 <GSMTest+0x2b8>)
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fc27 	bl	8005670 <digits_only>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d119      	bne.n	8004e5c <GSMTest+0x8c>
		_BT_PRINT("Stored Mobile-Nr to send SMS to: ");
 8004e28:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e2c:	2221      	movs	r2, #33	; 0x21
 8004e2e:	4997      	ldr	r1, [pc, #604]	; (800508c <GSMTest+0x2bc>)
 8004e30:	4891      	ldr	r0, [pc, #580]	; (8005078 <GSMTest+0x2a8>)
 8004e32:	f005 f950 	bl	800a0d6 <HAL_UART_Transmit>
		_BT_PRINT(Parameter.Handynummer);
 8004e36:	4892      	ldr	r0, [pc, #584]	; (8005080 <GSMTest+0x2b0>)
 8004e38:	f7fb f9a2 	bl	8000180 <strlen>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e44:	498e      	ldr	r1, [pc, #568]	; (8005080 <GSMTest+0x2b0>)
 8004e46:	488c      	ldr	r0, [pc, #560]	; (8005078 <GSMTest+0x2a8>)
 8004e48:	f005 f945 	bl	800a0d6 <HAL_UART_Transmit>
		_BT_PRINT("\r");
 8004e4c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e50:	2201      	movs	r2, #1
 8004e52:	498f      	ldr	r1, [pc, #572]	; (8005090 <GSMTest+0x2c0>)
 8004e54:	4888      	ldr	r0, [pc, #544]	; (8005078 <GSMTest+0x2a8>)
 8004e56:	f005 f93e 	bl	800a0d6 <HAL_UART_Transmit>
 8004e5a:	e006      	b.n	8004e6a <GSMTest+0x9a>
	}
	else{
		_BT_PRINT("No valid Mobile-Nr to send SMS to was set. Please specifiy a Number starting with +49..\r");
 8004e5c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e60:	2258      	movs	r2, #88	; 0x58
 8004e62:	498c      	ldr	r1, [pc, #560]	; (8005094 <GSMTest+0x2c4>)
 8004e64:	4884      	ldr	r0, [pc, #528]	; (8005078 <GSMTest+0x2a8>)
 8004e66:	f005 f936 	bl	800a0d6 <HAL_UART_Transmit>
	}

	/*GSM Module must be turned on for at least 15s, because it needs time to register to cellular network*/
	while (gsm_configmode_timeover == 0);
 8004e6a:	bf00      	nop
 8004e6c:	4b8a      	ldr	r3, [pc, #552]	; (8005098 <GSMTest+0x2c8>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0fb      	beq.n	8004e6c <GSMTest+0x9c>
	GSMSimpleAT(); //first command is for autobauding of sim module, response is often bullshit
 8004e74:	f7fe facc 	bl	8003410 <GSMSimpleAT>
	HAL_Delay(500);
 8004e78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e7c:	f7fd fc10 	bl	80026a0 <HAL_Delay>
	GSMSimpleAT();
 8004e80:	f7fe fac6 	bl	8003410 <GSMSimpleAT>
	HAL_Delay(500);
 8004e84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e88:	f7fd fc0a 	bl	80026a0 <HAL_Delay>
	/*Test simple AT answer*/
	statusAT = GSMSimpleAT();
 8004e8c:	f7fe fac0 	bl	8003410 <GSMSimpleAT>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]
	if (statusAT != 1){
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d00d      	beq.n	8004eb6 <GSMTest+0xe6>
		_BT_PRINT("Error: No valid answer from GSM Module. GSM-Test failed...\r");
 8004e9a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004e9e:	223b      	movs	r2, #59	; 0x3b
 8004ea0:	497e      	ldr	r1, [pc, #504]	; (800509c <GSMTest+0x2cc>)
 8004ea2:	4875      	ldr	r0, [pc, #468]	; (8005078 <GSMTest+0x2a8>)
 8004ea4:	f005 f917 	bl	800a0d6 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004ea8:	4b74      	ldr	r3, [pc, #464]	; (800507c <GSMTest+0x2ac>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004eae:	2000      	movs	r0, #0
 8004eb0:	f000 fb40 	bl	8005534 <indicateLED_return>
		return;
 8004eb4:	e137      	b.n	8005126 <GSMTest+0x356>
	}
	HAL_Delay(500);
 8004eb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004eba:	f7fd fbf1 	bl	80026a0 <HAL_Delay>

	/*Check SIM-Card Insertion*/
	statusSIMCard = GSMCheckSimInsert();
 8004ebe:	f7fe fae5 	bl	800348c <GSMCheckSimInsert>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	73bb      	strb	r3, [r7, #14]
	if (statusSIMCard == 0){
 8004ec6:	7bbb      	ldrb	r3, [r7, #14]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10d      	bne.n	8004ee8 <GSMTest+0x118>
		_BT_PRINT("Error: No Sim Card inserted. GSM-Test failed...\r");
 8004ecc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ed0:	2230      	movs	r2, #48	; 0x30
 8004ed2:	4973      	ldr	r1, [pc, #460]	; (80050a0 <GSMTest+0x2d0>)
 8004ed4:	4868      	ldr	r0, [pc, #416]	; (8005078 <GSMTest+0x2a8>)
 8004ed6:	f005 f8fe 	bl	800a0d6 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004eda:	4b68      	ldr	r3, [pc, #416]	; (800507c <GSMTest+0x2ac>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f000 fb27 	bl	8005534 <indicateLED_return>
		return;
 8004ee6:	e11e      	b.n	8005126 <GSMTest+0x356>
	}
	else if (statusSIMCard != 1){
 8004ee8:	7bbb      	ldrb	r3, [r7, #14]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d00d      	beq.n	8004f0a <GSMTest+0x13a>
		_BT_PRINT("Error: No valid answer from GSM Module. GSM-Test failed...\r");
 8004eee:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004ef2:	223b      	movs	r2, #59	; 0x3b
 8004ef4:	4969      	ldr	r1, [pc, #420]	; (800509c <GSMTest+0x2cc>)
 8004ef6:	4860      	ldr	r0, [pc, #384]	; (8005078 <GSMTest+0x2a8>)
 8004ef8:	f005 f8ed 	bl	800a0d6 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004efc:	4b5f      	ldr	r3, [pc, #380]	; (800507c <GSMTest+0x2ac>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004f02:	2000      	movs	r0, #0
 8004f04:	f000 fb16 	bl	8005534 <indicateLED_return>
		return;
 8004f08:	e10d      	b.n	8005126 <GSMTest+0x356>
	}
	HAL_Delay(500);
 8004f0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f0e:	f7fd fbc7 	bl	80026a0 <HAL_Delay>

	/*Check Signal Strength*/
	signalRSSI = GSMGetSignalStrength();
 8004f12:	f7fe fb4f 	bl	80035b4 <GSMGetSignalStrength>
 8004f16:	4603      	mov	r3, r0
 8004f18:	733b      	strb	r3, [r7, #12]
	if (signalRSSI >= 99){
 8004f1a:	7b3b      	ldrb	r3, [r7, #12]
 8004f1c:	2b62      	cmp	r3, #98	; 0x62
 8004f1e:	d90d      	bls.n	8004f3c <GSMTest+0x16c>
			_BT_PRINT("Error: No valid answer from GSM Module. GSM-Test failed...\r");
 8004f20:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f24:	223b      	movs	r2, #59	; 0x3b
 8004f26:	495d      	ldr	r1, [pc, #372]	; (800509c <GSMTest+0x2cc>)
 8004f28:	4853      	ldr	r0, [pc, #332]	; (8005078 <GSMTest+0x2a8>)
 8004f2a:	f005 f8d4 	bl	800a0d6 <HAL_UART_Transmit>
			gsmtest_OK = 0;
 8004f2e:	4b53      	ldr	r3, [pc, #332]	; (800507c <GSMTest+0x2ac>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]
			indicateLED_return(0);
 8004f34:	2000      	movs	r0, #0
 8004f36:	f000 fafd 	bl	8005534 <indicateLED_return>
			return;
 8004f3a:	e0f4      	b.n	8005126 <GSMTest+0x356>
	}
	else if (signalRSSI == 0){
 8004f3c:	7b3b      	ldrb	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d107      	bne.n	8004f52 <GSMTest+0x182>
			_BT_PRINT("GSM signal strength: very bad - consider another location\r");
 8004f42:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f46:	223a      	movs	r2, #58	; 0x3a
 8004f48:	4956      	ldr	r1, [pc, #344]	; (80050a4 <GSMTest+0x2d4>)
 8004f4a:	484b      	ldr	r0, [pc, #300]	; (8005078 <GSMTest+0x2a8>)
 8004f4c:	f005 f8c3 	bl	800a0d6 <HAL_UART_Transmit>
 8004f50:	e022      	b.n	8004f98 <GSMTest+0x1c8>
	}
	else if (signalRSSI == 1){
 8004f52:	7b3b      	ldrb	r3, [r7, #12]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d107      	bne.n	8004f68 <GSMTest+0x198>
			_BT_PRINT("GSM signal strength: low but enough\r");
 8004f58:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f5c:	2224      	movs	r2, #36	; 0x24
 8004f5e:	4952      	ldr	r1, [pc, #328]	; (80050a8 <GSMTest+0x2d8>)
 8004f60:	4845      	ldr	r0, [pc, #276]	; (8005078 <GSMTest+0x2a8>)
 8004f62:	f005 f8b8 	bl	800a0d6 <HAL_UART_Transmit>
 8004f66:	e017      	b.n	8004f98 <GSMTest+0x1c8>
	}
	else if (signalRSSI >= 2 && signalRSSI < 31){
 8004f68:	7b3b      	ldrb	r3, [r7, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d90a      	bls.n	8004f84 <GSMTest+0x1b4>
 8004f6e:	7b3b      	ldrb	r3, [r7, #12]
 8004f70:	2b1e      	cmp	r3, #30
 8004f72:	d807      	bhi.n	8004f84 <GSMTest+0x1b4>
			_BT_PRINT("GSM signal strength: OK\r");
 8004f74:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f78:	2218      	movs	r2, #24
 8004f7a:	494c      	ldr	r1, [pc, #304]	; (80050ac <GSMTest+0x2dc>)
 8004f7c:	483e      	ldr	r0, [pc, #248]	; (8005078 <GSMTest+0x2a8>)
 8004f7e:	f005 f8aa 	bl	800a0d6 <HAL_UART_Transmit>
 8004f82:	e009      	b.n	8004f98 <GSMTest+0x1c8>
	}
	else if (signalRSSI == 31){
 8004f84:	7b3b      	ldrb	r3, [r7, #12]
 8004f86:	2b1f      	cmp	r3, #31
 8004f88:	d106      	bne.n	8004f98 <GSMTest+0x1c8>
			_BT_PRINT("GSM signal strength: Very Good\r");
 8004f8a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004f8e:	221f      	movs	r2, #31
 8004f90:	4947      	ldr	r1, [pc, #284]	; (80050b0 <GSMTest+0x2e0>)
 8004f92:	4839      	ldr	r0, [pc, #228]	; (8005078 <GSMTest+0x2a8>)
 8004f94:	f005 f89f 	bl	800a0d6 <HAL_UART_Transmit>
	}
	HAL_Delay(500);
 8004f98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f9c:	f7fd fb80 	bl	80026a0 <HAL_Delay>

	/*Check Network Registration*/
	statusReg = GSMGetRegState();
 8004fa0:	f7fe fabe 	bl	8003520 <GSMGetRegState>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	737b      	strb	r3, [r7, #13]
	if (statusReg == 0 || statusReg == 2 || statusReg == 3 || statusReg == 4){
 8004fa8:	7b7b      	ldrb	r3, [r7, #13]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <GSMTest+0x1f0>
 8004fae:	7b7b      	ldrb	r3, [r7, #13]
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d005      	beq.n	8004fc0 <GSMTest+0x1f0>
 8004fb4:	7b7b      	ldrb	r3, [r7, #13]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d002      	beq.n	8004fc0 <GSMTest+0x1f0>
 8004fba:	7b7b      	ldrb	r3, [r7, #13]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d10d      	bne.n	8004fdc <GSMTest+0x20c>
		_BT_PRINT("Error: GSM Module not registered in cellular network. GSM-Test failed...\r");
 8004fc0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004fc4:	2249      	movs	r2, #73	; 0x49
 8004fc6:	493b      	ldr	r1, [pc, #236]	; (80050b4 <GSMTest+0x2e4>)
 8004fc8:	482b      	ldr	r0, [pc, #172]	; (8005078 <GSMTest+0x2a8>)
 8004fca:	f005 f884 	bl	800a0d6 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004fce:	4b2b      	ldr	r3, [pc, #172]	; (800507c <GSMTest+0x2ac>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	f000 faad 	bl	8005534 <indicateLED_return>
		return;
 8004fda:	e0a4      	b.n	8005126 <GSMTest+0x356>
	}
	else if (statusReg != 1){
 8004fdc:	7b7b      	ldrb	r3, [r7, #13]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d00d      	beq.n	8004ffe <GSMTest+0x22e>
		_BT_PRINT("Error: No valid answer from GSM Module. GSM-Test failed...\r");
 8004fe2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004fe6:	223b      	movs	r2, #59	; 0x3b
 8004fe8:	492c      	ldr	r1, [pc, #176]	; (800509c <GSMTest+0x2cc>)
 8004fea:	4823      	ldr	r0, [pc, #140]	; (8005078 <GSMTest+0x2a8>)
 8004fec:	f005 f873 	bl	800a0d6 <HAL_UART_Transmit>
		gsmtest_OK = 0;
 8004ff0:	4b22      	ldr	r3, [pc, #136]	; (800507c <GSMTest+0x2ac>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	701a      	strb	r2, [r3, #0]
		indicateLED_return(0);
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f000 fa9c 	bl	8005534 <indicateLED_return>
		return;
 8004ffc:	e093      	b.n	8005126 <GSMTest+0x356>
	}
	else if (statusReg == 1){
 8004ffe:	7b7b      	ldrb	r3, [r7, #13]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d106      	bne.n	8005012 <GSMTest+0x242>
		_BT_PRINT("GSM Module successfully registered to GSM Network\r");
 8005004:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005008:	2232      	movs	r2, #50	; 0x32
 800500a:	492b      	ldr	r1, [pc, #172]	; (80050b8 <GSMTest+0x2e8>)
 800500c:	481a      	ldr	r0, [pc, #104]	; (8005078 <GSMTest+0x2a8>)
 800500e:	f005 f862 	bl	800a0d6 <HAL_UART_Transmit>
	}
	HAL_Delay(500);
 8005012:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005016:	f7fd fb43 	bl	80026a0 <HAL_Delay>


	//
	uint16_t balance_cent = 0;
 800501a:	2300      	movs	r3, #0
 800501c:	80fb      	strh	r3, [r7, #6]
	if (GSMGetBalance(&balance_cent) < 101){
 800501e:	1dbb      	adds	r3, r7, #6
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe fcbb 	bl	800399c <GSMGetBalance>
 8005026:	4603      	mov	r3, r0
 8005028:	2b64      	cmp	r3, #100	; 0x64
 800502a:	d84d      	bhi.n	80050c8 <GSMTest+0x2f8>
		sprintf(printstr, "Balance: %u,%u EUR\r", balance_cent / 100, balance_cent % 100);
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	4a23      	ldr	r2, [pc, #140]	; (80050bc <GSMTest+0x2ec>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	b29b      	uxth	r3, r3
 8005038:	4618      	mov	r0, r3
 800503a:	88fb      	ldrh	r3, [r7, #6]
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <GSMTest+0x2ec>)
 800503e:	fba2 1203 	umull	r1, r2, r2, r3
 8005042:	0952      	lsrs	r2, r2, #5
 8005044:	2164      	movs	r1, #100	; 0x64
 8005046:	fb01 f202 	mul.w	r2, r1, r2
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	b29b      	uxth	r3, r3
 800504e:	4602      	mov	r2, r0
 8005050:	491b      	ldr	r1, [pc, #108]	; (80050c0 <GSMTest+0x2f0>)
 8005052:	481c      	ldr	r0, [pc, #112]	; (80050c4 <GSMTest+0x2f4>)
 8005054:	f00c fbd2 	bl	80117fc <siprintf>
		_BT_PRINT(printstr);
 8005058:	481a      	ldr	r0, [pc, #104]	; (80050c4 <GSMTest+0x2f4>)
 800505a:	f7fb f891 	bl	8000180 <strlen>
 800505e:	4603      	mov	r3, r0
 8005060:	b29a      	uxth	r2, r3
 8005062:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005066:	4917      	ldr	r1, [pc, #92]	; (80050c4 <GSMTest+0x2f4>)
 8005068:	4803      	ldr	r0, [pc, #12]	; (8005078 <GSMTest+0x2a8>)
 800506a:	f005 f834 	bl	800a0d6 <HAL_UART_Transmit>
 800506e:	e032      	b.n	80050d6 <GSMTest+0x306>
 8005070:	20000598 	.word	0x20000598
 8005074:	08015164 	.word	0x08015164
 8005078:	20000478 	.word	0x20000478
 800507c:	20000963 	.word	0x20000963
 8005080:	20000010 	.word	0x20000010
 8005084:	08014dc4 	.word	0x08014dc4
 8005088:	20000011 	.word	0x20000011
 800508c:	08015188 	.word	0x08015188
 8005090:	08014e0c 	.word	0x08014e0c
 8005094:	08014e34 	.word	0x08014e34
 8005098:	20000962 	.word	0x20000962
 800509c:	080151ac 	.word	0x080151ac
 80050a0:	080151e8 	.word	0x080151e8
 80050a4:	0801521c 	.word	0x0801521c
 80050a8:	08015258 	.word	0x08015258
 80050ac:	08015280 	.word	0x08015280
 80050b0:	0801529c 	.word	0x0801529c
 80050b4:	080152bc 	.word	0x080152bc
 80050b8:	08015308 	.word	0x08015308
 80050bc:	51eb851f 	.word	0x51eb851f
 80050c0:	0801533c 	.word	0x0801533c
 80050c4:	20000970 	.word	0x20000970
	}
	else{
		_BT_PRINT("Prepaid balance could not be requested\r");
 80050c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80050cc:	2227      	movs	r2, #39	; 0x27
 80050ce:	4917      	ldr	r1, [pc, #92]	; (800512c <GSMTest+0x35c>)
 80050d0:	4817      	ldr	r0, [pc, #92]	; (8005130 <GSMTest+0x360>)
 80050d2:	f005 f800 	bl	800a0d6 <HAL_UART_Transmit>
	}


	/*Short Battery-Test from GSM Module*/
	statusGSMBattery = GSMGetBatteryCharge(&statusGSMBatteryVOLT);
 80050d6:	f107 0308 	add.w	r3, r7, #8
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe faba 	bl	8003654 <GSMGetBatteryCharge>
 80050e0:	4603      	mov	r3, r0
 80050e2:	72fb      	strb	r3, [r7, #11]
	if (statusGSMBattery < 101){
 80050e4:	7afb      	ldrb	r3, [r7, #11]
 80050e6:	2b64      	cmp	r3, #100	; 0x64
 80050e8:	d810      	bhi.n	800510c <GSMTest+0x33c>
		sprintf(printstr, "Battery measurement of GSM-Module: %u%%\r", statusGSMBattery);
 80050ea:	7afb      	ldrb	r3, [r7, #11]
 80050ec:	461a      	mov	r2, r3
 80050ee:	4911      	ldr	r1, [pc, #68]	; (8005134 <GSMTest+0x364>)
 80050f0:	4811      	ldr	r0, [pc, #68]	; (8005138 <GSMTest+0x368>)
 80050f2:	f00c fb83 	bl	80117fc <siprintf>
		_BT_PRINT(printstr);
 80050f6:	4810      	ldr	r0, [pc, #64]	; (8005138 <GSMTest+0x368>)
 80050f8:	f7fb f842 	bl	8000180 <strlen>
 80050fc:	4603      	mov	r3, r0
 80050fe:	b29a      	uxth	r2, r3
 8005100:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005104:	490c      	ldr	r1, [pc, #48]	; (8005138 <GSMTest+0x368>)
 8005106:	480a      	ldr	r0, [pc, #40]	; (8005130 <GSMTest+0x360>)
 8005108:	f004 ffe5 	bl	800a0d6 <HAL_UART_Transmit>
	}

	/*If code proceeds until here without return, GSM Check was successful*/
	gsmtest_OK = 1;
 800510c:	4b0b      	ldr	r3, [pc, #44]	; (800513c <GSMTest+0x36c>)
 800510e:	2201      	movs	r2, #1
 8005110:	701a      	strb	r2, [r3, #0]
	_BT_PRINT("-> GSM-Test successful\r");
 8005112:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005116:	2217      	movs	r2, #23
 8005118:	4909      	ldr	r1, [pc, #36]	; (8005140 <GSMTest+0x370>)
 800511a:	4805      	ldr	r0, [pc, #20]	; (8005130 <GSMTest+0x360>)
 800511c:	f004 ffdb 	bl	800a0d6 <HAL_UART_Transmit>
	/*Indicate on Green LED and then start Config mode idle LED again*/
	indicateLED_return(1);
 8005120:	2001      	movs	r0, #1
 8005122:	f000 fa07 	bl	8005534 <indicateLED_return>

}
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	08015350 	.word	0x08015350
 8005130:	20000478 	.word	0x20000478
 8005134:	08015378 	.word	0x08015378
 8005138:	20000970 	.word	0x20000970
 800513c:	20000963 	.word	0x20000963
 8005140:	080153a4 	.word	0x080153a4

08005144 <LoRa_FindSync>:

static void LoRa_FindSync(void){
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af02      	add	r7, sp, #8

	  /*Delete already registered slaves*/
	  slaves_reg = 0;
 800514a:	4b72      	ldr	r3, [pc, #456]	; (8005314 <LoRa_FindSync+0x1d0>)
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
	  memset(slaveaddrss, 0x0, MAXSLAVES);
 8005150:	2205      	movs	r2, #5
 8005152:	2100      	movs	r1, #0
 8005154:	4870      	ldr	r0, [pc, #448]	; (8005318 <LoRa_FindSync+0x1d4>)
 8005156:	f00b feed 	bl	8010f34 <memset>

	  _BT_PRINT("Searching LoRa Slave devices, please wait...\r")
 800515a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800515e:	222d      	movs	r2, #45	; 0x2d
 8005160:	496e      	ldr	r1, [pc, #440]	; (800531c <LoRa_FindSync+0x1d8>)
 8005162:	486f      	ldr	r0, [pc, #444]	; (8005320 <LoRa_FindSync+0x1dc>)
 8005164:	f004 ffb7 	bl	800a0d6 <HAL_UART_Transmit>
	  /*fills tx buffer*/
	  memset(BufferTx, 0x0, PAYLOAD_LEN);
 8005168:	2208      	movs	r2, #8
 800516a:	2100      	movs	r1, #0
 800516c:	486d      	ldr	r0, [pc, #436]	; (8005324 <LoRa_FindSync+0x1e0>)
 800516e:	f00b fee1 	bl	8010f34 <memset>
	  BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 8005172:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <LoRa_FindSync+0x1e0>)
 8005174:	22fa      	movs	r2, #250	; 0xfa
 8005176:	701a      	strb	r2, [r3, #0]
	  BufferTx[1] = 0x81; //Function -> Message from Master, Try to sync and register slaves
 8005178:	4b6a      	ldr	r3, [pc, #424]	; (8005324 <LoRa_FindSync+0x1e0>)
 800517a:	2281      	movs	r2, #129	; 0x81
 800517c:	705a      	strb	r2, [r3, #1]
	  BufferTx[2] = 0x00; //Slave IDs unknown so far
 800517e:	4b69      	ldr	r3, [pc, #420]	; (8005324 <LoRa_FindSync+0x1e0>)
 8005180:	2200      	movs	r2, #0
 8005182:	709a      	strb	r2, [r3, #2]
	  /*Data*/

	  uint32_t tempWakeup = (uint32_t)Parameter.Wakeup; //cast is ok because nr is limited by app
 8005184:	4b68      	ldr	r3, [pc, #416]	; (8005328 <LoRa_FindSync+0x1e4>)
 8005186:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800518a:	4613      	mov	r3, r2
 800518c:	603b      	str	r3, [r7, #0]
	  memcpy(BufferTx+3, &tempWakeup, 4);
 800518e:	4a67      	ldr	r2, [pc, #412]	; (800532c <LoRa_FindSync+0x1e8>)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	6013      	str	r3, [r2, #0]
	  BufferTx[7] = 0x00;
 8005194:	4b63      	ldr	r3, [pc, #396]	; (8005324 <LoRa_FindSync+0x1e0>)
 8005196:	2200      	movs	r2, #0
 8005198:	71da      	strb	r2, [r3, #7]

	  /*Send Broadcast*/
	  State = NONE;
 800519a:	4b65      	ldr	r3, [pc, #404]	; (8005330 <LoRa_FindSync+0x1ec>)
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
	  Radio.Send(BufferTx, PAYLOAD_LEN);
 80051a0:	4b64      	ldr	r3, [pc, #400]	; (8005334 <LoRa_FindSync+0x1f0>)
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	2108      	movs	r1, #8
 80051a6:	485f      	ldr	r0, [pc, #380]	; (8005324 <LoRa_FindSync+0x1e0>)
 80051a8:	4798      	blx	r3

	  /*Wait until LoRa module has done someting*/
	  while (State != TX && State != TX_TIMEOUT);
 80051aa:	bf00      	nop
 80051ac:	4b60      	ldr	r3, [pc, #384]	; (8005330 <LoRa_FindSync+0x1ec>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d003      	beq.n	80051bc <LoRa_FindSync+0x78>
 80051b4:	4b5e      	ldr	r3, [pc, #376]	; (8005330 <LoRa_FindSync+0x1ec>)
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b05      	cmp	r3, #5
 80051ba:	d1f7      	bne.n	80051ac <LoRa_FindSync+0x68>

	  if (State == TX_TIMEOUT){
 80051bc:	4b5c      	ldr	r3, [pc, #368]	; (8005330 <LoRa_FindSync+0x1ec>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b05      	cmp	r3, #5
 80051c2:	d10d      	bne.n	80051e0 <LoRa_FindSync+0x9c>
		  _BT_PRINT("LoRa TX Error, syncing process stopped\r");
 80051c4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80051c8:	2227      	movs	r2, #39	; 0x27
 80051ca:	495b      	ldr	r1, [pc, #364]	; (8005338 <LoRa_FindSync+0x1f4>)
 80051cc:	4854      	ldr	r0, [pc, #336]	; (8005320 <LoRa_FindSync+0x1dc>)
 80051ce:	f004 ff82 	bl	800a0d6 <HAL_UART_Transmit>
		  Radio.Sleep();
 80051d2:	4b58      	ldr	r3, [pc, #352]	; (8005334 <LoRa_FindSync+0x1f0>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	4798      	blx	r3
		  indicateLED_return(0);
 80051d8:	2000      	movs	r0, #0
 80051da:	f000 f9ab 	bl	8005534 <indicateLED_return>
 80051de:	e095      	b.n	800530c <LoRa_FindSync+0x1c8>
		  return;
	  }

	  /*Start Reception*/
	  Radio.Rx(0);
 80051e0:	4b54      	ldr	r3, [pc, #336]	; (8005334 <LoRa_FindSync+0x1f0>)
 80051e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051e4:	2000      	movs	r0, #0
 80051e6:	4798      	blx	r3
	   * Slaves answer multiple times with a random generated delay each,
	   * so each active slave in range has a chance to get registered by the master
	   * and none gets ignored accidently, if another one answers at the same time.
	   * On Air time with SF=12, BW=125KHz, 8 Bit Payload is ca. 1s -> Reception window should be active several seconds.
	   */
	  UTIL_TIMER_Create(&timerLoraSync, 20000, UTIL_TIMER_ONESHOT, OnSyncOverEvent, NULL);
 80051e8:	2300      	movs	r3, #0
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4b53      	ldr	r3, [pc, #332]	; (800533c <LoRa_FindSync+0x1f8>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	f644 6120 	movw	r1, #20000	; 0x4e20
 80051f4:	4852      	ldr	r0, [pc, #328]	; (8005340 <LoRa_FindSync+0x1fc>)
 80051f6:	f00b f97b 	bl	80104f0 <UTIL_TIMER_Create>
	  UTIL_TIMER_Start(&timerLoraSync);
 80051fa:	4851      	ldr	r0, [pc, #324]	; (8005340 <LoRa_FindSync+0x1fc>)
 80051fc:	f00b f9ae 	bl	801055c <UTIL_TIMER_Start>
	  syncover = false;
 8005200:	4b50      	ldr	r3, [pc, #320]	; (8005344 <LoRa_FindSync+0x200>)
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
	  /*Wait for Slaves to answer*/
	  State = NONE;
 8005206:	4b4a      	ldr	r3, [pc, #296]	; (8005330 <LoRa_FindSync+0x1ec>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
	  while(!syncover) {
 800520c:	e056      	b.n	80052bc <LoRa_FindSync+0x178>
		  if (State == RX_ERROR || State == RX_TIMEOUT){
 800520e:	4b48      	ldr	r3, [pc, #288]	; (8005330 <LoRa_FindSync+0x1ec>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	2b03      	cmp	r3, #3
 8005214:	d003      	beq.n	800521e <LoRa_FindSync+0xda>
 8005216:	4b46      	ldr	r3, [pc, #280]	; (8005330 <LoRa_FindSync+0x1ec>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d10d      	bne.n	800523a <LoRa_FindSync+0xf6>
			  _BT_PRINT("LoRa message reception error. Continuing to receive... \r");
 800521e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005222:	2238      	movs	r2, #56	; 0x38
 8005224:	4948      	ldr	r1, [pc, #288]	; (8005348 <LoRa_FindSync+0x204>)
 8005226:	483e      	ldr	r0, [pc, #248]	; (8005320 <LoRa_FindSync+0x1dc>)
 8005228:	f004 ff55 	bl	800a0d6 <HAL_UART_Transmit>
			  /*Reset State for next receive*/
			  State = NONE;
 800522c:	4b40      	ldr	r3, [pc, #256]	; (8005330 <LoRa_FindSync+0x1ec>)
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
			  Radio.Rx(0);
 8005232:	4b40      	ldr	r3, [pc, #256]	; (8005334 <LoRa_FindSync+0x1f0>)
 8005234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005236:	2000      	movs	r0, #0
 8005238:	4798      	blx	r3
		  }
		  if (State == RX){
 800523a:	4b3d      	ldr	r3, [pc, #244]	; (8005330 <LoRa_FindSync+0x1ec>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d13c      	bne.n	80052bc <LoRa_FindSync+0x178>
			  /* save new slave address(=ID)*/
			  uint8_t currentslaveid = RxBuffer[2] >> 4;
 8005242:	4b42      	ldr	r3, [pc, #264]	; (800534c <LoRa_FindSync+0x208>)
 8005244:	789b      	ldrb	r3, [r3, #2]
 8005246:	091b      	lsrs	r3, r3, #4
 8005248:	71fb      	strb	r3, [r7, #7]
			  if (alreadyRegistered(currentslaveid) == 0 && slaves_reg<= MAXSLAVES){
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f953 	bl	80054f8 <alreadyRegistered>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d12a      	bne.n	80052ae <LoRa_FindSync+0x16a>
 8005258:	4b2e      	ldr	r3, [pc, #184]	; (8005314 <LoRa_FindSync+0x1d0>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b05      	cmp	r3, #5
 800525e:	d826      	bhi.n	80052ae <LoRa_FindSync+0x16a>
				  slaveaddrss[slaves_reg++] = currentslaveid;
 8005260:	4b2c      	ldr	r3, [pc, #176]	; (8005314 <LoRa_FindSync+0x1d0>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	b2d1      	uxtb	r1, r2
 8005268:	4a2a      	ldr	r2, [pc, #168]	; (8005314 <LoRa_FindSync+0x1d0>)
 800526a:	7011      	strb	r1, [r2, #0]
 800526c:	4619      	mov	r1, r3
 800526e:	4a2a      	ldr	r2, [pc, #168]	; (8005318 <LoRa_FindSync+0x1d4>)
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	5453      	strb	r3, [r2, r1]
				  sprintf(printstr, "New slave device registered with ID: %u, RSSI: %ddBm, SNR: %ddB and Battery: %u%%\r", currentslaveid, RssiValue, SnrValue, RxBuffer[3]);
 8005274:	79fa      	ldrb	r2, [r7, #7]
 8005276:	4b36      	ldr	r3, [pc, #216]	; (8005350 <LoRa_FindSync+0x20c>)
 8005278:	f993 3000 	ldrsb.w	r3, [r3]
 800527c:	4618      	mov	r0, r3
 800527e:	4b35      	ldr	r3, [pc, #212]	; (8005354 <LoRa_FindSync+0x210>)
 8005280:	f993 3000 	ldrsb.w	r3, [r3]
 8005284:	4619      	mov	r1, r3
 8005286:	4b31      	ldr	r3, [pc, #196]	; (800534c <LoRa_FindSync+0x208>)
 8005288:	78db      	ldrb	r3, [r3, #3]
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	9100      	str	r1, [sp, #0]
 800528e:	4603      	mov	r3, r0
 8005290:	4931      	ldr	r1, [pc, #196]	; (8005358 <LoRa_FindSync+0x214>)
 8005292:	4832      	ldr	r0, [pc, #200]	; (800535c <LoRa_FindSync+0x218>)
 8005294:	f00c fab2 	bl	80117fc <siprintf>
				  _BT_PRINT(printstr);
 8005298:	4830      	ldr	r0, [pc, #192]	; (800535c <LoRa_FindSync+0x218>)
 800529a:	f7fa ff71 	bl	8000180 <strlen>
 800529e:	4603      	mov	r3, r0
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80052a6:	492d      	ldr	r1, [pc, #180]	; (800535c <LoRa_FindSync+0x218>)
 80052a8:	481d      	ldr	r0, [pc, #116]	; (8005320 <LoRa_FindSync+0x1dc>)
 80052aa:	f004 ff14 	bl	800a0d6 <HAL_UART_Transmit>
			  }
			  /*Reset State for next receive*/
			  State = NONE;
 80052ae:	4b20      	ldr	r3, [pc, #128]	; (8005330 <LoRa_FindSync+0x1ec>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
			  Radio.Rx(0);
 80052b4:	4b1f      	ldr	r3, [pc, #124]	; (8005334 <LoRa_FindSync+0x1f0>)
 80052b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b8:	2000      	movs	r0, #0
 80052ba:	4798      	blx	r3
	  while(!syncover) {
 80052bc:	4b21      	ldr	r3, [pc, #132]	; (8005344 <LoRa_FindSync+0x200>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0a4      	beq.n	800520e <LoRa_FindSync+0xca>
		  }
	  }
	  Radio.Sleep();
 80052c4:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <LoRa_FindSync+0x1f0>)
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	4798      	blx	r3

	  if (slaves_reg == 0){
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <LoRa_FindSync+0x1d0>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d107      	bne.n	80052e2 <LoRa_FindSync+0x19e>
		  _BT_PRINT("Registration process completed: No slave devices found.\r");
 80052d2:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80052d6:	2238      	movs	r2, #56	; 0x38
 80052d8:	4921      	ldr	r1, [pc, #132]	; (8005360 <LoRa_FindSync+0x21c>)
 80052da:	4811      	ldr	r0, [pc, #68]	; (8005320 <LoRa_FindSync+0x1dc>)
 80052dc:	f004 fefb 	bl	800a0d6 <HAL_UART_Transmit>
 80052e0:	e011      	b.n	8005306 <LoRa_FindSync+0x1c2>
	  }
	  else{
		  sprintf(printstr, "Registration process completed: Successfully registered %u slave devices.\r", slaves_reg);
 80052e2:	4b0c      	ldr	r3, [pc, #48]	; (8005314 <LoRa_FindSync+0x1d0>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	491e      	ldr	r1, [pc, #120]	; (8005364 <LoRa_FindSync+0x220>)
 80052ea:	481c      	ldr	r0, [pc, #112]	; (800535c <LoRa_FindSync+0x218>)
 80052ec:	f00c fa86 	bl	80117fc <siprintf>
		  _BT_PRINT(printstr);
 80052f0:	481a      	ldr	r0, [pc, #104]	; (800535c <LoRa_FindSync+0x218>)
 80052f2:	f7fa ff45 	bl	8000180 <strlen>
 80052f6:	4603      	mov	r3, r0
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80052fe:	4917      	ldr	r1, [pc, #92]	; (800535c <LoRa_FindSync+0x218>)
 8005300:	4807      	ldr	r0, [pc, #28]	; (8005320 <LoRa_FindSync+0x1dc>)
 8005302:	f004 fee8 	bl	800a0d6 <HAL_UART_Transmit>
	  }
	  indicateLED_return(1);
 8005306:	2001      	movs	r0, #1
 8005308:	f000 f914 	bl	8005534 <indicateLED_return>

}
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	200009e0 	.word	0x200009e0
 8005318:	200009e4 	.word	0x200009e4
 800531c:	080153bc 	.word	0x080153bc
 8005320:	20000478 	.word	0x20000478
 8005324:	20000a20 	.word	0x20000a20
 8005328:	20000010 	.word	0x20000010
 800532c:	20000a23 	.word	0x20000a23
 8005330:	20000a1c 	.word	0x20000a1c
 8005334:	08015770 	.word	0x08015770
 8005338:	080153ec 	.word	0x080153ec
 800533c:	08005591 	.word	0x08005591
 8005340:	20000930 	.word	0x20000930
 8005344:	20000a1b 	.word	0x20000a1b
 8005348:	08015414 	.word	0x08015414
 800534c:	20000a2c 	.word	0x20000a2c
 8005350:	20000a2a 	.word	0x20000a2a
 8005354:	20000a2b 	.word	0x20000a2b
 8005358:	08015450 	.word	0x08015450
 800535c:	20000970 	.word	0x20000970
 8005360:	080154a4 	.word	0x080154a4
 8005364:	080154e0 	.word	0x080154e0

08005368 <LoRa_StartSleep>:

static uint8_t LoRa_StartSleep(void){
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
	 /*fills tx buffer*/
	  memset(BufferTx, 0x0, PAYLOAD_LEN);
 800536e:	2208      	movs	r2, #8
 8005370:	2100      	movs	r1, #0
 8005372:	4856      	ldr	r0, [pc, #344]	; (80054cc <LoRa_StartSleep+0x164>)
 8005374:	f00b fdde 	bl	8010f34 <memset>
	  BufferTx[0] = 0xFA; //Identifier, Message belongs to Trap devices
 8005378:	4b54      	ldr	r3, [pc, #336]	; (80054cc <LoRa_StartSleep+0x164>)
 800537a:	22fa      	movs	r2, #250	; 0xfa
 800537c:	701a      	strb	r2, [r3, #0]
	  BufferTx[1] = 0x88; //Function -> Message from Master, Send Slaves to sleep
 800537e:	4b53      	ldr	r3, [pc, #332]	; (80054cc <LoRa_StartSleep+0x164>)
 8005380:	2288      	movs	r2, #136	; 0x88
 8005382:	705a      	strb	r2, [r3, #1]
	  /*Data*/
	  uint32_t tempWakeup = (uint32_t)Parameter.Wakeup; //cast is ok because nr is limited by app
 8005384:	4b52      	ldr	r3, [pc, #328]	; (80054d0 <LoRa_StartSleep+0x168>)
 8005386:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800538a:	4613      	mov	r3, r2
 800538c:	603b      	str	r3, [r7, #0]
	  memcpy(BufferTx+3, &tempWakeup, 4);
 800538e:	4a51      	ldr	r2, [pc, #324]	; (80054d4 <LoRa_StartSleep+0x16c>)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	6013      	str	r3, [r2, #0]
	  BufferTx[7] = 0x00;
 8005394:	4b4d      	ldr	r3, [pc, #308]	; (80054cc <LoRa_StartSleep+0x164>)
 8005396:	2200      	movs	r2, #0
 8005398:	71da      	strb	r2, [r3, #7]

	  for (uint8_t i = 0; i<slaves_reg; i++){
 800539a:	2300      	movs	r3, #0
 800539c:	71fb      	strb	r3, [r7, #7]
 800539e:	e072      	b.n	8005486 <LoRa_StartSleep+0x11e>
		  /*Send to slaves*/
		  BufferTx[2] = slaveaddrss[i]<<4; //SlaveID
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	4a4d      	ldr	r2, [pc, #308]	; (80054d8 <LoRa_StartSleep+0x170>)
 80053a4:	5cd3      	ldrb	r3, [r2, r3]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4b48      	ldr	r3, [pc, #288]	; (80054cc <LoRa_StartSleep+0x164>)
 80053ac:	709a      	strb	r2, [r3, #2]
		  State = NONE;
 80053ae:	4b4b      	ldr	r3, [pc, #300]	; (80054dc <LoRa_StartSleep+0x174>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
		  slavestatus[i] = NON;
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	4a4a      	ldr	r2, [pc, #296]	; (80054e0 <LoRa_StartSleep+0x178>)
 80053b8:	2100      	movs	r1, #0
 80053ba:	54d1      	strb	r1, [r2, r3]
		  Radio.Send(BufferTx, PAYLOAD_LEN);
 80053bc:	4b49      	ldr	r3, [pc, #292]	; (80054e4 <LoRa_StartSleep+0x17c>)
 80053be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c0:	2108      	movs	r1, #8
 80053c2:	4842      	ldr	r0, [pc, #264]	; (80054cc <LoRa_StartSleep+0x164>)
 80053c4:	4798      	blx	r3
		  /*Wait until LoRa module has done something*/
		  while (State != TX && State != TX_TIMEOUT);
 80053c6:	bf00      	nop
 80053c8:	4b44      	ldr	r3, [pc, #272]	; (80054dc <LoRa_StartSleep+0x174>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b04      	cmp	r3, #4
 80053ce:	d003      	beq.n	80053d8 <LoRa_StartSleep+0x70>
 80053d0:	4b42      	ldr	r3, [pc, #264]	; (80054dc <LoRa_StartSleep+0x174>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b05      	cmp	r3, #5
 80053d6:	d1f7      	bne.n	80053c8 <LoRa_StartSleep+0x60>
		  if (State == TX_TIMEOUT){
 80053d8:	4b40      	ldr	r3, [pc, #256]	; (80054dc <LoRa_StartSleep+0x174>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b05      	cmp	r3, #5
 80053de:	d10f      	bne.n	8005400 <LoRa_StartSleep+0x98>
			  _BT_PRINT("LoRa TX Error\r");
 80053e0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80053e4:	220e      	movs	r2, #14
 80053e6:	4940      	ldr	r1, [pc, #256]	; (80054e8 <LoRa_StartSleep+0x180>)
 80053e8:	4840      	ldr	r0, [pc, #256]	; (80054ec <LoRa_StartSleep+0x184>)
 80053ea:	f004 fe74 	bl	800a0d6 <HAL_UART_Transmit>
			  Radio.Sleep();
 80053ee:	4b3d      	ldr	r3, [pc, #244]	; (80054e4 <LoRa_StartSleep+0x17c>)
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	4798      	blx	r3
			  slavestatus[i] = ERROR_BEFORE_SLEEP;
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	4a3a      	ldr	r2, [pc, #232]	; (80054e0 <LoRa_StartSleep+0x178>)
 80053f8:	2102      	movs	r1, #2
 80053fa:	54d1      	strb	r1, [r2, r3]
			  return 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	e060      	b.n	80054c2 <LoRa_StartSleep+0x15a>
		  }
		  /*Start Reception with timeout*/
		  State = NONE;
 8005400:	4b36      	ldr	r3, [pc, #216]	; (80054dc <LoRa_StartSleep+0x174>)
 8005402:	2200      	movs	r2, #0
 8005404:	701a      	strb	r2, [r3, #0]
		  Radio.Rx(6000);
 8005406:	4b37      	ldr	r3, [pc, #220]	; (80054e4 <LoRa_StartSleep+0x17c>)
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	f241 7070 	movw	r0, #6000	; 0x1770
 800540e:	4798      	blx	r3
		  /*Wait until something happens*/
		  while(State != RX && State != RX_ERROR && State != RX_TIMEOUT);
 8005410:	bf00      	nop
 8005412:	4b32      	ldr	r3, [pc, #200]	; (80054dc <LoRa_StartSleep+0x174>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d007      	beq.n	800542a <LoRa_StartSleep+0xc2>
 800541a:	4b30      	ldr	r3, [pc, #192]	; (80054dc <LoRa_StartSleep+0x174>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b03      	cmp	r3, #3
 8005420:	d003      	beq.n	800542a <LoRa_StartSleep+0xc2>
 8005422:	4b2e      	ldr	r3, [pc, #184]	; (80054dc <LoRa_StartSleep+0x174>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d1f3      	bne.n	8005412 <LoRa_StartSleep+0xaa>
		  if (State == RX_ERROR || State == RX_TIMEOUT){
 800542a:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <LoRa_StartSleep+0x174>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b03      	cmp	r3, #3
 8005430:	d003      	beq.n	800543a <LoRa_StartSleep+0xd2>
 8005432:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <LoRa_StartSleep+0x174>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d103      	bne.n	8005442 <LoRa_StartSleep+0xda>
			  slavestatus[i] = ERROR_BEFORE_SLEEP;
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	4a28      	ldr	r2, [pc, #160]	; (80054e0 <LoRa_StartSleep+0x178>)
 800543e:	2102      	movs	r1, #2
 8005440:	54d1      	strb	r1, [r2, r3]
		  }
		  if (State == RX){
 8005442:	4b26      	ldr	r3, [pc, #152]	; (80054dc <LoRa_StartSleep+0x174>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d11a      	bne.n	8005480 <LoRa_StartSleep+0x118>
			  /* check if slave with current address answered with acknowledge*/
			  uint8_t currentslaveid = RxBuffer[2] >> 4;
 800544a:	4b29      	ldr	r3, [pc, #164]	; (80054f0 <LoRa_StartSleep+0x188>)
 800544c:	789b      	ldrb	r3, [r3, #2]
 800544e:	091b      	lsrs	r3, r3, #4
 8005450:	717b      	strb	r3, [r7, #5]
			  uint8_t ackcommand = RxBuffer[1] & 0x0F;
 8005452:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <LoRa_StartSleep+0x188>)
 8005454:	785b      	ldrb	r3, [r3, #1]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	713b      	strb	r3, [r7, #4]
			  if (currentslaveid == slaveaddrss[i] && ackcommand == 0x02){
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <LoRa_StartSleep+0x170>)
 8005460:	5cd3      	ldrb	r3, [r2, r3]
 8005462:	797a      	ldrb	r2, [r7, #5]
 8005464:	429a      	cmp	r2, r3
 8005466:	d107      	bne.n	8005478 <LoRa_StartSleep+0x110>
 8005468:	793b      	ldrb	r3, [r7, #4]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d104      	bne.n	8005478 <LoRa_StartSleep+0x110>
				  slavestatus[i] = ACK;
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <LoRa_StartSleep+0x178>)
 8005472:	2101      	movs	r1, #1
 8005474:	54d1      	strb	r1, [r2, r3]
 8005476:	e003      	b.n	8005480 <LoRa_StartSleep+0x118>
			  }else {
				  slavestatus[i] = ERROR_BEFORE_SLEEP;
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <LoRa_StartSleep+0x178>)
 800547c:	2102      	movs	r1, #2
 800547e:	54d1      	strb	r1, [r2, r3]
	  for (uint8_t i = 0; i<slaves_reg; i++){
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	3301      	adds	r3, #1
 8005484:	71fb      	strb	r3, [r7, #7]
 8005486:	4b1b      	ldr	r3, [pc, #108]	; (80054f4 <LoRa_StartSleep+0x18c>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	79fa      	ldrb	r2, [r7, #7]
 800548c:	429a      	cmp	r2, r3
 800548e:	d387      	bcc.n	80053a0 <LoRa_StartSleep+0x38>
			  }
		  }
	  }
	  State = NONE;
 8005490:	4b12      	ldr	r3, [pc, #72]	; (80054dc <LoRa_StartSleep+0x174>)
 8005492:	2200      	movs	r2, #0
 8005494:	701a      	strb	r2, [r3, #0]
	  Radio.Sleep();
 8005496:	4b13      	ldr	r3, [pc, #76]	; (80054e4 <LoRa_StartSleep+0x17c>)
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	4798      	blx	r3

	  for (uint8_t i = 0; i < slaves_reg; i++){
 800549c:	2300      	movs	r3, #0
 800549e:	71bb      	strb	r3, [r7, #6]
 80054a0:	e009      	b.n	80054b6 <LoRa_StartSleep+0x14e>
		  if (slavestatus[i] == ERROR_BEFORE_SLEEP)
 80054a2:	79bb      	ldrb	r3, [r7, #6]
 80054a4:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <LoRa_StartSleep+0x178>)
 80054a6:	5cd3      	ldrb	r3, [r2, r3]
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d101      	bne.n	80054b0 <LoRa_StartSleep+0x148>
			 return 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	e008      	b.n	80054c2 <LoRa_StartSleep+0x15a>
	  for (uint8_t i = 0; i < slaves_reg; i++){
 80054b0:	79bb      	ldrb	r3, [r7, #6]
 80054b2:	3301      	adds	r3, #1
 80054b4:	71bb      	strb	r3, [r7, #6]
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <LoRa_StartSleep+0x18c>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	79ba      	ldrb	r2, [r7, #6]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d3f0      	bcc.n	80054a2 <LoRa_StartSleep+0x13a>
	  }
	  return 1;
 80054c0:	2301      	movs	r3, #1
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000a20 	.word	0x20000a20
 80054d0:	20000010 	.word	0x20000010
 80054d4:	20000a23 	.word	0x20000a23
 80054d8:	200009e4 	.word	0x200009e4
 80054dc:	20000a1c 	.word	0x20000a1c
 80054e0:	200009ec 	.word	0x200009ec
 80054e4:	08015770 	.word	0x08015770
 80054e8:	0801552c 	.word	0x0801552c
 80054ec:	20000478 	.word	0x20000478
 80054f0:	20000a2c 	.word	0x20000a2c
 80054f4:	200009e0 	.word	0x200009e0

080054f8 <alreadyRegistered>:

static uint8_t alreadyRegistered(uint8_t slaveid){
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for (i = 0; i<MAXSLAVES; i++ ){
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e00a      	b.n	800551e <alreadyRegistered+0x26>
		if (slaveaddrss[i] == slaveid)
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	4a09      	ldr	r2, [pc, #36]	; (8005530 <alreadyRegistered+0x38>)
 800550c:	5cd3      	ldrb	r3, [r2, r3]
 800550e:	79fa      	ldrb	r2, [r7, #7]
 8005510:	429a      	cmp	r2, r3
 8005512:	d101      	bne.n	8005518 <alreadyRegistered+0x20>
			return 1;
 8005514:	2301      	movs	r3, #1
 8005516:	e006      	b.n	8005526 <alreadyRegistered+0x2e>
	for (i = 0; i<MAXSLAVES; i++ ){
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	3301      	adds	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d9f1      	bls.n	8005508 <alreadyRegistered+0x10>
	}
	return 0;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	200009e4 	.word	0x200009e4

08005534 <indicateLED_return>:

/* param: 1: good, 0: bad*/
static void indicateLED_return(uint8_t good_bad){
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af02      	add	r7, sp, #8
 800553a:	4603      	mov	r3, r0
 800553c:	71fb      	strb	r3, [r7, #7]
	if (good_bad == 1) {
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d111      	bne.n	8005568 <indicateLED_return+0x34>
		HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 1);
 8005544:	2201      	movs	r2, #1
 8005546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800554a:	480d      	ldr	r0, [pc, #52]	; (8005580 <indicateLED_return+0x4c>)
 800554c:	f002 f92d 	bl	80077aa <HAL_GPIO_WritePin>
		UTIL_TIMER_Create(&timerLedFeedback, 500, UTIL_TIMER_ONESHOT, OnledFeedbackEventGood, NULL);
 8005550:	2300      	movs	r3, #0
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <indicateLED_return+0x50>)
 8005556:	2200      	movs	r2, #0
 8005558:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800555c:	480a      	ldr	r0, [pc, #40]	; (8005588 <indicateLED_return+0x54>)
 800555e:	f00a ffc7 	bl	80104f0 <UTIL_TIMER_Create>
		UTIL_TIMER_Start(&timerLedFeedback);
 8005562:	4809      	ldr	r0, [pc, #36]	; (8005588 <indicateLED_return+0x54>)
 8005564:	f00a fffa 	bl	801055c <UTIL_TIMER_Start>

	}
	/*Start config mode LED Indication again*/
	HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); /* LED_Red*/
 8005568:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800556c:	4804      	ldr	r0, [pc, #16]	; (8005580 <indicateLED_return+0x4c>)
 800556e:	f002 f933 	bl	80077d8 <HAL_GPIO_TogglePin>
	UTIL_TIMER_Start(&timerLedIdleConf);
 8005572:	4806      	ldr	r0, [pc, #24]	; (800558c <indicateLED_return+0x58>)
 8005574:	f00a fff2 	bl	801055c <UTIL_TIMER_Start>
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	48000400 	.word	0x48000400
 8005584:	080055f1 	.word	0x080055f1
 8005588:	20000948 	.word	0x20000948
 800558c:	200008e8 	.word	0x200008e8

08005590 <OnSyncOverEvent>:

/*Timer callbacks*/
static void OnSyncOverEvent(void *context){
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  syncover = true;
 8005598:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <OnSyncOverEvent+0x18>)
 800559a:	2201      	movs	r2, #1
 800559c:	701a      	strb	r2, [r3, #0]
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr
 80055a8:	20000a1b 	.word	0x20000a1b

080055ac <OnledConfIdleEvent>:

static void OnledConfIdleEvent(void *context){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LED_Red_GPIO_Port, LED_Red_Pin); /* LED_Red*/
 80055b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80055b8:	4804      	ldr	r0, [pc, #16]	; (80055cc <OnledConfIdleEvent+0x20>)
 80055ba:	f002 f90d 	bl	80077d8 <HAL_GPIO_TogglePin>
  UTIL_TIMER_Start(&timerLedIdleConf);
 80055be:	4804      	ldr	r0, [pc, #16]	; (80055d0 <OnledConfIdleEvent+0x24>)
 80055c0:	f00a ffcc 	bl	801055c <UTIL_TIMER_Start>
}
 80055c4:	bf00      	nop
 80055c6:	3708      	adds	r7, #8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	48000400 	.word	0x48000400
 80055d0:	200008e8 	.word	0x200008e8

080055d4 <OnGSMConfTimeEvent>:

static void OnGSMConfTimeEvent(void *context){
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  gsm_configmode_timeover = true;
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <OnGSMConfTimeEvent+0x18>)
 80055de:	2201      	movs	r2, #1
 80055e0:	701a      	strb	r2, [r3, #0]
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	20000962 	.word	0x20000962

080055f0 <OnledFeedbackEventGood>:

static void OnledFeedbackEventGood(void *context){
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, 0);
 80055f8:	2200      	movs	r2, #0
 80055fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055fe:	4803      	ldr	r0, [pc, #12]	; (800560c <OnledFeedbackEventGood+0x1c>)
 8005600:	f002 f8d3 	bl	80077aa <HAL_GPIO_WritePin>
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	48000400 	.word	0x48000400

08005610 <timerSleepWakeupEvent>:


static void timerSleepWakeupEvent(void *context){
 8005610:	b5b0      	push	{r4, r5, r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	mins_passed++;
 8005618:	4b12      	ldr	r3, [pc, #72]	; (8005664 <timerSleepWakeupEvent+0x54>)
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	1c54      	adds	r4, r2, #1
 8005620:	f143 0500 	adc.w	r5, r3, #0
 8005624:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <timerSleepWakeupEvent+0x54>)
 8005626:	e9c3 4500 	strd	r4, r5, [r3]
	/*Start timer right again, same as in slaves.
	*because this way wakeup time interval will stay
	*the same most likely, independent from different amout of code
	*done during waked up process  */
	UTIL_TIMER_Start(&timerSleepWakeup);
 800562a:	480f      	ldr	r0, [pc, #60]	; (8005668 <timerSleepWakeupEvent+0x58>)
 800562c:	f00a ff96 	bl	801055c <UTIL_TIMER_Start>
	if (mins_passed >= Parameter.Wakeup){
 8005630:	4b0e      	ldr	r3, [pc, #56]	; (800566c <timerSleepWakeupEvent+0x5c>)
 8005632:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005636:	490b      	ldr	r1, [pc, #44]	; (8005664 <timerSleepWakeupEvent+0x54>)
 8005638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800563c:	4290      	cmp	r0, r2
 800563e:	eb71 0303 	sbcs.w	r3, r1, r3
 8005642:	d30a      	bcc.n	800565a <timerSleepWakeupEvent+0x4a>
		mins_passed = 0;
 8005644:	4907      	ldr	r1, [pc, #28]	; (8005664 <timerSleepWakeupEvent+0x54>)
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9c1 2300 	strd	r2, r3, [r1]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SyncedWakeup), CFG_SEQ_Prio_0);
 8005652:	2100      	movs	r1, #0
 8005654:	2008      	movs	r0, #8
 8005656:	f00a fe57 	bl	8010308 <UTIL_SEQ_SetTask>
	}
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bdb0      	pop	{r4, r5, r7, pc}
 8005662:	bf00      	nop
 8005664:	200009d8 	.word	0x200009d8
 8005668:	20000918 	.word	0x20000918
 800566c:	20000010 	.word	0x20000010

08005670 <digits_only>:


/*Helper*/
int digits_only(const char *s)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
    while (*s) {
 8005678:	e00d      	b.n	8005696 <digits_only+0x26>
        if (isdigit((unsigned char)*s++) == 0) return 0;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	607a      	str	r2, [r7, #4]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	4a09      	ldr	r2, [pc, #36]	; (80056ac <digits_only+0x3c>)
 8005686:	4413      	add	r3, r2
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <digits_only+0x26>
 8005692:	2300      	movs	r3, #0
 8005694:	e004      	b.n	80056a0 <digits_only+0x30>
    while (*s) {
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1ed      	bne.n	800567a <digits_only+0xa>
    }

    return 1;
 800569e:	2301      	movs	r3, #1
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	080158bc 	.word	0x080158bc

080056b0 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_Init();
 80056b4:	f000 f83e 	bl	8005734 <BSP_RADIO_Init>
 80056b8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	bd80      	pop	{r7, pc}

080056be <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	4603      	mov	r3, r0
 80056c6:	71fb      	strb	r3, [r7, #7]
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f866 	bl	800579c <BSP_RADIO_ConfigRFSwitch>
 80056d0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_GetTxConfig();
 80056de:	f000 f8ab 	bl	8005838 <BSP_RADIO_GetTxConfig>
 80056e2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsTCXO();
 80056ec:	f000 f8ab 	bl	8005846 <BSP_RADIO_IsTCXO>
 80056f0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	af00      	add	r7, sp, #0
   *       or at https://github.com/STMicroelectronics/STM32CubeWL/tree/main/Drivers/BSP/STM32WLxx_Nucleo/
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration */
  return BSP_RADIO_IsDCDC();
 80056fa:	f000 f8ab 	bl	8005854 <BSP_RADIO_IsDCDC>
 80056fe:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8005700:	4618      	mov	r0, r3
 8005702:	bd80      	pop	{r7, pc}

08005704 <LL_AHB2_GRP1_EnableClock>:
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4313      	orrs	r3, r2
 800571a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800571c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4013      	ands	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005728:	68fb      	ldr	r3, [r7, #12]
}
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr

08005734 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800573a:	1d3b      	adds	r3, r7, #4
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	60da      	str	r2, [r3, #12]
 8005746:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL1_GPIO_CLK_ENABLE();
 8005748:	2001      	movs	r0, #1
 800574a:	f7ff ffdb 	bl	8005704 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800574e:	2310      	movs	r3, #16
 8005750:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8005752:	2301      	movs	r3, #1
 8005754:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800575a:	2303      	movs	r3, #3
 800575c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800575e:	1d3b      	adds	r3, r7, #4
 8005760:	4619      	mov	r1, r3
 8005762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005766:	f001 fddb 	bl	8007320 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800576a:	2320      	movs	r3, #32
 800576c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	4619      	mov	r1, r3
 8005772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005776:	f001 fdd3 	bl	8007320 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800577a:	2200      	movs	r2, #0
 800577c:	2120      	movs	r1, #32
 800577e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005782:	f002 f812 	bl	80077aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8005786:	2200      	movs	r2, #0
 8005788:	2110      	movs	r1, #16
 800578a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800578e:	f002 f80c 	bl	80077aa <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	2b03      	cmp	r3, #3
 80057aa:	d83f      	bhi.n	800582c <BSP_RADIO_ConfigRFSwitch+0x90>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057df 	.word	0x080057df
 80057bc:	080057f9 	.word	0x080057f9
 80057c0:	08005813 	.word	0x08005813
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80057c4:	2200      	movs	r2, #0
 80057c6:	2110      	movs	r1, #16
 80057c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057cc:	f001 ffed 	bl	80077aa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80057d0:	2200      	movs	r2, #0
 80057d2:	2120      	movs	r1, #32
 80057d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057d8:	f001 ffe7 	bl	80077aa <HAL_GPIO_WritePin>
      break;      
 80057dc:	e027      	b.n	800582e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80057de:	2201      	movs	r2, #1
 80057e0:	2110      	movs	r1, #16
 80057e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057e6:	f001 ffe0 	bl	80077aa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80057ea:	2200      	movs	r2, #0
 80057ec:	2120      	movs	r1, #32
 80057ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80057f2:	f001 ffda 	bl	80077aa <HAL_GPIO_WritePin>
      break;
 80057f6:	e01a      	b.n	800582e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80057f8:	2201      	movs	r2, #1
 80057fa:	2110      	movs	r1, #16
 80057fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005800:	f001 ffd3 	bl	80077aa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8005804:	2201      	movs	r2, #1
 8005806:	2120      	movs	r1, #32
 8005808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800580c:	f001 ffcd 	bl	80077aa <HAL_GPIO_WritePin>
      break;
 8005810:	e00d      	b.n	800582e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8005812:	2200      	movs	r2, #0
 8005814:	2110      	movs	r1, #16
 8005816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800581a:	f001 ffc6 	bl	80077aa <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800581e:	2201      	movs	r2, #1
 8005820:	2120      	movs	r1, #32
 8005822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005826:	f001 ffc0 	bl	80077aa <HAL_GPIO_WritePin>
      break;
 800582a:	e000      	b.n	800582e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800582c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800583c:	2302      	movs	r3, #2
}
 800583e:	4618      	mov	r0, r3
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8005846:	b480      	push	{r7}
 8005848:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800584a:	2301      	movs	r3, #1
}
 800584c:	4618      	mov	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8005858:	2301      	movs	r3, #1
}
 800585a:	4618      	mov	r0, r3
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005862:	b480      	push	{r7}
 8005864:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8005866:	bf00      	nop
 8005868:	46bd      	mov	sp, r7
 800586a:	bc80      	pop	{r7}
 800586c:	4770      	bx	lr
	...

08005870 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8005874:	4b04      	ldr	r3, [pc, #16]	; (8005888 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4a03      	ldr	r2, [pc, #12]	; (8005888 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800587a:	f023 0301 	bic.w	r3, r3, #1
 800587e:	6053      	str	r3, [r2, #4]
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr
 8005888:	e0042000 	.word	0xe0042000

0800588c <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4a03      	ldr	r2, [pc, #12]	; (80058a4 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8005896:	f023 0302 	bic.w	r3, r3, #2
 800589a:	6053      	str	r3, [r2, #4]
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	bc80      	pop	{r7}
 80058a2:	4770      	bx	lr
 80058a4:	e0042000 	.word	0xe0042000

080058a8 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a03      	ldr	r2, [pc, #12]	; (80058c0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80058b2:	f023 0304 	bic.w	r3, r3, #4
 80058b6:	6053      	str	r3, [r2, #4]
}
 80058b8:	bf00      	nop
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bc80      	pop	{r7}
 80058be:	4770      	bx	lr
 80058c0:	e0042000 	.word	0xe0042000

080058c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058ce:	2003      	movs	r0, #3
 80058d0:	f000 fec8 	bl	8006664 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058d4:	f003 f85e 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 80058d8:	4603      	mov	r3, r0
 80058da:	4a09      	ldr	r2, [pc, #36]	; (8005900 <HAL_Init+0x3c>)
 80058dc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058de:	200f      	movs	r0, #15
 80058e0:	f7fc fec0 	bl	8002664 <HAL_InitTick>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	71fb      	strb	r3, [r7, #7]
 80058ee:	e001      	b.n	80058f4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058f0:	f7fc fd5b 	bl	80023aa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058f4:	79fb      	ldrb	r3, [r7, #7]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000040 	.word	0x20000040

08005904 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005908:	4b04      	ldr	r3, [pc, #16]	; (800591c <HAL_SuspendTick+0x18>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a03      	ldr	r2, [pc, #12]	; (800591c <HAL_SuspendTick+0x18>)
 800590e:	f023 0302 	bic.w	r3, r3, #2
 8005912:	6013      	str	r3, [r2, #0]
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	bc80      	pop	{r7}
 800591a:	4770      	bx	lr
 800591c:	e000e010 	.word	0xe000e010

08005920 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <HAL_ResumeTick+0x18>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a03      	ldr	r2, [pc, #12]	; (8005938 <HAL_ResumeTick+0x18>)
 800592a:	f043 0302 	orr.w	r3, r3, #2
 800592e:	6013      	str	r3, [r2, #0]
}
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	e000e010 	.word	0xe000e010

0800593c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8005940:	f7ff ff96 	bl	8005870 <LL_DBGMCU_DisableDBGSleepMode>
}
 8005944:	bf00      	nop
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 800594c:	f7ff ff9e 	bl	800588c <LL_DBGMCU_DisableDBGStopMode>
}
 8005950:	bf00      	nop
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8005958:	f7ff ffa6 	bl	80058a8 <LL_DBGMCU_DisableDBGStandbyMode>
}
 800595c:	bf00      	nop
 800595e:	bd80      	pop	{r7, pc}

08005960 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005994:	4618      	mov	r0, r3
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800599e:	b480      	push	{r7}
 80059a0:	b085      	sub	sp, #20
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2107      	movs	r1, #7
 80059b6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	401a      	ands	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	6879      	ldr	r1, [r7, #4]
 80059c6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ca:	431a      	orrs	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr

080059da <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2107      	movs	r1, #7
 80059f0:	fa01 f303 	lsl.w	r3, r1, r3
 80059f4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80059fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	210f      	movs	r1, #15
 8005a46:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	401a      	ands	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	0e9b      	lsrs	r3, r3, #26
 8005a52:	f003 010f 	and.w	r1, r3, #15
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f003 031f 	and.w	r3, r3, #31
 8005a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a60:	431a      	orrs	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bc80      	pop	{r7}
 8005a6e:	4770      	bx	lr

08005a70 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr

08005a94 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005aa8:	43db      	mvns	r3, r3
 8005aaa:	401a      	ands	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bc80      	pop	{r7}
 8005ab8:	4770      	bx	lr

08005aba <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	695a      	ldr	r2, [r3, #20]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	43db      	mvns	r3, r3
 8005ad0:	401a      	ands	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	0219      	lsls	r1, r3, #8
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	400b      	ands	r3, r1
 8005ada:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005ae8:	bf00      	nop
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b02:	f023 0317 	bic.w	r3, r3, #23
 8005b06:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr

08005b18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b2c:	d101      	bne.n	8005b32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr

08005b3e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b083      	sub	sp, #12
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b4e:	f023 0317 	bic.w	r3, r3, #23
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d101      	bne.n	8005b7c <LL_ADC_IsEnabled+0x18>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <LL_ADC_IsEnabled+0x1a>
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b98:	f023 0317 	bic.w	r3, r3, #23
 8005b9c:	f043 0204 	orr.w	r2, r3, #4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr

08005bae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b04      	cmp	r3, #4
 8005bc0:	d101      	bne.n	8005bc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e000      	b.n	8005bc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bc6:	2300      	movs	r3, #0
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr
	...

08005bd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e19e      	b.n	8005f34 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d109      	bne.n	8005c18 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7fb fd23 	bl	8001650 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff ff7b 	bl	8005b18 <LL_ADC_IsInternalRegulatorEnabled>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d115      	bne.n	8005c54 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ff60 	bl	8005af2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005c32:	4b99      	ldr	r3, [pc, #612]	; (8005e98 <HAL_ADC_Init+0x2c4>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	4a98      	ldr	r2, [pc, #608]	; (8005e9c <HAL_ADC_Init+0x2c8>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	099b      	lsrs	r3, r3, #6
 8005c40:	3301      	adds	r3, #1
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c46:	e002      	b.n	8005c4e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f9      	bne.n	8005c48 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff ff5d 	bl	8005b18 <LL_ADC_IsInternalRegulatorEnabled>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10d      	bne.n	8005c80 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c68:	f043 0210 	orr.w	r2, r3, #16
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c74:	f043 0201 	orr.w	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff ff92 	bl	8005bae <LL_ADC_REG_IsConversionOngoing>
 8005c8a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 8144 	bne.w	8005f22 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 8140 	bne.w	8005f22 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005caa:	f043 0202 	orr.w	r2, r3, #2
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff ff54 	bl	8005b64 <LL_ADC_IsEnabled>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 80a7 	bne.w	8005e12 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	7e1b      	ldrb	r3, [r3, #24]
 8005ccc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005cce:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7e5b      	ldrb	r3, [r3, #25]
 8005cd4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005cd6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	7e9b      	ldrb	r3, [r3, #26]
 8005cdc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005cde:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005ce4:	2a00      	cmp	r2, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_ADC_Init+0x11a>
 8005ce8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005cec:	e000      	b.n	8005cf0 <HAL_ADC_Init+0x11c>
 8005cee:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005cf0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005cf6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	da04      	bge.n	8005d0a <HAL_ADC_Init+0x136>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	e001      	b.n	8005d0e <HAL_ADC_Init+0x13a>
 8005d0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8005d0e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005d16:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005d18:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005d1a:	69ba      	ldr	r2, [r7, #24]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d114      	bne.n	8005d54 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	7e9b      	ldrb	r3, [r3, #26]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e00b      	b.n	8005d54 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d4c:	f043 0201 	orr.w	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d009      	beq.n	8005d70 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8005d7a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	69b9      	ldr	r1, [r7, #24]
 8005d84:	430b      	orrs	r3, r1
 8005d86:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005d94:	4313      	orrs	r3, r2
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d111      	bne.n	8005dca <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005db2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005db8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005dbe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	4b33      	ldr	r3, [pc, #204]	; (8005ea0 <HAL_ADC_Init+0x2cc>)
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6812      	ldr	r2, [r2, #0]
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005de6:	d014      	beq.n	8005e12 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df0:	d00f      	beq.n	8005e12 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfa:	d00a      	beq.n	8005e12 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8005dfc:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <HAL_ADC_Init+0x2d0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005e0c:	4925      	ldr	r1, [pc, #148]	; (8005ea4 <HAL_ADC_Init+0x2d0>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	f7ff fdbe 	bl	800599e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6818      	ldr	r0, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	491e      	ldr	r1, [pc, #120]	; (8005ea8 <HAL_ADC_Init+0x2d4>)
 8005e2e:	f7ff fdb6 	bl	800599e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691b      	ldr	r3, [r3, #16]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d108      	bne.n	8005e4c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f062 020f 	orn	r2, r2, #15
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
 8005e4a:	e042      	b.n	8005ed2 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e54:	d13d      	bne.n	8005ed2 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005e56:	2300      	movs	r3, #0
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	e00c      	b.n	8005e76 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	2b0f      	cmp	r3, #15
 8005e6e:	d006      	beq.n	8005e7e <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3301      	adds	r3, #1
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	2b07      	cmp	r3, #7
 8005e7a:	d9ef      	bls.n	8005e5c <HAL_ADC_Init+0x288>
 8005e7c:	e000      	b.n	8005e80 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8005e7e:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d112      	bne.n	8005eac <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f062 020f 	orn	r2, r2, #15
 8005e94:	629a      	str	r2, [r3, #40]	; 0x28
 8005e96:	e01c      	b.n	8005ed2 <HAL_ADC_Init+0x2fe>
 8005e98:	20000040 	.word	0x20000040
 8005e9c:	053e2d63 	.word	0x053e2d63
 8005ea0:	1ffffc02 	.word	0x1ffffc02
 8005ea4:	40012708 	.word	0x40012708
 8005ea8:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	f003 031c 	and.w	r3, r3, #28
 8005ebe:	f06f 020f 	mvn.w	r2, #15
 8005ec2:	fa02 f103 	lsl.w	r1, r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fd7e 	bl	80059da <LL_ADC_GetSamplingTimeCommonChannels>
 8005ede:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d10b      	bne.n	8005f00 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	f043 0201 	orr.w	r2, r3, #1
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005efe:	e018      	b.n	8005f32 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f04:	f023 0312 	bic.w	r3, r3, #18
 8005f08:	f043 0210 	orr.w	r2, r3, #16
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f14:	f043 0201 	orr.w	r2, r3, #1
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f20:	e007      	b.n	8005f32 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f26:	f043 0210 	orr.w	r2, r3, #16
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8005f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3720      	adds	r7, #32
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fe30 	bl	8005bae <LL_ADC_REG_IsConversionOngoing>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d132      	bne.n	8005fba <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_ADC_Start+0x26>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e02e      	b.n	8005fc0 <HAL_ADC_Start+0x84>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa08 	bl	8006380 <ADC_Enable>
 8005f70:	4603      	mov	r3, r0
 8005f72:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d11a      	bne.n	8005fb0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005f82:	f023 0301 	bic.w	r3, r3, #1
 8005f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	221c      	movs	r2, #28
 8005f9a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff fded 	bl	8005b88 <LL_ADC_REG_StartConversion>
 8005fae:	e006      	b.n	8005fbe <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8005fb8:	e001      	b.n	8005fbe <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d102      	bne.n	8005fe0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8005fda:	2308      	movs	r3, #8
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e010      	b.n	8006002 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff2:	f043 0220 	orr.w	r2, r3, #32
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e077      	b.n	80060ee <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8005ffe:	2304      	movs	r3, #4
 8006000:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8006002:	f7fc fb39 	bl	8002678 <HAL_GetTick>
 8006006:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006008:	e021      	b.n	800604e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006010:	d01d      	beq.n	800604e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8006012:	f7fc fb31 	bl	8002678 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <HAL_ADC_PollForConversion+0x60>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d112      	bne.n	800604e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	f043 0204 	orr.w	r2, r3, #4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e04f      	b.n	80060ee <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d0d6      	beq.n	800600a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff fccc 	bl	8005a0a <LL_ADC_REG_IsTriggerSourceSWStart>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d031      	beq.n	80060dc <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	7e9b      	ldrb	r3, [r3, #26]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d12d      	bne.n	80060dc <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b08      	cmp	r3, #8
 800608c:	d126      	bne.n	80060dc <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fd8b 	bl	8005bae <LL_ADC_REG_IsConversionOngoing>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d112      	bne.n	80060c4 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 020c 	bic.w	r2, r2, #12
 80060ac:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	f043 0201 	orr.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	659a      	str	r2, [r3, #88]	; 0x58
 80060c2:	e00b      	b.n	80060dc <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c8:	f043 0220 	orr.w	r2, r3, #32
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d4:	f043 0201 	orr.w	r2, r3, #1
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	7e1b      	ldrb	r3, [r3, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	220c      	movs	r2, #12
 80060ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80060f6:	b480      	push	{r7}
 80060f8:	b083      	sub	sp, #12
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr
	...

08006110 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800611e:	2300      	movs	r3, #0
 8006120:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x28>
 8006134:	2302      	movs	r3, #2
 8006136:	e110      	b.n	800635a <HAL_ADC_ConfigChannel+0x24a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fd32 	bl	8005bae <LL_ADC_REG_IsConversionOngoing>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	f040 80f7 	bne.w	8006340 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b02      	cmp	r3, #2
 8006158:	f000 80b1 	beq.w	80062be <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006164:	d004      	beq.n	8006170 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800616a:	4a7e      	ldr	r2, [pc, #504]	; (8006364 <HAL_ADC_ConfigChannel+0x254>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d108      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f7ff fc78 	bl	8005a70 <LL_ADC_REG_SetSequencerChAdd>
 8006180:	e041      	b.n	8006206 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f003 031f 	and.w	r3, r3, #31
 800618e:	210f      	movs	r1, #15
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0xa0>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	0e9b      	lsrs	r3, r3, #26
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	e011      	b.n	80061d4 <HAL_ADC_ConfigChannel+0xc4>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	fa93 f3a3 	rbit	r3, r3
 80061bc:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 80061c8:	2320      	movs	r3, #32
 80061ca:	e003      	b.n	80061d4 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	fab3 f383 	clz	r3, r3
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6849      	ldr	r1, [r1, #4]
 80061d8:	f001 011f 	and.w	r1, r1, #31
 80061dc:	408b      	lsls	r3, r1
 80061de:	431a      	orrs	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	089b      	lsrs	r3, r3, #2
 80061ea:	1c5a      	adds	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d808      	bhi.n	8006206 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6859      	ldr	r1, [r3, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	461a      	mov	r2, r3
 8006202:	f7ff fc14 	bl	8005a2e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	6819      	ldr	r1, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	461a      	mov	r2, r3
 8006214:	f7ff fc51 	bl	8005aba <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f280 8097 	bge.w	8006350 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006222:	4851      	ldr	r0, [pc, #324]	; (8006368 <HAL_ADC_ConfigChannel+0x258>)
 8006224:	f7ff fbae 	bl	8005984 <LL_ADC_GetCommonPathInternalCh>
 8006228:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a4f      	ldr	r2, [pc, #316]	; (800636c <HAL_ADC_ConfigChannel+0x25c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d120      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11b      	bne.n	8006276 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006244:	4619      	mov	r1, r3
 8006246:	4848      	ldr	r0, [pc, #288]	; (8006368 <HAL_ADC_ConfigChannel+0x258>)
 8006248:	f7ff fb8a 	bl	8005960 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800624c:	4b48      	ldr	r3, [pc, #288]	; (8006370 <HAL_ADC_ConfigChannel+0x260>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	099b      	lsrs	r3, r3, #6
 8006252:	4a48      	ldr	r2, [pc, #288]	; (8006374 <HAL_ADC_ConfigChannel+0x264>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	099b      	lsrs	r3, r3, #6
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	4613      	mov	r3, r2
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006266:	e002      	b.n	800626e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	3b01      	subs	r3, #1
 800626c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f9      	bne.n	8006268 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006274:	e06c      	b.n	8006350 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3f      	ldr	r2, [pc, #252]	; (8006378 <HAL_ADC_ConfigChannel+0x268>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10c      	bne.n	800629a <HAL_ADC_ConfigChannel+0x18a>
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006286:	2b00      	cmp	r3, #0
 8006288:	d107      	bne.n	800629a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006290:	4619      	mov	r1, r3
 8006292:	4835      	ldr	r0, [pc, #212]	; (8006368 <HAL_ADC_ConfigChannel+0x258>)
 8006294:	f7ff fb64 	bl	8005960 <LL_ADC_SetCommonPathInternalCh>
 8006298:	e05a      	b.n	8006350 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a37      	ldr	r2, [pc, #220]	; (800637c <HAL_ADC_ConfigChannel+0x26c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d155      	bne.n	8006350 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d150      	bne.n	8006350 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062b4:	4619      	mov	r1, r3
 80062b6:	482c      	ldr	r0, [pc, #176]	; (8006368 <HAL_ADC_ConfigChannel+0x258>)
 80062b8:	f7ff fb52 	bl	8005960 <LL_ADC_SetCommonPathInternalCh>
 80062bc:	e048      	b.n	8006350 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c6:	d004      	beq.n	80062d2 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80062cc:	4a25      	ldr	r2, [pc, #148]	; (8006364 <HAL_ADC_ConfigChannel+0x254>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d107      	bne.n	80062e2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4619      	mov	r1, r3
 80062dc:	4610      	mov	r0, r2
 80062de:	f7ff fbd9 	bl	8005a94 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	da32      	bge.n	8006350 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062ea:	481f      	ldr	r0, [pc, #124]	; (8006368 <HAL_ADC_ConfigChannel+0x258>)
 80062ec:	f7ff fb4a 	bl	8005984 <LL_ADC_GetCommonPathInternalCh>
 80062f0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1d      	ldr	r2, [pc, #116]	; (800636c <HAL_ADC_ConfigChannel+0x25c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d107      	bne.n	800630c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006302:	4619      	mov	r1, r3
 8006304:	4818      	ldr	r0, [pc, #96]	; (8006368 <HAL_ADC_ConfigChannel+0x258>)
 8006306:	f7ff fb2b 	bl	8005960 <LL_ADC_SetCommonPathInternalCh>
 800630a:	e021      	b.n	8006350 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a19      	ldr	r2, [pc, #100]	; (8006378 <HAL_ADC_ConfigChannel+0x268>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d107      	bne.n	8006326 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800631c:	4619      	mov	r1, r3
 800631e:	4812      	ldr	r0, [pc, #72]	; (8006368 <HAL_ADC_ConfigChannel+0x258>)
 8006320:	f7ff fb1e 	bl	8005960 <LL_ADC_SetCommonPathInternalCh>
 8006324:	e014      	b.n	8006350 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a14      	ldr	r2, [pc, #80]	; (800637c <HAL_ADC_ConfigChannel+0x26c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10f      	bne.n	8006350 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006336:	4619      	mov	r1, r3
 8006338:	480b      	ldr	r0, [pc, #44]	; (8006368 <HAL_ADC_ConfigChannel+0x258>)
 800633a:	f7ff fb11 	bl	8005960 <LL_ADC_SetCommonPathInternalCh>
 800633e:	e007      	b.n	8006350 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	f043 0220 	orr.w	r2, r3, #32
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8006358:	7ffb      	ldrb	r3, [r7, #31]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	80000004 	.word	0x80000004
 8006368:	40012708 	.word	0x40012708
 800636c:	b0001000 	.word	0xb0001000
 8006370:	20000040 	.word	0x20000040
 8006374:	053e2d63 	.word	0x053e2d63
 8006378:	b8004000 	.word	0xb8004000
 800637c:	b4002000 	.word	0xb4002000

08006380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006388:	2300      	movs	r3, #0
 800638a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f7ff fbe7 	bl	8005b64 <LL_ADC_IsEnabled>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d169      	bne.n	8006470 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	4b36      	ldr	r3, [pc, #216]	; (800647c <ADC_Enable+0xfc>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ae:	f043 0210 	orr.w	r2, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ba:	f043 0201 	orr.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e055      	b.n	8006472 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fbb7 	bl	8005b3e <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80063d0:	482b      	ldr	r0, [pc, #172]	; (8006480 <ADC_Enable+0x100>)
 80063d2:	f7ff fad7 	bl	8005984 <LL_ADC_GetCommonPathInternalCh>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00f      	beq.n	8006400 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80063e0:	4b28      	ldr	r3, [pc, #160]	; (8006484 <ADC_Enable+0x104>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	099b      	lsrs	r3, r3, #6
 80063e6:	4a28      	ldr	r2, [pc, #160]	; (8006488 <ADC_Enable+0x108>)
 80063e8:	fba2 2303 	umull	r2, r3, r2, r3
 80063ec:	099b      	lsrs	r3, r3, #6
 80063ee:	3301      	adds	r3, #1
 80063f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80063f2:	e002      	b.n	80063fa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f9      	bne.n	80063f4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	7e5b      	ldrb	r3, [r3, #25]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d033      	beq.n	8006470 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006408:	f7fc f936 	bl	8002678 <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800640e:	e028      	b.n	8006462 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fba5 	bl	8005b64 <LL_ADC_IsEnabled>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fb8a 	bl	8005b3e <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800642a:	f7fc f925 	bl	8002678 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d914      	bls.n	8006462 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b01      	cmp	r3, #1
 8006444:	d00d      	beq.n	8006462 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800644a:	f043 0210 	orr.w	r2, r3, #16
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006456:	f043 0201 	orr.w	r2, r3, #1
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e007      	b.n	8006472 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0301 	and.w	r3, r3, #1
 800646c:	2b01      	cmp	r3, #1
 800646e:	d1cf      	bne.n	8006410 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	80000017 	.word	0x80000017
 8006480:	40012708 	.word	0x40012708
 8006484:	20000040 	.word	0x20000040
 8006488:	053e2d63 	.word	0x053e2d63

0800648c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800649c:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <__NVIC_SetPriorityGrouping+0x44>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064a8:	4013      	ands	r3, r2
 80064aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064be:	4a04      	ldr	r2, [pc, #16]	; (80064d0 <__NVIC_SetPriorityGrouping+0x44>)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	60d3      	str	r3, [r2, #12]
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bc80      	pop	{r7}
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	e000ed00 	.word	0xe000ed00

080064d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064d4:	b480      	push	{r7}
 80064d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064d8:	4b04      	ldr	r3, [pc, #16]	; (80064ec <__NVIC_GetPriorityGrouping+0x18>)
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	0a1b      	lsrs	r3, r3, #8
 80064de:	f003 0307 	and.w	r3, r3, #7
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	e000ed00 	.word	0xe000ed00

080064f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	db0b      	blt.n	800651a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006502:	79fb      	ldrb	r3, [r7, #7]
 8006504:	f003 021f 	and.w	r2, r3, #31
 8006508:	4906      	ldr	r1, [pc, #24]	; (8006524 <__NVIC_EnableIRQ+0x34>)
 800650a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	2001      	movs	r0, #1
 8006512:	fa00 f202 	lsl.w	r2, r0, r2
 8006516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr
 8006524:	e000e100 	.word	0xe000e100

08006528 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006536:	2b00      	cmp	r3, #0
 8006538:	db12      	blt.n	8006560 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	f003 021f 	and.w	r2, r3, #31
 8006540:	490a      	ldr	r1, [pc, #40]	; (800656c <__NVIC_DisableIRQ+0x44>)
 8006542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006546:	095b      	lsrs	r3, r3, #5
 8006548:	2001      	movs	r0, #1
 800654a:	fa00 f202 	lsl.w	r2, r0, r2
 800654e:	3320      	adds	r3, #32
 8006550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006554:	f3bf 8f4f 	dsb	sy
}
 8006558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800655a:	f3bf 8f6f 	isb	sy
}
 800655e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	e000e100 	.word	0xe000e100

08006570 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800657a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800657e:	2b00      	cmp	r3, #0
 8006580:	db0c      	blt.n	800659c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	f003 021f 	and.w	r2, r3, #31
 8006588:	4907      	ldr	r1, [pc, #28]	; (80065a8 <__NVIC_ClearPendingIRQ+0x38>)
 800658a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658e:	095b      	lsrs	r3, r3, #5
 8006590:	2001      	movs	r0, #1
 8006592:	fa00 f202 	lsl.w	r2, r0, r2
 8006596:	3360      	adds	r3, #96	; 0x60
 8006598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	e000e100 	.word	0xe000e100

080065ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	4603      	mov	r3, r0
 80065b4:	6039      	str	r1, [r7, #0]
 80065b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	db0a      	blt.n	80065d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	490c      	ldr	r1, [pc, #48]	; (80065f8 <__NVIC_SetPriority+0x4c>)
 80065c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ca:	0112      	lsls	r2, r2, #4
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	440b      	add	r3, r1
 80065d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065d4:	e00a      	b.n	80065ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	b2da      	uxtb	r2, r3
 80065da:	4908      	ldr	r1, [pc, #32]	; (80065fc <__NVIC_SetPriority+0x50>)
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	3b04      	subs	r3, #4
 80065e4:	0112      	lsls	r2, r2, #4
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	440b      	add	r3, r1
 80065ea:	761a      	strb	r2, [r3, #24]
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	e000e100 	.word	0xe000e100
 80065fc:	e000ed00 	.word	0xe000ed00

08006600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006600:	b480      	push	{r7}
 8006602:	b089      	sub	sp, #36	; 0x24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	f1c3 0307 	rsb	r3, r3, #7
 800661a:	2b04      	cmp	r3, #4
 800661c:	bf28      	it	cs
 800661e:	2304      	movcs	r3, #4
 8006620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	3304      	adds	r3, #4
 8006626:	2b06      	cmp	r3, #6
 8006628:	d902      	bls.n	8006630 <NVIC_EncodePriority+0x30>
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	3b03      	subs	r3, #3
 800662e:	e000      	b.n	8006632 <NVIC_EncodePriority+0x32>
 8006630:	2300      	movs	r3, #0
 8006632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006634:	f04f 32ff 	mov.w	r2, #4294967295
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	43da      	mvns	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	401a      	ands	r2, r3
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006648:	f04f 31ff 	mov.w	r1, #4294967295
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	fa01 f303 	lsl.w	r3, r1, r3
 8006652:	43d9      	mvns	r1, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006658:	4313      	orrs	r3, r2
         );
}
 800665a:	4618      	mov	r0, r3
 800665c:	3724      	adds	r7, #36	; 0x24
 800665e:	46bd      	mov	sp, r7
 8006660:	bc80      	pop	{r7}
 8006662:	4770      	bx	lr

08006664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff ff0d 	bl	800648c <__NVIC_SetPriorityGrouping>
}
 8006672:	bf00      	nop
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b086      	sub	sp, #24
 800667e:	af00      	add	r7, sp, #0
 8006680:	4603      	mov	r3, r0
 8006682:	60b9      	str	r1, [r7, #8]
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006688:	f7ff ff24 	bl	80064d4 <__NVIC_GetPriorityGrouping>
 800668c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	6978      	ldr	r0, [r7, #20]
 8006694:	f7ff ffb4 	bl	8006600 <NVIC_EncodePriority>
 8006698:	4602      	mov	r2, r0
 800669a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800669e:	4611      	mov	r1, r2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff ff83 	bl	80065ac <__NVIC_SetPriority>
}
 80066a6:	bf00      	nop
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	4603      	mov	r3, r0
 80066b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80066b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff ff17 	bl	80064f0 <__NVIC_EnableIRQ>
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	4603      	mov	r3, r0
 80066d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80066d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff ff25 	bl	8006528 <__NVIC_DisableIRQ>
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	4603      	mov	r3, r0
 80066ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80066f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff ff3b 	bl	8006570 <__NVIC_ClearPendingIRQ>
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e08e      	b.n	8006834 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	4b47      	ldr	r3, [pc, #284]	; (800683c <HAL_DMA_Init+0x138>)
 800671e:	429a      	cmp	r2, r3
 8006720:	d80f      	bhi.n	8006742 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	461a      	mov	r2, r3
 8006728:	4b45      	ldr	r3, [pc, #276]	; (8006840 <HAL_DMA_Init+0x13c>)
 800672a:	4413      	add	r3, r2
 800672c:	4a45      	ldr	r2, [pc, #276]	; (8006844 <HAL_DMA_Init+0x140>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	009a      	lsls	r2, r3, #2
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a42      	ldr	r2, [pc, #264]	; (8006848 <HAL_DMA_Init+0x144>)
 800673e:	641a      	str	r2, [r3, #64]	; 0x40
 8006740:	e00e      	b.n	8006760 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	4b40      	ldr	r3, [pc, #256]	; (800684c <HAL_DMA_Init+0x148>)
 800674a:	4413      	add	r3, r2
 800674c:	4a3d      	ldr	r2, [pc, #244]	; (8006844 <HAL_DMA_Init+0x140>)
 800674e:	fba2 2303 	umull	r2, r3, r2, r3
 8006752:	091b      	lsrs	r3, r3, #4
 8006754:	009a      	lsls	r2, r3, #2
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a3c      	ldr	r2, [pc, #240]	; (8006850 <HAL_DMA_Init+0x14c>)
 800675e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6819      	ldr	r1, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	431a      	orrs	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fb2e 	bl	8006e14 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c0:	d102      	bne.n	80067c8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067d4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80067de:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d010      	beq.n	800680a <HAL_DMA_Init+0x106>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d80c      	bhi.n	800680a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fb57 	bl	8006ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	2200      	movs	r2, #0
 80067fc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006806:	605a      	str	r2, [r3, #4]
 8006808:	e008      	b.n	800681c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40020407 	.word	0x40020407
 8006840:	bffdfff8 	.word	0xbffdfff8
 8006844:	cccccccd 	.word	0xcccccccd
 8006848:	40020000 	.word	0x40020000
 800684c:	bffdfbf8 	.word	0xbffdfbf8
 8006850:	40020400 	.word	0x40020400

08006854 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e07b      	b.n	800695e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0201 	bic.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <HAL_DMA_DeInit+0x114>)
 800687e:	429a      	cmp	r2, r3
 8006880:	d80f      	bhi.n	80068a2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	4b38      	ldr	r3, [pc, #224]	; (800696c <HAL_DMA_DeInit+0x118>)
 800688a:	4413      	add	r3, r2
 800688c:	4a38      	ldr	r2, [pc, #224]	; (8006970 <HAL_DMA_DeInit+0x11c>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	009a      	lsls	r2, r3, #2
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a35      	ldr	r2, [pc, #212]	; (8006974 <HAL_DMA_DeInit+0x120>)
 800689e:	641a      	str	r2, [r3, #64]	; 0x40
 80068a0:	e00e      	b.n	80068c0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	461a      	mov	r2, r3
 80068a8:	4b33      	ldr	r3, [pc, #204]	; (8006978 <HAL_DMA_DeInit+0x124>)
 80068aa:	4413      	add	r3, r2
 80068ac:	4a30      	ldr	r2, [pc, #192]	; (8006970 <HAL_DMA_DeInit+0x11c>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	091b      	lsrs	r3, r3, #4
 80068b4:	009a      	lsls	r2, r3, #2
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2f      	ldr	r2, [pc, #188]	; (800697c <HAL_DMA_DeInit+0x128>)
 80068be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	f003 021c 	and.w	r2, r3, #28
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	2101      	movs	r1, #1
 80068d6:	fa01 f202 	lsl.w	r2, r1, r2
 80068da:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa99 	bl	8006e14 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80068f2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00f      	beq.n	800691c <HAL_DMA_DeInit+0xc8>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b04      	cmp	r3, #4
 8006902:	d80b      	bhi.n	800691c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 facd 	bl	8006ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800691a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40020407 	.word	0x40020407
 800696c:	bffdfff8 	.word	0xbffdfff8
 8006970:	cccccccd 	.word	0xcccccccd
 8006974:	40020000 	.word	0x40020000
 8006978:	bffdfbf8 	.word	0xbffdfbf8
 800697c:	40020400 	.word	0x40020400

08006980 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_DMA_Start_IT+0x20>
 800699c:	2302      	movs	r3, #2
 800699e:	e069      	b.n	8006a74 <HAL_DMA_Start_IT+0xf4>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d155      	bne.n	8006a60 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	68f8      	ldr	r0, [r7, #12]
 80069da:	f000 f9de 	bl	8006d9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d008      	beq.n	80069f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f042 020e 	orr.w	r2, r2, #14
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	e00f      	b.n	8006a18 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0204 	bic.w	r2, r2, #4
 8006a06:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 020a 	orr.w	r2, r2, #10
 8006a16:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d007      	beq.n	8006a36 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a34:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d007      	beq.n	8006a4e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a4c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0201 	orr.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e008      	b.n	8006a72 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2280      	movs	r2, #128	; 0x80
 8006a64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e04f      	b.n	8006b2e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d008      	beq.n	8006aac <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e040      	b.n	8006b2e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 020e 	bic.w	r2, r2, #14
 8006aba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006aca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	f003 021c 	and.w	r2, r3, #28
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	2101      	movs	r1, #1
 8006aea:	fa01 f202 	lsl.w	r2, r1, r2
 8006aee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006af8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006b1a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bc80      	pop	{r7}
 8006b36:	4770      	bx	lr

08006b38 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d005      	beq.n	8006b5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2204      	movs	r2, #4
 8006b54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	73fb      	strb	r3, [r7, #15]
 8006b5a:	e047      	b.n	8006bec <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 020e 	bic.w	r2, r2, #14
 8006b6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0201 	bic.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b90:	f003 021c 	and.w	r2, r3, #28
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	2101      	movs	r1, #1
 8006b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b9e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006ba8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00c      	beq.n	8006bcc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006bca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	4798      	blx	r3
    }
  }
  return status;
 8006bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c14:	f003 031c 	and.w	r3, r3, #28
 8006c18:	2204      	movs	r2, #4
 8006c1a:	409a      	lsls	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d027      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x7c>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d022      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0320 	and.w	r3, r3, #32
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d107      	bne.n	8006c4c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 0204 	bic.w	r2, r2, #4
 8006c4a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c50:	f003 021c 	and.w	r2, r3, #28
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	2104      	movs	r1, #4
 8006c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006c5e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8081 	beq.w	8006d6c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8006c72:	e07b      	b.n	8006d6c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c78:	f003 031c 	and.w	r3, r3, #28
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	409a      	lsls	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d03d      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x10c>
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d038      	beq.n	8006d04 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10b      	bne.n	8006cb8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 020a 	bic.w	r2, r2, #10
 8006cae:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	4b2e      	ldr	r3, [pc, #184]	; (8006d78 <HAL_DMA_IRQHandler+0x180>)
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d909      	bls.n	8006cd8 <HAL_DMA_IRQHandler+0xe0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc8:	f003 031c 	and.w	r3, r3, #28
 8006ccc:	4a2b      	ldr	r2, [pc, #172]	; (8006d7c <HAL_DMA_IRQHandler+0x184>)
 8006cce:	2102      	movs	r1, #2
 8006cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd4:	6053      	str	r3, [r2, #4]
 8006cd6:	e008      	b.n	8006cea <HAL_DMA_IRQHandler+0xf2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cdc:	f003 031c 	and.w	r3, r3, #28
 8006ce0:	4a27      	ldr	r2, [pc, #156]	; (8006d80 <HAL_DMA_IRQHandler+0x188>)
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ce8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d038      	beq.n	8006d6c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8006d02:	e033      	b.n	8006d6c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	f003 031c 	and.w	r3, r3, #28
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	409a      	lsls	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d02a      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x176>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 0308 	and.w	r3, r3, #8
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d025      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 020e 	bic.w	r2, r2, #14
 8006d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	f003 021c 	and.w	r2, r3, #28
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	2101      	movs	r1, #1
 8006d40:	fa01 f202 	lsl.w	r2, r1, r2
 8006d44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d004      	beq.n	8006d6e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006d6c:	bf00      	nop
 8006d6e:	bf00      	nop
}
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40020080 	.word	0x40020080
 8006d7c:	40020400 	.word	0x40020400
 8006d80:	40020000 	.word	0x40020000

08006d84 <HAL_DMA_GetError>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Return the DMA error code */
  return hdma->ErrorCode;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr

08006d9a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b085      	sub	sp, #20
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	60f8      	str	r0, [r7, #12]
 8006da2:	60b9      	str	r1, [r7, #8]
 8006da4:	607a      	str	r2, [r7, #4]
 8006da6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006db0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006dc2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc8:	f003 021c 	and.w	r2, r3, #28
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8006dd6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d108      	bne.n	8006dfa <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006df8:	e007      	b.n	8006e0a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	60da      	str	r2, [r3, #12]
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr

08006e14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	461a      	mov	r2, r3
 8006e22:	4b1c      	ldr	r3, [pc, #112]	; (8006e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d813      	bhi.n	8006e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2c:	089b      	lsrs	r3, r3, #2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e34:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	3b08      	subs	r3, #8
 8006e44:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006e46:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4a:	091b      	lsrs	r3, r3, #4
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	e011      	b.n	8006e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e54:	089b      	lsrs	r3, r3, #2
 8006e56:	009a      	lsls	r2, r3, #2
 8006e58:	4b10      	ldr	r3, [pc, #64]	; (8006e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8006e5a:	4413      	add	r3, r2
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	3b08      	subs	r3, #8
 8006e68:	4a0b      	ldr	r2, [pc, #44]	; (8006e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	091b      	lsrs	r3, r3, #4
 8006e70:	3307      	adds	r3, #7
 8006e72:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a0a      	ldr	r2, [pc, #40]	; (8006ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8006e78:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	2201      	movs	r2, #1
 8006e82:	409a      	lsls	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40020407 	.word	0x40020407
 8006e98:	cccccccd 	.word	0xcccccccd
 8006e9c:	4002081c 	.word	0x4002081c
 8006ea0:	40020880 	.word	0x40020880

08006ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a08      	ldr	r2, [pc, #32]	; (8006ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006ec8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	409a      	lsls	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006eda:	bf00      	nop
 8006edc:	3714      	adds	r7, #20
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr
 8006ee4:	1000823f 	.word	0x1000823f
 8006ee8:	40020940 	.word	0x40020940

08006eec <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006efa:	4b1b      	ldr	r3, [pc, #108]	; (8006f68 <HAL_FLASH_Program+0x7c>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d101      	bne.n	8006f06 <HAL_FLASH_Program+0x1a>
 8006f02:	2302      	movs	r3, #2
 8006f04:	e02c      	b.n	8006f60 <HAL_FLASH_Program+0x74>
 8006f06:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <HAL_FLASH_Program+0x7c>)
 8006f08:	2201      	movs	r2, #1
 8006f0a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f0c:	4b16      	ldr	r3, [pc, #88]	; (8006f68 <HAL_FLASH_Program+0x7c>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006f16:	f000 f869 	bl	8006fec <FLASH_WaitForLastOperation>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d119      	bne.n	8006f58 <HAL_FLASH_Program+0x6c>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f2e:	68b8      	ldr	r0, [r7, #8]
 8006f30:	f000 f8be 	bl	80070b0 <FLASH_Program_DoubleWord>
 8006f34:	e004      	b.n	8006f40 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	68b8      	ldr	r0, [r7, #8]
 8006f3c:	f000 f8de 	bl	80070fc <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(500000);
 8006f40:	480a      	ldr	r0, [pc, #40]	; (8006f6c <HAL_FLASH_Program+0x80>)
 8006f42:	f000 f853 	bl	8006fec <FLASH_WaitForLastOperation>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006f4a:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <HAL_FLASH_Program+0x84>)
 8006f4c:	695a      	ldr	r2, [r3, #20]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	43db      	mvns	r3, r3
 8006f52:	4907      	ldr	r1, [pc, #28]	; (8006f70 <HAL_FLASH_Program+0x84>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006f58:	4b03      	ldr	r3, [pc, #12]	; (8006f68 <HAL_FLASH_Program+0x7c>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3718      	adds	r7, #24
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	20000a40 	.word	0x20000a40
 8006f6c:	0007a120 	.word	0x0007a120
 8006f70:	58004000 	.word	0x58004000

08006f74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006f7e:	4b0b      	ldr	r3, [pc, #44]	; (8006fac <HAL_FLASH_Unlock+0x38>)
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da0b      	bge.n	8006f9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006f86:	4b09      	ldr	r3, [pc, #36]	; (8006fac <HAL_FLASH_Unlock+0x38>)
 8006f88:	4a09      	ldr	r2, [pc, #36]	; (8006fb0 <HAL_FLASH_Unlock+0x3c>)
 8006f8a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <HAL_FLASH_Unlock+0x38>)
 8006f8e:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <HAL_FLASH_Unlock+0x40>)
 8006f90:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006f92:	4b06      	ldr	r3, [pc, #24]	; (8006fac <HAL_FLASH_Unlock+0x38>)
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	da01      	bge.n	8006f9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bc80      	pop	{r7}
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	58004000 	.word	0x58004000
 8006fb0:	45670123 	.word	0x45670123
 8006fb4:	cdef89ab 	.word	0xcdef89ab

08006fb8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006fc2:	4b09      	ldr	r3, [pc, #36]	; (8006fe8 <HAL_FLASH_Lock+0x30>)
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <HAL_FLASH_Lock+0x30>)
 8006fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fcc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8006fce:	4b06      	ldr	r3, [pc, #24]	; (8006fe8 <HAL_FLASH_Lock+0x30>)
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	db01      	blt.n	8006fda <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006fda:	79fb      	ldrb	r3, [r7, #7]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	58004000 	.word	0x58004000

08006fec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8006ff4:	f7fb fb40 	bl	8002678 <HAL_GetTick>
 8006ff8:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006ffa:	e009      	b.n	8007010 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006ffc:	f7fb fb3c 	bl	8002678 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d801      	bhi.n	8007010 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e047      	b.n	80070a0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007010:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <FLASH_WaitForLastOperation+0xbc>)
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701c:	d0ee      	beq.n	8006ffc <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800701e:	4b22      	ldr	r3, [pc, #136]	; (80070a8 <FLASH_WaitForLastOperation+0xbc>)
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800702e:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <FLASH_WaitForLastOperation+0xbc>)
 8007030:	2201      	movs	r2, #1
 8007032:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800703a:	4013      	ands	r3, r2
 800703c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d007      	beq.n	8007058 <FLASH_WaitForLastOperation+0x6c>
 8007048:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <FLASH_WaitForLastOperation+0xbc>)
 800704a:	699a      	ldr	r2, [r3, #24]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007052:	4915      	ldr	r1, [pc, #84]	; (80070a8 <FLASH_WaitForLastOperation+0xbc>)
 8007054:	4313      	orrs	r3, r2
 8007056:	618b      	str	r3, [r1, #24]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <FLASH_WaitForLastOperation+0x80>
 8007062:	4a11      	ldr	r2, [pc, #68]	; (80070a8 <FLASH_WaitForLastOperation+0xbc>)
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800706a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00e      	beq.n	8007090 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8007072:	4a0e      	ldr	r2, [pc, #56]	; (80070ac <FLASH_WaitForLastOperation+0xc0>)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e011      	b.n	80070a0 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800707c:	f7fb fafc 	bl	8002678 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	429a      	cmp	r2, r3
 800708a:	d801      	bhi.n	8007090 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e007      	b.n	80070a0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <FLASH_WaitForLastOperation+0xbc>)
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800709c:	d0ee      	beq.n	800707c <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	58004000 	.word	0x58004000
 80070ac:	20000a40 	.word	0x20000a40

080070b0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <FLASH_Program_DoubleWord+0x48>)
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	4a0d      	ldr	r2, [pc, #52]	; (80070f8 <FLASH_Program_DoubleWord+0x48>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80070ce:	f3bf 8f6f 	isb	sy
}
 80070d2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80070d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	000a      	movs	r2, r1
 80070e2:	2300      	movs	r3, #0
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	3104      	adds	r1, #4
 80070e8:	4613      	mov	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]
}
 80070ec:	bf00      	nop
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bc80      	pop	{r7}
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	58004000 	.word	0x58004000

080070fc <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80070fc:	b480      	push	{r7}
 80070fe:	b089      	sub	sp, #36	; 0x24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007112:	4b18      	ldr	r3, [pc, #96]	; (8007174 <FLASH_Program_Fast+0x78>)
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	4a17      	ldr	r2, [pc, #92]	; (8007174 <FLASH_Program_Fast+0x78>)
 8007118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800711c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800711e:	f3ef 8310 	mrs	r3, PRIMASK
 8007122:	60fb      	str	r3, [r7, #12]
  return(result);
 8007124:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8007126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007128:	b672      	cpsid	i
}
 800712a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	3304      	adds	r3, #4
 8007138:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	3304      	adds	r3, #4
 800713e:	617b      	str	r3, [r7, #20]
    row_index--;
 8007140:	7ffb      	ldrb	r3, [r7, #31]
 8007142:	3b01      	subs	r3, #1
 8007144:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007146:	7ffb      	ldrb	r3, [r7, #31]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1ef      	bne.n	800712c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800714c:	bf00      	nop
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <FLASH_Program_Fast+0x78>)
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715a:	d0f8      	beq.n	800714e <FLASH_Program_Fast+0x52>
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f383 8810 	msr	PRIMASK, r3
}
 8007166:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007168:	bf00      	nop
 800716a:	3724      	adds	r7, #36	; 0x24
 800716c:	46bd      	mov	sp, r7
 800716e:	bc80      	pop	{r7}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	58004000 	.word	0x58004000

08007178 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007182:	4b28      	ldr	r3, [pc, #160]	; (8007224 <HAL_FLASHEx_Erase+0xac>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <HAL_FLASHEx_Erase+0x16>
 800718a:	2302      	movs	r3, #2
 800718c:	e046      	b.n	800721c <HAL_FLASHEx_Erase+0xa4>
 800718e:	4b25      	ldr	r3, [pc, #148]	; (8007224 <HAL_FLASHEx_Erase+0xac>)
 8007190:	2201      	movs	r2, #1
 8007192:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007194:	4b23      	ldr	r3, [pc, #140]	; (8007224 <HAL_FLASHEx_Erase+0xac>)
 8007196:	2200      	movs	r2, #0
 8007198:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800719a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800719e:	f7ff ff25 	bl	8006fec <FLASH_WaitForLastOperation>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d133      	bne.n	8007214 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d108      	bne.n	80071c6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80071b4:	f000 f838 	bl	8007228 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071bc:	f7ff ff16 	bl	8006fec <FLASH_WaitForLastOperation>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]
 80071c4:	e024      	b.n	8007210 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	f04f 32ff 	mov.w	r2, #4294967295
 80071cc:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	60bb      	str	r3, [r7, #8]
 80071d4:	e012      	b.n	80071fc <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80071d6:	68b8      	ldr	r0, [r7, #8]
 80071d8:	f000 f836 	bl	8007248 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071e0:	f7ff ff04 	bl	8006fec <FLASH_WaitForLastOperation>
 80071e4:	4603      	mov	r3, r0
 80071e6:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	601a      	str	r2, [r3, #0]
          break;
 80071f4:	e00a      	b.n	800720c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60bb      	str	r3, [r7, #8]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	4413      	add	r3, r2
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	429a      	cmp	r2, r3
 800720a:	d3e4      	bcc.n	80071d6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800720c:	f000 f878 	bl	8007300 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007210:	f000 f832 	bl	8007278 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007214:	4b03      	ldr	r3, [pc, #12]	; (8007224 <HAL_FLASHEx_Erase+0xac>)
 8007216:	2200      	movs	r2, #0
 8007218:	701a      	strb	r2, [r3, #0]

  return status;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20000a40 	.word	0x20000a40

08007228 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <FLASH_MassErase+0x1c>)
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	4a04      	ldr	r2, [pc, #16]	; (8007244 <FLASH_MassErase+0x1c>)
 8007232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007236:	f043 0304 	orr.w	r3, r3, #4
 800723a:	6153      	str	r3, [r2, #20]
#endif
}
 800723c:	bf00      	nop
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr
 8007244:	58004000 	.word	0x58004000

08007248 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8007250:	4b08      	ldr	r3, [pc, #32]	; (8007274 <FLASH_PageErase+0x2c>)
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4313      	orrs	r3, r2
 800725e:	4a05      	ldr	r2, [pc, #20]	; (8007274 <FLASH_PageErase+0x2c>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	6153      	str	r3, [r2, #20]
#endif
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr
 8007274:	58004000 	.word	0x58004000

08007278 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800727c:	4b1f      	ldr	r3, [pc, #124]	; (80072fc <FLASH_FlushCaches+0x84>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007284:	2b01      	cmp	r3, #1
 8007286:	d117      	bne.n	80072b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007288:	4b1c      	ldr	r3, [pc, #112]	; (80072fc <FLASH_FlushCaches+0x84>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1b      	ldr	r2, [pc, #108]	; (80072fc <FLASH_FlushCaches+0x84>)
 800728e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007292:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007294:	4b19      	ldr	r3, [pc, #100]	; (80072fc <FLASH_FlushCaches+0x84>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a18      	ldr	r2, [pc, #96]	; (80072fc <FLASH_FlushCaches+0x84>)
 800729a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	4b16      	ldr	r3, [pc, #88]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a15      	ldr	r2, [pc, #84]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072ac:	4b13      	ldr	r3, [pc, #76]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a12      	ldr	r2, [pc, #72]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072b6:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80072b8:	4b10      	ldr	r3, [pc, #64]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d117      	bne.n	80072f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80072c4:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a0c      	ldr	r2, [pc, #48]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a09      	ldr	r2, [pc, #36]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072da:	6013      	str	r3, [r2, #0]
 80072dc:	4b07      	ldr	r3, [pc, #28]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a06      	ldr	r2, [pc, #24]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80072e8:	4b04      	ldr	r3, [pc, #16]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a03      	ldr	r2, [pc, #12]	; (80072fc <FLASH_FlushCaches+0x84>)
 80072ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072f2:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80072f4:	bf00      	nop
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bc80      	pop	{r7}
 80072fa:	4770      	bx	lr
 80072fc:	58004000 	.word	0x58004000

08007300 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <FLASH_AcknowledgePageErase+0x1c>)
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	4a04      	ldr	r2, [pc, #16]	; (800731c <FLASH_AcknowledgePageErase+0x1c>)
 800730a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800730e:	f023 0302 	bic.w	r3, r3, #2
 8007312:	6153      	str	r3, [r2, #20]
#endif
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr
 800731c:	58004000 	.word	0x58004000

08007320 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800732e:	e140      	b.n	80075b2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	2101      	movs	r1, #1
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	fa01 f303 	lsl.w	r3, r1, r3
 800733c:	4013      	ands	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8132 	beq.w	80075ac <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f003 0303 	and.w	r3, r3, #3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d005      	beq.n	8007360 <HAL_GPIO_Init+0x40>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f003 0303 	and.w	r3, r3, #3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d130      	bne.n	80073c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	2203      	movs	r2, #3
 800736c:	fa02 f303 	lsl.w	r3, r2, r3
 8007370:	43db      	mvns	r3, r3
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4013      	ands	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007396:	2201      	movs	r2, #1
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	43db      	mvns	r3, r3
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4013      	ands	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	091b      	lsrs	r3, r3, #4
 80073ac:	f003 0201 	and.w	r2, r3, #1
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	fa02 f303 	lsl.w	r3, r2, r3
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	f003 0303 	and.w	r3, r3, #3
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d017      	beq.n	80073fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	2203      	movs	r2, #3
 80073da:	fa02 f303 	lsl.w	r3, r2, r3
 80073de:	43db      	mvns	r3, r3
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4013      	ands	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689a      	ldr	r2, [r3, #8]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d123      	bne.n	8007452 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	08da      	lsrs	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3208      	adds	r2, #8
 8007412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007416:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	220f      	movs	r2, #15
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	43db      	mvns	r3, r3
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4013      	ands	r3, r2
 800742c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	691a      	ldr	r2, [r3, #16]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	fa02 f303 	lsl.w	r3, r2, r3
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	08da      	lsrs	r2, r3, #3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3208      	adds	r2, #8
 800744c:	6939      	ldr	r1, [r7, #16]
 800744e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	2203      	movs	r2, #3
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	43db      	mvns	r3, r3
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4013      	ands	r3, r2
 8007468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f003 0203 	and.w	r2, r3, #3
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	005b      	lsls	r3, r3, #1
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	693a      	ldr	r2, [r7, #16]
 8007484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800748e:	2b00      	cmp	r3, #0
 8007490:	f000 808c 	beq.w	80075ac <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007494:	4a4e      	ldr	r2, [pc, #312]	; (80075d0 <HAL_GPIO_Init+0x2b0>)
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	089b      	lsrs	r3, r3, #2
 800749a:	3302      	adds	r3, #2
 800749c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f003 0303 	and.w	r3, r3, #3
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	2207      	movs	r2, #7
 80074ac:	fa02 f303 	lsl.w	r3, r2, r3
 80074b0:	43db      	mvns	r3, r3
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4013      	ands	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80074be:	d00d      	beq.n	80074dc <HAL_GPIO_Init+0x1bc>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a44      	ldr	r2, [pc, #272]	; (80075d4 <HAL_GPIO_Init+0x2b4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d007      	beq.n	80074d8 <HAL_GPIO_Init+0x1b8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a43      	ldr	r2, [pc, #268]	; (80075d8 <HAL_GPIO_Init+0x2b8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d101      	bne.n	80074d4 <HAL_GPIO_Init+0x1b4>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e004      	b.n	80074de <HAL_GPIO_Init+0x1be>
 80074d4:	2307      	movs	r3, #7
 80074d6:	e002      	b.n	80074de <HAL_GPIO_Init+0x1be>
 80074d8:	2301      	movs	r3, #1
 80074da:	e000      	b.n	80074de <HAL_GPIO_Init+0x1be>
 80074dc:	2300      	movs	r3, #0
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	f002 0203 	and.w	r2, r2, #3
 80074e4:	0092      	lsls	r2, r2, #2
 80074e6:	4093      	lsls	r3, r2
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80074ee:	4938      	ldr	r1, [pc, #224]	; (80075d0 <HAL_GPIO_Init+0x2b0>)
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	089b      	lsrs	r3, r3, #2
 80074f4:	3302      	adds	r3, #2
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074fc:	4b37      	ldr	r3, [pc, #220]	; (80075dc <HAL_GPIO_Init+0x2bc>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	43db      	mvns	r3, r3
 8007506:	693a      	ldr	r2, [r7, #16]
 8007508:	4013      	ands	r3, r2
 800750a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007520:	4a2e      	ldr	r2, [pc, #184]	; (80075dc <HAL_GPIO_Init+0x2bc>)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007526:	4b2d      	ldr	r3, [pc, #180]	; (80075dc <HAL_GPIO_Init+0x2bc>)
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	43db      	mvns	r3, r3
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4013      	ands	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800754a:	4a24      	ldr	r2, [pc, #144]	; (80075dc <HAL_GPIO_Init+0x2bc>)
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8007550:	4b22      	ldr	r3, [pc, #136]	; (80075dc <HAL_GPIO_Init+0x2bc>)
 8007552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007556:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	43db      	mvns	r3, r3
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	4013      	ands	r3, r2
 8007560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800756e:	693a      	ldr	r2, [r7, #16]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8007576:	4a19      	ldr	r2, [pc, #100]	; (80075dc <HAL_GPIO_Init+0x2bc>)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800757e:	4b17      	ldr	r3, [pc, #92]	; (80075dc <HAL_GPIO_Init+0x2bc>)
 8007580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007584:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	43db      	mvns	r3, r3
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4013      	ands	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80075a4:	4a0d      	ldr	r2, [pc, #52]	; (80075dc <HAL_GPIO_Init+0x2bc>)
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	3301      	adds	r3, #1
 80075b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f47f aeb7 	bne.w	8007330 <HAL_GPIO_Init+0x10>
  }
}
 80075c2:	bf00      	nop
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	40010000 	.word	0x40010000
 80075d4:	48000400 	.word	0x48000400
 80075d8:	48000800 	.word	0x48000800
 80075dc:	58000800 	.word	0x58000800

080075e0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80075ee:	e0af      	b.n	8007750 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80075f0:	2201      	movs	r2, #1
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	4013      	ands	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80a2 	beq.w	800774a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007606:	4a59      	ldr	r2, [pc, #356]	; (800776c <HAL_GPIO_DeInit+0x18c>)
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	089b      	lsrs	r3, r3, #2
 800760c:	3302      	adds	r3, #2
 800760e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007612:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	2207      	movs	r2, #7
 800761e:	fa02 f303 	lsl.w	r3, r2, r3
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4013      	ands	r3, r2
 8007626:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800762e:	d00d      	beq.n	800764c <HAL_GPIO_DeInit+0x6c>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a4f      	ldr	r2, [pc, #316]	; (8007770 <HAL_GPIO_DeInit+0x190>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d007      	beq.n	8007648 <HAL_GPIO_DeInit+0x68>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a4e      	ldr	r2, [pc, #312]	; (8007774 <HAL_GPIO_DeInit+0x194>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d101      	bne.n	8007644 <HAL_GPIO_DeInit+0x64>
 8007640:	2302      	movs	r3, #2
 8007642:	e004      	b.n	800764e <HAL_GPIO_DeInit+0x6e>
 8007644:	2307      	movs	r3, #7
 8007646:	e002      	b.n	800764e <HAL_GPIO_DeInit+0x6e>
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <HAL_GPIO_DeInit+0x6e>
 800764c:	2300      	movs	r3, #0
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	f002 0203 	and.w	r2, r2, #3
 8007654:	0092      	lsls	r2, r2, #2
 8007656:	4093      	lsls	r3, r2
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	429a      	cmp	r2, r3
 800765c:	d136      	bne.n	80076cc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800765e:	4b46      	ldr	r3, [pc, #280]	; (8007778 <HAL_GPIO_DeInit+0x198>)
 8007660:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	43db      	mvns	r3, r3
 8007668:	4943      	ldr	r1, [pc, #268]	; (8007778 <HAL_GPIO_DeInit+0x198>)
 800766a:	4013      	ands	r3, r2
 800766c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8007670:	4b41      	ldr	r3, [pc, #260]	; (8007778 <HAL_GPIO_DeInit+0x198>)
 8007672:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	43db      	mvns	r3, r3
 800767a:	493f      	ldr	r1, [pc, #252]	; (8007778 <HAL_GPIO_DeInit+0x198>)
 800767c:	4013      	ands	r3, r2
 800767e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007682:	4b3d      	ldr	r3, [pc, #244]	; (8007778 <HAL_GPIO_DeInit+0x198>)
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	43db      	mvns	r3, r3
 800768a:	493b      	ldr	r1, [pc, #236]	; (8007778 <HAL_GPIO_DeInit+0x198>)
 800768c:	4013      	ands	r3, r2
 800768e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007690:	4b39      	ldr	r3, [pc, #228]	; (8007778 <HAL_GPIO_DeInit+0x198>)
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	43db      	mvns	r3, r3
 8007698:	4937      	ldr	r1, [pc, #220]	; (8007778 <HAL_GPIO_DeInit+0x198>)
 800769a:	4013      	ands	r3, r2
 800769c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	2207      	movs	r2, #7
 80076a8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80076ae:	4a2f      	ldr	r2, [pc, #188]	; (800776c <HAL_GPIO_DeInit+0x18c>)
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	089b      	lsrs	r3, r3, #2
 80076b4:	3302      	adds	r3, #2
 80076b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	43da      	mvns	r2, r3
 80076be:	482b      	ldr	r0, [pc, #172]	; (800776c <HAL_GPIO_DeInit+0x18c>)
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	089b      	lsrs	r3, r3, #2
 80076c4:	400a      	ands	r2, r1
 80076c6:	3302      	adds	r3, #2
 80076c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	2103      	movs	r1, #3
 80076d6:	fa01 f303 	lsl.w	r3, r1, r3
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	08da      	lsrs	r2, r3, #3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3208      	adds	r2, #8
 80076e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	220f      	movs	r2, #15
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	43db      	mvns	r3, r3
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	08d2      	lsrs	r2, r2, #3
 8007700:	4019      	ands	r1, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3208      	adds	r2, #8
 8007706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	005b      	lsls	r3, r3, #1
 8007712:	2103      	movs	r1, #3
 8007714:	fa01 f303 	lsl.w	r3, r1, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	401a      	ands	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	2101      	movs	r1, #1
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	fa01 f303 	lsl.w	r3, r1, r3
 800772c:	43db      	mvns	r3, r3
 800772e:	401a      	ands	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	2103      	movs	r1, #3
 800773e:	fa01 f303 	lsl.w	r3, r1, r3
 8007742:	43db      	mvns	r3, r3
 8007744:	401a      	ands	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	60da      	str	r2, [r3, #12]
    }

    position++;
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	3301      	adds	r3, #1
 800774e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	fa22 f303 	lsr.w	r3, r2, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	f47f af49 	bne.w	80075f0 <HAL_GPIO_DeInit+0x10>
  }
}
 800775e:	bf00      	nop
 8007760:	bf00      	nop
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	40010000 	.word	0x40010000
 8007770:	48000400 	.word	0x48000400
 8007774:	48000800 	.word	0x48000800
 8007778:	58000800 	.word	0x58000800

0800777c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	887b      	ldrh	r3, [r7, #2]
 800778e:	4013      	ands	r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d002      	beq.n	800779a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007794:	2301      	movs	r3, #1
 8007796:	73fb      	strb	r3, [r7, #15]
 8007798:	e001      	b.n	800779e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800779a:	2300      	movs	r3, #0
 800779c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	807b      	strh	r3, [r7, #2]
 80077b6:	4613      	mov	r3, r2
 80077b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077ba:	787b      	ldrb	r3, [r7, #1]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d003      	beq.n	80077c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80077c0:	887a      	ldrh	r2, [r7, #2]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80077c6:	e002      	b.n	80077ce <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80077c8:	887a      	ldrh	r2, [r7, #2]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80077ce:	bf00      	nop
 80077d0:	370c      	adds	r7, #12
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr

080077d8 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80077ea:	887a      	ldrh	r2, [r7, #2]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4013      	ands	r3, r2
 80077f0:	041a      	lsls	r2, r3, #16
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	43d9      	mvns	r1, r3
 80077f6:	887b      	ldrh	r3, [r7, #2]
 80077f8:	400b      	ands	r3, r1
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	619a      	str	r2, [r3, #24]
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	bc80      	pop	{r7}
 8007808:	4770      	bx	lr
	...

0800780c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007816:	4b08      	ldr	r3, [pc, #32]	; (8007838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	88fb      	ldrh	r3, [r7, #6]
 800781c:	4013      	ands	r3, r2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d006      	beq.n	8007830 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007822:	4a05      	ldr	r2, [pc, #20]	; (8007838 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007824:	88fb      	ldrh	r3, [r7, #6]
 8007826:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	4618      	mov	r0, r3
 800782c:	f7fa f9ac 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	58000800 	.word	0x58000800

0800783c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007840:	4b04      	ldr	r3, [pc, #16]	; (8007854 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a03      	ldr	r2, [pc, #12]	; (8007854 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800784a:	6013      	str	r3, [r2, #0]
}
 800784c:	bf00      	nop
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr
 8007854:	58000400 	.word	0x58000400

08007858 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10c      	bne.n	8007884 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800786a:	4b13      	ldr	r3, [pc, #76]	; (80078b8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007876:	d10d      	bne.n	8007894 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8007878:	f000 f83c 	bl	80078f4 <HAL_PWREx_DisableLowPowerRunMode>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d008      	beq.n	8007894 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8007882:	e015      	b.n	80078b0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8007884:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8007890:	f000 f822 	bl	80078d8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007894:	4b09      	ldr	r3, [pc, #36]	; (80078bc <HAL_PWR_EnterSLEEPMode+0x64>)
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	4a08      	ldr	r2, [pc, #32]	; (80078bc <HAL_PWR_EnterSLEEPMode+0x64>)
 800789a:	f023 0304 	bic.w	r3, r3, #4
 800789e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80078a6:	bf30      	wfi
 80078a8:	e002      	b.n	80078b0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80078aa:	bf40      	sev
    __WFE();
 80078ac:	bf20      	wfe
    __WFE();
 80078ae:	bf20      	wfe
  }
}
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	58000400 	.word	0x58000400
 80078bc:	e000ed00 	.word	0xe000ed00

080078c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80078c4:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <HAL_PWREx_GetVoltageRange+0x14>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr
 80078d4:	58000400 	.word	0x58000400

080078d8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80078dc:	4b04      	ldr	r3, [pc, #16]	; (80078f0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a03      	ldr	r2, [pc, #12]	; (80078f0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80078e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078e6:	6013      	str	r3, [r2, #0]
}
 80078e8:	bf00      	nop
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr
 80078f0:	58000400 	.word	0x58000400

080078f4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80078fa:	4b16      	ldr	r3, [pc, #88]	; (8007954 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a15      	ldr	r2, [pc, #84]	; (8007954 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007904:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8007906:	4b14      	ldr	r3, [pc, #80]	; (8007958 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2232      	movs	r2, #50	; 0x32
 800790c:	fb02 f303 	mul.w	r3, r2, r3
 8007910:	4a12      	ldr	r2, [pc, #72]	; (800795c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	0c9b      	lsrs	r3, r3, #18
 8007918:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800791a:	e002      	b.n	8007922 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3b01      	subs	r3, #1
 8007920:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800792a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792e:	d102      	bne.n	8007936 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f2      	bne.n	800791c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8007936:	4b07      	ldr	r3, [pc, #28]	; (8007954 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800793e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007942:	d101      	bne.n	8007948 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e000      	b.n	800794a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	370c      	adds	r7, #12
 800794e:	46bd      	mov	sp, r7
 8007950:	bc80      	pop	{r7}
 8007952:	4770      	bx	lr
 8007954:	58000400 	.word	0x58000400
 8007958:	20000040 	.word	0x20000040
 800795c:	431bde83 	.word	0x431bde83

08007960 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	4603      	mov	r3, r0
 8007968:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800796a:	4b10      	ldr	r3, [pc, #64]	; (80079ac <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f023 0307 	bic.w	r3, r3, #7
 8007972:	4a0e      	ldr	r2, [pc, #56]	; (80079ac <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8007974:	f043 0302 	orr.w	r3, r3, #2
 8007978:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	4a0c      	ldr	r2, [pc, #48]	; (80079b0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007980:	f043 0304 	orr.w	r3, r3, #4
 8007984:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800798c:	bf30      	wfi
 800798e:	e002      	b.n	8007996 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8007990:	bf40      	sev
    __WFE();
 8007992:	bf20      	wfe
    __WFE();
 8007994:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007996:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	4a05      	ldr	r2, [pc, #20]	; (80079b0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800799c:	f023 0304 	bic.w	r3, r3, #4
 80079a0:	6113      	str	r3, [r2, #16]
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr
 80079ac:	58000400 	.word	0x58000400
 80079b0:	e000ed00 	.word	0xe000ed00

080079b4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80079b8:	4b06      	ldr	r3, [pc, #24]	; (80079d4 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c4:	d101      	bne.n	80079ca <LL_PWR_IsEnabledBkUpAccess+0x16>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bc80      	pop	{r7}
 80079d2:	4770      	bx	lr
 80079d4:	58000400 	.word	0x58000400

080079d8 <LL_RCC_HSE_EnableTcxo>:
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80079dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079ea:	6013      	str	r3, [r2, #0]
}
 80079ec:	bf00      	nop
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bc80      	pop	{r7}
 80079f2:	4770      	bx	lr

080079f4 <LL_RCC_HSE_DisableTcxo>:
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80079f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a06:	6013      	str	r3, [r2, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a22:	d101      	bne.n	8007a28 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e000      	b.n	8007a2a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <LL_RCC_HSE_Enable>:
{
 8007a32:	b480      	push	{r7}
 8007a34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a44:	6013      	str	r3, [r2, #0]
}
 8007a46:	bf00      	nop
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr

08007a4e <LL_RCC_HSE_Disable>:
{
 8007a4e:	b480      	push	{r7}
 8007a50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a60:	6013      	str	r3, [r2, #0]
}
 8007a62:	bf00      	nop
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <LL_RCC_HSE_IsReady>:
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a7c:	d101      	bne.n	8007a82 <LL_RCC_HSE_IsReady+0x18>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <LL_RCC_HSE_IsReady+0x1a>
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bc80      	pop	{r7}
 8007a8a:	4770      	bx	lr

08007a8c <LL_RCC_HSI_Enable>:
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9e:	6013      	str	r3, [r2, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <LL_RCC_HSI_Disable>:
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007aba:	6013      	str	r3, [r2, #0]
}
 8007abc:	bf00      	nop
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bc80      	pop	{r7}
 8007ac2:	4770      	bx	lr

08007ac4 <LL_RCC_HSI_IsReady>:
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad6:	d101      	bne.n	8007adc <LL_RCC_HSI_IsReady+0x18>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e000      	b.n	8007ade <LL_RCC_HSI_IsReady+0x1a>
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bc80      	pop	{r7}
 8007ae4:	4770      	bx	lr

08007ae6 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	061b      	lsls	r3, r3, #24
 8007afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b00:	4313      	orrs	r3, r2
 8007b02:	604b      	str	r3, [r1, #4]
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <LL_RCC_LSE_IsReady>:
{
 8007b0e:	b480      	push	{r7}
 8007b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d101      	bne.n	8007b26 <LL_RCC_LSE_IsReady+0x18>
 8007b22:	2301      	movs	r3, #1
 8007b24:	e000      	b.n	8007b28 <LL_RCC_LSE_IsReady+0x1a>
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bc80      	pop	{r7}
 8007b2e:	4770      	bx	lr

08007b30 <LL_RCC_LSI_Enable>:
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8007b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b40:	f043 0301 	orr.w	r3, r3, #1
 8007b44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007b48:	bf00      	nop
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bc80      	pop	{r7}
 8007b4e:	4770      	bx	lr

08007b50 <LL_RCC_LSI_Disable>:
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8007b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b60:	f023 0301 	bic.w	r3, r3, #1
 8007b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007b68:	bf00      	nop
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc80      	pop	{r7}
 8007b6e:	4770      	bx	lr

08007b70 <LL_RCC_LSI_IsReady>:
{
 8007b70:	b480      	push	{r7}
 8007b72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8007b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d101      	bne.n	8007b88 <LL_RCC_LSI_IsReady+0x18>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e000      	b.n	8007b8a <LL_RCC_LSI_IsReady+0x1a>
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr

08007b92 <LL_RCC_MSI_Enable>:
{
 8007b92:	b480      	push	{r7}
 8007b94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6013      	str	r3, [r2, #0]
}
 8007ba6:	bf00      	nop
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr

08007bae <LL_RCC_MSI_Disable>:
{
 8007bae:	b480      	push	{r7}
 8007bb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bbc:	f023 0301 	bic.w	r3, r3, #1
 8007bc0:	6013      	str	r3, [r2, #0]
}
 8007bc2:	bf00      	nop
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc80      	pop	{r7}
 8007bc8:	4770      	bx	lr

08007bca <LL_RCC_MSI_IsReady>:
{
 8007bca:	b480      	push	{r7}
 8007bcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d101      	bne.n	8007be0 <LL_RCC_MSI_IsReady+0x16>
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e000      	b.n	8007be2 <LL_RCC_MSI_IsReady+0x18>
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr

08007bea <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8007bea:	b480      	push	{r7}
 8007bec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8007bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d101      	bne.n	8007c00 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <LL_RCC_MSI_GetRange>:
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8007c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8007c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bc80      	pop	{r7}
 8007c36:	4770      	bx	lr

08007c38 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c52:	4313      	orrs	r3, r2
 8007c54:	604b      	str	r3, [r1, #4]
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bc80      	pop	{r7}
 8007c5e:	4770      	bx	lr

08007c60 <LL_RCC_SetSysClkSource>:
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	f023 0203 	bic.w	r2, r3, #3
 8007c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	608b      	str	r3, [r1, #8]
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr

08007c86 <LL_RCC_GetSysClkSource>:
{
 8007c86:	b480      	push	{r7}
 8007c88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 030c 	and.w	r3, r3, #12
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <LL_RCC_SetAHBPrescaler>:
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	608b      	str	r3, [r1, #8]
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr

08007cc2 <LL_RCC_SetAHB3Prescaler>:
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007cd2:	f023 020f 	bic.w	r2, r3, #15
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	091b      	lsrs	r3, r3, #4
 8007cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr

08007cee <LL_RCC_SetAPB1Prescaler>:
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	608b      	str	r3, [r1, #8]
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bc80      	pop	{r7}
 8007d12:	4770      	bx	lr

08007d14 <LL_RCC_SetAPB2Prescaler>:
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	608b      	str	r3, [r1, #8]
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bc80      	pop	{r7}
 8007d38:	4770      	bx	lr

08007d3a <LL_RCC_GetAHBPrescaler>:
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <LL_RCC_GetAHB3Prescaler>:
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr

08007d6a <LL_RCC_GetAPB1Prescaler>:
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr

08007d80 <LL_RCC_GetAPB2Prescaler>:
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr

08007d96 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007d96:	b480      	push	{r7}
 8007d98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007da8:	6013      	str	r3, [r2, #0]
}
 8007daa:	bf00      	nop
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bc80      	pop	{r7}
 8007db0:	4770      	bx	lr

08007db2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007db2:	b480      	push	{r7}
 8007db4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dc4:	6013      	str	r3, [r2, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr

08007dce <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ddc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007de0:	d101      	bne.n	8007de6 <LL_RCC_PLL_IsReady+0x18>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e000      	b.n	8007de8 <LL_RCC_PLL_IsReady+0x1a>
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr

08007df0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bc80      	pop	{r7}
 8007e06:	4770      	bx	lr

08007e08 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr

08007e1e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bc80      	pop	{r7}
 8007e32:	4770      	bx	lr

08007e34 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8007e34:	b480      	push	{r7}
 8007e36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr

08007e4a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e5c:	d101      	bne.n	8007e62 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e000      	b.n	8007e64 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bc80      	pop	{r7}
 8007e6a:	4770      	bx	lr

08007e6c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e80:	d101      	bne.n	8007e86 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e000      	b.n	8007e88 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007e86:	2300      	movs	r3, #0
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr

08007e90 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007e90:	b480      	push	{r7}
 8007e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ea2:	d101      	bne.n	8007ea8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e000      	b.n	8007eaa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr

08007eb2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ec0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ec4:	d101      	bne.n	8007eca <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bc80      	pop	{r7}
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e38b      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ee6:	f7ff fece 	bl	8007c86 <LL_RCC_GetSysClkSource>
 8007eea:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eec:	f7ff ffa2 	bl	8007e34 <LL_RCC_PLL_GetMainSource>
 8007ef0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80c9 	beq.w	8008092 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d005      	beq.n	8007f12 <HAL_RCC_OscConfig+0x3e>
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	2b0c      	cmp	r3, #12
 8007f0a:	d17b      	bne.n	8008004 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d178      	bne.n	8008004 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f12:	f7ff fe5a 	bl	8007bca <LL_RCC_MSI_IsReady>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d005      	beq.n	8007f28 <HAL_RCC_OscConfig+0x54>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e36a      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d005      	beq.n	8007f46 <HAL_RCC_OscConfig+0x72>
 8007f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f44:	e006      	b.n	8007f54 <HAL_RCC_OscConfig+0x80>
 8007f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f4e:	091b      	lsrs	r3, r3, #4
 8007f50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d222      	bcs.n	8007f9e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 fd51 	bl	8008a04 <RCC_SetFlashLatencyFromMSIRange>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e348      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f76:	f043 0308 	orr.w	r3, r3, #8
 8007f7a:	6013      	str	r3, [r2, #0]
 8007f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fe4e 	bl	8007c38 <LL_RCC_MSI_SetCalibTrimming>
 8007f9c:	e021      	b.n	8007fe2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fa8:	f043 0308 	orr.w	r3, r3, #8
 8007fac:	6013      	str	r3, [r2, #0]
 8007fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff fe35 	bl	8007c38 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fd16 	bl	8008a04 <RCC_SetFlashLatencyFromMSIRange>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d001      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e30d      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007fe2:	f000 fcd7 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4aa1      	ldr	r2, [pc, #644]	; (8008270 <HAL_RCC_OscConfig+0x39c>)
 8007fea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007fec:	4ba1      	ldr	r3, [pc, #644]	; (8008274 <HAL_RCC_OscConfig+0x3a0>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fa fb37 	bl	8002664 <HAL_InitTick>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8007ffa:	7cfb      	ldrb	r3, [r7, #19]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d047      	beq.n	8008090 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8008000:	7cfb      	ldrb	r3, [r7, #19]
 8008002:	e2fc      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d02c      	beq.n	8008066 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800800c:	f7ff fdc1 	bl	8007b92 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008010:	f7fa fb32 	bl	8002678 <HAL_GetTick>
 8008014:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008016:	e008      	b.n	800802a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008018:	f7fa fb2e 	bl	8002678 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d901      	bls.n	800802a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e2e9      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800802a:	f7ff fdce 	bl	8007bca <LL_RCC_MSI_IsReady>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0f1      	beq.n	8008018 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800803e:	f043 0308 	orr.w	r3, r3, #8
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008056:	4313      	orrs	r3, r2
 8008058:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff fdea 	bl	8007c38 <LL_RCC_MSI_SetCalibTrimming>
 8008064:	e015      	b.n	8008092 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008066:	f7ff fda2 	bl	8007bae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800806a:	f7fa fb05 	bl	8002678 <HAL_GetTick>
 800806e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008070:	e008      	b.n	8008084 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008072:	f7fa fb01 	bl	8002678 <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	2b02      	cmp	r3, #2
 800807e:	d901      	bls.n	8008084 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e2bc      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008084:	f7ff fda1 	bl	8007bca <LL_RCC_MSI_IsReady>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1f1      	bne.n	8008072 <HAL_RCC_OscConfig+0x19e>
 800808e:	e000      	b.n	8008092 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008090:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d05f      	beq.n	800815e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2b08      	cmp	r3, #8
 80080a2:	d005      	beq.n	80080b0 <HAL_RCC_OscConfig+0x1dc>
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2b0c      	cmp	r3, #12
 80080a8:	d10d      	bne.n	80080c6 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d10a      	bne.n	80080c6 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080b0:	f7ff fcdb 	bl	8007a6a <LL_RCC_HSE_IsReady>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d050      	beq.n	800815c <HAL_RCC_OscConfig+0x288>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d14c      	bne.n	800815c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e29b      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80080c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80080d8:	4313      	orrs	r3, r2
 80080da:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e4:	d102      	bne.n	80080ec <HAL_RCC_OscConfig+0x218>
 80080e6:	f7ff fca4 	bl	8007a32 <LL_RCC_HSE_Enable>
 80080ea:	e00d      	b.n	8008108 <HAL_RCC_OscConfig+0x234>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80080f4:	d104      	bne.n	8008100 <HAL_RCC_OscConfig+0x22c>
 80080f6:	f7ff fc6f 	bl	80079d8 <LL_RCC_HSE_EnableTcxo>
 80080fa:	f7ff fc9a 	bl	8007a32 <LL_RCC_HSE_Enable>
 80080fe:	e003      	b.n	8008108 <HAL_RCC_OscConfig+0x234>
 8008100:	f7ff fca5 	bl	8007a4e <LL_RCC_HSE_Disable>
 8008104:	f7ff fc76 	bl	80079f4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d012      	beq.n	8008136 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008110:	f7fa fab2 	bl	8002678 <HAL_GetTick>
 8008114:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008118:	f7fa faae 	bl	8002678 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b64      	cmp	r3, #100	; 0x64
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e269      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800812a:	f7ff fc9e 	bl	8007a6a <LL_RCC_HSE_IsReady>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d0f1      	beq.n	8008118 <HAL_RCC_OscConfig+0x244>
 8008134:	e013      	b.n	800815e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008136:	f7fa fa9f 	bl	8002678 <HAL_GetTick>
 800813a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800813c:	e008      	b.n	8008150 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800813e:	f7fa fa9b 	bl	8002678 <HAL_GetTick>
 8008142:	4602      	mov	r2, r0
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	1ad3      	subs	r3, r2, r3
 8008148:	2b64      	cmp	r3, #100	; 0x64
 800814a:	d901      	bls.n	8008150 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e256      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008150:	f7ff fc8b 	bl	8007a6a <LL_RCC_HSE_IsReady>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f1      	bne.n	800813e <HAL_RCC_OscConfig+0x26a>
 800815a:	e000      	b.n	800815e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800815c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d04b      	beq.n	8008202 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2b04      	cmp	r3, #4
 800816e:	d005      	beq.n	800817c <HAL_RCC_OscConfig+0x2a8>
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	2b0c      	cmp	r3, #12
 8008174:	d113      	bne.n	800819e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d110      	bne.n	800819e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800817c:	f7ff fca2 	bl	8007ac4 <LL_RCC_HSI_IsReady>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <HAL_RCC_OscConfig+0x2be>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e235      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	4618      	mov	r0, r3
 8008198:	f7ff fca5 	bl	8007ae6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800819c:	e031      	b.n	8008202 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d019      	beq.n	80081da <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081a6:	f7ff fc71 	bl	8007a8c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081aa:	f7fa fa65 	bl	8002678 <HAL_GetTick>
 80081ae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80081b0:	e008      	b.n	80081c4 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081b2:	f7fa fa61 	bl	8002678 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e21c      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 80081c4:	f7ff fc7e 	bl	8007ac4 <LL_RCC_HSI_IsReady>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d0f1      	beq.n	80081b2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	695b      	ldr	r3, [r3, #20]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff fc87 	bl	8007ae6 <LL_RCC_HSI_SetCalibTrimming>
 80081d8:	e013      	b.n	8008202 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081da:	f7ff fc65 	bl	8007aa8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081de:	f7fa fa4b 	bl	8002678 <HAL_GetTick>
 80081e2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80081e4:	e008      	b.n	80081f8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081e6:	f7fa fa47 	bl	8002678 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e202      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80081f8:	f7ff fc64 	bl	8007ac4 <LL_RCC_HSI_IsReady>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f1      	bne.n	80081e6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d06f      	beq.n	80082ee <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d057      	beq.n	80082c6 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8008216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800821a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800821e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	69da      	ldr	r2, [r3, #28]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f003 0310 	and.w	r3, r3, #16
 800822a:	429a      	cmp	r2, r3
 800822c:	d036      	beq.n	800829c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e1db      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d018      	beq.n	8008282 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8008250:	f7ff fc7e 	bl	8007b50 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008254:	f7fa fa10 	bl	8002678 <HAL_GetTick>
 8008258:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800825a:	e00d      	b.n	8008278 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800825c:	f7fa fa0c 	bl	8002678 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b11      	cmp	r3, #17
 8008268:	d906      	bls.n	8008278 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e1c7      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
 800826e:	bf00      	nop
 8008270:	20000040 	.word	0x20000040
 8008274:	20000044 	.word	0x20000044
          while (LL_RCC_LSI_IsReady() != 0U)
 8008278:	f7ff fc7a 	bl	8007b70 <LL_RCC_LSI_IsReady>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1ec      	bne.n	800825c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8008282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800828a:	f023 0210 	bic.w	r2, r3, #16
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008296:	4313      	orrs	r3, r2
 8008298:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800829c:	f7ff fc48 	bl	8007b30 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a0:	f7fa f9ea 	bl	8002678 <HAL_GetTick>
 80082a4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80082a6:	e008      	b.n	80082ba <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082a8:	f7fa f9e6 	bl	8002678 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	2b11      	cmp	r3, #17
 80082b4:	d901      	bls.n	80082ba <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e1a1      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80082ba:	f7ff fc59 	bl	8007b70 <LL_RCC_LSI_IsReady>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d0f1      	beq.n	80082a8 <HAL_RCC_OscConfig+0x3d4>
 80082c4:	e013      	b.n	80082ee <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80082c6:	f7ff fc43 	bl	8007b50 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ca:	f7fa f9d5 	bl	8002678 <HAL_GetTick>
 80082ce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80082d2:	f7fa f9d1 	bl	8002678 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b11      	cmp	r3, #17
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e18c      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 80082e4:	f7ff fc44 	bl	8007b70 <LL_RCC_LSI_IsReady>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1f1      	bne.n	80082d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 0304 	and.w	r3, r3, #4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	f000 80d8 	beq.w	80084ac <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80082fc:	f7ff fb5a 	bl	80079b4 <LL_PWR_IsEnabledBkUpAccess>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d113      	bne.n	800832e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008306:	f7ff fa99 	bl	800783c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800830a:	f7fa f9b5 	bl	8002678 <HAL_GetTick>
 800830e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008310:	e008      	b.n	8008324 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008312:	f7fa f9b1 	bl	8002678 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d901      	bls.n	8008324 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e16c      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008324:	f7ff fb46 	bl	80079b4 <LL_PWR_IsEnabledBkUpAccess>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0f1      	beq.n	8008312 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d07b      	beq.n	800842e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b85      	cmp	r3, #133	; 0x85
 800833c:	d003      	beq.n	8008346 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	2b05      	cmp	r3, #5
 8008344:	d109      	bne.n	800835a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008352:	f043 0304 	orr.w	r3, r3, #4
 8008356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800835a:	f7fa f98d 	bl	8002678 <HAL_GetTick>
 800835e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008374:	e00a      	b.n	800838c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008376:	f7fa f97f 	bl	8002678 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	f241 3288 	movw	r2, #5000	; 0x1388
 8008384:	4293      	cmp	r3, r2
 8008386:	d901      	bls.n	800838c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e138      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800838c:	f7ff fbbf 	bl	8007b0e <LL_RCC_LSE_IsReady>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0ef      	beq.n	8008376 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	2b81      	cmp	r3, #129	; 0x81
 800839c:	d003      	beq.n	80083a6 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	2b85      	cmp	r3, #133	; 0x85
 80083a4:	d121      	bne.n	80083ea <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a6:	f7fa f967 	bl	8002678 <HAL_GetTick>
 80083aa:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80083ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80083c0:	e00a      	b.n	80083d8 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083c2:	f7fa f959 	bl	8002678 <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e112      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80083d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d0ec      	beq.n	80083c2 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80083e8:	e060      	b.n	80084ac <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ea:	f7fa f945 	bl	8002678 <HAL_GetTick>
 80083ee:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80083f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80083fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008400:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008404:	e00a      	b.n	800841c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008406:	f7fa f937 	bl	8002678 <HAL_GetTick>
 800840a:	4602      	mov	r2, r0
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	1ad3      	subs	r3, r2, r3
 8008410:	f241 3288 	movw	r2, #5000	; 0x1388
 8008414:	4293      	cmp	r3, r2
 8008416:	d901      	bls.n	800841c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e0f0      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800841c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1ec      	bne.n	8008406 <HAL_RCC_OscConfig+0x532>
 800842c:	e03e      	b.n	80084ac <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842e:	f7fa f923 	bl	8002678 <HAL_GetTick>
 8008432:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008448:	e00a      	b.n	8008460 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800844a:	f7fa f915 	bl	8002678 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	f241 3288 	movw	r2, #5000	; 0x1388
 8008458:	4293      	cmp	r3, r2
 800845a:	d901      	bls.n	8008460 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 800845c:	2303      	movs	r3, #3
 800845e:	e0ce      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1ec      	bne.n	800844a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008470:	f7fa f902 	bl	8002678 <HAL_GetTick>
 8008474:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800847a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800847e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008482:	f023 0301 	bic.w	r3, r3, #1
 8008486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800848a:	e00a      	b.n	80084a2 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800848c:	f7fa f8f4 	bl	8002678 <HAL_GetTick>
 8008490:	4602      	mov	r2, r0
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	f241 3288 	movw	r2, #5000	; 0x1388
 800849a:	4293      	cmp	r3, r2
 800849c:	d901      	bls.n	80084a2 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e0ad      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 80084a2:	f7ff fb34 	bl	8007b0e <LL_RCC_LSE_IsReady>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1ef      	bne.n	800848c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 80a3 	beq.w	80085fc <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	2b0c      	cmp	r3, #12
 80084ba:	d076      	beq.n	80085aa <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d14b      	bne.n	800855c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c4:	f7ff fc75 	bl	8007db2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c8:	f7fa f8d6 	bl	8002678 <HAL_GetTick>
 80084cc:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80084ce:	e008      	b.n	80084e2 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084d0:	f7fa f8d2 	bl	8002678 <HAL_GetTick>
 80084d4:	4602      	mov	r2, r0
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	2b0a      	cmp	r3, #10
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e08d      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 80084e2:	f7ff fc74 	bl	8007dce <LL_RCC_PLL_IsReady>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1f1      	bne.n	80084d0 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80084ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	4b45      	ldr	r3, [pc, #276]	; (8008608 <HAL_RCC_OscConfig+0x734>)
 80084f4:	4013      	ands	r3, r2
 80084f6:	687a      	ldr	r2, [r7, #4]
 80084f8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084fe:	4311      	orrs	r1, r2
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008504:	0212      	lsls	r2, r2, #8
 8008506:	4311      	orrs	r1, r2
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800850c:	4311      	orrs	r1, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008512:	4311      	orrs	r1, r2
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008518:	430a      	orrs	r2, r1
 800851a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800851e:	4313      	orrs	r3, r2
 8008520:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008522:	f7ff fc38 	bl	8007d96 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008534:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008536:	f7fa f89f 	bl	8002678 <HAL_GetTick>
 800853a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800853c:	e008      	b.n	8008550 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800853e:	f7fa f89b 	bl	8002678 <HAL_GetTick>
 8008542:	4602      	mov	r2, r0
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	2b0a      	cmp	r3, #10
 800854a:	d901      	bls.n	8008550 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 800854c:	2303      	movs	r3, #3
 800854e:	e056      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8008550:	f7ff fc3d 	bl	8007dce <LL_RCC_PLL_IsReady>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d0f1      	beq.n	800853e <HAL_RCC_OscConfig+0x66a>
 800855a:	e04f      	b.n	80085fc <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800855c:	f7ff fc29 	bl	8007db2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8008560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800856a:	f023 0303 	bic.w	r3, r3, #3
 800856e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8008570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800857a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800857e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008582:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008584:	f7fa f878 	bl	8002678 <HAL_GetTick>
 8008588:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800858c:	f7fa f874 	bl	8002678 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b0a      	cmp	r3, #10
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e02f      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800859e:	f7ff fc16 	bl	8007dce <LL_RCC_PLL_IsReady>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d1f1      	bne.n	800858c <HAL_RCC_OscConfig+0x6b8>
 80085a8:	e028      	b.n	80085fc <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d101      	bne.n	80085b6 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	e023      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80085b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	f003 0203 	and.w	r2, r3, #3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d115      	bne.n	80085f8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d10e      	bne.n	80085f8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d106      	bne.n	80085f8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d001      	beq.n	80085fc <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e000      	b.n	80085fe <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	11c1808c 	.word	0x11c1808c

0800860c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e10f      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008620:	4b89      	ldr	r3, [pc, #548]	; (8008848 <HAL_RCC_ClockConfig+0x23c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0307 	and.w	r3, r3, #7
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d91b      	bls.n	8008666 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862e:	4b86      	ldr	r3, [pc, #536]	; (8008848 <HAL_RCC_ClockConfig+0x23c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f023 0207 	bic.w	r2, r3, #7
 8008636:	4984      	ldr	r1, [pc, #528]	; (8008848 <HAL_RCC_ClockConfig+0x23c>)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	4313      	orrs	r3, r2
 800863c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800863e:	f7fa f81b 	bl	8002678 <HAL_GetTick>
 8008642:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008644:	e008      	b.n	8008658 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008646:	f7fa f817 	bl	8002678 <HAL_GetTick>
 800864a:	4602      	mov	r2, r0
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b02      	cmp	r3, #2
 8008652:	d901      	bls.n	8008658 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e0f3      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008658:	4b7b      	ldr	r3, [pc, #492]	; (8008848 <HAL_RCC_ClockConfig+0x23c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0307 	and.w	r3, r3, #7
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d1ef      	bne.n	8008646 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d016      	beq.n	80086a0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff fb10 	bl	8007c9c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800867c:	f7f9 fffc 	bl	8002678 <HAL_GetTick>
 8008680:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008682:	e008      	b.n	8008696 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008684:	f7f9 fff8 	bl	8002678 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e0d4      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008696:	f7ff fbd8 	bl	8007e4a <LL_RCC_IsActiveFlag_HPRE>
 800869a:	4603      	mov	r3, r0
 800869c:	2b00      	cmp	r3, #0
 800869e:	d0f1      	beq.n	8008684 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d016      	beq.n	80086da <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	695b      	ldr	r3, [r3, #20]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff fb06 	bl	8007cc2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80086b6:	f7f9 ffdf 	bl	8002678 <HAL_GetTick>
 80086ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80086be:	f7f9 ffdb 	bl	8002678 <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e0b7      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80086d0:	f7ff fbcc 	bl	8007e6c <LL_RCC_IsActiveFlag_SHDHPRE>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f1      	beq.n	80086be <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0304 	and.w	r3, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d016      	beq.n	8008714 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff faff 	bl	8007cee <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80086f0:	f7f9 ffc2 	bl	8002678 <HAL_GetTick>
 80086f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80086f6:	e008      	b.n	800870a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80086f8:	f7f9 ffbe 	bl	8002678 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b02      	cmp	r3, #2
 8008704:	d901      	bls.n	800870a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e09a      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800870a:	f7ff fbc1 	bl	8007e90 <LL_RCC_IsActiveFlag_PPRE1>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d0f1      	beq.n	80086f8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d017      	beq.n	8008750 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff faf4 	bl	8007d14 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800872c:	f7f9 ffa4 	bl	8002678 <HAL_GetTick>
 8008730:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008732:	e008      	b.n	8008746 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008734:	f7f9 ffa0 	bl	8002678 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e07c      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008746:	f7ff fbb4 	bl	8007eb2 <LL_RCC_IsActiveFlag_PPRE2>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0f1      	beq.n	8008734 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0301 	and.w	r3, r3, #1
 8008758:	2b00      	cmp	r3, #0
 800875a:	d043      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d106      	bne.n	8008772 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008764:	f7ff f981 	bl	8007a6a <LL_RCC_HSE_IsReady>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d11e      	bne.n	80087ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
 8008770:	e066      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	2b03      	cmp	r3, #3
 8008778:	d106      	bne.n	8008788 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800877a:	f7ff fb28 	bl	8007dce <LL_RCC_PLL_IsReady>
 800877e:	4603      	mov	r3, r0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d113      	bne.n	80087ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e05b      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d106      	bne.n	800879e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008790:	f7ff fa1b 	bl	8007bca <LL_RCC_MSI_IsReady>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d108      	bne.n	80087ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	e050      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800879e:	f7ff f991 	bl	8007ac4 <LL_RCC_HSI_IsReady>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d101      	bne.n	80087ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e049      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff fa55 	bl	8007c60 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087b6:	f7f9 ff5f 	bl	8002678 <HAL_GetTick>
 80087ba:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087bc:	e00a      	b.n	80087d4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087be:	f7f9 ff5b 	bl	8002678 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d901      	bls.n	80087d4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80087d0:	2303      	movs	r3, #3
 80087d2:	e035      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087d4:	f7ff fa57 	bl	8007c86 <LL_RCC_GetSysClkSource>
 80087d8:	4602      	mov	r2, r0
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d1ec      	bne.n	80087be <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80087e4:	4b18      	ldr	r3, [pc, #96]	; (8008848 <HAL_RCC_ClockConfig+0x23c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0307 	and.w	r3, r3, #7
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d21b      	bcs.n	800882a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <HAL_RCC_ClockConfig+0x23c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f023 0207 	bic.w	r2, r3, #7
 80087fa:	4913      	ldr	r1, [pc, #76]	; (8008848 <HAL_RCC_ClockConfig+0x23c>)
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	4313      	orrs	r3, r2
 8008800:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008802:	f7f9 ff39 	bl	8002678 <HAL_GetTick>
 8008806:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008808:	e008      	b.n	800881c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800880a:	f7f9 ff35 	bl	8002678 <HAL_GetTick>
 800880e:	4602      	mov	r2, r0
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d901      	bls.n	800881c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e011      	b.n	8008840 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800881c:	4b0a      	ldr	r3, [pc, #40]	; (8008848 <HAL_RCC_ClockConfig+0x23c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0307 	and.w	r3, r3, #7
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	429a      	cmp	r2, r3
 8008828:	d1ef      	bne.n	800880a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800882a:	f000 f8b3 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 800882e:	4603      	mov	r3, r0
 8008830:	4a06      	ldr	r2, [pc, #24]	; (800884c <HAL_RCC_ClockConfig+0x240>)
 8008832:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <HAL_RCC_ClockConfig+0x244>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4618      	mov	r0, r3
 800883a:	f7f9 ff13 	bl	8002664 <HAL_InitTick>
 800883e:	4603      	mov	r3, r0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	58004000 	.word	0x58004000
 800884c:	20000040 	.word	0x20000040
 8008850:	20000044 	.word	0x20000044

08008854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008854:	b590      	push	{r4, r7, lr}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008862:	f7ff fa10 	bl	8007c86 <LL_RCC_GetSysClkSource>
 8008866:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008868:	f7ff fae4 	bl	8007e34 <LL_RCC_PLL_GetMainSource>
 800886c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_RCC_GetSysClockFreq+0x2c>
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b0c      	cmp	r3, #12
 8008878:	d139      	bne.n	80088ee <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d136      	bne.n	80088ee <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008880:	f7ff f9b3 	bl	8007bea <LL_RCC_MSI_IsEnabledRangeSelect>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d115      	bne.n	80088b6 <HAL_RCC_GetSysClockFreq+0x62>
 800888a:	f7ff f9ae 	bl	8007bea <LL_RCC_MSI_IsEnabledRangeSelect>
 800888e:	4603      	mov	r3, r0
 8008890:	2b01      	cmp	r3, #1
 8008892:	d106      	bne.n	80088a2 <HAL_RCC_GetSysClockFreq+0x4e>
 8008894:	f7ff f9b9 	bl	8007c0a <LL_RCC_MSI_GetRange>
 8008898:	4603      	mov	r3, r0
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	f003 030f 	and.w	r3, r3, #15
 80088a0:	e005      	b.n	80088ae <HAL_RCC_GetSysClockFreq+0x5a>
 80088a2:	f7ff f9bd 	bl	8007c20 <LL_RCC_MSI_GetRangeAfterStandby>
 80088a6:	4603      	mov	r3, r0
 80088a8:	0a1b      	lsrs	r3, r3, #8
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	4a36      	ldr	r2, [pc, #216]	; (8008988 <HAL_RCC_GetSysClockFreq+0x134>)
 80088b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088b4:	e014      	b.n	80088e0 <HAL_RCC_GetSysClockFreq+0x8c>
 80088b6:	f7ff f998 	bl	8007bea <LL_RCC_MSI_IsEnabledRangeSelect>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d106      	bne.n	80088ce <HAL_RCC_GetSysClockFreq+0x7a>
 80088c0:	f7ff f9a3 	bl	8007c0a <LL_RCC_MSI_GetRange>
 80088c4:	4603      	mov	r3, r0
 80088c6:	091b      	lsrs	r3, r3, #4
 80088c8:	f003 030f 	and.w	r3, r3, #15
 80088cc:	e005      	b.n	80088da <HAL_RCC_GetSysClockFreq+0x86>
 80088ce:	f7ff f9a7 	bl	8007c20 <LL_RCC_MSI_GetRangeAfterStandby>
 80088d2:	4603      	mov	r3, r0
 80088d4:	091b      	lsrs	r3, r3, #4
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	4a2b      	ldr	r2, [pc, #172]	; (8008988 <HAL_RCC_GetSysClockFreq+0x134>)
 80088dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088e0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d115      	bne.n	8008914 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80088ec:	e012      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d102      	bne.n	80088fa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80088f4:	4b25      	ldr	r3, [pc, #148]	; (800898c <HAL_RCC_GetSysClockFreq+0x138>)
 80088f6:	617b      	str	r3, [r7, #20]
 80088f8:	e00c      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d109      	bne.n	8008914 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008900:	f7ff f886 	bl	8007a10 <LL_RCC_HSE_IsEnabledDiv2>
 8008904:	4603      	mov	r3, r0
 8008906:	2b01      	cmp	r3, #1
 8008908:	d102      	bne.n	8008910 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800890a:	4b20      	ldr	r3, [pc, #128]	; (800898c <HAL_RCC_GetSysClockFreq+0x138>)
 800890c:	617b      	str	r3, [r7, #20]
 800890e:	e001      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008910:	4b1f      	ldr	r3, [pc, #124]	; (8008990 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008912:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008914:	f7ff f9b7 	bl	8007c86 <LL_RCC_GetSysClkSource>
 8008918:	4603      	mov	r3, r0
 800891a:	2b0c      	cmp	r3, #12
 800891c:	d12f      	bne.n	800897e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800891e:	f7ff fa89 	bl	8007e34 <LL_RCC_PLL_GetMainSource>
 8008922:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d003      	beq.n	8008932 <HAL_RCC_GetSysClockFreq+0xde>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b03      	cmp	r3, #3
 800892e:	d003      	beq.n	8008938 <HAL_RCC_GetSysClockFreq+0xe4>
 8008930:	e00d      	b.n	800894e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008932:	4b16      	ldr	r3, [pc, #88]	; (800898c <HAL_RCC_GetSysClockFreq+0x138>)
 8008934:	60fb      	str	r3, [r7, #12]
        break;
 8008936:	e00d      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008938:	f7ff f86a 	bl	8007a10 <LL_RCC_HSE_IsEnabledDiv2>
 800893c:	4603      	mov	r3, r0
 800893e:	2b01      	cmp	r3, #1
 8008940:	d102      	bne.n	8008948 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008942:	4b12      	ldr	r3, [pc, #72]	; (800898c <HAL_RCC_GetSysClockFreq+0x138>)
 8008944:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008946:	e005      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8008948:	4b11      	ldr	r3, [pc, #68]	; (8008990 <HAL_RCC_GetSysClockFreq+0x13c>)
 800894a:	60fb      	str	r3, [r7, #12]
        break;
 800894c:	e002      	b.n	8008954 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	60fb      	str	r3, [r7, #12]
        break;
 8008952:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8008954:	f7ff fa4c 	bl	8007df0 <LL_RCC_PLL_GetN>
 8008958:	4602      	mov	r2, r0
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	fb03 f402 	mul.w	r4, r3, r2
 8008960:	f7ff fa5d 	bl	8007e1e <LL_RCC_PLL_GetDivider>
 8008964:	4603      	mov	r3, r0
 8008966:	091b      	lsrs	r3, r3, #4
 8008968:	3301      	adds	r3, #1
 800896a:	fbb4 f4f3 	udiv	r4, r4, r3
 800896e:	f7ff fa4b 	bl	8007e08 <LL_RCC_PLL_GetR>
 8008972:	4603      	mov	r3, r0
 8008974:	0f5b      	lsrs	r3, r3, #29
 8008976:	3301      	adds	r3, #1
 8008978:	fbb4 f3f3 	udiv	r3, r4, r3
 800897c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800897e:	697b      	ldr	r3, [r7, #20]
}
 8008980:	4618      	mov	r0, r3
 8008982:	371c      	adds	r7, #28
 8008984:	46bd      	mov	sp, r7
 8008986:	bd90      	pop	{r4, r7, pc}
 8008988:	08015708 	.word	0x08015708
 800898c:	00f42400 	.word	0x00f42400
 8008990:	01e84800 	.word	0x01e84800

08008994 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008994:	b598      	push	{r3, r4, r7, lr}
 8008996:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008998:	f7ff ff5c 	bl	8008854 <HAL_RCC_GetSysClockFreq>
 800899c:	4604      	mov	r4, r0
 800899e:	f7ff f9cc 	bl	8007d3a <LL_RCC_GetAHBPrescaler>
 80089a2:	4603      	mov	r3, r0
 80089a4:	091b      	lsrs	r3, r3, #4
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	4a03      	ldr	r2, [pc, #12]	; (80089b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80089ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	bd98      	pop	{r3, r4, r7, pc}
 80089b8:	080156a8 	.word	0x080156a8

080089bc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089bc:	b598      	push	{r3, r4, r7, lr}
 80089be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80089c0:	f7ff ffe8 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 80089c4:	4604      	mov	r4, r0
 80089c6:	f7ff f9d0 	bl	8007d6a <LL_RCC_GetAPB1Prescaler>
 80089ca:	4603      	mov	r3, r0
 80089cc:	0a1b      	lsrs	r3, r3, #8
 80089ce:	4a03      	ldr	r2, [pc, #12]	; (80089dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80089d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80089d8:	4618      	mov	r0, r3
 80089da:	bd98      	pop	{r3, r4, r7, pc}
 80089dc:	080156e8 	.word	0x080156e8

080089e0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089e0:	b598      	push	{r3, r4, r7, lr}
 80089e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80089e4:	f7ff ffd6 	bl	8008994 <HAL_RCC_GetHCLKFreq>
 80089e8:	4604      	mov	r4, r0
 80089ea:	f7ff f9c9 	bl	8007d80 <LL_RCC_GetAPB2Prescaler>
 80089ee:	4603      	mov	r3, r0
 80089f0:	0adb      	lsrs	r3, r3, #11
 80089f2:	4a03      	ldr	r2, [pc, #12]	; (8008a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80089f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	bd98      	pop	{r3, r4, r7, pc}
 8008a00:	080156e8 	.word	0x080156e8

08008a04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	091b      	lsrs	r3, r3, #4
 8008a10:	f003 030f 	and.w	r3, r3, #15
 8008a14:	4a10      	ldr	r2, [pc, #64]	; (8008a58 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8008a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a1a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8008a1c:	f7ff f998 	bl	8007d50 <LL_RCC_GetAHB3Prescaler>
 8008a20:	4603      	mov	r3, r0
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	f003 030f 	and.w	r3, r3, #15
 8008a28:	4a0c      	ldr	r2, [pc, #48]	; (8008a5c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8008a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a34:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4a09      	ldr	r2, [pc, #36]	; (8008a60 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8008a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3e:	0c9c      	lsrs	r4, r3, #18
 8008a40:	f7fe ff3e 	bl	80078c0 <HAL_PWREx_GetVoltageRange>
 8008a44:	4603      	mov	r3, r0
 8008a46:	4619      	mov	r1, r3
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 f80b 	bl	8008a64 <RCC_SetFlashLatency>
 8008a4e:	4603      	mov	r3, r0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd90      	pop	{r4, r7, pc}
 8008a58:	08015708 	.word	0x08015708
 8008a5c:	080156a8 	.word	0x080156a8
 8008a60:	431bde83 	.word	0x431bde83

08008a64 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08e      	sub	sp, #56	; 0x38
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8008a6e:	4a3a      	ldr	r2, [pc, #232]	; (8008b58 <RCC_SetFlashLatency+0xf4>)
 8008a70:	f107 0320 	add.w	r3, r7, #32
 8008a74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a78:	6018      	str	r0, [r3, #0]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8008a7e:	4a37      	ldr	r2, [pc, #220]	; (8008b5c <RCC_SetFlashLatency+0xf8>)
 8008a80:	f107 0318 	add.w	r3, r7, #24
 8008a84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a88:	6018      	str	r0, [r3, #0]
 8008a8a:	3304      	adds	r3, #4
 8008a8c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8008a8e:	4a34      	ldr	r2, [pc, #208]	; (8008b60 <RCC_SetFlashLatency+0xfc>)
 8008a90:	f107 030c 	add.w	r3, r7, #12
 8008a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa4:	d11b      	bne.n	8008ade <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8008aaa:	e014      	b.n	8008ad6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	3338      	adds	r3, #56	; 0x38
 8008ab2:	443b      	add	r3, r7
 8008ab4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d807      	bhi.n	8008ad0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	3338      	adds	r3, #56	; 0x38
 8008ac6:	443b      	add	r3, r7
 8008ac8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008acc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ace:	e021      	b.n	8008b14 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d9e7      	bls.n	8008aac <RCC_SetFlashLatency+0x48>
 8008adc:	e01a      	b.n	8008b14 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008ade:	2300      	movs	r3, #0
 8008ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ae2:	e014      	b.n	8008b0e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	3338      	adds	r3, #56	; 0x38
 8008aea:	443b      	add	r3, r7
 8008aec:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8008af0:	461a      	mov	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d807      	bhi.n	8008b08 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	3338      	adds	r3, #56	; 0x38
 8008afe:	443b      	add	r3, r7
 8008b00:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008b04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b06:	e005      	b.n	8008b14 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d9e7      	bls.n	8008ae4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008b14:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <RCC_SetFlashLatency+0x100>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f023 0207 	bic.w	r2, r3, #7
 8008b1c:	4911      	ldr	r1, [pc, #68]	; (8008b64 <RCC_SetFlashLatency+0x100>)
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b20:	4313      	orrs	r3, r2
 8008b22:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b24:	f7f9 fda8 	bl	8002678 <HAL_GetTick>
 8008b28:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008b2a:	e008      	b.n	8008b3e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008b2c:	f7f9 fda4 	bl	8002678 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d901      	bls.n	8008b3e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e007      	b.n	8008b4e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008b3e:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <RCC_SetFlashLatency+0x100>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d1ef      	bne.n	8008b2c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3738      	adds	r7, #56	; 0x38
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	0801553c 	.word	0x0801553c
 8008b5c:	08015544 	.word	0x08015544
 8008b60:	0801554c 	.word	0x0801554c
 8008b64:	58004000 	.word	0x58004000

08008b68 <LL_RCC_LSE_IsReady>:
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d101      	bne.n	8008b80 <LL_RCC_LSE_IsReady+0x18>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e000      	b.n	8008b82 <LL_RCC_LSE_IsReady+0x1a>
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bc80      	pop	{r7}
 8008b88:	4770      	bx	lr

08008b8a <LL_RCC_SetUSARTClockSource>:
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8008b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	0c1b      	lsrs	r3, r3, #16
 8008b9e:	43db      	mvns	r3, r3
 8008ba0:	401a      	ands	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008baa:	4313      	orrs	r3, r2
 8008bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bc80      	pop	{r7}
 8008bb8:	4770      	bx	lr

08008bba <LL_RCC_SetI2SClockSource>:
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b083      	sub	sp, #12
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8008bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008bda:	bf00      	nop
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bc80      	pop	{r7}
 8008be2:	4770      	bx	lr

08008be4 <LL_RCC_SetLPUARTClockSource>:
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bc80      	pop	{r7}
 8008c0c:	4770      	bx	lr

08008c0e <LL_RCC_SetI2CClockSource>:
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8008c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	091b      	lsrs	r3, r3, #4
 8008c22:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008c26:	43db      	mvns	r3, r3
 8008c28:	401a      	ands	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	011b      	lsls	r3, r3, #4
 8008c2e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c36:	4313      	orrs	r3, r2
 8008c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr

08008c46 <LL_RCC_SetLPTIMClockSource>:
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	0c1b      	lsrs	r3, r3, #16
 8008c5a:	041b      	lsls	r3, r3, #16
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	401a      	ands	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	041b      	lsls	r3, r3, #16
 8008c64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bc80      	pop	{r7}
 8008c76:	4770      	bx	lr

08008c78 <LL_RCC_SetRNGClockSource>:
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c88:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bc80      	pop	{r7}
 8008ca0:	4770      	bx	lr

08008ca2 <LL_RCC_SetADCClockSource>:
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b083      	sub	sp, #12
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008cc2:	bf00      	nop
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bc80      	pop	{r7}
 8008cca:	4770      	bx	lr

08008ccc <LL_RCC_SetRTCClockSource>:
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ce0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr

08008cf6 <LL_RCC_GetRTCClockSource>:
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc80      	pop	{r7}
 8008d0c:	4770      	bx	lr

08008d0e <LL_RCC_ForceBackupDomainReset>:
{
 8008d0e:	b480      	push	{r7}
 8008d10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008d26:	bf00      	nop
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bc80      	pop	{r7}
 8008d2c:	4770      	bx	lr

08008d2e <LL_RCC_ReleaseBackupDomainReset>:
{
 8008d2e:	b480      	push	{r7}
 8008d30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008d46:	bf00      	nop
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bc80      	pop	{r7}
 8008d4c:	4770      	bx	lr
	...

08008d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008d60:	2300      	movs	r3, #0
 8008d62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d058      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8008d70:	f7fe fd64 	bl	800783c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d74:	f7f9 fc80 	bl	8002678 <HAL_GetTick>
 8008d78:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008d7a:	e009      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d7c:	f7f9 fc7c 	bl	8002678 <HAL_GetTick>
 8008d80:	4602      	mov	r2, r0
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d902      	bls.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	74fb      	strb	r3, [r7, #19]
        break;
 8008d8e:	e006      	b.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8008d90:	4b7b      	ldr	r3, [pc, #492]	; (8008f80 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d9c:	d1ee      	bne.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8008d9e:	7cfb      	ldrb	r3, [r7, #19]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d13c      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8008da4:	f7ff ffa7 	bl	8008cf6 <LL_RCC_GetRTCClockSource>
 8008da8:	4602      	mov	r2, r0
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d00f      	beq.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dbe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008dc0:	f7ff ffa5 	bl	8008d0e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dc4:	f7ff ffb3 	bl	8008d2e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d014      	beq.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ddc:	f7f9 fc4c 	bl	8002678 <HAL_GetTick>
 8008de0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8008de2:	e00b      	b.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008de4:	f7f9 fc48 	bl	8002678 <HAL_GetTick>
 8008de8:	4602      	mov	r2, r0
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d902      	bls.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	74fb      	strb	r3, [r7, #19]
            break;
 8008dfa:	e004      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8008dfc:	f7ff feb4 	bl	8008b68 <LL_RCC_LSE_IsReady>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d1ee      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8008e06:	7cfb      	ldrb	r3, [r7, #19]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d105      	bne.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7ff ff5b 	bl	8008ccc <LL_RCC_SetRTCClockSource>
 8008e16:	e004      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e18:	7cfb      	ldrb	r3, [r7, #19]
 8008e1a:	74bb      	strb	r3, [r7, #18]
 8008e1c:	e001      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1e:	7cfb      	ldrb	r3, [r7, #19]
 8008e20:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff fea9 	bl	8008b8a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff fe9e 	bl	8008b8a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d004      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fec0 	bl	8008be4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d004      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff fee6 	bl	8008c46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fedb 	bl	8008c46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d004      	beq.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff fed0 	bl	8008c46 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d004      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	695b      	ldr	r3, [r3, #20]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7ff fea9 	bl	8008c0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7ff fe9e 	bl	8008c0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d004      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff fe93 	bl	8008c0e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0310 	and.w	r3, r3, #16
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d011      	beq.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fe5e 	bl	8008bba <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f06:	d107      	bne.n	8008f18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8008f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d010      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f7ff fea5 	bl	8008c78 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d107      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d011      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7ff fea3 	bl	8008ca2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f64:	d107      	bne.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f74:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8008f76:	7cbb      	ldrb	r3, [r7, #18]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3718      	adds	r7, #24
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	58000400 	.word	0x58000400

08008f84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d068      	beq.n	8009068 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7f9 f986 	bl	80022bc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fb8:	4b2e      	ldr	r3, [pc, #184]	; (8009074 <HAL_RTC_Init+0xf0>)
 8008fba:	22ca      	movs	r2, #202	; 0xca
 8008fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8008fbe:	4b2d      	ldr	r3, [pc, #180]	; (8009074 <HAL_RTC_Init+0xf0>)
 8008fc0:	2253      	movs	r2, #83	; 0x53
 8008fc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fa0f 	bl	80093e8 <RTC_EnterInitMode>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008fce:	7bfb      	ldrb	r3, [r7, #15]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d13f      	bne.n	8009054 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8008fd4:	4b27      	ldr	r3, [pc, #156]	; (8009074 <HAL_RTC_Init+0xf0>)
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	4a26      	ldr	r2, [pc, #152]	; (8009074 <HAL_RTC_Init+0xf0>)
 8008fda:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8008fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fe2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8008fe4:	4b23      	ldr	r3, [pc, #140]	; (8009074 <HAL_RTC_Init+0xf0>)
 8008fe6:	699a      	ldr	r2, [r3, #24]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6859      	ldr	r1, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	4319      	orrs	r1, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	491e      	ldr	r1, [pc, #120]	; (8009074 <HAL_RTC_Init+0xf0>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	041b      	lsls	r3, r3, #16
 8009008:	491a      	ldr	r1, [pc, #104]	; (8009074 <HAL_RTC_Init+0xf0>)
 800900a:	4313      	orrs	r3, r2
 800900c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800900e:	4b19      	ldr	r3, [pc, #100]	; (8009074 <HAL_RTC_Init+0xf0>)
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800901e:	430b      	orrs	r3, r1
 8009020:	4914      	ldr	r1, [pc, #80]	; (8009074 <HAL_RTC_Init+0xf0>)
 8009022:	4313      	orrs	r3, r2
 8009024:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fa12 	bl	8009450 <RTC_ExitInitMode>
 800902c:	4603      	mov	r3, r0
 800902e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009030:	7bfb      	ldrb	r3, [r7, #15]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d10e      	bne.n	8009054 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8009036:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <HAL_RTC_Init+0xf0>)
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a19      	ldr	r1, [r3, #32]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	4319      	orrs	r1, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	430b      	orrs	r3, r1
 800904e:	4909      	ldr	r1, [pc, #36]	; (8009074 <HAL_RTC_Init+0xf0>)
 8009050:	4313      	orrs	r3, r2
 8009052:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009054:	4b07      	ldr	r3, [pc, #28]	; (8009074 <HAL_RTC_Init+0xf0>)
 8009056:	22ff      	movs	r2, #255	; 0xff
 8009058:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d103      	bne.n	8009068 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8009068:	7bfb      	ldrb	r3, [r7, #15]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40002800 	.word	0x40002800

08009078 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009078:	b590      	push	{r4, r7, lr}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_RTC_SetAlarm_IT+0x1e>
 8009092:	2302      	movs	r3, #2
 8009094:	e0f3      	b.n	800927e <HAL_RTC_SetAlarm_IT+0x206>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2202      	movs	r2, #2
 80090a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80090a6:	4b78      	ldr	r3, [pc, #480]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ae:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090b6:	d06a      	beq.n	800918e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d13a      	bne.n	8009134 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80090be:	4b72      	ldr	r3, [pc, #456]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d102      	bne.n	80090d0 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2200      	movs	r2, #0
 80090ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	781b      	ldrb	r3, [r3, #0]
 80090dc:	4618      	mov	r0, r3
 80090de:	f000 f9f5 	bl	80094cc <RTC_ByteToBcd2>
 80090e2:	4603      	mov	r3, r0
 80090e4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	785b      	ldrb	r3, [r3, #1]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 f9ee 	bl	80094cc <RTC_ByteToBcd2>
 80090f0:	4603      	mov	r3, r0
 80090f2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80090f4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	789b      	ldrb	r3, [r3, #2]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 f9e6 	bl	80094cc <RTC_ByteToBcd2>
 8009100:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009102:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	78db      	ldrb	r3, [r3, #3]
 800910a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800910c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009116:	4618      	mov	r0, r3
 8009118:	f000 f9d8 	bl	80094cc <RTC_ByteToBcd2>
 800911c:	4603      	mov	r3, r0
 800911e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009120:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009128:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800912e:	4313      	orrs	r3, r2
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	e02c      	b.n	800918e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800913c:	d00d      	beq.n	800915a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009146:	d008      	beq.n	800915a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009148:	4b4f      	ldr	r3, [pc, #316]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	2200      	movs	r2, #0
 8009158:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009166:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800916c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	78db      	ldrb	r3, [r3, #3]
 8009172:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009174:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800917c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800917e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009184:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800918a:	4313      	orrs	r3, r2
 800918c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800918e:	4b3e      	ldr	r3, [pc, #248]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009190:	22ca      	movs	r2, #202	; 0xca
 8009192:	625a      	str	r2, [r3, #36]	; 0x24
 8009194:	4b3c      	ldr	r3, [pc, #240]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009196:	2253      	movs	r2, #83	; 0x53
 8009198:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a2:	d12c      	bne.n	80091fe <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80091a4:	4b38      	ldr	r3, [pc, #224]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091a6:	699b      	ldr	r3, [r3, #24]
 80091a8:	4a37      	ldr	r2, [pc, #220]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80091ae:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80091b0:	4b35      	ldr	r3, [pc, #212]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091b2:	2201      	movs	r2, #1
 80091b4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091bc:	d107      	bne.n	80091ce <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	4930      	ldr	r1, [pc, #192]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	644b      	str	r3, [r1, #68]	; 0x44
 80091cc:	e006      	b.n	80091dc <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80091ce:	4a2e      	ldr	r2, [pc, #184]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80091d4:	4a2c      	ldr	r2, [pc, #176]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80091dc:	4a2a      	ldr	r2, [pc, #168]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	f043 0201 	orr.w	r2, r3, #1
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80091f0:	4b25      	ldr	r3, [pc, #148]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	4a24      	ldr	r2, [pc, #144]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 80091f6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80091fa:	6193      	str	r3, [r2, #24]
 80091fc:	e02b      	b.n	8009256 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80091fe:	4b22      	ldr	r3, [pc, #136]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	4a21      	ldr	r2, [pc, #132]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009204:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009208:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800920a:	4b1f      	ldr	r3, [pc, #124]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 800920c:	2202      	movs	r2, #2
 800920e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009216:	d107      	bne.n	8009228 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	699a      	ldr	r2, [r3, #24]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	4919      	ldr	r1, [pc, #100]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009222:	4313      	orrs	r3, r2
 8009224:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009226:	e006      	b.n	8009236 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009228:	4a17      	ldr	r2, [pc, #92]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800922e:	4a16      	ldr	r2, [pc, #88]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8009236:	4a14      	ldr	r2, [pc, #80]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	f043 0202 	orr.w	r2, r3, #2
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800924a:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	4a0e      	ldr	r2, [pc, #56]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009250:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8009254:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009256:	4b0d      	ldr	r3, [pc, #52]	; (800928c <HAL_RTC_SetAlarm_IT+0x214>)
 8009258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800925c:	4a0b      	ldr	r2, [pc, #44]	; (800928c <HAL_RTC_SetAlarm_IT+0x214>)
 800925e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009262:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009266:	4b08      	ldr	r3, [pc, #32]	; (8009288 <HAL_RTC_SetAlarm_IT+0x210>)
 8009268:	22ff      	movs	r2, #255	; 0xff
 800926a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	bd90      	pop	{r4, r7, pc}
 8009286:	bf00      	nop
 8009288:	40002800 	.word	0x40002800
 800928c:	58000800 	.word	0x58000800

08009290 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d101      	bne.n	80092a8 <HAL_RTC_DeactivateAlarm+0x18>
 80092a4:	2302      	movs	r3, #2
 80092a6:	e048      	b.n	800933a <HAL_RTC_DeactivateAlarm+0xaa>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2202      	movs	r2, #2
 80092b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092b8:	4b22      	ldr	r3, [pc, #136]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092ba:	22ca      	movs	r2, #202	; 0xca
 80092bc:	625a      	str	r2, [r3, #36]	; 0x24
 80092be:	4b21      	ldr	r3, [pc, #132]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092c0:	2253      	movs	r2, #83	; 0x53
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ca:	d115      	bne.n	80092f8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80092cc:	4b1d      	ldr	r3, [pc, #116]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	4a1c      	ldr	r2, [pc, #112]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80092d6:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80092d8:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092dc:	4a19      	ldr	r2, [pc, #100]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092e2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092e8:	f023 0201 	bic.w	r2, r3, #1
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80092f0:	4b14      	ldr	r3, [pc, #80]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092f2:	2201      	movs	r2, #1
 80092f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80092f6:	e014      	b.n	8009322 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80092f8:	4b12      	ldr	r3, [pc, #72]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092fa:	699b      	ldr	r3, [r3, #24]
 80092fc:	4a11      	ldr	r2, [pc, #68]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 80092fe:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009302:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009308:	4a0e      	ldr	r2, [pc, #56]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 800930a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800930e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009314:	f023 0202 	bic.w	r2, r3, #2
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800931c:	4b09      	ldr	r3, [pc, #36]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 800931e:	2202      	movs	r2, #2
 8009320:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009322:	4b08      	ldr	r3, [pc, #32]	; (8009344 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009324:	22ff      	movs	r2, #255	; 0xff
 8009326:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	370c      	adds	r7, #12
 800933e:	46bd      	mov	sp, r7
 8009340:	bc80      	pop	{r7}
 8009342:	4770      	bx	lr
 8009344:	40002800 	.word	0x40002800

08009348 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8009350:	4b11      	ldr	r3, [pc, #68]	; (8009398 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009352:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	4013      	ands	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b00      	cmp	r3, #0
 8009364:	d005      	beq.n	8009372 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009366:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009368:	2201      	movs	r2, #1
 800936a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f7f9 fbca 	bl	8002b06 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f003 0302 	and.w	r3, r3, #2
 8009378:	2b00      	cmp	r3, #0
 800937a:	d005      	beq.n	8009388 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800937c:	4b06      	ldr	r3, [pc, #24]	; (8009398 <HAL_RTC_AlarmIRQHandler+0x50>)
 800937e:	2202      	movs	r2, #2
 8009380:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f94a 	bl	800961c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009390:	bf00      	nop
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40002800 	.word	0x40002800

0800939c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80093a4:	4b0f      	ldr	r3, [pc, #60]	; (80093e4 <HAL_RTC_WaitForSynchro+0x48>)
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	4a0e      	ldr	r2, [pc, #56]	; (80093e4 <HAL_RTC_WaitForSynchro+0x48>)
 80093aa:	f023 0320 	bic.w	r3, r3, #32
 80093ae:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80093b0:	f7f9 f962 	bl	8002678 <HAL_GetTick>
 80093b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093b6:	e009      	b.n	80093cc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093b8:	f7f9 f95e 	bl	8002678 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093c6:	d901      	bls.n	80093cc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e006      	b.n	80093da <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80093cc:	4b05      	ldr	r3, [pc, #20]	; (80093e4 <HAL_RTC_WaitForSynchro+0x48>)
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0ef      	beq.n	80093b8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	40002800 	.word	0x40002800

080093e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80093f4:	4b15      	ldr	r3, [pc, #84]	; (800944c <RTC_EnterInitMode+0x64>)
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d120      	bne.n	8009442 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009400:	4b12      	ldr	r3, [pc, #72]	; (800944c <RTC_EnterInitMode+0x64>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4a11      	ldr	r2, [pc, #68]	; (800944c <RTC_EnterInitMode+0x64>)
 8009406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800940a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800940c:	f7f9 f934 	bl	8002678 <HAL_GetTick>
 8009410:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009412:	e00d      	b.n	8009430 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009414:	f7f9 f930 	bl	8002678 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009422:	d905      	bls.n	8009430 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2203      	movs	r2, #3
 800942c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009430:	4b06      	ldr	r3, [pc, #24]	; (800944c <RTC_EnterInitMode+0x64>)
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <RTC_EnterInitMode+0x5a>
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	2b03      	cmp	r3, #3
 8009440:	d1e8      	bne.n	8009414 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009442:	7bfb      	ldrb	r3, [r7, #15]
}
 8009444:	4618      	mov	r0, r3
 8009446:	3710      	adds	r7, #16
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	40002800 	.word	0x40002800

08009450 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800945c:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <RTC_ExitInitMode+0x78>)
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	4a19      	ldr	r2, [pc, #100]	; (80094c8 <RTC_ExitInitMode+0x78>)
 8009462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009466:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009468:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <RTC_ExitInitMode+0x78>)
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	f003 0320 	and.w	r3, r3, #32
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10c      	bne.n	800948e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ff91 	bl	800939c <HAL_RTC_WaitForSynchro>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d01e      	beq.n	80094be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2203      	movs	r2, #3
 8009484:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	73fb      	strb	r3, [r7, #15]
 800948c:	e017      	b.n	80094be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800948e:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <RTC_ExitInitMode+0x78>)
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	4a0d      	ldr	r2, [pc, #52]	; (80094c8 <RTC_ExitInitMode+0x78>)
 8009494:	f023 0320 	bic.w	r3, r3, #32
 8009498:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff ff7e 	bl	800939c <HAL_RTC_WaitForSynchro>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d005      	beq.n	80094b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2203      	movs	r2, #3
 80094aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <RTC_ExitInitMode+0x78>)
 80094b4:	699b      	ldr	r3, [r3, #24]
 80094b6:	4a04      	ldr	r2, [pc, #16]	; (80094c8 <RTC_ExitInitMode+0x78>)
 80094b8:	f043 0320 	orr.w	r3, r3, #32
 80094bc:	6193      	str	r3, [r2, #24]
  }

  return status;
 80094be:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40002800 	.word	0x40002800

080094cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	4603      	mov	r3, r0
 80094d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80094de:	e005      	b.n	80094ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3301      	adds	r3, #1
 80094e4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80094e6:	7afb      	ldrb	r3, [r7, #11]
 80094e8:	3b0a      	subs	r3, #10
 80094ea:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	2b09      	cmp	r3, #9
 80094f0:	d8f6      	bhi.n	80094e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	011b      	lsls	r3, r3, #4
 80094f8:	b2da      	uxtb	r2, r3
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	b2db      	uxtb	r3, r3
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
	...

0800950c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800951a:	2b01      	cmp	r3, #1
 800951c:	d101      	bne.n	8009522 <HAL_RTCEx_EnableBypassShadow+0x16>
 800951e:	2302      	movs	r3, #2
 8009520:	e01f      	b.n	8009562 <HAL_RTCEx_EnableBypassShadow+0x56>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2202      	movs	r2, #2
 800952e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009532:	4b0e      	ldr	r3, [pc, #56]	; (800956c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009534:	22ca      	movs	r2, #202	; 0xca
 8009536:	625a      	str	r2, [r3, #36]	; 0x24
 8009538:	4b0c      	ldr	r3, [pc, #48]	; (800956c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800953a:	2253      	movs	r2, #83	; 0x53
 800953c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800953e:	4b0b      	ldr	r3, [pc, #44]	; (800956c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	4a0a      	ldr	r2, [pc, #40]	; (800956c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009544:	f043 0320 	orr.w	r3, r3, #32
 8009548:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800954a:	4b08      	ldr	r3, [pc, #32]	; (800956c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	bc80      	pop	{r7}
 800956a:	4770      	bx	lr
 800956c:	40002800 	.word	0x40002800

08009570 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800957e:	2b01      	cmp	r3, #1
 8009580:	d101      	bne.n	8009586 <HAL_RTCEx_SetSSRU_IT+0x16>
 8009582:	2302      	movs	r3, #2
 8009584:	e027      	b.n	80095d6 <HAL_RTCEx_SetSSRU_IT+0x66>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2202      	movs	r2, #2
 8009592:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009596:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8009598:	22ca      	movs	r2, #202	; 0xca
 800959a:	625a      	str	r2, [r3, #36]	; 0x24
 800959c:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800959e:	2253      	movs	r2, #83	; 0x53
 80095a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80095a2:	4b0f      	ldr	r3, [pc, #60]	; (80095e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	4a0e      	ldr	r2, [pc, #56]	; (80095e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80095a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ac:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80095ae:	4b0d      	ldr	r3, [pc, #52]	; (80095e4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80095b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095b4:	4a0b      	ldr	r2, [pc, #44]	; (80095e4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80095b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80095ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095be:	4b08      	ldr	r3, [pc, #32]	; (80095e0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80095c0:	22ff      	movs	r2, #255	; 0xff
 80095c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	370c      	adds	r7, #12
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr
 80095e0:	40002800 	.word	0x40002800
 80095e4:	58000800 	.word	0x58000800

080095e8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80095f0:	4b09      	ldr	r3, [pc, #36]	; (8009618 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80095f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d005      	beq.n	8009608 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80095fe:	2240      	movs	r2, #64	; 0x40
 8009600:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7f9 fa89 	bl	8002b1a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	40002800 	.word	0x40002800

0800961c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	bc80      	pop	{r7}
 800962c:	4770      	bx	lr
	...

08009630 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009630:	b480      	push	{r7}
 8009632:	b087      	sub	sp, #28
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800963c:	4b07      	ldr	r3, [pc, #28]	; (800965c <HAL_RTCEx_BKUPWrite+0x2c>)
 800963e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4413      	add	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
}
 8009650:	bf00      	nop
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	4000b100 	.word	0x4000b100

08009660 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <HAL_RTCEx_BKUPRead+0x28>)
 800966c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4413      	add	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	bc80      	pop	{r7}
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	4000b100 	.word	0x4000b100

0800968c <LL_PWR_SetRadioBusyTrigger>:
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009694:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800969c:	4904      	ldr	r1, [pc, #16]	; (80096b0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	608b      	str	r3, [r1, #8]
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bc80      	pop	{r7}
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	58000400 	.word	0x58000400

080096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80096b4:	b480      	push	{r7}
 80096b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80096b8:	4b05      	ldr	r3, [pc, #20]	; (80096d0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80096ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096be:	4a04      	ldr	r2, [pc, #16]	; (80096d0 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80096c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80096c8:	bf00      	nop
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bc80      	pop	{r7}
 80096ce:	4770      	bx	lr
 80096d0:	58000400 	.word	0x58000400

080096d4 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80096d8:	4b05      	ldr	r3, [pc, #20]	; (80096f0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80096da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096de:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80096e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80096e8:	bf00      	nop
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bc80      	pop	{r7}
 80096ee:	4770      	bx	lr
 80096f0:	58000400 	.word	0x58000400

080096f4 <LL_PWR_ClearFlag_RFBUSY>:
{
 80096f4:	b480      	push	{r7}
 80096f6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80096f8:	4b03      	ldr	r3, [pc, #12]	; (8009708 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80096fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096fe:	619a      	str	r2, [r3, #24]
}
 8009700:	bf00      	nop
 8009702:	46bd      	mov	sp, r7
 8009704:	bc80      	pop	{r7}
 8009706:	4770      	bx	lr
 8009708:	58000400 	.word	0x58000400

0800970c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009710:	4b06      	ldr	r3, [pc, #24]	; (800972c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	2b02      	cmp	r3, #2
 800971a:	d101      	bne.n	8009720 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800971c:	2301      	movs	r3, #1
 800971e:	e000      	b.n	8009722 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	58000400 	.word	0x58000400

08009730 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009734:	4b06      	ldr	r3, [pc, #24]	; (8009750 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009736:	695b      	ldr	r3, [r3, #20]
 8009738:	f003 0304 	and.w	r3, r3, #4
 800973c:	2b04      	cmp	r3, #4
 800973e:	d101      	bne.n	8009744 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	46bd      	mov	sp, r7
 800974a:	bc80      	pop	{r7}
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	58000400 	.word	0x58000400

08009754 <LL_RCC_RF_DisableReset>:
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800975c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009764:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800976c:	bf00      	nop
 800976e:	46bd      	mov	sp, r7
 8009770:	bc80      	pop	{r7}
 8009772:	4770      	bx	lr

08009774 <LL_RCC_IsRFUnderReset>:
{
 8009774:	b480      	push	{r7}
 8009776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800977c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009788:	d101      	bne.n	800978e <LL_RCC_IsRFUnderReset+0x1a>
 800978a:	2301      	movs	r3, #1
 800978c:	e000      	b.n	8009790 <LL_RCC_IsRFUnderReset+0x1c>
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	46bd      	mov	sp, r7
 8009794:	bc80      	pop	{r7}
 8009796:	4770      	bx	lr

08009798 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80097a0:	4b06      	ldr	r3, [pc, #24]	; (80097bc <LL_EXTI_EnableIT_32_63+0x24>)
 80097a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80097a6:	4905      	ldr	r1, [pc, #20]	; (80097bc <LL_EXTI_EnableIT_32_63+0x24>)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bc80      	pop	{r7}
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	58000800 	.word	0x58000800

080097c0 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d103      	bne.n	80097d6 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	73fb      	strb	r3, [r7, #15]
    return status;
 80097d2:	7bfb      	ldrb	r3, [r7, #15]
 80097d4:	e04b      	b.n	800986e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	799b      	ldrb	r3, [r3, #6]
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d105      	bne.n	80097f0 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7f8 fea8 	bl	8002540 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2202      	movs	r2, #2
 80097f4:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 80097f6:	f7ff ffad 	bl	8009754 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80097fa:	4b1f      	ldr	r3, [pc, #124]	; (8009878 <HAL_SUBGHZ_Init+0xb8>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	4613      	mov	r3, r2
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	1a9b      	subs	r3, r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	0cdb      	lsrs	r3, r3, #19
 8009808:	2264      	movs	r2, #100	; 0x64
 800980a:	fb02 f303 	mul.w	r3, r2, r3
 800980e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d105      	bne.n	8009822 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	609a      	str	r2, [r3, #8]
      break;
 8009820:	e007      	b.n	8009832 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3b01      	subs	r3, #1
 8009826:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009828:	f7ff ffa4 	bl	8009774 <LL_RCC_IsRFUnderReset>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1ee      	bne.n	8009810 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8009832:	f7ff ff3f 	bl	80096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009836:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800983a:	f7ff ffad 	bl	8009798 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800983e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009842:	f7ff ff23 	bl	800968c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009846:	f7ff ff55 	bl	80096f4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800984a:	7bfb      	ldrb	r3, [r7, #15]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4618      	mov	r0, r3
 8009856:	f000 faad 	bl	8009db4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	719a      	strb	r2, [r3, #6]

  return status;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20000040 	.word	0x20000040

0800987c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	607a      	str	r2, [r7, #4]
 8009886:	461a      	mov	r2, r3
 8009888:	460b      	mov	r3, r1
 800988a:	817b      	strh	r3, [r7, #10]
 800988c:	4613      	mov	r3, r2
 800988e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	799b      	ldrb	r3, [r3, #6]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b01      	cmp	r3, #1
 8009898:	d14a      	bne.n	8009930 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	795b      	ldrb	r3, [r3, #5]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d101      	bne.n	80098a6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80098a2:	2302      	movs	r3, #2
 80098a4:	e045      	b.n	8009932 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2201      	movs	r2, #1
 80098aa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2202      	movs	r2, #2
 80098b0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 fb4c 	bl	8009f50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80098b8:	f7ff ff0c 	bl	80096d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80098bc:	210d      	movs	r1, #13
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f000 fa98 	bl	8009df4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80098c4:	897b      	ldrh	r3, [r7, #10]
 80098c6:	0a1b      	lsrs	r3, r3, #8
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	4619      	mov	r1, r3
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 fa90 	bl	8009df4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80098d4:	897b      	ldrh	r3, [r7, #10]
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	4619      	mov	r1, r3
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f000 fa8a 	bl	8009df4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80098e0:	2300      	movs	r3, #0
 80098e2:	82bb      	strh	r3, [r7, #20]
 80098e4:	e00a      	b.n	80098fc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80098e6:	8abb      	ldrh	r3, [r7, #20]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	4413      	add	r3, r2
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	4619      	mov	r1, r3
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f000 fa7f 	bl	8009df4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80098f6:	8abb      	ldrh	r3, [r7, #20]
 80098f8:	3301      	adds	r3, #1
 80098fa:	82bb      	strh	r3, [r7, #20]
 80098fc:	8aba      	ldrh	r2, [r7, #20]
 80098fe:	893b      	ldrh	r3, [r7, #8]
 8009900:	429a      	cmp	r2, r3
 8009902:	d3f0      	bcc.n	80098e6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009904:	f7ff fed6 	bl	80096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 fb45 	bl	8009f98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	75fb      	strb	r3, [r7, #23]
 800991a:	e001      	b.n	8009920 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2201      	movs	r2, #1
 8009924:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	715a      	strb	r2, [r3, #5]

    return status;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	e000      	b.n	8009932 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009930:	2302      	movs	r3, #2
  }
}
 8009932:	4618      	mov	r0, r3
 8009934:	3718      	adds	r7, #24
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b088      	sub	sp, #32
 800993e:	af00      	add	r7, sp, #0
 8009940:	60f8      	str	r0, [r7, #12]
 8009942:	607a      	str	r2, [r7, #4]
 8009944:	461a      	mov	r2, r3
 8009946:	460b      	mov	r3, r1
 8009948:	817b      	strh	r3, [r7, #10]
 800994a:	4613      	mov	r3, r2
 800994c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	799b      	ldrb	r3, [r3, #6]
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b01      	cmp	r3, #1
 800995a:	d14a      	bne.n	80099f2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	795b      	ldrb	r3, [r3, #5]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009964:	2302      	movs	r3, #2
 8009966:	e045      	b.n	80099f4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2201      	movs	r2, #1
 800996c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f000 faee 	bl	8009f50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009974:	f7ff feae 	bl	80096d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009978:	211d      	movs	r1, #29
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 fa3a 	bl	8009df4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009980:	897b      	ldrh	r3, [r7, #10]
 8009982:	0a1b      	lsrs	r3, r3, #8
 8009984:	b29b      	uxth	r3, r3
 8009986:	b2db      	uxtb	r3, r3
 8009988:	4619      	mov	r1, r3
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fa32 	bl	8009df4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009990:	897b      	ldrh	r3, [r7, #10]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	4619      	mov	r1, r3
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f000 fa2c 	bl	8009df4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fa28 	bl	8009df4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80099a4:	2300      	movs	r3, #0
 80099a6:	82fb      	strh	r3, [r7, #22]
 80099a8:	e009      	b.n	80099be <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80099aa:	69b9      	ldr	r1, [r7, #24]
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f000 fa77 	bl	8009ea0 <SUBGHZSPI_Receive>
      pData++;
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	3301      	adds	r3, #1
 80099b6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80099b8:	8afb      	ldrh	r3, [r7, #22]
 80099ba:	3301      	adds	r3, #1
 80099bc:	82fb      	strh	r3, [r7, #22]
 80099be:	8afa      	ldrh	r2, [r7, #22]
 80099c0:	893b      	ldrh	r3, [r7, #8]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d3f1      	bcc.n	80099aa <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80099c6:	f7ff fe75 	bl	80096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f000 fae4 	bl	8009f98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	77fb      	strb	r3, [r7, #31]
 80099dc:	e001      	b.n	80099e2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	715a      	strb	r2, [r3, #5]

    return status;
 80099ee:	7ffb      	ldrb	r3, [r7, #31]
 80099f0:	e000      	b.n	80099f4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80099f2:	2302      	movs	r3, #2
  }
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3720      	adds	r7, #32
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	461a      	mov	r2, r3
 8009a08:	460b      	mov	r3, r1
 8009a0a:	72fb      	strb	r3, [r7, #11]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	799b      	ldrb	r3, [r3, #6]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d14a      	bne.n	8009ab0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	795b      	ldrb	r3, [r3, #5]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d101      	bne.n	8009a26 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8009a22:	2302      	movs	r3, #2
 8009a24:	e045      	b.n	8009ab2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fa8f 	bl	8009f50 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8009a32:	7afb      	ldrb	r3, [r7, #11]
 8009a34:	2b84      	cmp	r3, #132	; 0x84
 8009a36:	d002      	beq.n	8009a3e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	2b94      	cmp	r3, #148	; 0x94
 8009a3c:	d103      	bne.n	8009a46 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2201      	movs	r2, #1
 8009a42:	711a      	strb	r2, [r3, #4]
 8009a44:	e002      	b.n	8009a4c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009a4c:	f7ff fe42 	bl	80096d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009a50:	7afb      	ldrb	r3, [r7, #11]
 8009a52:	4619      	mov	r1, r3
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 f9cd 	bl	8009df4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	82bb      	strh	r3, [r7, #20]
 8009a5e:	e00a      	b.n	8009a76 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009a60:	8abb      	ldrh	r3, [r7, #20]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	4413      	add	r3, r2
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f000 f9c2 	bl	8009df4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009a70:	8abb      	ldrh	r3, [r7, #20]
 8009a72:	3301      	adds	r3, #1
 8009a74:	82bb      	strh	r3, [r7, #20]
 8009a76:	8aba      	ldrh	r2, [r7, #20]
 8009a78:	893b      	ldrh	r3, [r7, #8]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d3f0      	bcc.n	8009a60 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009a7e:	f7ff fe19 	bl	80096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8009a82:	7afb      	ldrb	r3, [r7, #11]
 8009a84:	2b84      	cmp	r3, #132	; 0x84
 8009a86:	d002      	beq.n	8009a8e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 fa85 	bl	8009f98 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d002      	beq.n	8009a9c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	75fb      	strb	r3, [r7, #23]
 8009a9a:	e001      	b.n	8009aa0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	715a      	strb	r2, [r3, #5]

    return status;
 8009aac:	7dfb      	ldrb	r3, [r7, #23]
 8009aae:	e000      	b.n	8009ab2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009ab0:	2302      	movs	r3, #2
  }
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b088      	sub	sp, #32
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	60f8      	str	r0, [r7, #12]
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	72fb      	strb	r3, [r7, #11]
 8009aca:	4613      	mov	r3, r2
 8009acc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	799b      	ldrb	r3, [r3, #6]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d13d      	bne.n	8009b58 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	795b      	ldrb	r3, [r3, #5]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d101      	bne.n	8009ae8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	e038      	b.n	8009b5a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2201      	movs	r2, #1
 8009aec:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	f000 fa2e 	bl	8009f50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009af4:	f7ff fdee 	bl	80096d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8009af8:	7afb      	ldrb	r3, [r7, #11]
 8009afa:	4619      	mov	r1, r3
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f000 f979 	bl	8009df4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009b02:	2100      	movs	r1, #0
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f975 	bl	8009df4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	82fb      	strh	r3, [r7, #22]
 8009b0e:	e009      	b.n	8009b24 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009b10:	69b9      	ldr	r1, [r7, #24]
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f9c4 	bl	8009ea0 <SUBGHZSPI_Receive>
      pData++;
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009b1e:	8afb      	ldrh	r3, [r7, #22]
 8009b20:	3301      	adds	r3, #1
 8009b22:	82fb      	strh	r3, [r7, #22]
 8009b24:	8afa      	ldrh	r2, [r7, #22]
 8009b26:	893b      	ldrh	r3, [r7, #8]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d3f1      	bcc.n	8009b10 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009b2c:	f7ff fdc2 	bl	80096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fa31 	bl	8009f98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d002      	beq.n	8009b44 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	77fb      	strb	r3, [r7, #31]
 8009b42:	e001      	b.n	8009b48 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	715a      	strb	r2, [r3, #5]

    return status;
 8009b54:	7ffb      	ldrb	r3, [r7, #31]
 8009b56:	e000      	b.n	8009b5a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009b58:	2302      	movs	r3, #2
  }
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b086      	sub	sp, #24
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	60f8      	str	r0, [r7, #12]
 8009b6a:	607a      	str	r2, [r7, #4]
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	460b      	mov	r3, r1
 8009b70:	72fb      	strb	r3, [r7, #11]
 8009b72:	4613      	mov	r3, r2
 8009b74:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	799b      	ldrb	r3, [r3, #6]
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d13e      	bne.n	8009bfe <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	795b      	ldrb	r3, [r3, #5]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d101      	bne.n	8009b8c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	e039      	b.n	8009c00 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 f9dc 	bl	8009f50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009b98:	f7ff fd9c 	bl	80096d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8009b9c:	210e      	movs	r1, #14
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 f928 	bl	8009df4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f923 	bl	8009df4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009bae:	2300      	movs	r3, #0
 8009bb0:	82bb      	strh	r3, [r7, #20]
 8009bb2:	e00a      	b.n	8009bca <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009bb4:	8abb      	ldrh	r3, [r7, #20]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	4413      	add	r3, r2
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f918 	bl	8009df4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009bc4:	8abb      	ldrh	r3, [r7, #20]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	82bb      	strh	r3, [r7, #20]
 8009bca:	8aba      	ldrh	r2, [r7, #20]
 8009bcc:	893b      	ldrh	r3, [r7, #8]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d3f0      	bcc.n	8009bb4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009bd2:	f7ff fd6f 	bl	80096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f000 f9de 	bl	8009f98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	75fb      	strb	r3, [r7, #23]
 8009be8:	e001      	b.n	8009bee <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	715a      	strb	r2, [r3, #5]

    return status;
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	e000      	b.n	8009c00 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009bfe:	2302      	movs	r3, #2
  }
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b088      	sub	sp, #32
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	607a      	str	r2, [r7, #4]
 8009c12:	461a      	mov	r2, r3
 8009c14:	460b      	mov	r3, r1
 8009c16:	72fb      	strb	r3, [r7, #11]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	799b      	ldrb	r3, [r3, #6]
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d141      	bne.n	8009cae <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	795b      	ldrb	r3, [r3, #5]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d101      	bne.n	8009c36 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8009c32:	2302      	movs	r3, #2
 8009c34:	e03c      	b.n	8009cb0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 f987 	bl	8009f50 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009c42:	f7ff fd47 	bl	80096d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8009c46:	211e      	movs	r1, #30
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f000 f8d3 	bl	8009df4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8009c4e:	7afb      	ldrb	r3, [r7, #11]
 8009c50:	4619      	mov	r1, r3
 8009c52:	68f8      	ldr	r0, [r7, #12]
 8009c54:	f000 f8ce 	bl	8009df4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8009c58:	2100      	movs	r1, #0
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f000 f8ca 	bl	8009df4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009c60:	2300      	movs	r3, #0
 8009c62:	82fb      	strh	r3, [r7, #22]
 8009c64:	e009      	b.n	8009c7a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009c66:	69b9      	ldr	r1, [r7, #24]
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f000 f919 	bl	8009ea0 <SUBGHZSPI_Receive>
      pData++;
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	3301      	adds	r3, #1
 8009c72:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009c74:	8afb      	ldrh	r3, [r7, #22]
 8009c76:	3301      	adds	r3, #1
 8009c78:	82fb      	strh	r3, [r7, #22]
 8009c7a:	8afa      	ldrh	r2, [r7, #22]
 8009c7c:	893b      	ldrh	r3, [r7, #8]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d3f1      	bcc.n	8009c66 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009c82:	f7ff fd17 	bl	80096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 f986 	bl	8009f98 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d002      	beq.n	8009c9a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	77fb      	strb	r3, [r7, #31]
 8009c98:	e001      	b.n	8009c9e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	715a      	strb	r2, [r3, #5]

    return status;
 8009caa:	7ffb      	ldrb	r3, [r7, #31]
 8009cac:	e000      	b.n	8009cb0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8009cae:	2302      	movs	r3, #2
  }
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3720      	adds	r7, #32
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8009cc4:	f107 020c 	add.w	r2, r7, #12
 8009cc8:	2302      	movs	r3, #2
 8009cca:	2112      	movs	r1, #18
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff fef4 	bl	8009aba <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8009cd2:	7b3b      	ldrb	r3, [r7, #12]
 8009cd4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8009cd6:	89fb      	ldrh	r3, [r7, #14]
 8009cd8:	021b      	lsls	r3, r3, #8
 8009cda:	b21a      	sxth	r2, r3
 8009cdc:	7b7b      	ldrb	r3, [r7, #13]
 8009cde:	b21b      	sxth	r3, r3
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	b21b      	sxth	r3, r3
 8009ce4:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8009ce6:	89fb      	ldrh	r3, [r7, #14]
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f005 fcc9 	bl	800f688 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8009cf6:	89fb      	ldrh	r3, [r7, #14]
 8009cf8:	085b      	lsrs	r3, r3, #1
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f005 fcce 	bl	800f6a4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8009d08:	89fb      	ldrh	r3, [r7, #14]
 8009d0a:	089b      	lsrs	r3, r3, #2
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f005 fd1d 	bl	800f754 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8009d1a:	89fb      	ldrh	r3, [r7, #14]
 8009d1c:	08db      	lsrs	r3, r3, #3
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d002      	beq.n	8009d2c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f005 fd22 	bl	800f770 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8009d2c:	89fb      	ldrh	r3, [r7, #14]
 8009d2e:	091b      	lsrs	r3, r3, #4
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f005 fd27 	bl	800f78c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8009d3e:	89fb      	ldrh	r3, [r7, #14]
 8009d40:	095b      	lsrs	r3, r3, #5
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f005 fcf4 	bl	800f738 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8009d50:	89fb      	ldrh	r3, [r7, #14]
 8009d52:	099b      	lsrs	r3, r3, #6
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f005 fcaf 	bl	800f6c0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8009d62:	89fb      	ldrh	r3, [r7, #14]
 8009d64:	09db      	lsrs	r3, r3, #7
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00e      	beq.n	8009d8c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8009d6e:	89fb      	ldrh	r3, [r7, #14]
 8009d70:	0a1b      	lsrs	r3, r3, #8
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d004      	beq.n	8009d84 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f005 fcad 	bl	800f6dc <HAL_SUBGHZ_CADStatusCallback>
 8009d82:	e003      	b.n	8009d8c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8009d84:	2100      	movs	r1, #0
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f005 fca8 	bl	800f6dc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
 8009d8e:	0a5b      	lsrs	r3, r3, #9
 8009d90:	f003 0301 	and.w	r3, r3, #1
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f005 fcbd 	bl	800f718 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8009d9e:	f107 020c 	add.w	r2, r7, #12
 8009da2:	2302      	movs	r3, #2
 8009da4:	2102      	movs	r1, #2
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff fe28 	bl	80099fc <HAL_SUBGHZ_ExecSetCmd>
}
 8009dac:	bf00      	nop
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	; (8009df0 <SUBGHZSPI_Init+0x3c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a0b      	ldr	r2, [pc, #44]	; (8009df0 <SUBGHZSPI_Init+0x3c>)
 8009dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dc6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8009dc8:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <SUBGHZSPI_Init+0x3c>)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8009dd0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8009dd2:	4b07      	ldr	r3, [pc, #28]	; (8009df0 <SUBGHZSPI_Init+0x3c>)
 8009dd4:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8009dd8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8009dda:	4b05      	ldr	r3, [pc, #20]	; (8009df0 <SUBGHZSPI_Init+0x3c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a04      	ldr	r2, [pc, #16]	; (8009df0 <SUBGHZSPI_Init+0x3c>)
 8009de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de4:	6013      	str	r3, [r2, #0]
}
 8009de6:	bf00      	nop
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bc80      	pop	{r7}
 8009dee:	4770      	bx	lr
 8009df0:	58010000 	.word	0x58010000

08009df4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e04:	4b23      	ldr	r3, [pc, #140]	; (8009e94 <SUBGHZSPI_Transmit+0xa0>)
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	00db      	lsls	r3, r3, #3
 8009e0c:	1a9b      	subs	r3, r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	0cdb      	lsrs	r3, r3, #19
 8009e12:	2264      	movs	r2, #100	; 0x64
 8009e14:	fb02 f303 	mul.w	r3, r2, r3
 8009e18:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d105      	bne.n	8009e2c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	609a      	str	r2, [r3, #8]
      break;
 8009e2a:	e008      	b.n	8009e3e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009e32:	4b19      	ldr	r3, [pc, #100]	; (8009e98 <SUBGHZSPI_Transmit+0xa4>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d1ed      	bne.n	8009e1a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009e3e:	4b17      	ldr	r3, [pc, #92]	; (8009e9c <SUBGHZSPI_Transmit+0xa8>)
 8009e40:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	78fa      	ldrb	r2, [r7, #3]
 8009e46:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009e48:	4b12      	ldr	r3, [pc, #72]	; (8009e94 <SUBGHZSPI_Transmit+0xa0>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	0cdb      	lsrs	r3, r3, #19
 8009e56:	2264      	movs	r2, #100	; 0x64
 8009e58:	fb02 f303 	mul.w	r3, r2, r3
 8009e5c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d105      	bne.n	8009e70 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	609a      	str	r2, [r3, #8]
      break;
 8009e6e:	e008      	b.n	8009e82 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3b01      	subs	r3, #1
 8009e74:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009e76:	4b08      	ldr	r3, [pc, #32]	; (8009e98 <SUBGHZSPI_Transmit+0xa4>)
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d1ed      	bne.n	8009e5e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8009e82:	4b05      	ldr	r3, [pc, #20]	; (8009e98 <SUBGHZSPI_Transmit+0xa4>)
 8009e84:	68db      	ldr	r3, [r3, #12]

  return status;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	371c      	adds	r7, #28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bc80      	pop	{r7}
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20000040 	.word	0x20000040
 8009e98:	58010000 	.word	0x58010000
 8009e9c:	5801000c 	.word	0x5801000c

08009ea0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009eae:	4b25      	ldr	r3, [pc, #148]	; (8009f44 <SUBGHZSPI_Receive+0xa4>)
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	1a9b      	subs	r3, r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	0cdb      	lsrs	r3, r3, #19
 8009ebc:	2264      	movs	r2, #100	; 0x64
 8009ebe:	fb02 f303 	mul.w	r3, r2, r3
 8009ec2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d105      	bne.n	8009ed6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	609a      	str	r2, [r3, #8]
      break;
 8009ed4:	e008      	b.n	8009ee8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8009edc:	4b1a      	ldr	r3, [pc, #104]	; (8009f48 <SUBGHZSPI_Receive+0xa8>)
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d1ed      	bne.n	8009ec4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8009ee8:	4b18      	ldr	r3, [pc, #96]	; (8009f4c <SUBGHZSPI_Receive+0xac>)
 8009eea:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	22ff      	movs	r2, #255	; 0xff
 8009ef0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009ef2:	4b14      	ldr	r3, [pc, #80]	; (8009f44 <SUBGHZSPI_Receive+0xa4>)
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	0cdb      	lsrs	r3, r3, #19
 8009f00:	2264      	movs	r2, #100	; 0x64
 8009f02:	fb02 f303 	mul.w	r3, r2, r3
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d105      	bne.n	8009f1a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	609a      	str	r2, [r3, #8]
      break;
 8009f18:	e008      	b.n	8009f2c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8009f20:	4b09      	ldr	r3, [pc, #36]	; (8009f48 <SUBGHZSPI_Receive+0xa8>)
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f003 0301 	and.w	r3, r3, #1
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d1ed      	bne.n	8009f08 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8009f2c:	4b06      	ldr	r3, [pc, #24]	; (8009f48 <SUBGHZSPI_Receive+0xa8>)
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	701a      	strb	r2, [r3, #0]

  return status;
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bc80      	pop	{r7}
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20000040 	.word	0x20000040
 8009f48:	58010000 	.word	0x58010000
 8009f4c:	5801000c 	.word	0x5801000c

08009f50 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	791b      	ldrb	r3, [r3, #4]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d111      	bne.n	8009f84 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8009f60:	4b0c      	ldr	r3, [pc, #48]	; (8009f94 <SUBGHZ_CheckDeviceReady+0x44>)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	005b      	lsls	r3, r3, #1
 8009f68:	4413      	add	r3, r2
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	0c1b      	lsrs	r3, r3, #16
 8009f6e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f70:	f7ff fbb0 	bl	80096d4 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1f9      	bne.n	8009f74 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009f80:	f7ff fb98 	bl	80096b4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f807 	bl	8009f98 <SUBGHZ_WaitOnBusy>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	20000040 	.word	0x20000040

08009f98 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8009fa4:	4b12      	ldr	r3, [pc, #72]	; (8009ff0 <SUBGHZ_WaitOnBusy+0x58>)
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	4413      	add	r3, r2
 8009fae:	00db      	lsls	r3, r3, #3
 8009fb0:	0d1b      	lsrs	r3, r3, #20
 8009fb2:	2264      	movs	r2, #100	; 0x64
 8009fb4:	fb02 f303 	mul.w	r3, r2, r3
 8009fb8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8009fba:	f7ff fbb9 	bl	8009730 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8009fbe:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d105      	bne.n	8009fd2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2202      	movs	r2, #2
 8009fce:	609a      	str	r2, [r3, #8]
      break;
 8009fd0:	e009      	b.n	8009fe6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8009fd8:	f7ff fb98 	bl	800970c <LL_PWR_IsActiveFlag_RFBUSYS>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d0e9      	beq.n	8009fba <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8009fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	20000040 	.word	0x20000040

08009ff4 <LL_RCC_GetUSARTClockSource>:
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a000:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	401a      	ands	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	041b      	lsls	r3, r3, #16
 800a00c:	4313      	orrs	r3, r2
}
 800a00e:	4618      	mov	r0, r3
 800a010:	370c      	adds	r7, #12
 800a012:	46bd      	mov	sp, r7
 800a014:	bc80      	pop	{r7}
 800a016:	4770      	bx	lr

0800a018 <LL_RCC_GetLPUARTClockSource>:
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a024:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4013      	ands	r3, r2
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	bc80      	pop	{r7}
 800a034:	4770      	bx	lr

0800a036 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b082      	sub	sp, #8
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d101      	bne.n	800a048 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a044:	2301      	movs	r3, #1
 800a046:	e042      	b.n	800a0ce <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f7f8 ffb0 	bl	8002fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2224      	movs	r2, #36	; 0x24
 800a064:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f022 0201 	bic.w	r2, r2, #1
 800a076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fd91 	bl	800aba0 <UART_SetConfig>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b01      	cmp	r3, #1
 800a082:	d101      	bne.n	800a088 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e022      	b.n	800a0ce <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fff9 	bl	800b088 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689a      	ldr	r2, [r3, #8]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f042 0201 	orr.w	r2, r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 f87f 	bl	800b1ca <UART_CheckIdleState>
 800a0cc:	4603      	mov	r3, r0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b08a      	sub	sp, #40	; 0x28
 800a0da:	af02      	add	r7, sp, #8
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	603b      	str	r3, [r7, #0]
 800a0e2:	4613      	mov	r3, r2
 800a0e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	f040 8083 	bne.w	800a1f8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <HAL_UART_Transmit+0x28>
 800a0f8:	88fb      	ldrh	r3, [r7, #6]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e07b      	b.n	800a1fa <HAL_UART_Transmit+0x124>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d101      	bne.n	800a110 <HAL_UART_Transmit+0x3a>
 800a10c:	2302      	movs	r3, #2
 800a10e:	e074      	b.n	800a1fa <HAL_UART_Transmit+0x124>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2221      	movs	r2, #33	; 0x21
 800a124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a128:	f7f8 faa6 	bl	8002678 <HAL_GetTick>
 800a12c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	88fa      	ldrh	r2, [r7, #6]
 800a132:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	88fa      	ldrh	r2, [r7, #6]
 800a13a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a146:	d108      	bne.n	800a15a <HAL_UART_Transmit+0x84>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d104      	bne.n	800a15a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a150:	2300      	movs	r3, #0
 800a152:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	61bb      	str	r3, [r7, #24]
 800a158:	e003      	b.n	800a162 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	2200      	movs	r2, #0
 800a166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a16a:	e02c      	b.n	800a1c6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2200      	movs	r2, #0
 800a174:	2180      	movs	r1, #128	; 0x80
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f001 f872 	bl	800b260 <UART_WaitOnFlagUntilTimeout>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e039      	b.n	800a1fa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10b      	bne.n	800a1a4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	461a      	mov	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a19a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	3302      	adds	r3, #2
 800a1a0:	61bb      	str	r3, [r7, #24]
 800a1a2:	e007      	b.n	800a1b4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	781a      	ldrb	r2, [r3, #0]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1cc      	bne.n	800a16c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2140      	movs	r1, #64	; 0x40
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f001 f83f 	bl	800b260 <UART_WaitOnFlagUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e006      	b.n	800a1fa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	e000      	b.n	800a1fa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a1f8:	2302      	movs	r3, #2
  }
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	; 0x28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	4613      	mov	r3, r2
 800a210:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a218:	2b20      	cmp	r3, #32
 800a21a:	d142      	bne.n	800a2a2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d002      	beq.n	800a228 <HAL_UART_Receive_IT+0x24>
 800a222:	88fb      	ldrh	r3, [r7, #6]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	e03b      	b.n	800a2a4 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a232:	2b01      	cmp	r3, #1
 800a234:	d101      	bne.n	800a23a <HAL_UART_Receive_IT+0x36>
 800a236:	2302      	movs	r3, #2
 800a238:	e034      	b.n	800a2a4 <HAL_UART_Receive_IT+0xa0>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a17      	ldr	r2, [pc, #92]	; (800a2ac <HAL_UART_Receive_IT+0xa8>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d01f      	beq.n	800a292 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d018      	beq.n	800a292 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	e853 3f00 	ldrex	r3, [r3]
 800a26c:	613b      	str	r3, [r7, #16]
   return(result);
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a274:	627b      	str	r3, [r7, #36]	; 0x24
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	623b      	str	r3, [r7, #32]
 800a280:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a282:	69f9      	ldr	r1, [r7, #28]
 800a284:	6a3a      	ldr	r2, [r7, #32]
 800a286:	e841 2300 	strex	r3, r2, [r1]
 800a28a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d1e6      	bne.n	800a260 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800a292:	88fb      	ldrh	r3, [r7, #6]
 800a294:	461a      	mov	r2, r3
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f001 f8a9 	bl	800b3f0 <UART_Start_Receive_IT>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	e000      	b.n	800a2a4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a2a2:	2302      	movs	r3, #2
  }
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3728      	adds	r7, #40	; 0x28
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	40008000 	.word	0x40008000

0800a2b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	; 0x28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2c4:	2b20      	cmp	r3, #32
 800a2c6:	d17a      	bne.n	800a3be <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <HAL_UART_Transmit_DMA+0x24>
 800a2ce:	88fb      	ldrh	r3, [r7, #6]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e073      	b.n	800a3c0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d101      	bne.n	800a2e6 <HAL_UART_Transmit_DMA+0x36>
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	e06c      	b.n	800a3c0 <HAL_UART_Transmit_DMA+0x110>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	68ba      	ldr	r2, [r7, #8]
 800a2f2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	88fa      	ldrh	r2, [r7, #6]
 800a2f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	88fa      	ldrh	r2, [r7, #6]
 800a300:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2221      	movs	r2, #33	; 0x21
 800a310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d02c      	beq.n	800a376 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a320:	4a29      	ldr	r2, [pc, #164]	; (800a3c8 <HAL_UART_Transmit_DMA+0x118>)
 800a322:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a328:	4a28      	ldr	r2, [pc, #160]	; (800a3cc <HAL_UART_Transmit_DMA+0x11c>)
 800a32a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a330:	4a27      	ldr	r2, [pc, #156]	; (800a3d0 <HAL_UART_Transmit_DMA+0x120>)
 800a332:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a338:	2200      	movs	r2, #0
 800a33a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a344:	4619      	mov	r1, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3328      	adds	r3, #40	; 0x28
 800a34c:	461a      	mov	r2, r3
 800a34e:	88fb      	ldrh	r3, [r7, #6]
 800a350:	f7fc fb16 	bl	8006980 <HAL_DMA_Start_IT>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d00d      	beq.n	800a376 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2210      	movs	r2, #16
 800a35e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2220      	movs	r2, #32
 800a36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e024      	b.n	800a3c0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2240      	movs	r2, #64	; 0x40
 800a37c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2200      	movs	r2, #0
 800a382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3308      	adds	r3, #8
 800a38c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	613b      	str	r3, [r7, #16]
   return(result);
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	3308      	adds	r3, #8
 800a3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a6:	623a      	str	r2, [r7, #32]
 800a3a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3aa:	69f9      	ldr	r1, [r7, #28]
 800a3ac:	6a3a      	ldr	r2, [r7, #32]
 800a3ae:	e841 2300 	strex	r3, r2, [r1]
 800a3b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1e5      	bne.n	800a386 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	e000      	b.n	800a3c0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a3be:	2302      	movs	r3, #2
  }
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3728      	adds	r7, #40	; 0x28
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	0800b8db 	.word	0x0800b8db
 800a3cc:	0800b975 	.word	0x0800b975
 800a3d0:	0800baef 	.word	0x0800baef

0800a3d4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b09a      	sub	sp, #104	; 0x68
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a3e4:	e853 3f00 	ldrex	r3, [r3]
 800a3e8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a3ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3f0:	667b      	str	r3, [r7, #100]	; 0x64
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fa:	657b      	str	r3, [r7, #84]	; 0x54
 800a3fc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a400:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a402:	e841 2300 	strex	r3, r2, [r1]
 800a406:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1e6      	bne.n	800a3dc <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	3308      	adds	r3, #8
 800a414:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a418:	e853 3f00 	ldrex	r3, [r3]
 800a41c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a424:	f023 0301 	bic.w	r3, r3, #1
 800a428:	663b      	str	r3, [r7, #96]	; 0x60
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3308      	adds	r3, #8
 800a430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a432:	643a      	str	r2, [r7, #64]	; 0x40
 800a434:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a43a:	e841 2300 	strex	r3, r2, [r1]
 800a43e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1e3      	bne.n	800a40e <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d118      	bne.n	800a480 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	e853 3f00 	ldrex	r3, [r3]
 800a45a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f023 0310 	bic.w	r3, r3, #16
 800a462:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	461a      	mov	r2, r3
 800a46a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a46c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a46e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a474:	e841 2300 	strex	r3, r2, [r1]
 800a478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d1e6      	bne.n	800a44e <HAL_UART_AbortReceive+0x7a>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48a:	2b40      	cmp	r3, #64	; 0x40
 800a48c:	d137      	bne.n	800a4fe <HAL_UART_AbortReceive+0x12a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3308      	adds	r3, #8
 800a494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3308      	adds	r3, #8
 800a4ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4ae:	61ba      	str	r2, [r7, #24]
 800a4b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6979      	ldr	r1, [r7, #20]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e5      	bne.n	800a48e <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d019      	beq.n	800a4fe <HAL_UART_AbortReceive+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f7fc fad0 	bl	8006a7c <HAL_DMA_Abort>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00d      	beq.n	800a4fe <HAL_UART_AbortReceive+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fc fc4c 	bl	8006d84 <HAL_DMA_GetError>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d105      	bne.n	800a4fe <HAL_UART_AbortReceive+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2210      	movs	r2, #16
 800a4f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	e017      	b.n	800a52e <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	220f      	movs	r2, #15
 800a50c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	699a      	ldr	r2, [r3, #24]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f042 0208 	orr.w	r2, r2, #8
 800a51c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2220      	movs	r2, #32
 800a522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3768      	adds	r7, #104	; 0x68
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
	...

0800a538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b0ba      	sub	sp, #232	; 0xe8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	69db      	ldr	r3, [r3, #28]
 800a546:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a55e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a562:	f640 030f 	movw	r3, #2063	; 0x80f
 800a566:	4013      	ands	r3, r2
 800a568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a56c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a570:	2b00      	cmp	r3, #0
 800a572:	d11b      	bne.n	800a5ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a578:	f003 0320 	and.w	r3, r3, #32
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d015      	beq.n	800a5ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a584:	f003 0320 	and.w	r3, r3, #32
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d105      	bne.n	800a598 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d009      	beq.n	800a5ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 82d6 	beq.w	800ab4e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	4798      	blx	r3
      }
      return;
 800a5aa:	e2d0      	b.n	800ab4e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a5ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f000 811f 	beq.w	800a7f4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a5b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a5ba:	4b8b      	ldr	r3, [pc, #556]	; (800a7e8 <HAL_UART_IRQHandler+0x2b0>)
 800a5bc:	4013      	ands	r3, r2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a5c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a5c6:	4b89      	ldr	r3, [pc, #548]	; (800a7ec <HAL_UART_IRQHandler+0x2b4>)
 800a5c8:	4013      	ands	r3, r2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f000 8112 	beq.w	800a7f4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d011      	beq.n	800a600 <HAL_UART_IRQHandler+0xc8>
 800a5dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5f6:	f043 0201 	orr.w	r2, r3, #1
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d011      	beq.n	800a630 <HAL_UART_IRQHandler+0xf8>
 800a60c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00b      	beq.n	800a630 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2202      	movs	r2, #2
 800a61e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a626:	f043 0204 	orr.w	r2, r3, #4
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d011      	beq.n	800a660 <HAL_UART_IRQHandler+0x128>
 800a63c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2204      	movs	r2, #4
 800a64e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a656:	f043 0202 	orr.w	r2, r3, #2
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d017      	beq.n	800a69c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a670:	f003 0320 	and.w	r3, r3, #32
 800a674:	2b00      	cmp	r3, #0
 800a676:	d105      	bne.n	800a684 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a678:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a67c:	4b5a      	ldr	r3, [pc, #360]	; (800a7e8 <HAL_UART_IRQHandler+0x2b0>)
 800a67e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a680:	2b00      	cmp	r3, #0
 800a682:	d00b      	beq.n	800a69c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2208      	movs	r2, #8
 800a68a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a692:	f043 0208 	orr.w	r2, r3, #8
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a69c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d012      	beq.n	800a6ce <HAL_UART_IRQHandler+0x196>
 800a6a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00c      	beq.n	800a6ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6c4:	f043 0220 	orr.w	r2, r3, #32
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 823c 	beq.w	800ab52 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6de:	f003 0320 	and.w	r3, r3, #32
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d013      	beq.n	800a70e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6ea:	f003 0320 	and.w	r3, r3, #32
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d105      	bne.n	800a6fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a6f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d007      	beq.n	800a70e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a722:	2b40      	cmp	r3, #64	; 0x40
 800a724:	d005      	beq.n	800a732 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a72a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d04f      	beq.n	800a7d2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 f86c 	bl	800b810 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a742:	2b40      	cmp	r3, #64	; 0x40
 800a744:	d141      	bne.n	800a7ca <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	3308      	adds	r3, #8
 800a74c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a754:	e853 3f00 	ldrex	r3, [r3]
 800a758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a75c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3308      	adds	r3, #8
 800a76e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a77e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a782:	e841 2300 	strex	r3, r2, [r1]
 800a786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a78a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d1d9      	bne.n	800a746 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a796:	2b00      	cmp	r3, #0
 800a798:	d013      	beq.n	800a7c2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a79e:	4a14      	ldr	r2, [pc, #80]	; (800a7f0 <HAL_UART_IRQHandler+0x2b8>)
 800a7a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7fc f9c6 	bl	8006b38 <HAL_DMA_Abort_IT>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d017      	beq.n	800a7e2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c0:	e00f      	b.n	800a7e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f9e2 	bl	800ab8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7c8:	e00b      	b.n	800a7e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f9de 	bl	800ab8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d0:	e007      	b.n	800a7e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 f9da 	bl	800ab8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a7e0:	e1b7      	b.n	800ab52 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7e2:	bf00      	nop
    return;
 800a7e4:	e1b5      	b.n	800ab52 <HAL_UART_IRQHandler+0x61a>
 800a7e6:	bf00      	nop
 800a7e8:	10000001 	.word	0x10000001
 800a7ec:	04000120 	.word	0x04000120
 800a7f0:	0800bb6f 	.word	0x0800bb6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	f040 814a 	bne.w	800aa92 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800a7fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a802:	f003 0310 	and.w	r3, r3, #16
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 8143 	beq.w	800aa92 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800a80c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a810:	f003 0310 	and.w	r3, r3, #16
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 813c 	beq.w	800aa92 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2210      	movs	r2, #16
 800a820:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a82c:	2b40      	cmp	r3, #64	; 0x40
 800a82e:	f040 80b5 	bne.w	800a99c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 800a83e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a842:	2b00      	cmp	r3, #0
 800a844:	f000 8187 	beq.w	800ab56 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a84e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a852:	429a      	cmp	r2, r3
 800a854:	f080 817f 	bcs.w	800ab56 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a85e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b00      	cmp	r3, #0
 800a870:	f040 8086 	bne.w	800a980 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a880:	e853 3f00 	ldrex	r3, [r3]
 800a884:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a888:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a88c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	461a      	mov	r2, r3
 800a89a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a89e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a8a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a8aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a8b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1da      	bne.n	800a874 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a8ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8d0:	f023 0301 	bic.w	r3, r3, #1
 800a8d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3308      	adds	r3, #8
 800a8de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a8e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a8e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a8ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a8f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e1      	bne.n	800a8be <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	3308      	adds	r3, #8
 800a900:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a904:	e853 3f00 	ldrex	r3, [r3]
 800a908:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a90a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a90c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a910:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3308      	adds	r3, #8
 800a91a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a91e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a920:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a924:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a92c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e3      	bne.n	800a8fa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2220      	movs	r2, #32
 800a936:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a948:	e853 3f00 	ldrex	r3, [r3]
 800a94c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a94e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a950:	f023 0310 	bic.w	r3, r3, #16
 800a954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	461a      	mov	r2, r3
 800a95e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a962:	65bb      	str	r3, [r7, #88]	; 0x58
 800a964:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e4      	bne.n	800a940 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fc f87e 	bl	8006a7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	1ad3      	subs	r3, r2, r3
 800a990:	b29b      	uxth	r3, r3
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7f8 fcad 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a99a:	e0dc      	b.n	800ab56 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	1ad3      	subs	r3, r2, r3
 800a9ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 80ce 	beq.w	800ab5a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800a9be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 80c9 	beq.w	800ab5a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d0:	e853 3f00 	ldrex	r3, [r3]
 800a9d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a9dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a9ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a9ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a9f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e4      	bne.n	800a9c8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3308      	adds	r3, #8
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	623b      	str	r3, [r7, #32]
   return(result);
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa14:	f023 0301 	bic.w	r3, r3, #1
 800aa18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3308      	adds	r3, #8
 800aa22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa26:	633a      	str	r2, [r7, #48]	; 0x30
 800aa28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa2e:	e841 2300 	strex	r3, r2, [r1]
 800aa32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1e1      	bne.n	800a9fe <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 0310 	bic.w	r3, r3, #16
 800aa62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa70:	61fb      	str	r3, [r7, #28]
 800aa72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	69b9      	ldr	r1, [r7, #24]
 800aa76:	69fa      	ldr	r2, [r7, #28]
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	617b      	str	r3, [r7, #20]
   return(result);
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e4      	bne.n	800aa4e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7f8 fc32 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800aa90:	e063      	b.n	800ab5a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aa92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00e      	beq.n	800aabc <HAL_UART_IRQHandler+0x584>
 800aa9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aaa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d008      	beq.n	800aabc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aab2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fcf7 	bl	800c4a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aaba:	e051      	b.n	800ab60 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d014      	beq.n	800aaf2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d105      	bne.n	800aae0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d008      	beq.n	800aaf2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d03a      	beq.n	800ab5e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	4798      	blx	r3
    }
    return;
 800aaf0:	e035      	b.n	800ab5e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aaf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d009      	beq.n	800ab12 <HAL_UART_IRQHandler+0x5da>
 800aafe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 f845 	bl	800bb9a <UART_EndTransmit_IT>
    return;
 800ab10:	e026      	b.n	800ab60 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d009      	beq.n	800ab32 <HAL_UART_IRQHandler+0x5fa>
 800ab1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d003      	beq.n	800ab32 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f001 fcce 	bl	800c4cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab30:	e016      	b.n	800ab60 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d010      	beq.n	800ab60 <HAL_UART_IRQHandler+0x628>
 800ab3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da0c      	bge.n	800ab60 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f001 fcb7 	bl	800c4ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab4c:	e008      	b.n	800ab60 <HAL_UART_IRQHandler+0x628>
      return;
 800ab4e:	bf00      	nop
 800ab50:	e006      	b.n	800ab60 <HAL_UART_IRQHandler+0x628>
    return;
 800ab52:	bf00      	nop
 800ab54:	e004      	b.n	800ab60 <HAL_UART_IRQHandler+0x628>
      return;
 800ab56:	bf00      	nop
 800ab58:	e002      	b.n	800ab60 <HAL_UART_IRQHandler+0x628>
      return;
 800ab5a:	bf00      	nop
 800ab5c:	e000      	b.n	800ab60 <HAL_UART_IRQHandler+0x628>
    return;
 800ab5e:	bf00      	nop
  }
}
 800ab60:	37e8      	adds	r7, #232	; 0xe8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop

0800ab68 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bc80      	pop	{r7}
 800ab78:	4770      	bx	lr

0800ab7a <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b083      	sub	sp, #12
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab82:	bf00      	nop
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bc80      	pop	{r7}
 800ab8a:	4770      	bx	lr

0800ab8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bc80      	pop	{r7}
 800ab9c:	4770      	bx	lr
	...

0800aba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aba4:	b08c      	sub	sp, #48	; 0x30
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	689a      	ldr	r2, [r3, #8]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	431a      	orrs	r2, r3
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	695b      	ldr	r3, [r3, #20]
 800abbe:	431a      	orrs	r2, r3
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	69db      	ldr	r3, [r3, #28]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	4b94      	ldr	r3, [pc, #592]	; (800ae20 <UART_SetConfig+0x280>)
 800abd0:	4013      	ands	r3, r2
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	6812      	ldr	r2, [r2, #0]
 800abd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abd8:	430b      	orrs	r3, r1
 800abda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	68da      	ldr	r2, [r3, #12]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	430a      	orrs	r2, r1
 800abf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abf2:	697b      	ldr	r3, [r7, #20]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a89      	ldr	r2, [pc, #548]	; (800ae24 <UART_SetConfig+0x284>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d004      	beq.n	800ac0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ac16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ac1a:	697a      	ldr	r2, [r7, #20]
 800ac1c:	6812      	ldr	r2, [r2, #0]
 800ac1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac20:	430b      	orrs	r3, r1
 800ac22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac2a:	f023 010f 	bic.w	r1, r3, #15
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	430a      	orrs	r2, r1
 800ac38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a7a      	ldr	r2, [pc, #488]	; (800ae28 <UART_SetConfig+0x288>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d127      	bne.n	800ac94 <UART_SetConfig+0xf4>
 800ac44:	2003      	movs	r0, #3
 800ac46:	f7ff f9d5 	bl	8009ff4 <LL_RCC_GetUSARTClockSource>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d81b      	bhi.n	800ac8c <UART_SetConfig+0xec>
 800ac54:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <UART_SetConfig+0xbc>)
 800ac56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5a:	bf00      	nop
 800ac5c:	0800ac6d 	.word	0x0800ac6d
 800ac60:	0800ac7d 	.word	0x0800ac7d
 800ac64:	0800ac75 	.word	0x0800ac75
 800ac68:	0800ac85 	.word	0x0800ac85
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac72:	e080      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ac74:	2302      	movs	r3, #2
 800ac76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac7a:	e07c      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ac7c:	2304      	movs	r3, #4
 800ac7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac82:	e078      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ac84:	2308      	movs	r3, #8
 800ac86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac8a:	e074      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ac8c:	2310      	movs	r3, #16
 800ac8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac92:	e070      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a64      	ldr	r2, [pc, #400]	; (800ae2c <UART_SetConfig+0x28c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d138      	bne.n	800ad10 <UART_SetConfig+0x170>
 800ac9e:	200c      	movs	r0, #12
 800aca0:	f7ff f9a8 	bl	8009ff4 <LL_RCC_GetUSARTClockSource>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800acaa:	2b0c      	cmp	r3, #12
 800acac:	d82c      	bhi.n	800ad08 <UART_SetConfig+0x168>
 800acae:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <UART_SetConfig+0x114>)
 800acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb4:	0800ace9 	.word	0x0800ace9
 800acb8:	0800ad09 	.word	0x0800ad09
 800acbc:	0800ad09 	.word	0x0800ad09
 800acc0:	0800ad09 	.word	0x0800ad09
 800acc4:	0800acf9 	.word	0x0800acf9
 800acc8:	0800ad09 	.word	0x0800ad09
 800accc:	0800ad09 	.word	0x0800ad09
 800acd0:	0800ad09 	.word	0x0800ad09
 800acd4:	0800acf1 	.word	0x0800acf1
 800acd8:	0800ad09 	.word	0x0800ad09
 800acdc:	0800ad09 	.word	0x0800ad09
 800ace0:	0800ad09 	.word	0x0800ad09
 800ace4:	0800ad01 	.word	0x0800ad01
 800ace8:	2300      	movs	r3, #0
 800acea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acee:	e042      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800acf0:	2302      	movs	r3, #2
 800acf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acf6:	e03e      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800acf8:	2304      	movs	r3, #4
 800acfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800acfe:	e03a      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ad00:	2308      	movs	r3, #8
 800ad02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad06:	e036      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ad08:	2310      	movs	r3, #16
 800ad0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad0e:	e032      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a43      	ldr	r2, [pc, #268]	; (800ae24 <UART_SetConfig+0x284>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d12a      	bne.n	800ad70 <UART_SetConfig+0x1d0>
 800ad1a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800ad1e:	f7ff f97b 	bl	800a018 <LL_RCC_GetLPUARTClockSource>
 800ad22:	4603      	mov	r3, r0
 800ad24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad28:	d01a      	beq.n	800ad60 <UART_SetConfig+0x1c0>
 800ad2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ad2e:	d81b      	bhi.n	800ad68 <UART_SetConfig+0x1c8>
 800ad30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad34:	d00c      	beq.n	800ad50 <UART_SetConfig+0x1b0>
 800ad36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad3a:	d815      	bhi.n	800ad68 <UART_SetConfig+0x1c8>
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <UART_SetConfig+0x1a8>
 800ad40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad44:	d008      	beq.n	800ad58 <UART_SetConfig+0x1b8>
 800ad46:	e00f      	b.n	800ad68 <UART_SetConfig+0x1c8>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad4e:	e012      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ad50:	2302      	movs	r3, #2
 800ad52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad56:	e00e      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ad58:	2304      	movs	r3, #4
 800ad5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad5e:	e00a      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ad60:	2308      	movs	r3, #8
 800ad62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad66:	e006      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ad68:	2310      	movs	r3, #16
 800ad6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ad6e:	e002      	b.n	800ad76 <UART_SetConfig+0x1d6>
 800ad70:	2310      	movs	r3, #16
 800ad72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a2a      	ldr	r2, [pc, #168]	; (800ae24 <UART_SetConfig+0x284>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	f040 80a4 	bne.w	800aeca <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ad82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	d823      	bhi.n	800add2 <UART_SetConfig+0x232>
 800ad8a:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <UART_SetConfig+0x1f0>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800adb5 	.word	0x0800adb5
 800ad94:	0800add3 	.word	0x0800add3
 800ad98:	0800adbd 	.word	0x0800adbd
 800ad9c:	0800add3 	.word	0x0800add3
 800ada0:	0800adc3 	.word	0x0800adc3
 800ada4:	0800add3 	.word	0x0800add3
 800ada8:	0800add3 	.word	0x0800add3
 800adac:	0800add3 	.word	0x0800add3
 800adb0:	0800adcb 	.word	0x0800adcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adb4:	f7fd fe02 	bl	80089bc <HAL_RCC_GetPCLK1Freq>
 800adb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adba:	e010      	b.n	800adde <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adbc:	4b1c      	ldr	r3, [pc, #112]	; (800ae30 <UART_SetConfig+0x290>)
 800adbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800adc0:	e00d      	b.n	800adde <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adc2:	f7fd fd47 	bl	8008854 <HAL_RCC_GetSysClockFreq>
 800adc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800adc8:	e009      	b.n	800adde <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800add0:	e005      	b.n	800adde <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800addc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 8137 	beq.w	800b054 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adea:	4a12      	ldr	r2, [pc, #72]	; (800ae34 <UART_SetConfig+0x294>)
 800adec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adf0:	461a      	mov	r2, r3
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800adf8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	685a      	ldr	r2, [r3, #4]
 800adfe:	4613      	mov	r3, r2
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	4413      	add	r3, r2
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d305      	bcc.n	800ae16 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d910      	bls.n	800ae38 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae1c:	e11a      	b.n	800b054 <UART_SetConfig+0x4b4>
 800ae1e:	bf00      	nop
 800ae20:	cfff69f3 	.word	0xcfff69f3
 800ae24:	40008000 	.word	0x40008000
 800ae28:	40013800 	.word	0x40013800
 800ae2c:	40004400 	.word	0x40004400
 800ae30:	00f42400 	.word	0x00f42400
 800ae34:	08015748 	.word	0x08015748
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	60bb      	str	r3, [r7, #8]
 800ae3e:	60fa      	str	r2, [r7, #12]
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	4a8e      	ldr	r2, [pc, #568]	; (800b080 <UART_SetConfig+0x4e0>)
 800ae46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	603b      	str	r3, [r7, #0]
 800ae50:	607a      	str	r2, [r7, #4]
 800ae52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ae5a:	f7f6 f9a1 	bl	80011a0 <__aeabi_uldivmod>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	460b      	mov	r3, r1
 800ae62:	4610      	mov	r0, r2
 800ae64:	4619      	mov	r1, r3
 800ae66:	f04f 0200 	mov.w	r2, #0
 800ae6a:	f04f 0300 	mov.w	r3, #0
 800ae6e:	020b      	lsls	r3, r1, #8
 800ae70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae74:	0202      	lsls	r2, r0, #8
 800ae76:	6979      	ldr	r1, [r7, #20]
 800ae78:	6849      	ldr	r1, [r1, #4]
 800ae7a:	0849      	lsrs	r1, r1, #1
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	460c      	mov	r4, r1
 800ae80:	4605      	mov	r5, r0
 800ae82:	eb12 0804 	adds.w	r8, r2, r4
 800ae86:	eb43 0905 	adc.w	r9, r3, r5
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	469a      	mov	sl, r3
 800ae92:	4693      	mov	fp, r2
 800ae94:	4652      	mov	r2, sl
 800ae96:	465b      	mov	r3, fp
 800ae98:	4640      	mov	r0, r8
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	f7f6 f980 	bl	80011a0 <__aeabi_uldivmod>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4613      	mov	r3, r2
 800aea6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeae:	d308      	bcc.n	800aec2 <UART_SetConfig+0x322>
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aeb6:	d204      	bcs.n	800aec2 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6a3a      	ldr	r2, [r7, #32]
 800aebe:	60da      	str	r2, [r3, #12]
 800aec0:	e0c8      	b.n	800b054 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aec8:	e0c4      	b.n	800b054 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aed2:	d168      	bne.n	800afa6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 800aed4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aed8:	2b08      	cmp	r3, #8
 800aeda:	d828      	bhi.n	800af2e <UART_SetConfig+0x38e>
 800aedc:	a201      	add	r2, pc, #4	; (adr r2, 800aee4 <UART_SetConfig+0x344>)
 800aede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee2:	bf00      	nop
 800aee4:	0800af09 	.word	0x0800af09
 800aee8:	0800af11 	.word	0x0800af11
 800aeec:	0800af19 	.word	0x0800af19
 800aef0:	0800af2f 	.word	0x0800af2f
 800aef4:	0800af1f 	.word	0x0800af1f
 800aef8:	0800af2f 	.word	0x0800af2f
 800aefc:	0800af2f 	.word	0x0800af2f
 800af00:	0800af2f 	.word	0x0800af2f
 800af04:	0800af27 	.word	0x0800af27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af08:	f7fd fd58 	bl	80089bc <HAL_RCC_GetPCLK1Freq>
 800af0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af0e:	e014      	b.n	800af3a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af10:	f7fd fd66 	bl	80089e0 <HAL_RCC_GetPCLK2Freq>
 800af14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af16:	e010      	b.n	800af3a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af18:	4b5a      	ldr	r3, [pc, #360]	; (800b084 <UART_SetConfig+0x4e4>)
 800af1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af1c:	e00d      	b.n	800af3a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af1e:	f7fd fc99 	bl	8008854 <HAL_RCC_GetSysClockFreq>
 800af22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800af24:	e009      	b.n	800af3a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800af2c:	e005      	b.n	800af3a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800af2e:	2300      	movs	r3, #0
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800af38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 8089 	beq.w	800b054 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af46:	4a4e      	ldr	r2, [pc, #312]	; (800b080 <UART_SetConfig+0x4e0>)
 800af48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af4c:	461a      	mov	r2, r3
 800af4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af50:	fbb3 f3f2 	udiv	r3, r3, r2
 800af54:	005a      	lsls	r2, r3, #1
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	085b      	lsrs	r3, r3, #1
 800af5c:	441a      	add	r2, r3
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	fbb2 f3f3 	udiv	r3, r2, r3
 800af66:	b29b      	uxth	r3, r3
 800af68:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af6a:	6a3b      	ldr	r3, [r7, #32]
 800af6c:	2b0f      	cmp	r3, #15
 800af6e:	d916      	bls.n	800af9e <UART_SetConfig+0x3fe>
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af76:	d212      	bcs.n	800af9e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af78:	6a3b      	ldr	r3, [r7, #32]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	f023 030f 	bic.w	r3, r3, #15
 800af80:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	085b      	lsrs	r3, r3, #1
 800af86:	b29b      	uxth	r3, r3
 800af88:	f003 0307 	and.w	r3, r3, #7
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	8bfb      	ldrh	r3, [r7, #30]
 800af90:	4313      	orrs	r3, r2
 800af92:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	8bfa      	ldrh	r2, [r7, #30]
 800af9a:	60da      	str	r2, [r3, #12]
 800af9c:	e05a      	b.n	800b054 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800afa4:	e056      	b.n	800b054 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800afaa:	2b08      	cmp	r3, #8
 800afac:	d827      	bhi.n	800affe <UART_SetConfig+0x45e>
 800afae:	a201      	add	r2, pc, #4	; (adr r2, 800afb4 <UART_SetConfig+0x414>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800afd9 	.word	0x0800afd9
 800afb8:	0800afe1 	.word	0x0800afe1
 800afbc:	0800afe9 	.word	0x0800afe9
 800afc0:	0800afff 	.word	0x0800afff
 800afc4:	0800afef 	.word	0x0800afef
 800afc8:	0800afff 	.word	0x0800afff
 800afcc:	0800afff 	.word	0x0800afff
 800afd0:	0800afff 	.word	0x0800afff
 800afd4:	0800aff7 	.word	0x0800aff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afd8:	f7fd fcf0 	bl	80089bc <HAL_RCC_GetPCLK1Freq>
 800afdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afde:	e014      	b.n	800b00a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800afe0:	f7fd fcfe 	bl	80089e0 <HAL_RCC_GetPCLK2Freq>
 800afe4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800afe6:	e010      	b.n	800b00a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afe8:	4b26      	ldr	r3, [pc, #152]	; (800b084 <UART_SetConfig+0x4e4>)
 800afea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800afec:	e00d      	b.n	800b00a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afee:	f7fd fc31 	bl	8008854 <HAL_RCC_GetSysClockFreq>
 800aff2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aff4:	e009      	b.n	800b00a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800affa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800affc:	e005      	b.n	800b00a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b008:	bf00      	nop
    }

    if (pclk != 0U)
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d021      	beq.n	800b054 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b014:	4a1a      	ldr	r2, [pc, #104]	; (800b080 <UART_SetConfig+0x4e0>)
 800b016:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b01a:	461a      	mov	r2, r3
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	085b      	lsrs	r3, r3, #1
 800b028:	441a      	add	r2, r3
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b032:	b29b      	uxth	r3, r3
 800b034:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	2b0f      	cmp	r3, #15
 800b03a:	d908      	bls.n	800b04e <UART_SetConfig+0x4ae>
 800b03c:	6a3b      	ldr	r3, [r7, #32]
 800b03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b042:	d204      	bcs.n	800b04e <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6a3a      	ldr	r2, [r7, #32]
 800b04a:	60da      	str	r2, [r3, #12]
 800b04c:	e002      	b.n	800b054 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2201      	movs	r2, #1
 800b058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	2201      	movs	r2, #1
 800b060:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2200      	movs	r2, #0
 800b068:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	2200      	movs	r2, #0
 800b06e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b070:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b074:	4618      	mov	r0, r3
 800b076:	3730      	adds	r7, #48	; 0x30
 800b078:	46bd      	mov	sp, r7
 800b07a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b07e:	bf00      	nop
 800b080:	08015748 	.word	0x08015748
 800b084:	00f42400 	.word	0x00f42400

0800b088 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b094:	f003 0301 	and.w	r3, r3, #1
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00a      	beq.n	800b0b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	430a      	orrs	r2, r1
 800b0b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b6:	f003 0302 	and.w	r3, r3, #2
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	430a      	orrs	r2, r1
 800b0d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d8:	f003 0304 	and.w	r3, r3, #4
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00a      	beq.n	800b0f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0fa:	f003 0308 	and.w	r3, r3, #8
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00a      	beq.n	800b118 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b11c:	f003 0310 	and.w	r3, r3, #16
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00a      	beq.n	800b13a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	430a      	orrs	r2, r1
 800b138:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13e:	f003 0320 	and.w	r3, r3, #32
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00a      	beq.n	800b15c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	689b      	ldr	r3, [r3, #8]
 800b14c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01a      	beq.n	800b19e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	430a      	orrs	r2, r1
 800b17c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b186:	d10a      	bne.n	800b19e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	430a      	orrs	r2, r1
 800b19c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00a      	beq.n	800b1c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	430a      	orrs	r2, r1
 800b1be:	605a      	str	r2, [r3, #4]
  }
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bc80      	pop	{r7}
 800b1c8:	4770      	bx	lr

0800b1ca <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b086      	sub	sp, #24
 800b1ce:	af02      	add	r7, sp, #8
 800b1d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1da:	f7f7 fa4d 	bl	8002678 <HAL_GetTick>
 800b1de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0308 	and.w	r3, r3, #8
 800b1ea:	2b08      	cmp	r3, #8
 800b1ec:	d10e      	bne.n	800b20c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f82f 	bl	800b260 <UART_WaitOnFlagUntilTimeout>
 800b202:	4603      	mov	r3, r0
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b208:	2303      	movs	r3, #3
 800b20a:	e025      	b.n	800b258 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0304 	and.w	r3, r3, #4
 800b216:	2b04      	cmp	r3, #4
 800b218:	d10e      	bne.n	800b238 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b21a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b21e:	9300      	str	r3, [sp, #0]
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f819 	bl	800b260 <UART_WaitOnFlagUntilTimeout>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d001      	beq.n	800b238 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e00f      	b.n	800b258 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2220      	movs	r2, #32
 800b23c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2220      	movs	r2, #32
 800b244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3710      	adds	r7, #16
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b09c      	sub	sp, #112	; 0x70
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	4613      	mov	r3, r2
 800b26e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b270:	e0a9      	b.n	800b3c6 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b272:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b278:	f000 80a5 	beq.w	800b3c6 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b27c:	f7f7 f9fc 	bl	8002678 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b288:	429a      	cmp	r2, r3
 800b28a:	d302      	bcc.n	800b292 <UART_WaitOnFlagUntilTimeout+0x32>
 800b28c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d140      	bne.n	800b314 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b29a:	e853 3f00 	ldrex	r3, [r3]
 800b29e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b2a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b2a6:	667b      	str	r3, [r7, #100]	; 0x64
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b2b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b2b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b2b8:	e841 2300 	strex	r3, r2, [r1]
 800b2bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b2be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e6      	bne.n	800b292 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3308      	adds	r3, #8
 800b2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ce:	e853 3f00 	ldrex	r3, [r3]
 800b2d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	f023 0301 	bic.w	r3, r3, #1
 800b2da:	663b      	str	r3, [r7, #96]	; 0x60
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3308      	adds	r3, #8
 800b2e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2e4:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ec:	e841 2300 	strex	r3, r2, [r1]
 800b2f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e5      	bne.n	800b2c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2220      	movs	r2, #32
 800b304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b310:	2303      	movs	r3, #3
 800b312:	e069      	b.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 0304 	and.w	r3, r3, #4
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d051      	beq.n	800b3c6 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69db      	ldr	r3, [r3, #28]
 800b328:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b32c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b330:	d149      	bne.n	800b3c6 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b33a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b344:	e853 3f00 	ldrex	r3, [r3]
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b350:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b35a:	637b      	str	r3, [r7, #52]	; 0x34
 800b35c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b360:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b362:	e841 2300 	strex	r3, r2, [r1]
 800b366:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1e6      	bne.n	800b33c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	3308      	adds	r3, #8
 800b374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	e853 3f00 	ldrex	r3, [r3]
 800b37c:	613b      	str	r3, [r7, #16]
   return(result);
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	f023 0301 	bic.w	r3, r3, #1
 800b384:	66bb      	str	r3, [r7, #104]	; 0x68
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	3308      	adds	r3, #8
 800b38c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b38e:	623a      	str	r2, [r7, #32]
 800b390:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b392:	69f9      	ldr	r1, [r7, #28]
 800b394:	6a3a      	ldr	r2, [r7, #32]
 800b396:	e841 2300 	strex	r3, r2, [r1]
 800b39a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1e5      	bne.n	800b36e <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2220      	movs	r2, #32
 800b3a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e010      	b.n	800b3e8 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	69da      	ldr	r2, [r3, #28]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	4013      	ands	r3, r2
 800b3d0:	68ba      	ldr	r2, [r7, #8]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	bf0c      	ite	eq
 800b3d6:	2301      	moveq	r3, #1
 800b3d8:	2300      	movne	r3, #0
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	461a      	mov	r2, r3
 800b3de:	79fb      	ldrb	r3, [r7, #7]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	f43f af46 	beq.w	800b272 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3770      	adds	r7, #112	; 0x70
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b0a3      	sub	sp, #140	; 0x8c
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	88fa      	ldrh	r2, [r7, #6]
 800b408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	88fa      	ldrh	r2, [r7, #6]
 800b410:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	689b      	ldr	r3, [r3, #8]
 800b41e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b422:	d10e      	bne.n	800b442 <UART_Start_Receive_IT+0x52>
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d105      	bne.n	800b438 <UART_Start_Receive_IT+0x48>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b432:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b436:	e02d      	b.n	800b494 <UART_Start_Receive_IT+0xa4>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	22ff      	movs	r2, #255	; 0xff
 800b43c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b440:	e028      	b.n	800b494 <UART_Start_Receive_IT+0xa4>
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10d      	bne.n	800b466 <UART_Start_Receive_IT+0x76>
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d104      	bne.n	800b45c <UART_Start_Receive_IT+0x6c>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	22ff      	movs	r2, #255	; 0xff
 800b456:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b45a:	e01b      	b.n	800b494 <UART_Start_Receive_IT+0xa4>
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	227f      	movs	r2, #127	; 0x7f
 800b460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b464:	e016      	b.n	800b494 <UART_Start_Receive_IT+0xa4>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b46e:	d10d      	bne.n	800b48c <UART_Start_Receive_IT+0x9c>
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d104      	bne.n	800b482 <UART_Start_Receive_IT+0x92>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	227f      	movs	r2, #127	; 0x7f
 800b47c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b480:	e008      	b.n	800b494 <UART_Start_Receive_IT+0xa4>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	223f      	movs	r2, #63	; 0x3f
 800b486:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b48a:	e003      	b.n	800b494 <UART_Start_Receive_IT+0xa4>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2222      	movs	r2, #34	; 0x22
 800b4a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	3308      	adds	r3, #8
 800b4aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b4ae:	e853 3f00 	ldrex	r3, [r3]
 800b4b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b4b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4b6:	f043 0301 	orr.w	r3, r3, #1
 800b4ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b4c8:	673a      	str	r2, [r7, #112]	; 0x70
 800b4ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b4ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b4d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e3      	bne.n	800b4a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e4:	d153      	bne.n	800b58e <UART_Start_Receive_IT+0x19e>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b4ec:	88fa      	ldrh	r2, [r7, #6]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d34d      	bcc.n	800b58e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4fa:	d107      	bne.n	800b50c <UART_Start_Receive_IT+0x11c>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d103      	bne.n	800b50c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	4a4a      	ldr	r2, [pc, #296]	; (800b630 <UART_Start_Receive_IT+0x240>)
 800b508:	671a      	str	r2, [r3, #112]	; 0x70
 800b50a:	e002      	b.n	800b512 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4a49      	ldr	r2, [pc, #292]	; (800b634 <UART_Start_Receive_IT+0x244>)
 800b510:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d01a      	beq.n	800b558 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b52a:	e853 3f00 	ldrex	r3, [r3]
 800b52e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b532:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b536:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	461a      	mov	r2, r3
 800b540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b544:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b546:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b548:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b54a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b54c:	e841 2300 	strex	r3, r2, [r1]
 800b550:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e4      	bne.n	800b522 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3308      	adds	r3, #8
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b562:	e853 3f00 	ldrex	r3, [r3]
 800b566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b56e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	3308      	adds	r3, #8
 800b576:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b578:	64ba      	str	r2, [r7, #72]	; 0x48
 800b57a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b57c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b57e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b580:	e841 2300 	strex	r3, r2, [r1]
 800b584:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e5      	bne.n	800b558 <UART_Start_Receive_IT+0x168>
 800b58c:	e04a      	b.n	800b624 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b596:	d107      	bne.n	800b5a8 <UART_Start_Receive_IT+0x1b8>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d103      	bne.n	800b5a8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4a25      	ldr	r2, [pc, #148]	; (800b638 <UART_Start_Receive_IT+0x248>)
 800b5a4:	671a      	str	r2, [r3, #112]	; 0x70
 800b5a6:	e002      	b.n	800b5ae <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	4a24      	ldr	r2, [pc, #144]	; (800b63c <UART_Start_Receive_IT+0x24c>)
 800b5ac:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d019      	beq.n	800b5f2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	e853 3f00 	ldrex	r3, [r3]
 800b5ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b5d2:	677b      	str	r3, [r7, #116]	; 0x74
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	461a      	mov	r2, r3
 800b5da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5e4:	e841 2300 	strex	r3, r2, [r1]
 800b5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1e6      	bne.n	800b5be <UART_Start_Receive_IT+0x1ce>
 800b5f0:	e018      	b.n	800b624 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	e853 3f00 	ldrex	r3, [r3]
 800b5fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	f043 0320 	orr.w	r3, r3, #32
 800b606:	67bb      	str	r3, [r7, #120]	; 0x78
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	461a      	mov	r2, r3
 800b60e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b610:	623b      	str	r3, [r7, #32]
 800b612:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b614:	69f9      	ldr	r1, [r7, #28]
 800b616:	6a3a      	ldr	r2, [r7, #32]
 800b618:	e841 2300 	strex	r3, r2, [r1]
 800b61c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1e6      	bne.n	800b5f2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	378c      	adds	r7, #140	; 0x8c
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bc80      	pop	{r7}
 800b62e:	4770      	bx	lr
 800b630:	0800c1a9 	.word	0x0800c1a9
 800b634:	0800beb1 	.word	0x0800beb1
 800b638:	0800bd51 	.word	0x0800bd51
 800b63c:	0800bbf1 	.word	0x0800bbf1

0800b640 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b096      	sub	sp, #88	; 0x58
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	60b9      	str	r1, [r7, #8]
 800b64a:	4613      	mov	r3, r2
 800b64c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	88fa      	ldrh	r2, [r7, #6]
 800b658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2200      	movs	r2, #0
 800b660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2222      	movs	r2, #34	; 0x22
 800b668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b670:	2b00      	cmp	r3, #0
 800b672:	d02c      	beq.n	800b6ce <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b678:	4a42      	ldr	r2, [pc, #264]	; (800b784 <UART_Start_Receive_DMA+0x144>)
 800b67a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b680:	4a41      	ldr	r2, [pc, #260]	; (800b788 <UART_Start_Receive_DMA+0x148>)
 800b682:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b688:	4a40      	ldr	r2, [pc, #256]	; (800b78c <UART_Start_Receive_DMA+0x14c>)
 800b68a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b690:	2200      	movs	r2, #0
 800b692:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3324      	adds	r3, #36	; 0x24
 800b69e:	4619      	mov	r1, r3
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	88fb      	ldrh	r3, [r7, #6]
 800b6a8:	f7fb f96a 	bl	8006980 <HAL_DMA_Start_IT>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00d      	beq.n	800b6ce <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2210      	movs	r2, #16
 800b6b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800b6ca:	2301      	movs	r3, #1
 800b6cc:	e055      	b.n	800b77a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d018      	beq.n	800b710 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e6:	e853 3f00 	ldrex	r3, [r3]
 800b6ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6f2:	657b      	str	r3, [r7, #84]	; 0x54
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6fe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b700:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b704:	e841 2300 	strex	r3, r2, [r1]
 800b708:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b70a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d1e6      	bne.n	800b6de <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	3308      	adds	r3, #8
 800b716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	e853 3f00 	ldrex	r3, [r3]
 800b71e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	653b      	str	r3, [r7, #80]	; 0x50
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3308      	adds	r3, #8
 800b72e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b730:	637a      	str	r2, [r7, #52]	; 0x34
 800b732:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b738:	e841 2300 	strex	r3, r2, [r1]
 800b73c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e5      	bne.n	800b710 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	3308      	adds	r3, #8
 800b74a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b74c:	697b      	ldr	r3, [r7, #20]
 800b74e:	e853 3f00 	ldrex	r3, [r3]
 800b752:	613b      	str	r3, [r7, #16]
   return(result);
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b75a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	3308      	adds	r3, #8
 800b762:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b764:	623a      	str	r2, [r7, #32]
 800b766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b768:	69f9      	ldr	r1, [r7, #28]
 800b76a:	6a3a      	ldr	r2, [r7, #32]
 800b76c:	e841 2300 	strex	r3, r2, [r1]
 800b770:	61bb      	str	r3, [r7, #24]
   return(result);
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1e5      	bne.n	800b744 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3758      	adds	r7, #88	; 0x58
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	0800b991 	.word	0x0800b991
 800b788:	0800bab7 	.word	0x0800bab7
 800b78c:	0800baef 	.word	0x0800baef

0800b790 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b790:	b480      	push	{r7}
 800b792:	b08f      	sub	sp, #60	; 0x3c
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	e853 3f00 	ldrex	r3, [r3]
 800b7a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b7ac:	637b      	str	r3, [r7, #52]	; 0x34
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b7bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7be:	e841 2300 	strex	r3, r2, [r1]
 800b7c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1e6      	bne.n	800b798 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	3308      	adds	r3, #8
 800b7d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	e853 3f00 	ldrex	r3, [r3]
 800b7d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800b7e0:	633b      	str	r3, [r7, #48]	; 0x30
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	3308      	adds	r3, #8
 800b7e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ea:	61ba      	str	r2, [r7, #24]
 800b7ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ee:	6979      	ldr	r1, [r7, #20]
 800b7f0:	69ba      	ldr	r2, [r7, #24]
 800b7f2:	e841 2300 	strex	r3, r2, [r1]
 800b7f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1e5      	bne.n	800b7ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2220      	movs	r2, #32
 800b802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b806:	bf00      	nop
 800b808:	373c      	adds	r7, #60	; 0x3c
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bc80      	pop	{r7}
 800b80e:	4770      	bx	lr

0800b810 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b810:	b480      	push	{r7}
 800b812:	b095      	sub	sp, #84	; 0x54
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b820:	e853 3f00 	ldrex	r3, [r3]
 800b824:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b82c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	461a      	mov	r2, r3
 800b834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b836:	643b      	str	r3, [r7, #64]	; 0x40
 800b838:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b83c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b83e:	e841 2300 	strex	r3, r2, [r1]
 800b842:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1e6      	bne.n	800b818 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	3308      	adds	r3, #8
 800b850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b852:	6a3b      	ldr	r3, [r7, #32]
 800b854:	e853 3f00 	ldrex	r3, [r3]
 800b858:	61fb      	str	r3, [r7, #28]
   return(result);
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b860:	f023 0301 	bic.w	r3, r3, #1
 800b864:	64bb      	str	r3, [r7, #72]	; 0x48
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3308      	adds	r3, #8
 800b86c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b86e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b876:	e841 2300 	strex	r3, r2, [r1]
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d1e3      	bne.n	800b84a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b886:	2b01      	cmp	r3, #1
 800b888:	d118      	bne.n	800b8bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	e853 3f00 	ldrex	r3, [r3]
 800b896:	60bb      	str	r3, [r7, #8]
   return(result);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f023 0310 	bic.w	r3, r3, #16
 800b89e:	647b      	str	r3, [r7, #68]	; 0x44
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8a8:	61bb      	str	r3, [r7, #24]
 800b8aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ac:	6979      	ldr	r1, [r7, #20]
 800b8ae:	69ba      	ldr	r2, [r7, #24]
 800b8b0:	e841 2300 	strex	r3, r2, [r1]
 800b8b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e6      	bne.n	800b88a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2220      	movs	r2, #32
 800b8c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b8d0:	bf00      	nop
 800b8d2:	3754      	adds	r7, #84	; 0x54
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bc80      	pop	{r7}
 800b8d8:	4770      	bx	lr

0800b8da <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b090      	sub	sp, #64	; 0x40
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0320 	and.w	r3, r3, #32
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d137      	bne.n	800b966 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	3308      	adds	r3, #8
 800b904:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b908:	e853 3f00 	ldrex	r3, [r3]
 800b90c:	623b      	str	r3, [r7, #32]
   return(result);
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b914:	63bb      	str	r3, [r7, #56]	; 0x38
 800b916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	3308      	adds	r3, #8
 800b91c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b91e:	633a      	str	r2, [r7, #48]	; 0x30
 800b920:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b922:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b926:	e841 2300 	strex	r3, r2, [r1]
 800b92a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1e5      	bne.n	800b8fe <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	e853 3f00 	ldrex	r3, [r3]
 800b93e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b946:	637b      	str	r3, [r7, #52]	; 0x34
 800b948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	461a      	mov	r2, r3
 800b94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b950:	61fb      	str	r3, [r7, #28]
 800b952:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b954:	69b9      	ldr	r1, [r7, #24]
 800b956:	69fa      	ldr	r2, [r7, #28]
 800b958:	e841 2300 	strex	r3, r2, [r1]
 800b95c:	617b      	str	r3, [r7, #20]
   return(result);
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1e6      	bne.n	800b932 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b964:	e002      	b.n	800b96c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b966:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b968:	f7f8 fa5a 	bl	8003e20 <HAL_UART_TxCpltCallback>
}
 800b96c:	bf00      	nop
 800b96e:	3740      	adds	r7, #64	; 0x40
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b980:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7ff f8f0 	bl	800ab68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b988:	bf00      	nop
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b09c      	sub	sp, #112	; 0x70
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f003 0320 	and.w	r3, r3, #32
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d171      	bne.n	800ba90 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9bc:	e853 3f00 	ldrex	r3, [r3]
 800b9c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b9ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9d2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b9d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b9da:	e841 2300 	strex	r3, r2, [r1]
 800b9de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b9e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1e6      	bne.n	800b9b4 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	3308      	adds	r3, #8
 800b9ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f0:	e853 3f00 	ldrex	r3, [r3]
 800b9f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f8:	f023 0301 	bic.w	r3, r3, #1
 800b9fc:	667b      	str	r3, [r7, #100]	; 0x64
 800b9fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3308      	adds	r3, #8
 800ba04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba06:	647a      	str	r2, [r7, #68]	; 0x44
 800ba08:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ba0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba0e:	e841 2300 	strex	r3, r2, [r1]
 800ba12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ba14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1e5      	bne.n	800b9e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3308      	adds	r3, #8
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba24:	e853 3f00 	ldrex	r3, [r3]
 800ba28:	623b      	str	r3, [r7, #32]
   return(result);
 800ba2a:	6a3b      	ldr	r3, [r7, #32]
 800ba2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba30:	663b      	str	r3, [r7, #96]	; 0x60
 800ba32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3308      	adds	r3, #8
 800ba38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba3a:	633a      	str	r2, [r7, #48]	; 0x30
 800ba3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba42:	e841 2300 	strex	r3, r2, [r1]
 800ba46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1e5      	bne.n	800ba1a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ba4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba50:	2220      	movs	r2, #32
 800ba52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d118      	bne.n	800ba90 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	e853 3f00 	ldrex	r3, [r3]
 800ba6a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 0310 	bic.w	r3, r3, #16
 800ba72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba7c:	61fb      	str	r3, [r7, #28]
 800ba7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba80:	69b9      	ldr	r1, [r7, #24]
 800ba82:	69fa      	ldr	r2, [r7, #28]
 800ba84:	e841 2300 	strex	r3, r2, [r1]
 800ba88:	617b      	str	r3, [r7, #20]
   return(result);
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1e6      	bne.n	800ba5e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d107      	bne.n	800baa8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ba9e:	4619      	mov	r1, r3
 800baa0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800baa2:	f7f7 fc27 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800baa6:	e002      	b.n	800baae <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800baa8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800baaa:	f7f8 f9cf 	bl	8003e4c <HAL_UART_RxCpltCallback>
}
 800baae:	bf00      	nop
 800bab0:	3770      	adds	r7, #112	; 0x70
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d109      	bne.n	800bae0 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bad2:	085b      	lsrs	r3, r3, #1
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	4619      	mov	r1, r3
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7f7 fc0b 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bade:	e002      	b.n	800bae6 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f7ff f84a 	bl	800ab7a <HAL_UART_RxHalfCpltCallback>
}
 800bae6:	bf00      	nop
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}

0800baee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b086      	sub	sp, #24
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb16:	2b80      	cmp	r3, #128	; 0x80
 800bb18:	d109      	bne.n	800bb2e <UART_DMAError+0x40>
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	2b21      	cmp	r3, #33	; 0x21
 800bb1e:	d106      	bne.n	800bb2e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bb28:	6978      	ldr	r0, [r7, #20]
 800bb2a:	f7ff fe31 	bl	800b790 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb38:	2b40      	cmp	r3, #64	; 0x40
 800bb3a:	d109      	bne.n	800bb50 <UART_DMAError+0x62>
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2b22      	cmp	r3, #34	; 0x22
 800bb40:	d106      	bne.n	800bb50 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	2200      	movs	r2, #0
 800bb46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bb4a:	6978      	ldr	r0, [r7, #20]
 800bb4c:	f7ff fe60 	bl	800b810 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb56:	f043 0210 	orr.w	r2, r3, #16
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb60:	6978      	ldr	r0, [r7, #20]
 800bb62:	f7ff f813 	bl	800ab8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb66:	bf00      	nop
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b084      	sub	sp, #16
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f7fe fffd 	bl	800ab8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb92:	bf00      	nop
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b088      	sub	sp, #32
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	e853 3f00 	ldrex	r3, [r3]
 800bbae:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbb6:	61fb      	str	r3, [r7, #28]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	69fb      	ldr	r3, [r7, #28]
 800bbc0:	61bb      	str	r3, [r7, #24]
 800bbc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc4:	6979      	ldr	r1, [r7, #20]
 800bbc6:	69ba      	ldr	r2, [r7, #24]
 800bbc8:	e841 2300 	strex	r3, r2, [r1]
 800bbcc:	613b      	str	r3, [r7, #16]
   return(result);
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d1e6      	bne.n	800bba2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2220      	movs	r2, #32
 800bbd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f7f8 f91c 	bl	8003e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbe8:	bf00      	nop
 800bbea:	3720      	adds	r7, #32
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b096      	sub	sp, #88	; 0x58
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bbfe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc08:	2b22      	cmp	r3, #34	; 0x22
 800bc0a:	f040 8095 	bne.w	800bd38 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc18:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800bc1c:	b2d9      	uxtb	r1, r3
 800bc1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc28:	400a      	ands	r2, r1
 800bc2a:	b2d2      	uxtb	r2, r2
 800bc2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc3e:	b29b      	uxth	r3, r3
 800bc40:	3b01      	subs	r3, #1
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d178      	bne.n	800bd48 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc5e:	e853 3f00 	ldrex	r3, [r3]
 800bc62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc6a:	653b      	str	r3, [r7, #80]	; 0x50
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	461a      	mov	r2, r3
 800bc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc74:	647b      	str	r3, [r7, #68]	; 0x44
 800bc76:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bc7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc7c:	e841 2300 	strex	r3, r2, [r1]
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bc82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1e6      	bne.n	800bc56 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3308      	adds	r3, #8
 800bc8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc92:	e853 3f00 	ldrex	r3, [r3]
 800bc96:	623b      	str	r3, [r7, #32]
   return(result);
 800bc98:	6a3b      	ldr	r3, [r7, #32]
 800bc9a:	f023 0301 	bic.w	r3, r3, #1
 800bc9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	3308      	adds	r3, #8
 800bca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bca8:	633a      	str	r2, [r7, #48]	; 0x30
 800bcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcb0:	e841 2300 	strex	r3, r2, [r1]
 800bcb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1e5      	bne.n	800bc88 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2220      	movs	r2, #32
 800bcc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcce:	2b01      	cmp	r3, #1
 800bcd0:	d12e      	bne.n	800bd30 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f023 0310 	bic.w	r3, r3, #16
 800bcec:	64bb      	str	r3, [r7, #72]	; 0x48
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcf6:	61fb      	str	r3, [r7, #28]
 800bcf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfa:	69b9      	ldr	r1, [r7, #24]
 800bcfc:	69fa      	ldr	r2, [r7, #28]
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	617b      	str	r3, [r7, #20]
   return(result);
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1e6      	bne.n	800bcd8 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	69db      	ldr	r3, [r3, #28]
 800bd10:	f003 0310 	and.w	r3, r3, #16
 800bd14:	2b10      	cmp	r3, #16
 800bd16:	d103      	bne.n	800bd20 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2210      	movs	r2, #16
 800bd1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd26:	4619      	mov	r1, r3
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7f7 fae3 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd2e:	e00b      	b.n	800bd48 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7f8 f88b 	bl	8003e4c <HAL_UART_RxCpltCallback>
}
 800bd36:	e007      	b.n	800bd48 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	699a      	ldr	r2, [r3, #24]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f042 0208 	orr.w	r2, r2, #8
 800bd46:	619a      	str	r2, [r3, #24]
}
 800bd48:	bf00      	nop
 800bd4a:	3758      	adds	r7, #88	; 0x58
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b096      	sub	sp, #88	; 0x58
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bd5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd68:	2b22      	cmp	r3, #34	; 0x22
 800bd6a:	f040 8095 	bne.w	800be98 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd7c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bd7e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800bd82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800bd86:	4013      	ands	r3, r2
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd92:	1c9a      	adds	r2, r3, #2
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	3b01      	subs	r3, #1
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d178      	bne.n	800bea8 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbe:	e853 3f00 	ldrex	r3, [r3]
 800bdc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdd4:	643b      	str	r3, [r7, #64]	; 0x40
 800bdd6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bddc:	e841 2300 	strex	r3, r2, [r1]
 800bde0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1e6      	bne.n	800bdb6 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	3308      	adds	r3, #8
 800bdee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	e853 3f00 	ldrex	r3, [r3]
 800bdf6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	f023 0301 	bic.w	r3, r3, #1
 800bdfe:	64bb      	str	r3, [r7, #72]	; 0x48
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	3308      	adds	r3, #8
 800be06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be08:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be10:	e841 2300 	strex	r3, r2, [r1]
 800be14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1e5      	bne.n	800bde8 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2220      	movs	r2, #32
 800be20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2200      	movs	r2, #0
 800be28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d12e      	bne.n	800be90 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	e853 3f00 	ldrex	r3, [r3]
 800be44:	60bb      	str	r3, [r7, #8]
   return(result);
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	f023 0310 	bic.w	r3, r3, #16
 800be4c:	647b      	str	r3, [r7, #68]	; 0x44
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	461a      	mov	r2, r3
 800be54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be56:	61bb      	str	r3, [r7, #24]
 800be58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be5a:	6979      	ldr	r1, [r7, #20]
 800be5c:	69ba      	ldr	r2, [r7, #24]
 800be5e:	e841 2300 	strex	r3, r2, [r1]
 800be62:	613b      	str	r3, [r7, #16]
   return(result);
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d1e6      	bne.n	800be38 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	69db      	ldr	r3, [r3, #28]
 800be70:	f003 0310 	and.w	r3, r3, #16
 800be74:	2b10      	cmp	r3, #16
 800be76:	d103      	bne.n	800be80 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2210      	movs	r2, #16
 800be7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800be86:	4619      	mov	r1, r3
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7f7 fa33 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800be8e:	e00b      	b.n	800bea8 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7f7 ffdb 	bl	8003e4c <HAL_UART_RxCpltCallback>
}
 800be96:	e007      	b.n	800bea8 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	699a      	ldr	r2, [r3, #24]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f042 0208 	orr.w	r2, r2, #8
 800bea6:	619a      	str	r2, [r3, #24]
}
 800bea8:	bf00      	nop
 800beaa:	3758      	adds	r7, #88	; 0x58
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b0a6      	sub	sp, #152	; 0x98
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bebe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	69db      	ldr	r3, [r3, #28]
 800bec8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bee6:	2b22      	cmp	r3, #34	; 0x22
 800bee8:	f040 814f 	bne.w	800c18a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bef2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bef6:	e0f6      	b.n	800c0e6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800befe:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf02:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800bf06:	b2d9      	uxtb	r1, r3
 800bf08:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf12:	400a      	ands	r2, r1
 800bf14:	b2d2      	uxtb	r2, r2
 800bf16:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	3b01      	subs	r3, #1
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	69db      	ldr	r3, [r3, #28]
 800bf3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bf3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf42:	f003 0307 	and.w	r3, r3, #7
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d053      	beq.n	800bff2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d011      	beq.n	800bf7a <UART_RxISR_8BIT_FIFOEN+0xca>
 800bf56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00b      	beq.n	800bf7a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2201      	movs	r2, #1
 800bf68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf70:	f043 0201 	orr.w	r2, r3, #1
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf7e:	f003 0302 	and.w	r3, r3, #2
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d011      	beq.n	800bfaa <UART_RxISR_8BIT_FIFOEN+0xfa>
 800bf86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf8a:	f003 0301 	and.w	r3, r3, #1
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00b      	beq.n	800bfaa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2202      	movs	r2, #2
 800bf98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfa0:	f043 0204 	orr.w	r2, r3, #4
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bfae:	f003 0304 	and.w	r3, r3, #4
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d011      	beq.n	800bfda <UART_RxISR_8BIT_FIFOEN+0x12a>
 800bfb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bfba:	f003 0301 	and.w	r3, r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00b      	beq.n	800bfda <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	2204      	movs	r2, #4
 800bfc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfd0:	f043 0202 	orr.w	r2, r3, #2
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d006      	beq.n	800bff2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f7fe fdd1 	bl	800ab8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d173      	bne.n	800c0e6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c006:	e853 3f00 	ldrex	r3, [r3]
 800c00a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c00c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c00e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c012:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	461a      	mov	r2, r3
 800c01c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c020:	66bb      	str	r3, [r7, #104]	; 0x68
 800c022:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c024:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c026:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c028:	e841 2300 	strex	r3, r2, [r1]
 800c02c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c02e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c030:	2b00      	cmp	r3, #0
 800c032:	d1e4      	bne.n	800bffe <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3308      	adds	r3, #8
 800c03a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c03e:	e853 3f00 	ldrex	r3, [r3]
 800c042:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c04a:	f023 0301 	bic.w	r3, r3, #1
 800c04e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	3308      	adds	r3, #8
 800c056:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c058:	657a      	str	r2, [r7, #84]	; 0x54
 800c05a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c05e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c060:	e841 2300 	strex	r3, r2, [r1]
 800c064:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d1e3      	bne.n	800c034 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2220      	movs	r2, #32
 800c070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d12e      	bne.n	800c0e0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c098:	f023 0310 	bic.w	r3, r3, #16
 800c09c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0a6:	643b      	str	r3, [r7, #64]	; 0x40
 800c0a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e6      	bne.n	800c088 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	69db      	ldr	r3, [r3, #28]
 800c0c0:	f003 0310 	and.w	r3, r3, #16
 800c0c4:	2b10      	cmp	r3, #16
 800c0c6:	d103      	bne.n	800c0d0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2210      	movs	r2, #16
 800c0ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f7f7 f90b 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
 800c0de:	e002      	b.n	800c0e6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f7f7 feb3 	bl	8003e4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c0e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d006      	beq.n	800c0fc <UART_RxISR_8BIT_FIFOEN+0x24c>
 800c0ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0f2:	f003 0320 	and.w	r3, r3, #32
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f47f aefe 	bne.w	800bef8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c102:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c106:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d045      	beq.n	800c19a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c114:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c118:	429a      	cmp	r2, r3
 800c11a:	d23e      	bcs.n	800c19a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3308      	adds	r3, #8
 800c122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	e853 3f00 	ldrex	r3, [r3]
 800c12a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c132:	673b      	str	r3, [r7, #112]	; 0x70
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	3308      	adds	r3, #8
 800c13a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c13c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c13e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c142:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c144:	e841 2300 	strex	r3, r2, [r1]
 800c148:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1e5      	bne.n	800c11c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a14      	ldr	r2, [pc, #80]	; (800c1a4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800c154:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	e853 3f00 	ldrex	r3, [r3]
 800c162:	60bb      	str	r3, [r7, #8]
   return(result);
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	f043 0320 	orr.w	r3, r3, #32
 800c16a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	461a      	mov	r2, r3
 800c172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c174:	61bb      	str	r3, [r7, #24]
 800c176:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c178:	6979      	ldr	r1, [r7, #20]
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	e841 2300 	strex	r3, r2, [r1]
 800c180:	613b      	str	r3, [r7, #16]
   return(result);
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d1e6      	bne.n	800c156 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c188:	e007      	b.n	800c19a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	699a      	ldr	r2, [r3, #24]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f042 0208 	orr.w	r2, r2, #8
 800c198:	619a      	str	r2, [r3, #24]
}
 800c19a:	bf00      	nop
 800c19c:	3798      	adds	r7, #152	; 0x98
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	0800bbf1 	.word	0x0800bbf1

0800c1a8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b0a8      	sub	sp, #160	; 0xa0
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c1b6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	69db      	ldr	r3, [r3, #28]
 800c1c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1de:	2b22      	cmp	r3, #34	; 0x22
 800c1e0:	f040 8153 	bne.w	800c48a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1ea:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1ee:	e0fa      	b.n	800c3e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800c202:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800c206:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800c20a:	4013      	ands	r3, r2
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c212:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c218:	1c9a      	adds	r2, r3, #2
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c224:	b29b      	uxth	r3, r3
 800c226:	3b01      	subs	r3, #1
 800c228:	b29a      	uxth	r2, r3
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	69db      	ldr	r3, [r3, #28]
 800c236:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c23a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c23e:	f003 0307 	and.w	r3, r3, #7
 800c242:	2b00      	cmp	r3, #0
 800c244:	d053      	beq.n	800c2ee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c24a:	f003 0301 	and.w	r3, r3, #1
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d011      	beq.n	800c276 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c252:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00b      	beq.n	800c276 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	2201      	movs	r2, #1
 800c264:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c26c:	f043 0201 	orr.w	r2, r3, #1
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c276:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c27a:	f003 0302 	and.w	r3, r3, #2
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d011      	beq.n	800c2a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c282:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00b      	beq.n	800c2a6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2202      	movs	r2, #2
 800c294:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c29c:	f043 0204 	orr.w	r2, r3, #4
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2aa:	f003 0304 	and.w	r3, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d011      	beq.n	800c2d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c2b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00b      	beq.n	800c2d6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2204      	movs	r2, #4
 800c2c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2cc:	f043 0202 	orr.w	r2, r3, #2
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d006      	beq.n	800c2ee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7fe fc53 	bl	800ab8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d175      	bne.n	800c3e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c300:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c302:	e853 3f00 	ldrex	r3, [r3]
 800c306:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c30a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c30e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c31c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c31e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c320:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c322:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c324:	e841 2300 	strex	r3, r2, [r1]
 800c328:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c32a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d1e4      	bne.n	800c2fa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	3308      	adds	r3, #8
 800c336:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c33a:	e853 3f00 	ldrex	r3, [r3]
 800c33e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c346:	f023 0301 	bic.w	r3, r3, #1
 800c34a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3308      	adds	r3, #8
 800c354:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c358:	65ba      	str	r2, [r7, #88]	; 0x58
 800c35a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c35e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e1      	bne.n	800c330 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2220      	movs	r2, #32
 800c370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d12e      	bne.n	800c3e0 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	2200      	movs	r2, #0
 800c386:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	e853 3f00 	ldrex	r3, [r3]
 800c394:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c398:	f023 0310 	bic.w	r3, r3, #16
 800c39c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3a6:	647b      	str	r3, [r7, #68]	; 0x44
 800c3a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3ae:	e841 2300 	strex	r3, r2, [r1]
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d1e6      	bne.n	800c388 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	69db      	ldr	r3, [r3, #28]
 800c3c0:	f003 0310 	and.w	r3, r3, #16
 800c3c4:	2b10      	cmp	r3, #16
 800c3c6:	d103      	bne.n	800c3d0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	2210      	movs	r2, #16
 800c3ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7f6 ff8b 	bl	80032f4 <HAL_UARTEx_RxEventCallback>
 800c3de:	e002      	b.n	800c3e6 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7f7 fd33 	bl	8003e4c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c3e6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d006      	beq.n	800c3fc <UART_RxISR_16BIT_FIFOEN+0x254>
 800c3ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f47f aefa 	bne.w	800c1f0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c402:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c406:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d045      	beq.n	800c49a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c414:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800c418:	429a      	cmp	r2, r3
 800c41a:	d23e      	bcs.n	800c49a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3308      	adds	r3, #8
 800c422:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c426:	e853 3f00 	ldrex	r3, [r3]
 800c42a:	623b      	str	r3, [r7, #32]
   return(result);
 800c42c:	6a3b      	ldr	r3, [r7, #32]
 800c42e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c432:	677b      	str	r3, [r7, #116]	; 0x74
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	3308      	adds	r3, #8
 800c43a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c43c:	633a      	str	r2, [r7, #48]	; 0x30
 800c43e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c444:	e841 2300 	strex	r3, r2, [r1]
 800c448:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e5      	bne.n	800c41c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4a14      	ldr	r2, [pc, #80]	; (800c4a4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800c454:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	e853 3f00 	ldrex	r3, [r3]
 800c462:	60fb      	str	r3, [r7, #12]
   return(result);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f043 0320 	orr.w	r3, r3, #32
 800c46a:	673b      	str	r3, [r7, #112]	; 0x70
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	461a      	mov	r2, r3
 800c472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c474:	61fb      	str	r3, [r7, #28]
 800c476:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c478:	69b9      	ldr	r1, [r7, #24]
 800c47a:	69fa      	ldr	r2, [r7, #28]
 800c47c:	e841 2300 	strex	r3, r2, [r1]
 800c480:	617b      	str	r3, [r7, #20]
   return(result);
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1e6      	bne.n	800c456 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c488:	e007      	b.n	800c49a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	699a      	ldr	r2, [r3, #24]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f042 0208 	orr.w	r2, r2, #8
 800c498:	619a      	str	r2, [r3, #24]
}
 800c49a:	bf00      	nop
 800c49c:	37a0      	adds	r7, #160	; 0xa0
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0800bd51 	.word	0x0800bd51

0800c4a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bc80      	pop	{r7}
 800c4b8:	4770      	bx	lr

0800c4ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c4ba:	b480      	push	{r7}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c4c2:	bf00      	nop
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bc80      	pop	{r7}
 800c4ca:	4770      	bx	lr

0800c4cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bc80      	pop	{r7}
 800c4dc:	4770      	bx	lr

0800c4de <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c4de:	b580      	push	{r7, lr}
 800c4e0:	b088      	sub	sp, #32
 800c4e2:	af02      	add	r7, sp, #8
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	1d3b      	adds	r3, r7, #4
 800c4e8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d101      	bne.n	800c4fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800c4fa:	2302      	movs	r3, #2
 800c4fc:	e046      	b.n	800c58c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2224      	movs	r2, #36	; 0x24
 800c50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f022 0201 	bic.w	r2, r2, #1
 800c51c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	430a      	orrs	r2, r1
 800c530:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d105      	bne.n	800c544 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c538:	1d3b      	adds	r3, r7, #4
 800c53a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f000 f96d 	bl	800c81e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f042 0201 	orr.w	r2, r2, #1
 800c552:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c554:	f7f6 f890 	bl	8002678 <HAL_GetTick>
 800c558:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c55a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c55e:	9300      	str	r3, [sp, #0]
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	2200      	movs	r2, #0
 800c564:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f7fe fe79 	bl	800b260 <UART_WaitOnFlagUntilTimeout>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800c574:	2303      	movs	r3, #3
 800c576:	75fb      	strb	r3, [r7, #23]
 800c578:	e003      	b.n	800c582 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2220      	movs	r2, #32
 800c57e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800c58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800c594:	b480      	push	{r7}
 800c596:	b089      	sub	sp, #36	; 0x24
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d101      	bne.n	800c5aa <HAL_UARTEx_EnableStopMode+0x16>
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	e021      	b.n	800c5ee <HAL_UARTEx_EnableStopMode+0x5a>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	e853 3f00 	ldrex	r3, [r3]
 800c5be:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	f043 0302 	orr.w	r3, r3, #2
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	61bb      	str	r3, [r7, #24]
 800c5d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d4:	6979      	ldr	r1, [r7, #20]
 800c5d6:	69ba      	ldr	r2, [r7, #24]
 800c5d8:	e841 2300 	strex	r3, r2, [r1]
 800c5dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1e6      	bne.n	800c5b2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3724      	adds	r7, #36	; 0x24
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bc80      	pop	{r7}
 800c5f6:	4770      	bx	lr

0800c5f8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c606:	2b01      	cmp	r3, #1
 800c608:	d101      	bne.n	800c60e <HAL_UARTEx_EnableFifoMode+0x16>
 800c60a:	2302      	movs	r3, #2
 800c60c:	e02b      	b.n	800c666 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2224      	movs	r2, #36	; 0x24
 800c61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	681a      	ldr	r2, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f022 0201 	bic.w	r2, r2, #1
 800c634:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c63c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c644:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f908 	bl	800c864 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2220      	movs	r2, #32
 800c658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c664:	2300      	movs	r3, #0
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b084      	sub	sp, #16
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d101      	bne.n	800c686 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c682:	2302      	movs	r3, #2
 800c684:	e02d      	b.n	800c6e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2224      	movs	r2, #36	; 0x24
 800c692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f022 0201 	bic.w	r2, r2, #1
 800c6ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	430a      	orrs	r2, r1
 800c6c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f8ce 	bl	800c864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2220      	movs	r2, #32
 800c6d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c6e0:	2300      	movs	r3, #0
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b084      	sub	sp, #16
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d101      	bne.n	800c702 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c6fe:	2302      	movs	r3, #2
 800c700:	e02d      	b.n	800c75e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2201      	movs	r2, #1
 800c706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2224      	movs	r2, #36	; 0x24
 800c70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	681a      	ldr	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f022 0201 	bic.w	r2, r2, #1
 800c728:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	430a      	orrs	r2, r1
 800c73c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f890 	bl	800c864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2220      	movs	r2, #32
 800c750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	3710      	adds	r7, #16
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c766:	b580      	push	{r7, lr}
 800c768:	b08c      	sub	sp, #48	; 0x30
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	60f8      	str	r0, [r7, #12]
 800c76e:	60b9      	str	r1, [r7, #8]
 800c770:	4613      	mov	r3, r2
 800c772:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c77a:	2b20      	cmp	r3, #32
 800c77c:	d14a      	bne.n	800c814 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d002      	beq.n	800c78a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c784:	88fb      	ldrh	r3, [r7, #6]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d101      	bne.n	800c78e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	e043      	b.n	800c816 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c794:	2b01      	cmp	r3, #1
 800c796:	d101      	bne.n	800c79c <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800c798:	2302      	movs	r3, #2
 800c79a:	e03c      	b.n	800c816 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c7aa:	88fb      	ldrh	r3, [r7, #6]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	68b9      	ldr	r1, [r7, #8]
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f7fe ff45 	bl	800b640 <UART_Start_Receive_DMA>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c7bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d124      	bne.n	800c80e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d11d      	bne.n	800c808 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2210      	movs	r2, #16
 800c7d2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	e853 3f00 	ldrex	r3, [r3]
 800c7e0:	617b      	str	r3, [r7, #20]
   return(result);
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f043 0310 	orr.w	r3, r3, #16
 800c7e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	627b      	str	r3, [r7, #36]	; 0x24
 800c7f4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f6:	6a39      	ldr	r1, [r7, #32]
 800c7f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7fa:	e841 2300 	strex	r3, r2, [r1]
 800c7fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1e6      	bne.n	800c7d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800c806:	e002      	b.n	800c80e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c808:	2301      	movs	r3, #1
 800c80a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800c80e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c812:	e000      	b.n	800c816 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800c814:	2302      	movs	r3, #2
  }
}
 800c816:	4618      	mov	r0, r3
 800c818:	3730      	adds	r7, #48	; 0x30
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c81e:	b480      	push	{r7}
 800c820:	b085      	sub	sp, #20
 800c822:	af00      	add	r7, sp, #0
 800c824:	60f8      	str	r0, [r7, #12]
 800c826:	1d3b      	adds	r3, r7, #4
 800c828:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	f023 0210 	bic.w	r2, r3, #16
 800c836:	893b      	ldrh	r3, [r7, #8]
 800c838:	4619      	mov	r1, r3
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	430a      	orrs	r2, r1
 800c840:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800c84c:	7abb      	ldrb	r3, [r7, #10]
 800c84e:	061a      	lsls	r2, r3, #24
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	430a      	orrs	r2, r1
 800c856:	605a      	str	r2, [r3, #4]
}
 800c858:	bf00      	nop
 800c85a:	3714      	adds	r7, #20
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bc80      	pop	{r7}
 800c860:	4770      	bx	lr
	...

0800c864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c870:	2b00      	cmp	r3, #0
 800c872:	d108      	bne.n	800c886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2201      	movs	r2, #1
 800c878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2201      	movs	r2, #1
 800c880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c884:	e031      	b.n	800c8ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c886:	2308      	movs	r3, #8
 800c888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c88a:	2308      	movs	r3, #8
 800c88c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	0e5b      	lsrs	r3, r3, #25
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 0307 	and.w	r3, r3, #7
 800c89c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	0f5b      	lsrs	r3, r3, #29
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	f003 0307 	and.w	r3, r3, #7
 800c8ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8ae:	7bbb      	ldrb	r3, [r7, #14]
 800c8b0:	7b3a      	ldrb	r2, [r7, #12]
 800c8b2:	4910      	ldr	r1, [pc, #64]	; (800c8f4 <UARTEx_SetNbDataToProcess+0x90>)
 800c8b4:	5c8a      	ldrb	r2, [r1, r2]
 800c8b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8ba:	7b3a      	ldrb	r2, [r7, #12]
 800c8bc:	490e      	ldr	r1, [pc, #56]	; (800c8f8 <UARTEx_SetNbDataToProcess+0x94>)
 800c8be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8cc:	7bfb      	ldrb	r3, [r7, #15]
 800c8ce:	7b7a      	ldrb	r2, [r7, #13]
 800c8d0:	4908      	ldr	r1, [pc, #32]	; (800c8f4 <UARTEx_SetNbDataToProcess+0x90>)
 800c8d2:	5c8a      	ldrb	r2, [r1, r2]
 800c8d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8d8:	7b7a      	ldrb	r2, [r7, #13]
 800c8da:	4907      	ldr	r1, [pc, #28]	; (800c8f8 <UARTEx_SetNbDataToProcess+0x94>)
 800c8dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8de:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8ea:	bf00      	nop
 800c8ec:	3714      	adds	r7, #20
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bc80      	pop	{r7}
 800c8f2:	4770      	bx	lr
 800c8f4:	08015760 	.word	0x08015760
 800c8f8:	08015768 	.word	0x08015768

0800c8fc <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af02      	add	r7, sp, #8
 800c902:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800c904:	4a21      	ldr	r2, [pc, #132]	; (800c98c <RadioInit+0x90>)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800c90a:	4b21      	ldr	r3, [pc, #132]	; (800c990 <RadioInit+0x94>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800c910:	4b1f      	ldr	r3, [pc, #124]	; (800c990 <RadioInit+0x94>)
 800c912:	2200      	movs	r2, #0
 800c914:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800c916:	4b1e      	ldr	r3, [pc, #120]	; (800c990 <RadioInit+0x94>)
 800c918:	2200      	movs	r2, #0
 800c91a:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 800c91c:	481d      	ldr	r0, [pc, #116]	; (800c994 <RadioInit+0x98>)
 800c91e:	f001 feb7 	bl	800e690 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 800c922:	2000      	movs	r0, #0
 800c924:	f001 f81e 	bl	800d964 <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 800c928:	f002 f948 	bl	800ebbc <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800c92c:	2100      	movs	r1, #0
 800c92e:	2000      	movs	r0, #0
 800c930:	f002 fca8 	bl	800f284 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 800c934:	2204      	movs	r2, #4
 800c936:	2100      	movs	r1, #0
 800c938:	2001      	movs	r0, #1
 800c93a:	f002 facd 	bl	800eed8 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800c93e:	2300      	movs	r3, #0
 800c940:	2200      	movs	r2, #0
 800c942:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c946:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c94a:	f002 f9fd 	bl	800ed48 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800c94e:	f000 fe9b 	bl	800d688 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800c952:	2300      	movs	r3, #0
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	4b10      	ldr	r3, [pc, #64]	; (800c998 <RadioInit+0x9c>)
 800c958:	2200      	movs	r2, #0
 800c95a:	f04f 31ff 	mov.w	r1, #4294967295
 800c95e:	480f      	ldr	r0, [pc, #60]	; (800c99c <RadioInit+0xa0>)
 800c960:	f003 fdc6 	bl	80104f0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800c964:	2300      	movs	r3, #0
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	4b0d      	ldr	r3, [pc, #52]	; (800c9a0 <RadioInit+0xa4>)
 800c96a:	2200      	movs	r2, #0
 800c96c:	f04f 31ff 	mov.w	r1, #4294967295
 800c970:	480c      	ldr	r0, [pc, #48]	; (800c9a4 <RadioInit+0xa8>)
 800c972:	f003 fdbd 	bl	80104f0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800c976:	4809      	ldr	r0, [pc, #36]	; (800c99c <RadioInit+0xa0>)
 800c978:	f003 fe5e 	bl	8010638 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800c97c:	4809      	ldr	r0, [pc, #36]	; (800c9a4 <RadioInit+0xa8>)
 800c97e:	f003 fe5b 	bl	8010638 <UTIL_TIMER_Stop>
}
 800c982:	bf00      	nop
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	20000b58 	.word	0x20000b58
 800c990:	20000b5c 	.word	0x20000b5c
 800c994:	0800da49 	.word	0x0800da49
 800c998:	0800d9d1 	.word	0x0800d9d1
 800c99c:	20000bb4 	.word	0x20000bb4
 800c9a0:	0800d9e5 	.word	0x0800d9e5
 800c9a4:	20000bcc 	.word	0x20000bcc

0800c9a8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800c9ac:	f001 feb2 	bl	800e714 <SUBGRF_GetOperatingMode>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	2b07      	cmp	r3, #7
 800c9b4:	d00a      	beq.n	800c9cc <RadioGetStatus+0x24>
 800c9b6:	2b07      	cmp	r3, #7
 800c9b8:	dc0a      	bgt.n	800c9d0 <RadioGetStatus+0x28>
 800c9ba:	2b04      	cmp	r3, #4
 800c9bc:	d002      	beq.n	800c9c4 <RadioGetStatus+0x1c>
 800c9be:	2b05      	cmp	r3, #5
 800c9c0:	d002      	beq.n	800c9c8 <RadioGetStatus+0x20>
 800c9c2:	e005      	b.n	800c9d0 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	e004      	b.n	800c9d2 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	e002      	b.n	800c9d2 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	e000      	b.n	800c9d2 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800c9d0:	2300      	movs	r3, #0
    }
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	bd80      	pop	{r7, pc}
	...

0800c9d8 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	4603      	mov	r3, r0
 800c9e0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800c9e2:	4a25      	ldr	r2, [pc, #148]	; (800ca78 <RadioSetModem+0xa0>)
 800c9e4:	79fb      	ldrb	r3, [r7, #7]
 800c9e6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 800c9e8:	79fb      	ldrb	r3, [r7, #7]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f003 f80d 	bl	800fa0a <RFW_SetRadioModem>
    switch( modem )
 800c9f0:	79fb      	ldrb	r3, [r7, #7]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	2b03      	cmp	r3, #3
 800c9f6:	d80b      	bhi.n	800ca10 <RadioSetModem+0x38>
 800c9f8:	a201      	add	r2, pc, #4	; (adr r2, 800ca00 <RadioSetModem+0x28>)
 800c9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9fe:	bf00      	nop
 800ca00:	0800ca1f 	.word	0x0800ca1f
 800ca04:	0800ca45 	.word	0x0800ca45
 800ca08:	0800ca53 	.word	0x0800ca53
 800ca0c:	0800ca61 	.word	0x0800ca61
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ca10:	2000      	movs	r0, #0
 800ca12:	f002 fa3b 	bl	800ee8c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ca16:	4b18      	ldr	r3, [pc, #96]	; (800ca78 <RadioSetModem+0xa0>)
 800ca18:	2200      	movs	r2, #0
 800ca1a:	735a      	strb	r2, [r3, #13]
        break;
 800ca1c:	e028      	b.n	800ca70 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800ca1e:	2001      	movs	r0, #1
 800ca20:	f002 fa34 	bl	800ee8c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800ca24:	4b14      	ldr	r3, [pc, #80]	; (800ca78 <RadioSetModem+0xa0>)
 800ca26:	7b5a      	ldrb	r2, [r3, #13]
 800ca28:	4b13      	ldr	r3, [pc, #76]	; (800ca78 <RadioSetModem+0xa0>)
 800ca2a:	7b1b      	ldrb	r3, [r3, #12]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d01e      	beq.n	800ca6e <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800ca30:	4b11      	ldr	r3, [pc, #68]	; (800ca78 <RadioSetModem+0xa0>)
 800ca32:	7b1a      	ldrb	r2, [r3, #12]
 800ca34:	4b10      	ldr	r3, [pc, #64]	; (800ca78 <RadioSetModem+0xa0>)
 800ca36:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800ca38:	4b0f      	ldr	r3, [pc, #60]	; (800ca78 <RadioSetModem+0xa0>)
 800ca3a:	7b5b      	ldrb	r3, [r3, #13]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	f000 ff91 	bl	800d964 <RadioSetPublicNetwork>
        }
        break;
 800ca42:	e014      	b.n	800ca6e <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ca44:	2002      	movs	r0, #2
 800ca46:	f002 fa21 	bl	800ee8c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ca4a:	4b0b      	ldr	r3, [pc, #44]	; (800ca78 <RadioSetModem+0xa0>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	735a      	strb	r2, [r3, #13]
        break;
 800ca50:	e00e      	b.n	800ca70 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800ca52:	2002      	movs	r0, #2
 800ca54:	f002 fa1a 	bl	800ee8c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ca58:	4b07      	ldr	r3, [pc, #28]	; (800ca78 <RadioSetModem+0xa0>)
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	735a      	strb	r2, [r3, #13]
        break;
 800ca5e:	e007      	b.n	800ca70 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800ca60:	2000      	movs	r0, #0
 800ca62:	f002 fa13 	bl	800ee8c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800ca66:	4b04      	ldr	r3, [pc, #16]	; (800ca78 <RadioSetModem+0xa0>)
 800ca68:	2200      	movs	r2, #0
 800ca6a:	735a      	strb	r2, [r3, #13]
        break;
 800ca6c:	e000      	b.n	800ca70 <RadioSetModem+0x98>
        break;
 800ca6e:	bf00      	nop
    }
}
 800ca70:	bf00      	nop
 800ca72:	3708      	adds	r7, #8
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	20000b5c 	.word	0x20000b5c

0800ca7c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f002 f9bb 	bl	800ee00 <SUBGRF_SetRfFrequency>
}
 800ca8a:	bf00      	nop
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b090      	sub	sp, #64	; 0x40
 800ca96:	af0a      	add	r7, sp, #40	; 0x28
 800ca98:	60f8      	str	r0, [r7, #12]
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	603b      	str	r3, [r7, #0]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800caa2:	2301      	movs	r3, #1
 800caa4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800caa6:	2300      	movs	r3, #0
 800caa8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800caae:	f000 fdfe 	bl	800d6ae <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 800cab2:	2000      	movs	r0, #0
 800cab4:	f7ff ff90 	bl	800c9d8 <RadioSetModem>

    RadioSetChannel( freq );
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f7ff ffdf 	bl	800ca7c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800cabe:	2301      	movs	r3, #1
 800cac0:	9309      	str	r3, [sp, #36]	; 0x24
 800cac2:	2300      	movs	r3, #0
 800cac4:	9308      	str	r3, [sp, #32]
 800cac6:	2300      	movs	r3, #0
 800cac8:	9307      	str	r3, [sp, #28]
 800caca:	2300      	movs	r3, #0
 800cacc:	9306      	str	r3, [sp, #24]
 800cace:	2300      	movs	r3, #0
 800cad0:	9305      	str	r3, [sp, #20]
 800cad2:	2300      	movs	r3, #0
 800cad4:	9304      	str	r3, [sp, #16]
 800cad6:	2300      	movs	r3, #0
 800cad8:	9303      	str	r3, [sp, #12]
 800cada:	2300      	movs	r3, #0
 800cadc:	9302      	str	r3, [sp, #8]
 800cade:	2303      	movs	r3, #3
 800cae0:	9301      	str	r3, [sp, #4]
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	2300      	movs	r3, #0
 800cae8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	2000      	movs	r0, #0
 800caf0:	f000 f840 	bl	800cb74 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800caf4:	2000      	movs	r0, #0
 800caf6:	f000 fde1 	bl	800d6bc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800cafa:	f000 ff61 	bl	800d9c0 <RadioGetWakeupTime>
 800cafe:	4603      	mov	r3, r0
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7f5 fdcd 	bl	80026a0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800cb06:	f003 feb1 	bl	801086c <UTIL_TIMER_GetCurrentTime>
 800cb0a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800cb0c:	e00d      	b.n	800cb2a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800cb0e:	2000      	movs	r0, #0
 800cb10:	f000 fea6 	bl	800d860 <RadioRssi>
 800cb14:	4603      	mov	r3, r0
 800cb16:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800cb18:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800cb1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb20:	429a      	cmp	r2, r3
 800cb22:	dd02      	ble.n	800cb2a <RadioIsChannelFree+0x98>
        {
            status = false;
 800cb24:	2300      	movs	r3, #0
 800cb26:	75fb      	strb	r3, [r7, #23]
            break;
 800cb28:	e006      	b.n	800cb38 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800cb2a:	6938      	ldr	r0, [r7, #16]
 800cb2c:	f003 feb0 	bl	8010890 <UTIL_TIMER_GetElapsedTime>
 800cb30:	4602      	mov	r2, r0
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d8ea      	bhi.n	800cb0e <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 800cb38:	f000 fdb9 	bl	800d6ae <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b082      	sub	sp, #8
 800cb4a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 800cb50:	2001      	movs	r0, #1
 800cb52:	f7ff ff41 	bl	800c9d8 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800cb56:	2300      	movs	r3, #0
 800cb58:	2200      	movs	r2, #0
 800cb5a:	2100      	movs	r1, #0
 800cb5c:	2000      	movs	r0, #0
 800cb5e:	f002 f8f3 	bl	800ed48 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800cb62:	f001 fea8 	bl	800e8b6 <SUBGRF_GetRandom>
 800cb66:	6078      	str	r0, [r7, #4]

    return rnd;
 800cb68:	687b      	ldr	r3, [r7, #4]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	; 0x28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60b9      	str	r1, [r7, #8]
 800cb7c:	607a      	str	r2, [r7, #4]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	4603      	mov	r3, r0
 800cb82:	73fb      	strb	r3, [r7, #15]
 800cb84:	4613      	mov	r3, r2
 800cb86:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 800cb88:	4abd      	ldr	r2, [pc, #756]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cb8a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cb8e:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800cb90:	f002 fef9 	bl	800f986 <RFW_DeInit>
    if( rxContinuous == true )
 800cb94:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d001      	beq.n	800cba0 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800cba0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d004      	beq.n	800cbb2 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800cba8:	4ab6      	ldr	r2, [pc, #728]	; (800ce84 <RadioSetRxConfig+0x310>)
 800cbaa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cbae:	7013      	strb	r3, [r2, #0]
 800cbb0:	e002      	b.n	800cbb8 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800cbb2:	4bb4      	ldr	r3, [pc, #720]	; (800ce84 <RadioSetRxConfig+0x310>)
 800cbb4:	22ff      	movs	r2, #255	; 0xff
 800cbb6:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
 800cbba:	2b04      	cmp	r3, #4
 800cbbc:	d009      	beq.n	800cbd2 <RadioSetRxConfig+0x5e>
 800cbbe:	2b04      	cmp	r3, #4
 800cbc0:	f300 81da 	bgt.w	800cf78 <RadioSetRxConfig+0x404>
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 80bf 	beq.w	800cd48 <RadioSetRxConfig+0x1d4>
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	f000 812c 	beq.w	800ce28 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800cbd0:	e1d2      	b.n	800cf78 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	f001 ffb4 	bl	800eb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cbd8:	4ba9      	ldr	r3, [pc, #676]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800cbe0:	4aa7      	ldr	r2, [pc, #668]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800cbe6:	4ba6      	ldr	r3, [pc, #664]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cbe8:	2209      	movs	r2, #9
 800cbea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800cbee:	4ba4      	ldr	r3, [pc, #656]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cbf0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cbf4:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cbf6:	68b8      	ldr	r0, [r7, #8]
 800cbf8:	f002 fdf8 	bl	800f7ec <SUBGRF_GetFskBandwidthRegValue>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4b9f      	ldr	r3, [pc, #636]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cc06:	4b9e      	ldr	r3, [pc, #632]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800cc0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cc0e:	00db      	lsls	r3, r3, #3
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	4b9b      	ldr	r3, [pc, #620]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc14:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800cc16:	4b9a      	ldr	r3, [pc, #616]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800cc1c:	4b98      	ldr	r3, [pc, #608]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc1e:	2210      	movs	r2, #16
 800cc20:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800cc22:	4b97      	ldr	r3, [pc, #604]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800cc28:	4b95      	ldr	r3, [pc, #596]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800cc2e:	4b95      	ldr	r3, [pc, #596]	; (800ce84 <RadioSetRxConfig+0x310>)
 800cc30:	781a      	ldrb	r2, [r3, #0]
 800cc32:	4b93      	ldr	r3, [pc, #588]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc34:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800cc36:	4b92      	ldr	r3, [pc, #584]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc38:	2201      	movs	r2, #1
 800cc3a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800cc3c:	4b90      	ldr	r3, [pc, #576]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cc3e:	2200      	movs	r2, #0
 800cc40:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800cc42:	2004      	movs	r0, #4
 800cc44:	f7ff fec8 	bl	800c9d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cc48:	488f      	ldr	r0, [pc, #572]	; (800ce88 <RadioSetRxConfig+0x314>)
 800cc4a:	f002 f9ab 	bl	800efa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cc4e:	488f      	ldr	r0, [pc, #572]	; (800ce8c <RadioSetRxConfig+0x318>)
 800cc50:	f002 fa7a 	bl	800f148 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800cc54:	4a8e      	ldr	r2, [pc, #568]	; (800ce90 <RadioSetRxConfig+0x31c>)
 800cc56:	f107 031c 	add.w	r3, r7, #28
 800cc5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cc5e:	e883 0003 	stmia.w	r3, {r0, r1}
 800cc62:	f107 031c 	add.w	r3, r7, #28
 800cc66:	4618      	mov	r0, r3
 800cc68:	f001 fda3 	bl	800e7b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800cc6c:	f240 10ff 	movw	r0, #511	; 0x1ff
 800cc70:	f001 fdee 	bl	800e850 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 800cc74:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800cc78:	f000 fe11 	bl	800d89e <RadioRead>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800cc82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc86:	f023 0310 	bic.w	r3, r3, #16
 800cc8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 800cc8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc92:	4619      	mov	r1, r3
 800cc94:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800cc98:	f000 fdef 	bl	800d87a <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 800cc9c:	2104      	movs	r1, #4
 800cc9e:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800cca2:	f000 fdea 	bl	800d87a <RadioWrite>
            modReg= RadioRead(0x89b);
 800cca6:	f640 009b 	movw	r0, #2203	; 0x89b
 800ccaa:	f000 fdf8 	bl	800d89e <RadioRead>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800ccb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb8:	f023 031c 	bic.w	r3, r3, #28
 800ccbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 800ccc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccc4:	f043 0308 	orr.w	r3, r3, #8
 800ccc8:	b2db      	uxtb	r3, r3
 800ccca:	4619      	mov	r1, r3
 800cccc:	f640 009b 	movw	r0, #2203	; 0x89b
 800ccd0:	f000 fdd3 	bl	800d87a <RadioWrite>
            modReg= RadioRead(0x6d1);
 800ccd4:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800ccd8:	f000 fde1 	bl	800d89e <RadioRead>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800cce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cce6:	f023 0318 	bic.w	r3, r3, #24
 800ccea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 800ccee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccf2:	f043 0318 	orr.w	r3, r3, #24
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800ccfe:	f000 fdbc 	bl	800d87a <RadioWrite>
            modReg= RadioRead(0x6ac);
 800cd02:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800cd06:	f000 fdca 	bl	800d89e <RadioRead>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800cd10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 800cd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd20:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	4619      	mov	r1, r3
 800cd28:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800cd2c:	f000 fda5 	bl	800d87a <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800cd30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cd32:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800cd36:	fb02 f303 	mul.w	r3, r2, r3
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd42:	4a4f      	ldr	r2, [pc, #316]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd44:	6093      	str	r3, [r2, #8]
            break;
 800cd46:	e118      	b.n	800cf7a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800cd48:	2000      	movs	r0, #0
 800cd4a:	f001 fef9 	bl	800eb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cd4e:	4b4c      	ldr	r3, [pc, #304]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800cd56:	4a4a      	ldr	r2, [pc, #296]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800cd5c:	4b48      	ldr	r3, [pc, #288]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd5e:	220b      	movs	r2, #11
 800cd60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cd64:	68b8      	ldr	r0, [r7, #8]
 800cd66:	f002 fd41 	bl	800f7ec <SUBGRF_GetFskBandwidthRegValue>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	4b44      	ldr	r3, [pc, #272]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cd74:	4b42      	ldr	r3, [pc, #264]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800cd7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd7c:	00db      	lsls	r3, r3, #3
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	4b3f      	ldr	r3, [pc, #252]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd82:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800cd84:	4b3e      	ldr	r3, [pc, #248]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd86:	2204      	movs	r2, #4
 800cd88:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800cd8a:	4b3d      	ldr	r3, [pc, #244]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd8c:	2218      	movs	r2, #24
 800cd8e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800cd90:	4b3b      	ldr	r3, [pc, #236]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800cd96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd9a:	f083 0301 	eor.w	r3, r3, #1
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	461a      	mov	r2, r3
 800cda2:	4b37      	ldr	r3, [pc, #220]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cda4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800cda6:	4b37      	ldr	r3, [pc, #220]	; (800ce84 <RadioSetRxConfig+0x310>)
 800cda8:	781a      	ldrb	r2, [r3, #0]
 800cdaa:	4b35      	ldr	r3, [pc, #212]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cdac:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800cdae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d003      	beq.n	800cdbe <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800cdb6:	4b32      	ldr	r3, [pc, #200]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cdb8:	22f2      	movs	r2, #242	; 0xf2
 800cdba:	75da      	strb	r2, [r3, #23]
 800cdbc:	e002      	b.n	800cdc4 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800cdbe:	4b30      	ldr	r3, [pc, #192]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800cdc4:	4b2e      	ldr	r3, [pc, #184]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cdc6:	2201      	movs	r2, #1
 800cdc8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800cdca:	f000 fc70 	bl	800d6ae <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800cdce:	4b2c      	ldr	r3, [pc, #176]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800cdd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	bf14      	ite	ne
 800cdd8:	2301      	movne	r3, #1
 800cdda:	2300      	moveq	r3, #0
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7ff fdfa 	bl	800c9d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cde4:	4828      	ldr	r0, [pc, #160]	; (800ce88 <RadioSetRxConfig+0x314>)
 800cde6:	f002 f8dd 	bl	800efa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cdea:	4828      	ldr	r0, [pc, #160]	; (800ce8c <RadioSetRxConfig+0x318>)
 800cdec:	f002 f9ac 	bl	800f148 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800cdf0:	4a28      	ldr	r2, [pc, #160]	; (800ce94 <RadioSetRxConfig+0x320>)
 800cdf2:	f107 0314 	add.w	r3, r7, #20
 800cdf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cdfa:	e883 0003 	stmia.w	r3, {r0, r1}
 800cdfe:	f107 0314 	add.w	r3, r7, #20
 800ce02:	4618      	mov	r0, r3
 800ce04:	f001 fcd5 	bl	800e7b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800ce08:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ce0c:	f001 fd20 	bl	800e850 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800ce10:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ce12:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ce16:	fb02 f303 	mul.w	r3, r2, r3
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce22:	4a17      	ldr	r2, [pc, #92]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800ce24:	6093      	str	r3, [r2, #8]
            break;
 800ce26:	e0a8      	b.n	800cf7a <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800ce28:	2000      	movs	r0, #0
 800ce2a:	f001 fe89 	bl	800eb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ce2e:	4b14      	ldr	r3, [pc, #80]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	4b11      	ldr	r3, [pc, #68]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800ce3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800ce40:	4a15      	ldr	r2, [pc, #84]	; (800ce98 <RadioSetRxConfig+0x324>)
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	4413      	add	r3, r2
 800ce46:	781a      	ldrb	r2, [r3, #0]
 800ce48:	4b0d      	ldr	r3, [pc, #52]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800ce4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800ce4e:	4a0c      	ldr	r2, [pc, #48]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800ce50:	7bbb      	ldrb	r3, [r7, #14]
 800ce52:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d105      	bne.n	800ce68 <RadioSetRxConfig+0x2f4>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b0b      	cmp	r3, #11
 800ce60:	d008      	beq.n	800ce74 <RadioSetRxConfig+0x300>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b0c      	cmp	r3, #12
 800ce66:	d005      	beq.n	800ce74 <RadioSetRxConfig+0x300>
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d116      	bne.n	800ce9c <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2b0c      	cmp	r3, #12
 800ce72:	d113      	bne.n	800ce9c <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800ce74:	4b02      	ldr	r3, [pc, #8]	; (800ce80 <RadioSetRxConfig+0x30c>)
 800ce76:	2201      	movs	r2, #1
 800ce78:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800ce7c:	e012      	b.n	800cea4 <RadioSetRxConfig+0x330>
 800ce7e:	bf00      	nop
 800ce80:	20000b5c 	.word	0x20000b5c
 800ce84:	20000048 	.word	0x20000048
 800ce88:	20000b94 	.word	0x20000b94
 800ce8c:	20000b6a 	.word	0x20000b6a
 800ce90:	08015558 	.word	0x08015558
 800ce94:	08015560 	.word	0x08015560
 800ce98:	080157f4 	.word	0x080157f4
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800ce9c:	4b39      	ldr	r3, [pc, #228]	; (800cf84 <RadioSetRxConfig+0x410>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800cea4:	4b37      	ldr	r3, [pc, #220]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cea6:	2201      	movs	r2, #1
 800cea8:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800ceaa:	4b36      	ldr	r3, [pc, #216]	; (800cf84 <RadioSetRxConfig+0x410>)
 800ceac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ceb0:	2b05      	cmp	r3, #5
 800ceb2:	d004      	beq.n	800cebe <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800ceb4:	4b33      	ldr	r3, [pc, #204]	; (800cf84 <RadioSetRxConfig+0x410>)
 800ceb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800ceba:	2b06      	cmp	r3, #6
 800cebc:	d10a      	bne.n	800ced4 <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 800cebe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cec0:	2b0b      	cmp	r3, #11
 800cec2:	d803      	bhi.n	800cecc <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800cec4:	4b2f      	ldr	r3, [pc, #188]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cec6:	220c      	movs	r2, #12
 800cec8:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800ceca:	e006      	b.n	800ceda <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800cecc:	4a2d      	ldr	r2, [pc, #180]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cece:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ced0:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800ced2:	e002      	b.n	800ceda <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800ced4:	4a2b      	ldr	r2, [pc, #172]	; (800cf84 <RadioSetRxConfig+0x410>)
 800ced6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ced8:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800ceda:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800cede:	4b29      	ldr	r3, [pc, #164]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cee0:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800cee2:	4b29      	ldr	r3, [pc, #164]	; (800cf88 <RadioSetRxConfig+0x414>)
 800cee4:	781a      	ldrb	r2, [r3, #0]
 800cee6:	4b27      	ldr	r3, [pc, #156]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cee8:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800ceea:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800ceee:	4b25      	ldr	r3, [pc, #148]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cef0:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800cef4:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800cef8:	4b22      	ldr	r3, [pc, #136]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cefa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800cefe:	f000 fbd6 	bl	800d6ae <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800cf02:	4b20      	ldr	r3, [pc, #128]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cf04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	bf14      	ite	ne
 800cf0c:	2301      	movne	r3, #1
 800cf0e:	2300      	moveq	r3, #0
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7ff fd60 	bl	800c9d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800cf18:	481c      	ldr	r0, [pc, #112]	; (800cf8c <RadioSetRxConfig+0x418>)
 800cf1a:	f002 f843 	bl	800efa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800cf1e:	481c      	ldr	r0, [pc, #112]	; (800cf90 <RadioSetRxConfig+0x41c>)
 800cf20:	f002 f912 	bl	800f148 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800cf24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f001 fe18 	bl	800eb5e <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800cf2e:	4b15      	ldr	r3, [pc, #84]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cf30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cf34:	2b01      	cmp	r3, #1
 800cf36:	d10d      	bne.n	800cf54 <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800cf38:	f240 7036 	movw	r0, #1846	; 0x736
 800cf3c:	f002 fa60 	bl	800f400 <SUBGRF_ReadRegister>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f023 0304 	bic.w	r3, r3, #4
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	4619      	mov	r1, r3
 800cf4a:	f240 7036 	movw	r0, #1846	; 0x736
 800cf4e:	f002 fa43 	bl	800f3d8 <SUBGRF_WriteRegister>
 800cf52:	e00c      	b.n	800cf6e <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800cf54:	f240 7036 	movw	r0, #1846	; 0x736
 800cf58:	f002 fa52 	bl	800f400 <SUBGRF_ReadRegister>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	f043 0304 	orr.w	r3, r3, #4
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	4619      	mov	r1, r3
 800cf66:	f240 7036 	movw	r0, #1846	; 0x736
 800cf6a:	f002 fa35 	bl	800f3d8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800cf6e:	4b05      	ldr	r3, [pc, #20]	; (800cf84 <RadioSetRxConfig+0x410>)
 800cf70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf74:	609a      	str	r2, [r3, #8]
            break;
 800cf76:	e000      	b.n	800cf7a <RadioSetRxConfig+0x406>
            break;
 800cf78:	bf00      	nop
    }
}
 800cf7a:	bf00      	nop
 800cf7c:	3728      	adds	r7, #40	; 0x28
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	20000b5c 	.word	0x20000b5c
 800cf88:	20000048 	.word	0x20000048
 800cf8c:	20000b94 	.word	0x20000b94
 800cf90:	20000b6a 	.word	0x20000b6a

0800cf94 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60ba      	str	r2, [r7, #8]
 800cf9c:	607b      	str	r3, [r7, #4]
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	73fb      	strb	r3, [r7, #15]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800cfa6:	f002 fcee 	bl	800f986 <RFW_DeInit>
    switch( modem )
 800cfaa:	7bfb      	ldrb	r3, [r7, #15]
 800cfac:	2b03      	cmp	r3, #3
 800cfae:	f000 80d7 	beq.w	800d160 <RadioSetTxConfig+0x1cc>
 800cfb2:	2b03      	cmp	r3, #3
 800cfb4:	f300 80e6 	bgt.w	800d184 <RadioSetTxConfig+0x1f0>
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <RadioSetTxConfig+0x2e>
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	d061      	beq.n	800d084 <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 800cfc0:	e0e0      	b.n	800d184 <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800cfc2:	4b7c      	ldr	r3, [pc, #496]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800cfca:	4a7a      	ldr	r2, [pc, #488]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800cfcc:	6a3b      	ldr	r3, [r7, #32]
 800cfce:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800cfd0:	4b78      	ldr	r3, [pc, #480]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800cfd2:	220b      	movs	r2, #11
 800cfd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f002 fc07 	bl	800f7ec <SUBGRF_GetFskBandwidthRegValue>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	4b74      	ldr	r3, [pc, #464]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800cfe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800cfe8:	4a72      	ldr	r2, [pc, #456]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800cfee:	4b71      	ldr	r3, [pc, #452]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800cff0:	2200      	movs	r2, #0
 800cff2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800cff4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	4b6e      	ldr	r3, [pc, #440]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800cffc:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800cffe:	4b6d      	ldr	r3, [pc, #436]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d000:	2204      	movs	r2, #4
 800d002:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800d004:	4b6b      	ldr	r3, [pc, #428]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d006:	2218      	movs	r2, #24
 800d008:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800d00a:	4b6a      	ldr	r3, [pc, #424]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d00c:	2200      	movs	r2, #0
 800d00e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800d010:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d014:	f083 0301 	eor.w	r3, r3, #1
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	461a      	mov	r2, r3
 800d01c:	4b65      	ldr	r3, [pc, #404]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d01e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800d020:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800d024:	2b00      	cmp	r3, #0
 800d026:	d003      	beq.n	800d030 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800d028:	4b62      	ldr	r3, [pc, #392]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d02a:	22f2      	movs	r2, #242	; 0xf2
 800d02c:	75da      	strb	r2, [r3, #23]
 800d02e:	e002      	b.n	800d036 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800d030:	4b60      	ldr	r3, [pc, #384]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d032:	2201      	movs	r2, #1
 800d034:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800d036:	4b5f      	ldr	r3, [pc, #380]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d038:	2201      	movs	r2, #1
 800d03a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800d03c:	f000 fb37 	bl	800d6ae <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800d040:	4b5c      	ldr	r3, [pc, #368]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d046:	2b00      	cmp	r3, #0
 800d048:	bf14      	ite	ne
 800d04a:	2301      	movne	r3, #1
 800d04c:	2300      	moveq	r3, #0
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	4618      	mov	r0, r3
 800d052:	f7ff fcc1 	bl	800c9d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d056:	4858      	ldr	r0, [pc, #352]	; (800d1b8 <RadioSetTxConfig+0x224>)
 800d058:	f001 ffa4 	bl	800efa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d05c:	4857      	ldr	r0, [pc, #348]	; (800d1bc <RadioSetTxConfig+0x228>)
 800d05e:	f002 f873 	bl	800f148 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800d062:	4a57      	ldr	r2, [pc, #348]	; (800d1c0 <RadioSetTxConfig+0x22c>)
 800d064:	f107 0310 	add.w	r3, r7, #16
 800d068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d06c:	e883 0003 	stmia.w	r3, {r0, r1}
 800d070:	f107 0310 	add.w	r3, r7, #16
 800d074:	4618      	mov	r0, r3
 800d076:	f001 fb9c 	bl	800e7b2 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800d07a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800d07e:	f001 fbe7 	bl	800e850 <SUBGRF_SetWhiteningSeed>
            break;
 800d082:	e080      	b.n	800d186 <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800d084:	4b4b      	ldr	r3, [pc, #300]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d086:	2201      	movs	r2, #1
 800d088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800d08c:	6a3b      	ldr	r3, [r7, #32]
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	4b48      	ldr	r3, [pc, #288]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800d096:	4a4b      	ldr	r2, [pc, #300]	; (800d1c4 <RadioSetTxConfig+0x230>)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	4413      	add	r3, r2
 800d09c:	781a      	ldrb	r2, [r3, #0]
 800d09e:	4b45      	ldr	r3, [pc, #276]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d0a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800d0a4:	4a43      	ldr	r2, [pc, #268]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d0a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d0aa:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d105      	bne.n	800d0c0 <RadioSetTxConfig+0x12c>
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	2b0b      	cmp	r3, #11
 800d0b8:	d008      	beq.n	800d0cc <RadioSetTxConfig+0x138>
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	2b0c      	cmp	r3, #12
 800d0be:	d005      	beq.n	800d0cc <RadioSetTxConfig+0x138>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d107      	bne.n	800d0d6 <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d0c6:	6a3b      	ldr	r3, [r7, #32]
 800d0c8:	2b0c      	cmp	r3, #12
 800d0ca:	d104      	bne.n	800d0d6 <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800d0cc:	4b39      	ldr	r3, [pc, #228]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800d0d4:	e003      	b.n	800d0de <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800d0d6:	4b37      	ldr	r3, [pc, #220]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800d0de:	4b35      	ldr	r3, [pc, #212]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800d0e4:	4b33      	ldr	r3, [pc, #204]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d0e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0ea:	2b05      	cmp	r3, #5
 800d0ec:	d004      	beq.n	800d0f8 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800d0ee:	4b31      	ldr	r3, [pc, #196]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d0f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800d0f4:	2b06      	cmp	r3, #6
 800d0f6:	d10a      	bne.n	800d10e <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 800d0f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d0fa:	2b0b      	cmp	r3, #11
 800d0fc:	d803      	bhi.n	800d106 <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800d0fe:	4b2d      	ldr	r3, [pc, #180]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d100:	220c      	movs	r2, #12
 800d102:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800d104:	e006      	b.n	800d114 <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800d106:	4a2b      	ldr	r2, [pc, #172]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d108:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d10a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800d10c:	e002      	b.n	800d114 <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800d10e:	4a29      	ldr	r2, [pc, #164]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d110:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d112:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800d114:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d118:	4b26      	ldr	r3, [pc, #152]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d11a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800d11c:	4b2a      	ldr	r3, [pc, #168]	; (800d1c8 <RadioSetTxConfig+0x234>)
 800d11e:	781a      	ldrb	r2, [r3, #0]
 800d120:	4b24      	ldr	r3, [pc, #144]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d122:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800d124:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d128:	4b22      	ldr	r3, [pc, #136]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d12a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800d12e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800d132:	4b20      	ldr	r3, [pc, #128]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800d138:	f000 fab9 	bl	800d6ae <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800d13c:	4b1d      	ldr	r3, [pc, #116]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d13e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d142:	2b00      	cmp	r3, #0
 800d144:	bf14      	ite	ne
 800d146:	2301      	movne	r3, #1
 800d148:	2300      	moveq	r3, #0
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7ff fc43 	bl	800c9d8 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d152:	4819      	ldr	r0, [pc, #100]	; (800d1b8 <RadioSetTxConfig+0x224>)
 800d154:	f001 ff26 	bl	800efa4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d158:	4818      	ldr	r0, [pc, #96]	; (800d1bc <RadioSetTxConfig+0x228>)
 800d15a:	f001 fff5 	bl	800f148 <SUBGRF_SetPacketParams>
            break;
 800d15e:	e012      	b.n	800d186 <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800d160:	2003      	movs	r0, #3
 800d162:	f7ff fc39 	bl	800c9d8 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800d166:	4b13      	ldr	r3, [pc, #76]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d168:	2202      	movs	r2, #2
 800d16a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800d16e:	4a11      	ldr	r2, [pc, #68]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d170:	6a3b      	ldr	r3, [r7, #32]
 800d172:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800d174:	4b0f      	ldr	r3, [pc, #60]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d176:	2216      	movs	r2, #22
 800d178:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800d17c:	480e      	ldr	r0, [pc, #56]	; (800d1b8 <RadioSetTxConfig+0x224>)
 800d17e:	f001 ff11 	bl	800efa4 <SUBGRF_SetModulationParams>
            break;
 800d182:	e000      	b.n	800d186 <RadioSetTxConfig+0x1f2>
            break;
 800d184:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800d186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d18a:	4618      	mov	r0, r3
 800d18c:	f002 fa40 	bl	800f610 <SUBGRF_SetRfTxPower>
 800d190:	4603      	mov	r3, r0
 800d192:	461a      	mov	r2, r3
 800d194:	4b07      	ldr	r3, [pc, #28]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d196:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800d19a:	4b06      	ldr	r3, [pc, #24]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d19c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f002 fc04 	bl	800f9ae <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800d1a6:	4a03      	ldr	r2, [pc, #12]	; (800d1b4 <RadioSetTxConfig+0x220>)
 800d1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1aa:	6053      	str	r3, [r2, #4]
}
 800d1ac:	bf00      	nop
 800d1ae:	3718      	adds	r7, #24
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	20000b5c 	.word	0x20000b5c
 800d1b8:	20000b94 	.word	0x20000b94
 800d1bc:	20000b6a 	.word	0x20000b6a
 800d1c0:	08015560 	.word	0x08015560
 800d1c4:	080157f4 	.word	0x080157f4
 800d1c8:	20000048 	.word	0x20000048

0800d1cc <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
    return true;
 800d1d4:	2301      	movs	r3, #1
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bc80      	pop	{r7}
 800d1de:	4770      	bx	lr

0800d1e0 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b085      	sub	sp, #20
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800d1ee:	79fb      	ldrb	r3, [r7, #7]
 800d1f0:	2b0a      	cmp	r3, #10
 800d1f2:	d83e      	bhi.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
 800d1f4:	a201      	add	r2, pc, #4	; (adr r2, 800d1fc <RadioGetLoRaBandwidthInHz+0x1c>)
 800d1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1fa:	bf00      	nop
 800d1fc:	0800d229 	.word	0x0800d229
 800d200:	0800d239 	.word	0x0800d239
 800d204:	0800d249 	.word	0x0800d249
 800d208:	0800d259 	.word	0x0800d259
 800d20c:	0800d261 	.word	0x0800d261
 800d210:	0800d267 	.word	0x0800d267
 800d214:	0800d26d 	.word	0x0800d26d
 800d218:	0800d273 	.word	0x0800d273
 800d21c:	0800d231 	.word	0x0800d231
 800d220:	0800d241 	.word	0x0800d241
 800d224:	0800d251 	.word	0x0800d251
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800d228:	f641 6384 	movw	r3, #7812	; 0x1e84
 800d22c:	60fb      	str	r3, [r7, #12]
        break;
 800d22e:	e020      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800d230:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800d234:	60fb      	str	r3, [r7, #12]
        break;
 800d236:	e01c      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800d238:	f643 5309 	movw	r3, #15625	; 0x3d09
 800d23c:	60fb      	str	r3, [r7, #12]
        break;
 800d23e:	e018      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800d240:	f245 1361 	movw	r3, #20833	; 0x5161
 800d244:	60fb      	str	r3, [r7, #12]
        break;
 800d246:	e014      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800d248:	f647 2312 	movw	r3, #31250	; 0x7a12
 800d24c:	60fb      	str	r3, [r7, #12]
        break;
 800d24e:	e010      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800d250:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800d254:	60fb      	str	r3, [r7, #12]
        break;
 800d256:	e00c      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800d258:	f24f 4324 	movw	r3, #62500	; 0xf424
 800d25c:	60fb      	str	r3, [r7, #12]
        break;
 800d25e:	e008      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800d260:	4b07      	ldr	r3, [pc, #28]	; (800d280 <RadioGetLoRaBandwidthInHz+0xa0>)
 800d262:	60fb      	str	r3, [r7, #12]
        break;
 800d264:	e005      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800d266:	4b07      	ldr	r3, [pc, #28]	; (800d284 <RadioGetLoRaBandwidthInHz+0xa4>)
 800d268:	60fb      	str	r3, [r7, #12]
        break;
 800d26a:	e002      	b.n	800d272 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800d26c:	4b06      	ldr	r3, [pc, #24]	; (800d288 <RadioGetLoRaBandwidthInHz+0xa8>)
 800d26e:	60fb      	str	r3, [r7, #12]
        break;
 800d270:	bf00      	nop
    }

    return bandwidthInHz;
 800d272:	68fb      	ldr	r3, [r7, #12]
}
 800d274:	4618      	mov	r0, r3
 800d276:	3714      	adds	r7, #20
 800d278:	46bd      	mov	sp, r7
 800d27a:	bc80      	pop	{r7}
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	0001e848 	.word	0x0001e848
 800d284:	0003d090 	.word	0x0003d090
 800d288:	0007a120 	.word	0x0007a120

0800d28c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	4608      	mov	r0, r1
 800d296:	4611      	mov	r1, r2
 800d298:	461a      	mov	r2, r3
 800d29a:	4603      	mov	r3, r0
 800d29c:	70fb      	strb	r3, [r7, #3]
 800d29e:	460b      	mov	r3, r1
 800d2a0:	803b      	strh	r3, [r7, #0]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800d2a6:	883b      	ldrh	r3, [r7, #0]
 800d2a8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d2aa:	78ba      	ldrb	r2, [r7, #2]
 800d2ac:	f082 0201 	eor.w	r2, r2, #1
 800d2b0:	b2d2      	uxtb	r2, r2
 800d2b2:	2a00      	cmp	r2, #0
 800d2b4:	d001      	beq.n	800d2ba <RadioGetGfskTimeOnAirNumerator+0x2e>
 800d2b6:	2208      	movs	r2, #8
 800d2b8:	e000      	b.n	800d2bc <RadioGetGfskTimeOnAirNumerator+0x30>
 800d2ba:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800d2bc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d2be:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800d2c2:	7c3b      	ldrb	r3, [r7, #16]
 800d2c4:	7d39      	ldrb	r1, [r7, #20]
 800d2c6:	2900      	cmp	r1, #0
 800d2c8:	d001      	beq.n	800d2ce <RadioGetGfskTimeOnAirNumerator+0x42>
 800d2ca:	2102      	movs	r1, #2
 800d2cc:	e000      	b.n	800d2d0 <RadioGetGfskTimeOnAirNumerator+0x44>
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	440b      	add	r3, r1
 800d2d2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800d2d4:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	370c      	adds	r7, #12
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bc80      	pop	{r7}
 800d2de:	4770      	bx	lr

0800d2e0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800d2e0:	b480      	push	{r7}
 800d2e2:	b08b      	sub	sp, #44	; 0x2c
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	4611      	mov	r1, r2
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	71fb      	strb	r3, [r7, #7]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800d2f6:	79fb      	ldrb	r3, [r7, #7]
 800d2f8:	3304      	adds	r3, #4
 800d2fa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	2b05      	cmp	r3, #5
 800d306:	d002      	beq.n	800d30e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	2b06      	cmp	r3, #6
 800d30c:	d104      	bne.n	800d318 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800d30e:	88bb      	ldrh	r3, [r7, #4]
 800d310:	2b0b      	cmp	r3, #11
 800d312:	d801      	bhi.n	800d318 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800d314:	230c      	movs	r3, #12
 800d316:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d105      	bne.n	800d32a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	2b0b      	cmp	r3, #11
 800d322:	d008      	beq.n	800d336 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2b0c      	cmp	r3, #12
 800d328:	d005      	beq.n	800d336 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d105      	bne.n	800d33c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	2b0c      	cmp	r3, #12
 800d334:	d102      	bne.n	800d33c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800d336:	2301      	movs	r3, #1
 800d338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d33c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d340:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800d342:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d346:	2a00      	cmp	r2, #0
 800d348:	d001      	beq.n	800d34e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800d34a:	2210      	movs	r2, #16
 800d34c:	e000      	b.n	800d350 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800d34e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d350:	4413      	add	r3, r2
 800d352:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800d358:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800d35a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800d35e:	2a00      	cmp	r2, #0
 800d360:	d001      	beq.n	800d366 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800d362:	2200      	movs	r2, #0
 800d364:	e000      	b.n	800d368 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800d366:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800d368:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d36a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2b06      	cmp	r3, #6
 800d370:	d803      	bhi.n	800d37a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	623b      	str	r3, [r7, #32]
 800d378:	e00e      	b.n	800d398 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800d37a:	69fb      	ldr	r3, [r7, #28]
 800d37c:	3308      	adds	r3, #8
 800d37e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800d380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d384:	2b00      	cmp	r3, #0
 800d386:	d004      	beq.n	800d392 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	3b02      	subs	r3, #2
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	623b      	str	r3, [r7, #32]
 800d390:	e002      	b.n	800d398 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	da01      	bge.n	800d3a2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800d3a2:	69fa      	ldr	r2, [r7, #28]
 800d3a4:	6a3b      	ldr	r3, [r7, #32]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	1e5a      	subs	r2, r3, #1
 800d3aa:	6a3b      	ldr	r3, [r7, #32]
 800d3ac:	fb92 f3f3 	sdiv	r3, r2, r3
 800d3b0:	697a      	ldr	r2, [r7, #20]
 800d3b2:	fb03 f202 	mul.w	r2, r3, r2
 800d3b6:	88bb      	ldrh	r3, [r7, #4]
 800d3b8:	4413      	add	r3, r2
    int32_t intermediate =
 800d3ba:	330c      	adds	r3, #12
 800d3bc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2b06      	cmp	r3, #6
 800d3c2:	d802      	bhi.n	800d3ca <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	3302      	adds	r3, #2
 800d3c8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	1c5a      	adds	r2, r3, #1
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	3b02      	subs	r3, #2
 800d3d4:	fa02 f303 	lsl.w	r3, r2, r3
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	372c      	adds	r7, #44	; 0x2c
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bc80      	pop	{r7}
 800d3e0:	4770      	bx	lr
	...

0800d3e4 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b08a      	sub	sp, #40	; 0x28
 800d3e8:	af04      	add	r7, sp, #16
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	607a      	str	r2, [r7, #4]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	73fb      	strb	r3, [r7, #15]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	613b      	str	r3, [r7, #16]

    switch( modem )
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d002      	beq.n	800d40c <RadioTimeOnAir+0x28>
 800d406:	2b01      	cmp	r3, #1
 800d408:	d017      	beq.n	800d43a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800d40a:	e035      	b.n	800d478 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800d40c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800d410:	8c3a      	ldrh	r2, [r7, #32]
 800d412:	7bb9      	ldrb	r1, [r7, #14]
 800d414:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d418:	9301      	str	r3, [sp, #4]
 800d41a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	4603      	mov	r3, r0
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f7ff ff32 	bl	800d28c <RadioGetGfskTimeOnAirNumerator>
 800d428:	4603      	mov	r3, r0
 800d42a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d42e:	fb02 f303 	mul.w	r3, r2, r3
 800d432:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	613b      	str	r3, [r7, #16]
        break;
 800d438:	e01e      	b.n	800d478 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800d43a:	8c39      	ldrh	r1, [r7, #32]
 800d43c:	7bba      	ldrb	r2, [r7, #14]
 800d43e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d442:	9302      	str	r3, [sp, #8]
 800d444:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d44e:	9300      	str	r3, [sp, #0]
 800d450:	460b      	mov	r3, r1
 800d452:	6879      	ldr	r1, [r7, #4]
 800d454:	68b8      	ldr	r0, [r7, #8]
 800d456:	f7ff ff43 	bl	800d2e0 <RadioGetLoRaTimeOnAirNumerator>
 800d45a:	4603      	mov	r3, r0
 800d45c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d460:	fb02 f303 	mul.w	r3, r2, r3
 800d464:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800d466:	4a0a      	ldr	r2, [pc, #40]	; (800d490 <RadioTimeOnAir+0xac>)
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	4413      	add	r3, r2
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff feb6 	bl	800d1e0 <RadioGetLoRaBandwidthInHz>
 800d474:	6138      	str	r0, [r7, #16]
        break;
 800d476:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 800d478:	697a      	ldr	r2, [r7, #20]
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	4413      	add	r3, r2
 800d47e:	1e5a      	subs	r2, r3, #1
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800d486:	4618      	mov	r0, r3
 800d488:	3718      	adds	r7, #24
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	080157f4 	.word	0x080157f4

0800d494 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f240 2101 	movw	r1, #513	; 0x201
 800d4a8:	f240 2001 	movw	r0, #513	; 0x201
 800d4ac:	f001 fc4c 	bl	800ed48 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    //DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 800d4b0:	4b70      	ldr	r3, [pc, #448]	; (800d674 <RadioSend+0x1e0>)
 800d4b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d4b6:	2101      	movs	r1, #1
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f002 f881 	bl	800f5c0 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 800d4be:	4b6d      	ldr	r3, [pc, #436]	; (800d674 <RadioSend+0x1e0>)
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d112      	bne.n	800d4ec <RadioSend+0x58>
 800d4c6:	4b6b      	ldr	r3, [pc, #428]	; (800d674 <RadioSend+0x1e0>)
 800d4c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4cc:	2b06      	cmp	r3, #6
 800d4ce:	d10d      	bne.n	800d4ec <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800d4d0:	f640 0089 	movw	r0, #2185	; 0x889
 800d4d4:	f001 ff94 	bl	800f400 <SUBGRF_ReadRegister>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	f023 0304 	bic.w	r3, r3, #4
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	f640 0089 	movw	r0, #2185	; 0x889
 800d4e6:	f001 ff77 	bl	800f3d8 <SUBGRF_WriteRegister>
 800d4ea:	e00c      	b.n	800d506 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800d4ec:	f640 0089 	movw	r0, #2185	; 0x889
 800d4f0:	f001 ff86 	bl	800f400 <SUBGRF_ReadRegister>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	f043 0304 	orr.w	r3, r3, #4
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	f640 0089 	movw	r0, #2185	; 0x889
 800d502:	f001 ff69 	bl	800f3d8 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 800d506:	4b5b      	ldr	r3, [pc, #364]	; (800d674 <RadioSend+0x1e0>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	2b03      	cmp	r3, #3
 800d50c:	f200 80a5 	bhi.w	800d65a <RadioSend+0x1c6>
 800d510:	a201      	add	r2, pc, #4	; (adr r2, 800d518 <RadioSend+0x84>)
 800d512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d516:	bf00      	nop
 800d518:	0800d543 	.word	0x0800d543
 800d51c:	0800d529 	.word	0x0800d529
 800d520:	0800d5a3 	.word	0x0800d5a3
 800d524:	0800d5c3 	.word	0x0800d5c3
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800d528:	4a52      	ldr	r2, [pc, #328]	; (800d674 <RadioSend+0x1e0>)
 800d52a:	78fb      	ldrb	r3, [r7, #3]
 800d52c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d52e:	4852      	ldr	r0, [pc, #328]	; (800d678 <RadioSend+0x1e4>)
 800d530:	f001 fe0a 	bl	800f148 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800d534:	78fb      	ldrb	r3, [r7, #3]
 800d536:	2200      	movs	r2, #0
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f001 f926 	bl	800e78c <SUBGRF_SendPayload>
            break;
 800d540:	e08c      	b.n	800d65c <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800d542:	f002 fa26 	bl	800f992 <RFW_Is_Init>
 800d546:	4603      	mov	r3, r0
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d11d      	bne.n	800d588 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800d54c:	f107 020d 	add.w	r2, r7, #13
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	4619      	mov	r1, r3
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f002 fa34 	bl	800f9c2 <RFW_TransmitInit>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10c      	bne.n	800d57a <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800d560:	7b7a      	ldrb	r2, [r7, #13]
 800d562:	4b44      	ldr	r3, [pc, #272]	; (800d674 <RadioSend+0x1e0>)
 800d564:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d566:	4844      	ldr	r0, [pc, #272]	; (800d678 <RadioSend+0x1e4>)
 800d568:	f001 fdee 	bl	800f148 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800d56c:	7b7b      	ldrb	r3, [r7, #13]
 800d56e:	2200      	movs	r2, #0
 800d570:	4619      	mov	r1, r3
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f001 f90a 	bl	800e78c <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800d578:	e070      	b.n	800d65c <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 800d57a:	4b40      	ldr	r3, [pc, #256]	; (800d67c <RadioSend+0x1e8>)
 800d57c:	2201      	movs	r2, #1
 800d57e:	2100      	movs	r1, #0
 800d580:	2002      	movs	r0, #2
 800d582:	f002 fa69 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
 800d586:	e072      	b.n	800d66e <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800d588:	4a3a      	ldr	r2, [pc, #232]	; (800d674 <RadioSend+0x1e0>)
 800d58a:	78fb      	ldrb	r3, [r7, #3]
 800d58c:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d58e:	483a      	ldr	r0, [pc, #232]	; (800d678 <RadioSend+0x1e4>)
 800d590:	f001 fdda 	bl	800f148 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800d594:	78fb      	ldrb	r3, [r7, #3]
 800d596:	2200      	movs	r2, #0
 800d598:	4619      	mov	r1, r3
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f001 f8f6 	bl	800e78c <SUBGRF_SendPayload>
            break;
 800d5a0:	e05c      	b.n	800d65c <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800d5a2:	4b34      	ldr	r3, [pc, #208]	; (800d674 <RadioSend+0x1e0>)
 800d5a4:	2202      	movs	r2, #2
 800d5a6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800d5a8:	4a32      	ldr	r2, [pc, #200]	; (800d674 <RadioSend+0x1e0>)
 800d5aa:	78fb      	ldrb	r3, [r7, #3]
 800d5ac:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d5ae:	4832      	ldr	r0, [pc, #200]	; (800d678 <RadioSend+0x1e4>)
 800d5b0:	f001 fdca 	bl	800f148 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800d5b4:	78fb      	ldrb	r3, [r7, #3]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f001 f8e6 	bl	800e78c <SUBGRF_SendPayload>
            break;
 800d5c0:	e04c      	b.n	800d65c <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800d5c2:	78fb      	ldrb	r3, [r7, #3]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	6879      	ldr	r1, [r7, #4]
 800d5c8:	482d      	ldr	r0, [pc, #180]	; (800d680 <RadioSend+0x1ec>)
 800d5ca:	f000 fc66 	bl	800de9a <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800d5ce:	4b29      	ldr	r3, [pc, #164]	; (800d674 <RadioSend+0x1e0>)
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800d5d4:	78fb      	ldrb	r3, [r7, #3]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	b2da      	uxtb	r2, r3
 800d5da:	4b26      	ldr	r3, [pc, #152]	; (800d674 <RadioSend+0x1e0>)
 800d5dc:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d5de:	4826      	ldr	r0, [pc, #152]	; (800d678 <RadioSend+0x1e4>)
 800d5e0:	f001 fdb2 	bl	800f148 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	20f1      	movs	r0, #241	; 0xf1
 800d5e8:	f000 f947 	bl	800d87a <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	20f0      	movs	r0, #240	; 0xf0
 800d5f0:	f000 f943 	bl	800d87a <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800d5f4:	4b1f      	ldr	r3, [pc, #124]	; (800d674 <RadioSend+0x1e0>)
 800d5f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5f8:	2b64      	cmp	r3, #100	; 0x64
 800d5fa:	d108      	bne.n	800d60e <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 800d5fc:	2170      	movs	r1, #112	; 0x70
 800d5fe:	20f3      	movs	r0, #243	; 0xf3
 800d600:	f000 f93b 	bl	800d87a <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 800d604:	211d      	movs	r1, #29
 800d606:	20f2      	movs	r0, #242	; 0xf2
 800d608:	f000 f937 	bl	800d87a <RadioWrite>
 800d60c:	e007      	b.n	800d61e <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 800d60e:	21e1      	movs	r1, #225	; 0xe1
 800d610:	20f3      	movs	r0, #243	; 0xf3
 800d612:	f000 f932 	bl	800d87a <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 800d616:	2104      	movs	r1, #4
 800d618:	20f2      	movs	r0, #242	; 0xf2
 800d61a:	f000 f92e 	bl	800d87a <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800d61e:	78fb      	ldrb	r3, [r7, #3]
 800d620:	b29b      	uxth	r3, r3
 800d622:	00db      	lsls	r3, r3, #3
 800d624:	b29b      	uxth	r3, r3
 800d626:	3302      	adds	r3, #2
 800d628:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800d62a:	89fb      	ldrh	r3, [r7, #14]
 800d62c:	0a1b      	lsrs	r3, r3, #8
 800d62e:	b29b      	uxth	r3, r3
 800d630:	b2db      	uxtb	r3, r3
 800d632:	4619      	mov	r1, r3
 800d634:	20f4      	movs	r0, #244	; 0xf4
 800d636:	f000 f920 	bl	800d87a <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 800d63a:	89fb      	ldrh	r3, [r7, #14]
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	4619      	mov	r1, r3
 800d640:	20f5      	movs	r0, #245	; 0xf5
 800d642:	f000 f91a 	bl	800d87a <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800d646:	78fb      	ldrb	r3, [r7, #3]
 800d648:	3301      	adds	r3, #1
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800d650:	4619      	mov	r1, r3
 800d652:	480b      	ldr	r0, [pc, #44]	; (800d680 <RadioSend+0x1ec>)
 800d654:	f001 f89a 	bl	800e78c <SUBGRF_SendPayload>
            break;
 800d658:	e000      	b.n	800d65c <RadioSend+0x1c8>
        }
        default:
            break;
 800d65a:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800d65c:	4b05      	ldr	r3, [pc, #20]	; (800d674 <RadioSend+0x1e0>)
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	4619      	mov	r1, r3
 800d662:	4808      	ldr	r0, [pc, #32]	; (800d684 <RadioSend+0x1f0>)
 800d664:	f003 f858 	bl	8010718 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d668:	4806      	ldr	r0, [pc, #24]	; (800d684 <RadioSend+0x1f0>)
 800d66a:	f002 ff77 	bl	801055c <UTIL_TIMER_Start>
}
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	20000b5c 	.word	0x20000b5c
 800d678:	20000b6a 	.word	0x20000b6a
 800d67c:	08015568 	.word	0x08015568
 800d680:	20000a58 	.word	0x20000a58
 800d684:	20000bb4 	.word	0x20000bb4

0800d688 <RadioSleep>:

static void RadioSleep( void )
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800d68e:	2300      	movs	r3, #0
 800d690:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800d692:	793b      	ldrb	r3, [r7, #4]
 800d694:	f043 0304 	orr.w	r3, r3, #4
 800d698:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800d69a:	7938      	ldrb	r0, [r7, #4]
 800d69c:	f001 f952 	bl	800e944 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800d6a0:	2002      	movs	r0, #2
 800d6a2:	f7f4 fffd 	bl	80026a0 <HAL_Delay>
}
 800d6a6:	bf00      	nop
 800d6a8:	3708      	adds	r7, #8
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <RadioStandby>:

static void RadioStandby( void )
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	f001 f978 	bl	800e9a8 <SUBGRF_SetStandby>
}
 800d6b8:	bf00      	nop
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 800d6c4:	f002 f965 	bl	800f992 <RFW_Is_Init>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d102      	bne.n	800d6d4 <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 800d6ce:	f002 f988 	bl	800f9e2 <RFW_ReceiveInit>
 800d6d2:	e007      	b.n	800d6e4 <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f240 2162 	movw	r1, #610	; 0x262
 800d6dc:	f240 2062 	movw	r0, #610	; 0x262
 800d6e0:	f001 fb32 	bl	800ed48 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d006      	beq.n	800d6f8 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d6ea:	6879      	ldr	r1, [r7, #4]
 800d6ec:	480f      	ldr	r0, [pc, #60]	; (800d72c <RadioRx+0x70>)
 800d6ee:	f003 f813 	bl	8010718 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d6f2:	480e      	ldr	r0, [pc, #56]	; (800d72c <RadioRx+0x70>)
 800d6f4:	f002 ff32 	bl	801055c <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    //DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d6f8:	4b0d      	ldr	r3, [pc, #52]	; (800d730 <RadioRx+0x74>)
 800d6fa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d6fe:	2100      	movs	r1, #0
 800d700:	4618      	mov	r0, r3
 800d702:	f001 ff5d 	bl	800f5c0 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800d706:	4b0a      	ldr	r3, [pc, #40]	; (800d730 <RadioRx+0x74>)
 800d708:	785b      	ldrb	r3, [r3, #1]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d004      	beq.n	800d718 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800d70e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d712:	f001 f985 	bl	800ea20 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800d716:	e005      	b.n	800d724 <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800d718:	4b05      	ldr	r3, [pc, #20]	; (800d730 <RadioRx+0x74>)
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	019b      	lsls	r3, r3, #6
 800d71e:	4618      	mov	r0, r3
 800d720:	f001 f97e 	bl	800ea20 <SUBGRF_SetRx>
}
 800d724:	bf00      	nop
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	20000bcc 	.word	0x20000bcc
 800d730:	20000b5c 	.word	0x20000b5c

0800d734 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 800d73c:	f002 f929 	bl	800f992 <RFW_Is_Init>
 800d740:	4603      	mov	r3, r0
 800d742:	2b01      	cmp	r3, #1
 800d744:	d102      	bne.n	800d74c <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 800d746:	f002 f94c 	bl	800f9e2 <RFW_ReceiveInit>
 800d74a:	e007      	b.n	800d75c <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800d74c:	2300      	movs	r3, #0
 800d74e:	2200      	movs	r2, #0
 800d750:	f240 2162 	movw	r1, #610	; 0x262
 800d754:	f240 2062 	movw	r0, #610	; 0x262
 800d758:	f001 faf6 	bl	800ed48 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d006      	beq.n	800d770 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d762:	6879      	ldr	r1, [r7, #4]
 800d764:	480f      	ldr	r0, [pc, #60]	; (800d7a4 <RadioRxBoosted+0x70>)
 800d766:	f002 ffd7 	bl	8010718 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d76a:	480e      	ldr	r0, [pc, #56]	; (800d7a4 <RadioRxBoosted+0x70>)
 800d76c:	f002 fef6 	bl	801055c <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d770:	4b0d      	ldr	r3, [pc, #52]	; (800d7a8 <RadioRxBoosted+0x74>)
 800d772:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d776:	2100      	movs	r1, #0
 800d778:	4618      	mov	r0, r3
 800d77a:	f001 ff21 	bl	800f5c0 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800d77e:	4b0a      	ldr	r3, [pc, #40]	; (800d7a8 <RadioRxBoosted+0x74>)
 800d780:	785b      	ldrb	r3, [r3, #1]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d004      	beq.n	800d790 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800d786:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800d78a:	f001 f969 	bl	800ea60 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800d78e:	e005      	b.n	800d79c <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800d790:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <RadioRxBoosted+0x74>)
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	019b      	lsls	r3, r3, #6
 800d796:	4618      	mov	r0, r3
 800d798:	f001 f962 	bl	800ea60 <SUBGRF_SetRxBoosted>
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20000bcc 	.word	0x20000bcc
 800d7a8:	20000b5c 	.word	0x20000b5c

0800d7ac <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d7b6:	4b07      	ldr	r3, [pc, #28]	; (800d7d4 <RadioSetRxDutyCycle+0x28>)
 800d7b8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d7bc:	2100      	movs	r1, #0
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f001 fefe 	bl	800f5c0 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800d7c4:	6839      	ldr	r1, [r7, #0]
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f001 f96e 	bl	800eaa8 <SUBGRF_SetRxDutyCycle>
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	20000b5c 	.word	0x20000b5c

0800d7d8 <RadioStartCad>:

static void RadioStartCad( void )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 800d7dc:	4b09      	ldr	r3, [pc, #36]	; (800d804 <RadioStartCad+0x2c>)
 800d7de:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800d7e2:	2100      	movs	r1, #0
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f001 feeb 	bl	800f5c0 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800d7f2:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800d7f6:	f001 faa7 	bl	800ed48 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800d7fa:	f001 f981 	bl	800eb00 <SUBGRF_SetCad>
}
 800d7fe:	bf00      	nop
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	20000b5c 	.word	0x20000b5c

0800d808 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b084      	sub	sp, #16
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	70fb      	strb	r3, [r7, #3]
 800d814:	4613      	mov	r3, r2
 800d816:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800d818:	883b      	ldrh	r3, [r7, #0]
 800d81a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d81e:	fb02 f303 	mul.w	r3, r2, r3
 800d822:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f001 faeb 	bl	800ee00 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800d82a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d82e:	4618      	mov	r0, r3
 800d830:	f001 feee 	bl	800f610 <SUBGRF_SetRfTxPower>
 800d834:	4603      	mov	r3, r0
 800d836:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 800d838:	7afb      	ldrb	r3, [r7, #11]
 800d83a:	2101      	movs	r1, #1
 800d83c:	4618      	mov	r0, r3
 800d83e:	f001 febf 	bl	800f5c0 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800d842:	f001 f96b 	bl	800eb1c <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800d846:	68f9      	ldr	r1, [r7, #12]
 800d848:	4804      	ldr	r0, [pc, #16]	; (800d85c <RadioSetTxContinuousWave+0x54>)
 800d84a:	f002 ff65 	bl	8010718 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d84e:	4803      	ldr	r0, [pc, #12]	; (800d85c <RadioSetTxContinuousWave+0x54>)
 800d850:	f002 fe84 	bl	801055c <UTIL_TIMER_Start>
}
 800d854:	bf00      	nop
 800d856:	3710      	adds	r7, #16
 800d858:	46bd      	mov	sp, r7
 800d85a:	bd80      	pop	{r7, pc}
 800d85c:	20000bb4 	.word	0x20000bb4

0800d860 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	4603      	mov	r3, r0
 800d868:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800d86a:	f001 fd22 	bl	800f2b2 <SUBGRF_GetRssiInst>
 800d86e:	4603      	mov	r3, r0
 800d870:	b21b      	sxth	r3, r3
}
 800d872:	4618      	mov	r0, r3
 800d874:	3708      	adds	r7, #8
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b082      	sub	sp, #8
 800d87e:	af00      	add	r7, sp, #0
 800d880:	4603      	mov	r3, r0
 800d882:	460a      	mov	r2, r1
 800d884:	80fb      	strh	r3, [r7, #6]
 800d886:	4613      	mov	r3, r2
 800d888:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 800d88a:	797a      	ldrb	r2, [r7, #5]
 800d88c:	88fb      	ldrh	r3, [r7, #6]
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f001 fda1 	bl	800f3d8 <SUBGRF_WriteRegister>
}
 800d896:	bf00      	nop
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b082      	sub	sp, #8
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 800d8a8:	88fb      	ldrh	r3, [r7, #6]
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f001 fda8 	bl	800f400 <SUBGRF_ReadRegister>
 800d8b0:	4603      	mov	r3, r0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b082      	sub	sp, #8
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	6039      	str	r1, [r7, #0]
 800d8c4:	80fb      	strh	r3, [r7, #6]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800d8ca:	797b      	ldrb	r3, [r7, #5]
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	88fb      	ldrh	r3, [r7, #6]
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f001 fda8 	bl	800f428 <SUBGRF_WriteRegisters>
}
 800d8d8:	bf00      	nop
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	6039      	str	r1, [r7, #0]
 800d8ea:	80fb      	strh	r3, [r7, #6]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800d8f0:	797b      	ldrb	r3, [r7, #5]
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	88fb      	ldrh	r3, [r7, #6]
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f001 fdb7 	bl	800f46c <SUBGRF_ReadRegisters>
}
 800d8fe:	bf00      	nop
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
	...

0800d908 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	4603      	mov	r3, r0
 800d910:	460a      	mov	r2, r1
 800d912:	71fb      	strb	r3, [r7, #7]
 800d914:	4613      	mov	r3, r2
 800d916:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800d918:	79fb      	ldrb	r3, [r7, #7]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d10a      	bne.n	800d934 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800d91e:	4a0e      	ldr	r2, [pc, #56]	; (800d958 <RadioSetMaxPayloadLength+0x50>)
 800d920:	79bb      	ldrb	r3, [r7, #6]
 800d922:	7013      	strb	r3, [r2, #0]
 800d924:	4b0c      	ldr	r3, [pc, #48]	; (800d958 <RadioSetMaxPayloadLength+0x50>)
 800d926:	781a      	ldrb	r2, [r3, #0]
 800d928:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <RadioSetMaxPayloadLength+0x54>)
 800d92a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d92c:	480c      	ldr	r0, [pc, #48]	; (800d960 <RadioSetMaxPayloadLength+0x58>)
 800d92e:	f001 fc0b 	bl	800f148 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800d932:	e00d      	b.n	800d950 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800d934:	4b09      	ldr	r3, [pc, #36]	; (800d95c <RadioSetMaxPayloadLength+0x54>)
 800d936:	7d5b      	ldrb	r3, [r3, #21]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d109      	bne.n	800d950 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800d93c:	4a06      	ldr	r2, [pc, #24]	; (800d958 <RadioSetMaxPayloadLength+0x50>)
 800d93e:	79bb      	ldrb	r3, [r7, #6]
 800d940:	7013      	strb	r3, [r2, #0]
 800d942:	4b05      	ldr	r3, [pc, #20]	; (800d958 <RadioSetMaxPayloadLength+0x50>)
 800d944:	781a      	ldrb	r2, [r3, #0]
 800d946:	4b05      	ldr	r3, [pc, #20]	; (800d95c <RadioSetMaxPayloadLength+0x54>)
 800d948:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800d94a:	4805      	ldr	r0, [pc, #20]	; (800d960 <RadioSetMaxPayloadLength+0x58>)
 800d94c:	f001 fbfc 	bl	800f148 <SUBGRF_SetPacketParams>
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	20000048 	.word	0x20000048
 800d95c:	20000b5c 	.word	0x20000b5c
 800d960:	20000b6a 	.word	0x20000b6a

0800d964 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b082      	sub	sp, #8
 800d968:	af00      	add	r7, sp, #0
 800d96a:	4603      	mov	r3, r0
 800d96c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800d96e:	4a13      	ldr	r2, [pc, #76]	; (800d9bc <RadioSetPublicNetwork+0x58>)
 800d970:	79fb      	ldrb	r3, [r7, #7]
 800d972:	7313      	strb	r3, [r2, #12]
 800d974:	4b11      	ldr	r3, [pc, #68]	; (800d9bc <RadioSetPublicNetwork+0x58>)
 800d976:	7b1a      	ldrb	r2, [r3, #12]
 800d978:	4b10      	ldr	r3, [pc, #64]	; (800d9bc <RadioSetPublicNetwork+0x58>)
 800d97a:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800d97c:	2001      	movs	r0, #1
 800d97e:	f7ff f82b 	bl	800c9d8 <RadioSetModem>
    if( enable == true )
 800d982:	79fb      	ldrb	r3, [r7, #7]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d00a      	beq.n	800d99e <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800d988:	2134      	movs	r1, #52	; 0x34
 800d98a:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800d98e:	f001 fd23 	bl	800f3d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800d992:	2144      	movs	r1, #68	; 0x44
 800d994:	f240 7041 	movw	r0, #1857	; 0x741
 800d998:	f001 fd1e 	bl	800f3d8 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800d99c:	e009      	b.n	800d9b2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800d99e:	2114      	movs	r1, #20
 800d9a0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800d9a4:	f001 fd18 	bl	800f3d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800d9a8:	2124      	movs	r1, #36	; 0x24
 800d9aa:	f240 7041 	movw	r0, #1857	; 0x741
 800d9ae:	f001 fd13 	bl	800f3d8 <SUBGRF_WriteRegister>
}
 800d9b2:	bf00      	nop
 800d9b4:	3708      	adds	r7, #8
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	20000b5c 	.word	0x20000b5c

0800d9c0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800d9c4:	f001 fe58 	bl	800f678 <SUBGRF_GetRadioWakeUpTime>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	3303      	adds	r3, #3
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	bd80      	pop	{r7, pc}

0800d9d0 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800d9d8:	f000 f80e 	bl	800d9f8 <RadioOnTxTimeoutProcess>
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800d9ec:	f000 f818 	bl	800da20 <RadioOnRxTimeoutProcess>
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    //DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d9fc:	4b07      	ldr	r3, [pc, #28]	; (800da1c <RadioOnTxTimeoutProcess+0x24>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d008      	beq.n	800da16 <RadioOnTxTimeoutProcess+0x1e>
 800da04:	4b05      	ldr	r3, [pc, #20]	; (800da1c <RadioOnTxTimeoutProcess+0x24>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d003      	beq.n	800da16 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800da0e:	4b03      	ldr	r3, [pc, #12]	; (800da1c <RadioOnTxTimeoutProcess+0x24>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	4798      	blx	r3
    }
}
 800da16:	bf00      	nop
 800da18:	bd80      	pop	{r7, pc}
 800da1a:	bf00      	nop
 800da1c:	20000b58 	.word	0x20000b58

0800da20 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800da20:	b580      	push	{r7, lr}
 800da22:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    //DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800da24:	4b07      	ldr	r3, [pc, #28]	; (800da44 <RadioOnRxTimeoutProcess+0x24>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d008      	beq.n	800da3e <RadioOnRxTimeoutProcess+0x1e>
 800da2c:	4b05      	ldr	r3, [pc, #20]	; (800da44 <RadioOnRxTimeoutProcess+0x24>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d003      	beq.n	800da3e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800da36:	4b03      	ldr	r3, [pc, #12]	; (800da44 <RadioOnRxTimeoutProcess+0x24>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	4798      	blx	r3
    }
}
 800da3e:	bf00      	nop
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	20000b58 	.word	0x20000b58

0800da48 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4603      	mov	r3, r0
 800da50:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800da52:	4a05      	ldr	r2, [pc, #20]	; (800da68 <RadioOnDioIrq+0x20>)
 800da54:	88fb      	ldrh	r3, [r7, #6]
 800da56:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800da5a:	f000 f807 	bl	800da6c <RadioIrqProcess>
}
 800da5e:	bf00      	nop
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	20000b5c 	.word	0x20000b5c

0800da6c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800da6c:	b590      	push	{r4, r7, lr}
 800da6e:	b083      	sub	sp, #12
 800da70:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800da76:	2300      	movs	r3, #0
 800da78:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 800da7a:	4bb5      	ldr	r3, [pc, #724]	; (800dd50 <RadioIrqProcess+0x2e4>)
 800da7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800da80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da84:	f000 810c 	beq.w	800dca0 <RadioIrqProcess+0x234>
 800da88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da8c:	f300 81b5 	bgt.w	800ddfa <RadioIrqProcess+0x38e>
 800da90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da94:	f000 80f0 	beq.w	800dc78 <RadioIrqProcess+0x20c>
 800da98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da9c:	f300 81ad 	bgt.w	800ddfa <RadioIrqProcess+0x38e>
 800daa0:	2b80      	cmp	r3, #128	; 0x80
 800daa2:	f000 80d5 	beq.w	800dc50 <RadioIrqProcess+0x1e4>
 800daa6:	2b80      	cmp	r3, #128	; 0x80
 800daa8:	f300 81a7 	bgt.w	800ddfa <RadioIrqProcess+0x38e>
 800daac:	2b20      	cmp	r3, #32
 800daae:	dc49      	bgt.n	800db44 <RadioIrqProcess+0xd8>
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f340 81a2 	ble.w	800ddfa <RadioIrqProcess+0x38e>
 800dab6:	3b01      	subs	r3, #1
 800dab8:	2b1f      	cmp	r3, #31
 800daba:	f200 819e 	bhi.w	800ddfa <RadioIrqProcess+0x38e>
 800dabe:	a201      	add	r2, pc, #4	; (adr r2, 800dac4 <RadioIrqProcess+0x58>)
 800dac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac4:	0800db4d 	.word	0x0800db4d
 800dac8:	0800db87 	.word	0x0800db87
 800dacc:	0800ddfb 	.word	0x0800ddfb
 800dad0:	0800dd19 	.word	0x0800dd19
 800dad4:	0800ddfb 	.word	0x0800ddfb
 800dad8:	0800ddfb 	.word	0x0800ddfb
 800dadc:	0800ddfb 	.word	0x0800ddfb
 800dae0:	0800dd27 	.word	0x0800dd27
 800dae4:	0800ddfb 	.word	0x0800ddfb
 800dae8:	0800ddfb 	.word	0x0800ddfb
 800daec:	0800ddfb 	.word	0x0800ddfb
 800daf0:	0800ddfb 	.word	0x0800ddfb
 800daf4:	0800ddfb 	.word	0x0800ddfb
 800daf8:	0800ddfb 	.word	0x0800ddfb
 800dafc:	0800ddfb 	.word	0x0800ddfb
 800db00:	0800dd43 	.word	0x0800dd43
 800db04:	0800ddfb 	.word	0x0800ddfb
 800db08:	0800ddfb 	.word	0x0800ddfb
 800db0c:	0800ddfb 	.word	0x0800ddfb
 800db10:	0800ddfb 	.word	0x0800ddfb
 800db14:	0800ddfb 	.word	0x0800ddfb
 800db18:	0800ddfb 	.word	0x0800ddfb
 800db1c:	0800ddfb 	.word	0x0800ddfb
 800db20:	0800ddfb 	.word	0x0800ddfb
 800db24:	0800ddfb 	.word	0x0800ddfb
 800db28:	0800ddfb 	.word	0x0800ddfb
 800db2c:	0800ddfb 	.word	0x0800ddfb
 800db30:	0800ddfb 	.word	0x0800ddfb
 800db34:	0800ddfb 	.word	0x0800ddfb
 800db38:	0800ddfb 	.word	0x0800ddfb
 800db3c:	0800ddfb 	.word	0x0800ddfb
 800db40:	0800dd7d 	.word	0x0800dd7d
 800db44:	2b40      	cmp	r3, #64	; 0x40
 800db46:	f000 813a 	beq.w	800ddbe <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800db4a:	e156      	b.n	800ddfa <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 800db4c:	4881      	ldr	r0, [pc, #516]	; (800dd54 <RadioIrqProcess+0x2e8>)
 800db4e:	f002 fd73 	bl	8010638 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800db52:	2000      	movs	r0, #0
 800db54:	f000 ff28 	bl	800e9a8 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 800db58:	f001 ff22 	bl	800f9a0 <RFW_Is_LongPacketModeEnabled>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b01      	cmp	r3, #1
 800db60:	d101      	bne.n	800db66 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800db62:	f001 ff46 	bl	800f9f2 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800db66:	4b7c      	ldr	r3, [pc, #496]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	f000 8147 	beq.w	800ddfe <RadioIrqProcess+0x392>
 800db70:	4b79      	ldr	r3, [pc, #484]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f000 8141 	beq.w	800ddfe <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 800db7c:	4b76      	ldr	r3, [pc, #472]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4798      	blx	r3
        break;
 800db84:	e13b      	b.n	800ddfe <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 800db86:	4875      	ldr	r0, [pc, #468]	; (800dd5c <RadioIrqProcess+0x2f0>)
 800db88:	f002 fd56 	bl	8010638 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800db8c:	4b70      	ldr	r3, [pc, #448]	; (800dd50 <RadioIrqProcess+0x2e4>)
 800db8e:	785b      	ldrb	r3, [r3, #1]
 800db90:	f083 0301 	eor.w	r3, r3, #1
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b00      	cmp	r3, #0
 800db98:	d014      	beq.n	800dbc4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800db9a:	2000      	movs	r0, #0
 800db9c:	f000 ff04 	bl	800e9a8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 800dba0:	2100      	movs	r1, #0
 800dba2:	f640 1002 	movw	r0, #2306	; 0x902
 800dba6:	f001 fc17 	bl	800f3d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800dbaa:	f640 1044 	movw	r0, #2372	; 0x944
 800dbae:	f001 fc27 	bl	800f400 <SUBGRF_ReadRegister>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	f043 0302 	orr.w	r3, r3, #2
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	4619      	mov	r1, r3
 800dbbc:	f640 1044 	movw	r0, #2372	; 0x944
 800dbc0:	f001 fc0a 	bl	800f3d8 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800dbc4:	1dfb      	adds	r3, r7, #7
 800dbc6:	22ff      	movs	r2, #255	; 0xff
 800dbc8:	4619      	mov	r1, r3
 800dbca:	4865      	ldr	r0, [pc, #404]	; (800dd60 <RadioIrqProcess+0x2f4>)
 800dbcc:	f000 fdbc 	bl	800e748 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 800dbd0:	4864      	ldr	r0, [pc, #400]	; (800dd64 <RadioIrqProcess+0x2f8>)
 800dbd2:	f001 fbaf 	bl	800f334 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800dbd6:	4b60      	ldr	r3, [pc, #384]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d036      	beq.n	800dc4c <RadioIrqProcess+0x1e0>
 800dbde:	4b5e      	ldr	r3, [pc, #376]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d031      	beq.n	800dc4c <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 800dbe8:	4b59      	ldr	r3, [pc, #356]	; (800dd50 <RadioIrqProcess+0x2e4>)
 800dbea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d10e      	bne.n	800dc10 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800dbf2:	4b59      	ldr	r3, [pc, #356]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	689c      	ldr	r4, [r3, #8]
 800dbf8:	79fb      	ldrb	r3, [r7, #7]
 800dbfa:	b299      	uxth	r1, r3
 800dbfc:	4b54      	ldr	r3, [pc, #336]	; (800dd50 <RadioIrqProcess+0x2e4>)
 800dbfe:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800dc02:	b21a      	sxth	r2, r3
 800dc04:	4b52      	ldr	r3, [pc, #328]	; (800dd50 <RadioIrqProcess+0x2e4>)
 800dc06:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800dc0a:	4855      	ldr	r0, [pc, #340]	; (800dd60 <RadioIrqProcess+0x2f4>)
 800dc0c:	47a0      	blx	r4
                break;
 800dc0e:	e01e      	b.n	800dc4e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800dc10:	4b4f      	ldr	r3, [pc, #316]	; (800dd50 <RadioIrqProcess+0x2e4>)
 800dc12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc14:	463a      	mov	r2, r7
 800dc16:	4611      	mov	r1, r2
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f001 fe0f 	bl	800f83c <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800dc1e:	4b4e      	ldr	r3, [pc, #312]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	689c      	ldr	r4, [r3, #8]
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	b299      	uxth	r1, r3
 800dc28:	4b49      	ldr	r3, [pc, #292]	; (800dd50 <RadioIrqProcess+0x2e4>)
 800dc2a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800dc2e:	b218      	sxth	r0, r3
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800dc36:	4a4c      	ldr	r2, [pc, #304]	; (800dd68 <RadioIrqProcess+0x2fc>)
 800dc38:	fb82 c203 	smull	ip, r2, r2, r3
 800dc3c:	1192      	asrs	r2, r2, #6
 800dc3e:	17db      	asrs	r3, r3, #31
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	b25b      	sxtb	r3, r3
 800dc44:	4602      	mov	r2, r0
 800dc46:	4846      	ldr	r0, [pc, #280]	; (800dd60 <RadioIrqProcess+0x2f4>)
 800dc48:	47a0      	blx	r4
                break;
 800dc4a:	e000      	b.n	800dc4e <RadioIrqProcess+0x1e2>
        }
 800dc4c:	bf00      	nop
        break;
 800dc4e:	e0e3      	b.n	800de18 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800dc50:	2000      	movs	r0, #0
 800dc52:	f000 fea9 	bl	800e9a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800dc56:	4b40      	ldr	r3, [pc, #256]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 80d1 	beq.w	800de02 <RadioIrqProcess+0x396>
 800dc60:	4b3d      	ldr	r3, [pc, #244]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	699b      	ldr	r3, [r3, #24]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f000 80cb 	beq.w	800de02 <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 800dc6c:	4b3a      	ldr	r3, [pc, #232]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	699b      	ldr	r3, [r3, #24]
 800dc72:	2000      	movs	r0, #0
 800dc74:	4798      	blx	r3
        break;
 800dc76:	e0c4      	b.n	800de02 <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 800dc78:	2000      	movs	r0, #0
 800dc7a:	f000 fe95 	bl	800e9a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800dc7e:	4b36      	ldr	r3, [pc, #216]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f000 80bf 	beq.w	800de06 <RadioIrqProcess+0x39a>
 800dc88:	4b33      	ldr	r3, [pc, #204]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	699b      	ldr	r3, [r3, #24]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	f000 80b9 	beq.w	800de06 <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 800dc94:	4b30      	ldr	r3, [pc, #192]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	699b      	ldr	r3, [r3, #24]
 800dc9a:	2001      	movs	r0, #1
 800dc9c:	4798      	blx	r3
        break;
 800dc9e:	e0b2      	b.n	800de06 <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800dca0:	4b32      	ldr	r3, [pc, #200]	; (800dd6c <RadioIrqProcess+0x300>)
 800dca2:	2201      	movs	r2, #1
 800dca4:	2100      	movs	r1, #0
 800dca6:	2002      	movs	r0, #2
 800dca8:	f001 fed6 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800dcac:	f000 fd32 	bl	800e714 <SUBGRF_GetOperatingMode>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b04      	cmp	r3, #4
 800dcb4:	d115      	bne.n	800dce2 <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 800dcb6:	4827      	ldr	r0, [pc, #156]	; (800dd54 <RadioIrqProcess+0x2e8>)
 800dcb8:	f002 fcbe 	bl	8010638 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	f000 fe73 	bl	800e9a8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800dcc2:	4b25      	ldr	r3, [pc, #148]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f000 809f 	beq.w	800de0a <RadioIrqProcess+0x39e>
 800dccc:	4b22      	ldr	r3, [pc, #136]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f000 8099 	beq.w	800de0a <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 800dcd8:	4b1f      	ldr	r3, [pc, #124]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	4798      	blx	r3
        break;
 800dce0:	e093      	b.n	800de0a <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800dce2:	f000 fd17 	bl	800e714 <SUBGRF_GetOperatingMode>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b05      	cmp	r3, #5
 800dcea:	f040 808e 	bne.w	800de0a <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 800dcee:	481b      	ldr	r0, [pc, #108]	; (800dd5c <RadioIrqProcess+0x2f0>)
 800dcf0:	f002 fca2 	bl	8010638 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	f000 fe57 	bl	800e9a8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800dcfa:	4b17      	ldr	r3, [pc, #92]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	f000 8083 	beq.w	800de0a <RadioIrqProcess+0x39e>
 800dd04:	4b14      	ldr	r3, [pc, #80]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d07d      	beq.n	800de0a <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 800dd0e:	4b12      	ldr	r3, [pc, #72]	; (800dd58 <RadioIrqProcess+0x2ec>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	4798      	blx	r3
        break;
 800dd16:	e078      	b.n	800de0a <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800dd18:	4b15      	ldr	r3, [pc, #84]	; (800dd70 <RadioIrqProcess+0x304>)
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	2002      	movs	r0, #2
 800dd20:	f001 fe9a 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800dd24:	e078      	b.n	800de18 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800dd26:	4b13      	ldr	r3, [pc, #76]	; (800dd74 <RadioIrqProcess+0x308>)
 800dd28:	2201      	movs	r2, #1
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	2002      	movs	r0, #2
 800dd2e:	f001 fe93 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 800dd32:	f001 fe2e 	bl	800f992 <RFW_Is_Init>
 800dd36:	4603      	mov	r3, r0
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d168      	bne.n	800de0e <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 800dd3c:	f001 fe5f 	bl	800f9fe <RFW_ReceivePayload>
        break;
 800dd40:	e065      	b.n	800de0e <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800dd42:	4b0d      	ldr	r3, [pc, #52]	; (800dd78 <RadioIrqProcess+0x30c>)
 800dd44:	2201      	movs	r2, #1
 800dd46:	2100      	movs	r1, #0
 800dd48:	2002      	movs	r0, #2
 800dd4a:	f001 fe85 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800dd4e:	e063      	b.n	800de18 <RadioIrqProcess+0x3ac>
 800dd50:	20000b5c 	.word	0x20000b5c
 800dd54:	20000bb4 	.word	0x20000bb4
 800dd58:	20000b58 	.word	0x20000b58
 800dd5c:	20000bcc 	.word	0x20000bcc
 800dd60:	20000a58 	.word	0x20000a58
 800dd64:	20000b80 	.word	0x20000b80
 800dd68:	10624dd3 	.word	0x10624dd3
 800dd6c:	08015580 	.word	0x08015580
 800dd70:	08015594 	.word	0x08015594
 800dd74:	080155a0 	.word	0x080155a0
 800dd78:	080155ac 	.word	0x080155ac
        TimerStop( &RxTimeoutTimer );
 800dd7c:	4828      	ldr	r0, [pc, #160]	; (800de20 <RadioIrqProcess+0x3b4>)
 800dd7e:	f002 fc5b 	bl	8010638 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800dd82:	4b28      	ldr	r3, [pc, #160]	; (800de24 <RadioIrqProcess+0x3b8>)
 800dd84:	785b      	ldrb	r3, [r3, #1]
 800dd86:	f083 0301 	eor.w	r3, r3, #1
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 800dd90:	2000      	movs	r0, #0
 800dd92:	f000 fe09 	bl	800e9a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800dd96:	4b24      	ldr	r3, [pc, #144]	; (800de28 <RadioIrqProcess+0x3bc>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d039      	beq.n	800de12 <RadioIrqProcess+0x3a6>
 800dd9e:	4b22      	ldr	r3, [pc, #136]	; (800de28 <RadioIrqProcess+0x3bc>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d034      	beq.n	800de12 <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 800dda8:	4b1f      	ldr	r3, [pc, #124]	; (800de28 <RadioIrqProcess+0x3bc>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800ddb0:	4b1e      	ldr	r3, [pc, #120]	; (800de2c <RadioIrqProcess+0x3c0>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	2002      	movs	r0, #2
 800ddb8:	f001 fe4e 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ddbc:	e029      	b.n	800de12 <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800ddbe:	4b1c      	ldr	r3, [pc, #112]	; (800de30 <RadioIrqProcess+0x3c4>)
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	2100      	movs	r1, #0
 800ddc4:	2002      	movs	r0, #2
 800ddc6:	f001 fe47 	bl	800fa58 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800ddca:	4b16      	ldr	r3, [pc, #88]	; (800de24 <RadioIrqProcess+0x3b8>)
 800ddcc:	785b      	ldrb	r3, [r3, #1]
 800ddce:	f083 0301 	eor.w	r3, r3, #1
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d002      	beq.n	800ddde <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 800ddd8:	2000      	movs	r0, #0
 800ddda:	f000 fde5 	bl	800e9a8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ddde:	4b12      	ldr	r3, [pc, #72]	; (800de28 <RadioIrqProcess+0x3bc>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d017      	beq.n	800de16 <RadioIrqProcess+0x3aa>
 800dde6:	4b10      	ldr	r3, [pc, #64]	; (800de28 <RadioIrqProcess+0x3bc>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d012      	beq.n	800de16 <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 800ddf0:	4b0d      	ldr	r3, [pc, #52]	; (800de28 <RadioIrqProcess+0x3bc>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	4798      	blx	r3
        break;
 800ddf8:	e00d      	b.n	800de16 <RadioIrqProcess+0x3aa>
        break;
 800ddfa:	bf00      	nop
 800ddfc:	e00c      	b.n	800de18 <RadioIrqProcess+0x3ac>
        break;
 800ddfe:	bf00      	nop
 800de00:	e00a      	b.n	800de18 <RadioIrqProcess+0x3ac>
        break;
 800de02:	bf00      	nop
 800de04:	e008      	b.n	800de18 <RadioIrqProcess+0x3ac>
        break;
 800de06:	bf00      	nop
 800de08:	e006      	b.n	800de18 <RadioIrqProcess+0x3ac>
        break;
 800de0a:	bf00      	nop
 800de0c:	e004      	b.n	800de18 <RadioIrqProcess+0x3ac>
        break;
 800de0e:	bf00      	nop
 800de10:	e002      	b.n	800de18 <RadioIrqProcess+0x3ac>
        break;
 800de12:	bf00      	nop
 800de14:	e000      	b.n	800de18 <RadioIrqProcess+0x3ac>
        break;
 800de16:	bf00      	nop
  }
}
 800de18:	bf00      	nop
 800de1a:	370c      	adds	r7, #12
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd90      	pop	{r4, r7, pc}
 800de20:	20000bcc 	.word	0x20000bcc
 800de24:	20000b5c 	.word	0x20000b5c
 800de28:	20000b58 	.word	0x20000b58
 800de2c:	080155b8 	.word	0x080155b8
 800de30:	080155c4 	.word	0x080155c4

0800de34 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800de38:	4b09      	ldr	r3, [pc, #36]	; (800de60 <RadioTxPrbs+0x2c>)
 800de3a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800de3e:	2101      	movs	r1, #1
 800de40:	4618      	mov	r0, r3
 800de42:	f001 fbbd 	bl	800f5c0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 800de46:	4b07      	ldr	r3, [pc, #28]	; (800de64 <RadioTxPrbs+0x30>)
 800de48:	212d      	movs	r1, #45	; 0x2d
 800de4a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800de4e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800de50:	f000 fe6d 	bl	800eb2e <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800de54:	4804      	ldr	r0, [pc, #16]	; (800de68 <RadioTxPrbs+0x34>)
 800de56:	f000 fdc3 	bl	800e9e0 <SUBGRF_SetTx>
}
 800de5a:	bf00      	nop
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	20000b5c 	.word	0x20000b5c
 800de64:	0800d87b 	.word	0x0800d87b
 800de68:	000fffff 	.word	0x000fffff

0800de6c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b084      	sub	sp, #16
 800de70:	af00      	add	r7, sp, #0
 800de72:	4603      	mov	r3, r0
 800de74:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800de76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de7a:	4618      	mov	r0, r3
 800de7c:	f001 fbc8 	bl	800f610 <SUBGRF_SetRfTxPower>
 800de80:	4603      	mov	r3, r0
 800de82:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800de84:	7bfb      	ldrb	r3, [r7, #15]
 800de86:	2101      	movs	r1, #1
 800de88:	4618      	mov	r0, r3
 800de8a:	f001 fb99 	bl	800f5c0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800de8e:	f000 fe45 	bl	800eb1c <SUBGRF_SetTxContinuousWave>
}
 800de92:	bf00      	nop
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800de9a:	b480      	push	{r7}
 800de9c:	b089      	sub	sp, #36	; 0x24
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60f8      	str	r0, [r7, #12]
 800dea2:	60b9      	str	r1, [r7, #8]
 800dea4:	4613      	mov	r3, r2
 800dea6:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 800deac:	2300      	movs	r3, #0
 800deae:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 800deb0:	2300      	movs	r3, #0
 800deb2:	61bb      	str	r3, [r7, #24]
 800deb4:	e011      	b.n	800deda <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	4413      	add	r3, r2
 800debc:	781a      	ldrb	r2, [r3, #0]
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	68b9      	ldr	r1, [r7, #8]
 800dec2:	440b      	add	r3, r1
 800dec4:	43d2      	mvns	r2, r2
 800dec6:	b2d2      	uxtb	r2, r2
 800dec8:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	4413      	add	r3, r2
 800ded0:	2200      	movs	r2, #0
 800ded2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800ded4:	69bb      	ldr	r3, [r7, #24]
 800ded6:	3301      	adds	r3, #1
 800ded8:	61bb      	str	r3, [r7, #24]
 800deda:	79fb      	ldrb	r3, [r7, #7]
 800dedc:	69ba      	ldr	r2, [r7, #24]
 800dede:	429a      	cmp	r2, r3
 800dee0:	dbe9      	blt.n	800deb6 <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800dee2:	2300      	movs	r3, #0
 800dee4:	61bb      	str	r3, [r7, #24]
 800dee6:	e049      	b.n	800df7c <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	425a      	negs	r2, r3
 800deec:	f003 0307 	and.w	r3, r3, #7
 800def0:	f002 0207 	and.w	r2, r2, #7
 800def4:	bf58      	it	pl
 800def6:	4253      	negpl	r3, r2
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f1c3 0307 	rsb	r3, r3, #7
 800defe:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800df00:	69bb      	ldr	r3, [r7, #24]
 800df02:	2b00      	cmp	r3, #0
 800df04:	da00      	bge.n	800df08 <payload_integration+0x6e>
 800df06:	3307      	adds	r3, #7
 800df08:	10db      	asrs	r3, r3, #3
 800df0a:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	3301      	adds	r3, #1
 800df10:	425a      	negs	r2, r3
 800df12:	f003 0307 	and.w	r3, r3, #7
 800df16:	f002 0207 	and.w	r2, r2, #7
 800df1a:	bf58      	it	pl
 800df1c:	4253      	negpl	r3, r2
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	f1c3 0307 	rsb	r3, r3, #7
 800df24:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	3301      	adds	r3, #1
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	da00      	bge.n	800df30 <payload_integration+0x96>
 800df2e:	3307      	adds	r3, #7
 800df30:	10db      	asrs	r3, r3, #3
 800df32:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800df34:	7dbb      	ldrb	r3, [r7, #22]
 800df36:	68ba      	ldr	r2, [r7, #8]
 800df38:	4413      	add	r3, r2
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	461a      	mov	r2, r3
 800df3e:	7dfb      	ldrb	r3, [r7, #23]
 800df40:	fa42 f303 	asr.w	r3, r2, r3
 800df44:	b2db      	uxtb	r3, r3
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800df4c:	7ffa      	ldrb	r2, [r7, #31]
 800df4e:	7cfb      	ldrb	r3, [r7, #19]
 800df50:	4053      	eors	r3, r2
 800df52:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800df54:	7d3b      	ldrb	r3, [r7, #20]
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	4413      	add	r3, r2
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	b25a      	sxtb	r2, r3
 800df5e:	7ff9      	ldrb	r1, [r7, #31]
 800df60:	7d7b      	ldrb	r3, [r7, #21]
 800df62:	fa01 f303 	lsl.w	r3, r1, r3
 800df66:	b25b      	sxtb	r3, r3
 800df68:	4313      	orrs	r3, r2
 800df6a:	b259      	sxtb	r1, r3
 800df6c:	7d3b      	ldrb	r3, [r7, #20]
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	4413      	add	r3, r2
 800df72:	b2ca      	uxtb	r2, r1
 800df74:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	3301      	adds	r3, #1
 800df7a:	61bb      	str	r3, [r7, #24]
 800df7c:	79fb      	ldrb	r3, [r7, #7]
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	69ba      	ldr	r2, [r7, #24]
 800df82:	429a      	cmp	r2, r3
 800df84:	dbb0      	blt.n	800dee8 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800df86:	7ffb      	ldrb	r3, [r7, #31]
 800df88:	01db      	lsls	r3, r3, #7
 800df8a:	b25a      	sxtb	r2, r3
 800df8c:	7ffb      	ldrb	r3, [r7, #31]
 800df8e:	019b      	lsls	r3, r3, #6
 800df90:	b25b      	sxtb	r3, r3
 800df92:	4313      	orrs	r3, r2
 800df94:	b25b      	sxtb	r3, r3
 800df96:	7ffa      	ldrb	r2, [r7, #31]
 800df98:	2a00      	cmp	r2, #0
 800df9a:	d101      	bne.n	800dfa0 <payload_integration+0x106>
 800df9c:	2220      	movs	r2, #32
 800df9e:	e000      	b.n	800dfa2 <payload_integration+0x108>
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	4313      	orrs	r3, r2
 800dfa4:	b259      	sxtb	r1, r3
 800dfa6:	79fb      	ldrb	r3, [r7, #7]
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	4413      	add	r3, r2
 800dfac:	b2ca      	uxtb	r2, r1
 800dfae:	701a      	strb	r2, [r3, #0]
}
 800dfb0:	bf00      	nop
 800dfb2:	3724      	adds	r7, #36	; 0x24
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bc80      	pop	{r7}
 800dfb8:	4770      	bx	lr
	...

0800dfbc <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b08c      	sub	sp, #48	; 0x30
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	607a      	str	r2, [r7, #4]
 800dfc6:	603b      	str	r3, [r7, #0]
 800dfc8:	4603      	mov	r3, r0
 800dfca:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	61fb      	str	r3, [r7, #28]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800dfd8:	f001 fcd5 	bl	800f986 <RFW_DeInit>

    if( rxContinuous != 0 )
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	bf14      	ite	ne
 800dfec:	2301      	movne	r3, #1
 800dfee:	2300      	moveq	r3, #0
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	4b9f      	ldr	r3, [pc, #636]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800dff4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800dff6:	7bfb      	ldrb	r3, [r7, #15]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d003      	beq.n	800e004 <RadioSetRxGenericConfig+0x48>
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	f000 80e8 	beq.w	800e1d2 <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800e002:	e1a0      	b.n	800e346 <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	68db      	ldr	r3, [r3, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d003      	beq.n	800e014 <RadioSetRxGenericConfig+0x58>
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	691b      	ldr	r3, [r3, #16]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d102      	bne.n	800e01a <RadioSetRxGenericConfig+0x5e>
            return -1;
 800e014:	f04f 33ff 	mov.w	r3, #4294967295
 800e018:	e196      	b.n	800e348 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	7d5b      	ldrb	r3, [r3, #21]
 800e01e:	2b08      	cmp	r3, #8
 800e020:	d902      	bls.n	800e028 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800e022:	f04f 33ff 	mov.w	r3, #4294967295
 800e026:	e18f      	b.n	800e348 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800e028:	2300      	movs	r3, #0
 800e02a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e02c:	e00d      	b.n	800e04a <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	699a      	ldr	r2, [r3, #24]
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	4413      	add	r3, r2
 800e036:	7819      	ldrb	r1, [r3, #0]
 800e038:	f107 021c 	add.w	r2, r7, #28
 800e03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e03e:	4413      	add	r3, r2
 800e040:	460a      	mov	r2, r1
 800e042:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800e044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e046:	3301      	adds	r3, #1
 800e048:	62bb      	str	r3, [r7, #40]	; 0x28
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	7d5b      	ldrb	r3, [r3, #21]
 800e04e:	461a      	mov	r2, r3
 800e050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e052:	4293      	cmp	r3, r2
 800e054:	dbeb      	blt.n	800e02e <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	bf14      	ite	ne
 800e05e:	2301      	movne	r3, #1
 800e060:	2300      	moveq	r3, #0
 800e062:	b2db      	uxtb	r3, r3
 800e064:	4618      	mov	r0, r3
 800e066:	f000 fd6b 	bl	800eb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e06a:	4b81      	ldr	r3, [pc, #516]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	4a7e      	ldr	r2, [pc, #504]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e078:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	791a      	ldrb	r2, [r3, #4]
 800e07e:	4b7c      	ldr	r3, [pc, #496]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	4618      	mov	r0, r3
 800e08a:	f001 fbaf 	bl	800f7ec <SUBGRF_GetFskBandwidthRegValue>
 800e08e:	4603      	mov	r3, r0
 800e090:	461a      	mov	r2, r3
 800e092:	4b77      	ldr	r3, [pc, #476]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e098:	4b75      	ldr	r3, [pc, #468]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	691b      	ldr	r3, [r3, #16]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	00db      	lsls	r3, r3, #3
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	4b71      	ldr	r3, [pc, #452]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e0aa:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	7d1a      	ldrb	r2, [r3, #20]
 800e0b0:	4b6f      	ldr	r3, [pc, #444]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e0b2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	7d5b      	ldrb	r3, [r3, #21]
 800e0b8:	00db      	lsls	r3, r3, #3
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	4b6c      	ldr	r3, [pc, #432]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e0be:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800e0c6:	4b6a      	ldr	r3, [pc, #424]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e0c8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d105      	bne.n	800e0e0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	69db      	ldr	r3, [r3, #28]
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	4b65      	ldr	r3, [pc, #404]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e0dc:	759a      	strb	r2, [r3, #22]
 800e0de:	e00b      	b.n	800e0f8 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e0e6:	2b02      	cmp	r3, #2
 800e0e8:	d103      	bne.n	800e0f2 <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800e0ea:	4b61      	ldr	r3, [pc, #388]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e0ec:	22ff      	movs	r2, #255	; 0xff
 800e0ee:	759a      	strb	r2, [r3, #22]
 800e0f0:	e002      	b.n	800e0f8 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800e0f2:	4b5f      	ldr	r3, [pc, #380]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e0f4:	22ff      	movs	r2, #255	; 0xff
 800e0f6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d004      	beq.n	800e10c <RadioSetRxGenericConfig+0x150>
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e108:	2b02      	cmp	r3, #2
 800e10a:	d12d      	bne.n	800e168 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e112:	2bf1      	cmp	r3, #241	; 0xf1
 800e114:	d00c      	beq.n	800e130 <RadioSetRxGenericConfig+0x174>
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e11c:	2bf2      	cmp	r3, #242	; 0xf2
 800e11e:	d007      	beq.n	800e130 <RadioSetRxGenericConfig+0x174>
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e126:	2b01      	cmp	r3, #1
 800e128:	d002      	beq.n	800e130 <RadioSetRxGenericConfig+0x174>
            return -1;
 800e12a:	f04f 33ff 	mov.w	r3, #4294967295
 800e12e:	e10b      	b.n	800e348 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 800e130:	2300      	movs	r3, #0
 800e132:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800e138:	4b4e      	ldr	r3, [pc, #312]	; (800e274 <RadioSetRxGenericConfig+0x2b8>)
 800e13a:	6819      	ldr	r1, [r3, #0]
 800e13c:	f107 0310 	add.w	r3, r7, #16
 800e140:	4a4d      	ldr	r2, [pc, #308]	; (800e278 <RadioSetRxGenericConfig+0x2bc>)
 800e142:	4618      	mov	r0, r3
 800e144:	f001 fc12 	bl	800f96c <RFW_Init>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d002      	beq.n	800e154 <RadioSetRxGenericConfig+0x198>
            return -1;
 800e14e:	f04f 33ff 	mov.w	r3, #4294967295
 800e152:	e0f9      	b.n	800e348 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e154:	4b46      	ldr	r3, [pc, #280]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e156:	2200      	movs	r2, #0
 800e158:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800e15a:	4b45      	ldr	r3, [pc, #276]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e15c:	2201      	movs	r2, #1
 800e15e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e160:	4b43      	ldr	r3, [pc, #268]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e162:	2200      	movs	r2, #0
 800e164:	755a      	strb	r2, [r3, #21]
        {
 800e166:	e00e      	b.n	800e186 <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e16e:	4b40      	ldr	r3, [pc, #256]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e170:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e178:	4b3d      	ldr	r3, [pc, #244]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e17a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800e182:	4b3b      	ldr	r3, [pc, #236]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e184:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800e186:	f7ff fa92 	bl	800d6ae <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800e18a:	2000      	movs	r0, #0
 800e18c:	f7fe fc24 	bl	800c9d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e190:	483a      	ldr	r0, [pc, #232]	; (800e27c <RadioSetRxGenericConfig+0x2c0>)
 800e192:	f000 ff07 	bl	800efa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e196:	483a      	ldr	r0, [pc, #232]	; (800e280 <RadioSetRxGenericConfig+0x2c4>)
 800e198:	f000 ffd6 	bl	800f148 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e19c:	f107 031c 	add.w	r3, r7, #28
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f000 fb06 	bl	800e7b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	8c1b      	ldrh	r3, [r3, #32]
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f000 fb50 	bl	800e850 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f000 fb2b 	bl	800e810 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800e1c0:	fb03 f202 	mul.w	r2, r3, r2
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1cc:	4a28      	ldr	r2, [pc, #160]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e1ce:	6093      	str	r3, [r2, #8]
        break;
 800e1d0:	e0b9      	b.n	800e346 <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d102      	bne.n	800e1e0 <RadioSetRxGenericConfig+0x224>
            return -1;
 800e1da:	f04f 33ff 	mov.w	r3, #4294967295
 800e1de:	e0b3      	b.n	800e348 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d104      	bne.n	800e1f4 <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e1f2:	e002      	b.n	800e1fa <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800e1f4:	23ff      	movs	r3, #255	; 0xff
 800e1f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	bf14      	ite	ne
 800e202:	2301      	movne	r3, #1
 800e204:	2300      	moveq	r3, #0
 800e206:	b2db      	uxtb	r3, r3
 800e208:	4618      	mov	r0, r3
 800e20a:	f000 fc99 	bl	800eb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	b2db      	uxtb	r3, r3
 800e212:	4618      	mov	r0, r3
 800e214:	f000 fca3 	bl	800eb5e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e218:	4b15      	ldr	r3, [pc, #84]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e226:	4b12      	ldr	r3, [pc, #72]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 800e232:	4b0f      	ldr	r3, [pc, #60]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800e23e:	4b0c      	ldr	r3, [pc, #48]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e240:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800e24a:	2b02      	cmp	r3, #2
 800e24c:	d01a      	beq.n	800e284 <RadioSetRxGenericConfig+0x2c8>
 800e24e:	2b02      	cmp	r3, #2
 800e250:	dc2c      	bgt.n	800e2ac <RadioSetRxGenericConfig+0x2f0>
 800e252:	2b00      	cmp	r3, #0
 800e254:	d002      	beq.n	800e25c <RadioSetRxGenericConfig+0x2a0>
 800e256:	2b01      	cmp	r3, #1
 800e258:	d005      	beq.n	800e266 <RadioSetRxGenericConfig+0x2aa>
            break;
 800e25a:	e027      	b.n	800e2ac <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e25c:	4b04      	ldr	r3, [pc, #16]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e25e:	2200      	movs	r2, #0
 800e260:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e264:	e023      	b.n	800e2ae <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e266:	4b02      	ldr	r3, [pc, #8]	; (800e270 <RadioSetRxGenericConfig+0x2b4>)
 800e268:	2201      	movs	r2, #1
 800e26a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e26e:	e01e      	b.n	800e2ae <RadioSetRxGenericConfig+0x2f2>
 800e270:	20000b5c 	.word	0x20000b5c
 800e274:	20000b58 	.word	0x20000b58
 800e278:	20000bcc 	.word	0x20000bcc
 800e27c:	20000b94 	.word	0x20000b94
 800e280:	20000b6a 	.word	0x20000b6a
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e28a:	2b0b      	cmp	r3, #11
 800e28c:	d004      	beq.n	800e298 <RadioSetRxGenericConfig+0x2dc>
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e294:	2b0c      	cmp	r3, #12
 800e296:	d104      	bne.n	800e2a2 <RadioSetRxGenericConfig+0x2e6>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e298:	4b2d      	ldr	r3, [pc, #180]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e29a:	2201      	movs	r2, #1
 800e29c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e2a0:	e005      	b.n	800e2ae <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e2a2:	4b2b      	ldr	r3, [pc, #172]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e2aa:	e000      	b.n	800e2ae <RadioSetRxGenericConfig+0x2f2>
            break;
 800e2ac:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e2ae:	4b28      	ldr	r3, [pc, #160]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e2b0:	2201      	movs	r2, #1
 800e2b2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800e2b8:	4b25      	ldr	r3, [pc, #148]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e2ba:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800e2c2:	4b23      	ldr	r3, [pc, #140]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e2c4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e2c6:	4a22      	ldr	r2, [pc, #136]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e2c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2cc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800e2d4:	4b1e      	ldr	r3, [pc, #120]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e2d6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800e2da:	68bb      	ldr	r3, [r7, #8]
 800e2dc:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800e2e0:	4b1b      	ldr	r3, [pc, #108]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e2e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800e2e6:	f7ff f9e2 	bl	800d6ae <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800e2ea:	2001      	movs	r0, #1
 800e2ec:	f7fe fb74 	bl	800c9d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e2f0:	4818      	ldr	r0, [pc, #96]	; (800e354 <RadioSetRxGenericConfig+0x398>)
 800e2f2:	f000 fe57 	bl	800efa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e2f6:	4818      	ldr	r0, [pc, #96]	; (800e358 <RadioSetRxGenericConfig+0x39c>)
 800e2f8:	f000 ff26 	bl	800f148 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800e2fc:	4b14      	ldr	r3, [pc, #80]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e2fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800e302:	2b01      	cmp	r3, #1
 800e304:	d10d      	bne.n	800e322 <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800e306:	f240 7036 	movw	r0, #1846	; 0x736
 800e30a:	f001 f879 	bl	800f400 <SUBGRF_ReadRegister>
 800e30e:	4603      	mov	r3, r0
 800e310:	f023 0304 	bic.w	r3, r3, #4
 800e314:	b2db      	uxtb	r3, r3
 800e316:	4619      	mov	r1, r3
 800e318:	f240 7036 	movw	r0, #1846	; 0x736
 800e31c:	f001 f85c 	bl	800f3d8 <SUBGRF_WriteRegister>
 800e320:	e00c      	b.n	800e33c <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800e322:	f240 7036 	movw	r0, #1846	; 0x736
 800e326:	f001 f86b 	bl	800f400 <SUBGRF_ReadRegister>
 800e32a:	4603      	mov	r3, r0
 800e32c:	f043 0304 	orr.w	r3, r3, #4
 800e330:	b2db      	uxtb	r3, r3
 800e332:	4619      	mov	r1, r3
 800e334:	f240 7036 	movw	r0, #1846	; 0x736
 800e338:	f001 f84e 	bl	800f3d8 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800e33c:	4b04      	ldr	r3, [pc, #16]	; (800e350 <RadioSetRxGenericConfig+0x394>)
 800e33e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e342:	609a      	str	r2, [r3, #8]
        break;
 800e344:	bf00      	nop
    }
    return status;
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3730      	adds	r7, #48	; 0x30
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	20000b5c 	.word	0x20000b5c
 800e354:	20000b94 	.word	0x20000b94
 800e358:	20000b6a 	.word	0x20000b6a

0800e35c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b08a      	sub	sp, #40	; 0x28
 800e360:	af00      	add	r7, sp, #0
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	607b      	str	r3, [r7, #4]
 800e366:	4603      	mov	r3, r0
 800e368:	73fb      	strb	r3, [r7, #15]
 800e36a:	4613      	mov	r3, r2
 800e36c:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 800e36e:	2300      	movs	r3, #0
 800e370:	61fb      	str	r3, [r7, #28]
 800e372:	2300      	movs	r3, #0
 800e374:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800e376:	f001 fb06 	bl	800f986 <RFW_DeInit>
    switch( modem )
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	2b02      	cmp	r3, #2
 800e37e:	f000 8144 	beq.w	800e60a <RadioSetTxGenericConfig+0x2ae>
 800e382:	2b02      	cmp	r3, #2
 800e384:	f300 8160 	bgt.w	800e648 <RadioSetTxGenericConfig+0x2ec>
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d003      	beq.n	800e394 <RadioSetTxGenericConfig+0x38>
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	f000 80b7 	beq.w	800e500 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800e392:	e159      	b.n	800e648 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	689b      	ldr	r3, [r3, #8]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d003      	beq.n	800e3a4 <RadioSetTxGenericConfig+0x48>
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d102      	bne.n	800e3aa <RadioSetTxGenericConfig+0x4e>
            return -1;
 800e3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3a8:	e163      	b.n	800e672 <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	7d1b      	ldrb	r3, [r3, #20]
 800e3ae:	2b08      	cmp	r3, #8
 800e3b0:	d902      	bls.n	800e3b8 <RadioSetTxGenericConfig+0x5c>
            return -1;
 800e3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b6:	e15c      	b.n	800e672 <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800e3bc:	e00d      	b.n	800e3da <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	699a      	ldr	r2, [r3, #24]
 800e3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c4:	4413      	add	r3, r2
 800e3c6:	7819      	ldrb	r1, [r3, #0]
 800e3c8:	f107 021c 	add.w	r2, r7, #28
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ce:	4413      	add	r3, r2
 800e3d0:	460a      	mov	r2, r1
 800e3d2:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800e3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	7d1b      	ldrb	r3, [r3, #20]
 800e3de:	461a      	mov	r2, r3
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	dbeb      	blt.n	800e3be <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e3e6:	4ba5      	ldr	r3, [pc, #660]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	4aa2      	ldr	r2, [pc, #648]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e3f4:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	781a      	ldrb	r2, [r3, #0]
 800e3fa:	4ba0      	ldr	r3, [pc, #640]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e3fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	4618      	mov	r0, r3
 800e406:	f001 f9f1 	bl	800f7ec <SUBGRF_GetFskBandwidthRegValue>
 800e40a:	4603      	mov	r3, r0
 800e40c:	461a      	mov	r2, r3
 800e40e:	4b9b      	ldr	r3, [pc, #620]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	4a98      	ldr	r2, [pc, #608]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e41a:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e41c:	4b97      	ldr	r3, [pc, #604]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e41e:	2200      	movs	r2, #0
 800e420:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	691b      	ldr	r3, [r3, #16]
 800e426:	b29b      	uxth	r3, r3
 800e428:	00db      	lsls	r3, r3, #3
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	4b93      	ldr	r3, [pc, #588]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e42e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800e430:	4b92      	ldr	r3, [pc, #584]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e432:	2204      	movs	r2, #4
 800e434:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	7d1b      	ldrb	r3, [r3, #20]
 800e43a:	00db      	lsls	r3, r3, #3
 800e43c:	b2da      	uxtb	r2, r3
 800e43e:	4b8f      	ldr	r3, [pc, #572]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e440:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800e442:	4b8e      	ldr	r3, [pc, #568]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e444:	2200      	movs	r2, #0
 800e446:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e44e:	2b02      	cmp	r3, #2
 800e450:	d003      	beq.n	800e45a <RadioSetTxGenericConfig+0xfe>
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	7f9b      	ldrb	r3, [r3, #30]
 800e456:	2b02      	cmp	r3, #2
 800e458:	d12a      	bne.n	800e4b0 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	7fdb      	ldrb	r3, [r3, #31]
 800e45e:	2bf1      	cmp	r3, #241	; 0xf1
 800e460:	d00a      	beq.n	800e478 <RadioSetTxGenericConfig+0x11c>
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	7fdb      	ldrb	r3, [r3, #31]
 800e466:	2bf2      	cmp	r3, #242	; 0xf2
 800e468:	d006      	beq.n	800e478 <RadioSetTxGenericConfig+0x11c>
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	7fdb      	ldrb	r3, [r3, #31]
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d002      	beq.n	800e478 <RadioSetTxGenericConfig+0x11c>
                return -1;
 800e472:	f04f 33ff 	mov.w	r3, #4294967295
 800e476:	e0fc      	b.n	800e672 <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 800e478:	2301      	movs	r3, #1
 800e47a:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800e480:	4b7f      	ldr	r3, [pc, #508]	; (800e680 <RadioSetTxGenericConfig+0x324>)
 800e482:	6819      	ldr	r1, [r3, #0]
 800e484:	f107 0310 	add.w	r3, r7, #16
 800e488:	4a7e      	ldr	r2, [pc, #504]	; (800e684 <RadioSetTxGenericConfig+0x328>)
 800e48a:	4618      	mov	r0, r3
 800e48c:	f001 fa6e 	bl	800f96c <RFW_Init>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d002      	beq.n	800e49c <RadioSetTxGenericConfig+0x140>
              return -1;
 800e496:	f04f 33ff 	mov.w	r3, #4294967295
 800e49a:	e0ea      	b.n	800e672 <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800e49c:	4b77      	ldr	r3, [pc, #476]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e49e:	2200      	movs	r2, #0
 800e4a0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800e4a2:	4b76      	ldr	r3, [pc, #472]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800e4a8:	4b74      	ldr	r3, [pc, #464]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	755a      	strb	r2, [r3, #21]
        {
 800e4ae:	e00c      	b.n	800e4ca <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	7fda      	ldrb	r2, [r3, #31]
 800e4b4:	4b71      	ldr	r3, [pc, #452]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e4b6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800e4be:	4b6f      	ldr	r3, [pc, #444]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e4c0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	7f9a      	ldrb	r2, [r3, #30]
 800e4c6:	4b6d      	ldr	r3, [pc, #436]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e4c8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800e4ca:	f7ff f8f0 	bl	800d6ae <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	f7fe fa82 	bl	800c9d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e4d4:	486c      	ldr	r0, [pc, #432]	; (800e688 <RadioSetTxGenericConfig+0x32c>)
 800e4d6:	f000 fd65 	bl	800efa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e4da:	486c      	ldr	r0, [pc, #432]	; (800e68c <RadioSetTxGenericConfig+0x330>)
 800e4dc:	f000 fe34 	bl	800f148 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800e4e0:	f107 031c 	add.w	r3, r7, #28
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f000 f964 	bl	800e7b2 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	8b9b      	ldrh	r3, [r3, #28]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f000 f9ae 	bl	800e850 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	8c1b      	ldrh	r3, [r3, #32]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 f989 	bl	800e810 <SUBGRF_SetCrcPolynomial>
        break;
 800e4fe:	e0a4      	b.n	800e64a <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e500:	4b5e      	ldr	r3, [pc, #376]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e502:	2201      	movs	r2, #1
 800e504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800e50e:	4b5b      	ldr	r3, [pc, #364]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800e51a:	4b58      	ldr	r3, [pc, #352]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e51c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800e520:	68bb      	ldr	r3, [r7, #8]
 800e522:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e526:	4b55      	ldr	r3, [pc, #340]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e528:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800e532:	2b02      	cmp	r3, #2
 800e534:	d010      	beq.n	800e558 <RadioSetTxGenericConfig+0x1fc>
 800e536:	2b02      	cmp	r3, #2
 800e538:	dc22      	bgt.n	800e580 <RadioSetTxGenericConfig+0x224>
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d002      	beq.n	800e544 <RadioSetTxGenericConfig+0x1e8>
 800e53e:	2b01      	cmp	r3, #1
 800e540:	d005      	beq.n	800e54e <RadioSetTxGenericConfig+0x1f2>
            break;
 800e542:	e01d      	b.n	800e580 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e544:	4b4d      	ldr	r3, [pc, #308]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e546:	2200      	movs	r2, #0
 800e548:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e54c:	e019      	b.n	800e582 <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e54e:	4b4b      	ldr	r3, [pc, #300]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e550:	2201      	movs	r2, #1
 800e552:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e556:	e014      	b.n	800e582 <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e55e:	2b0b      	cmp	r3, #11
 800e560:	d004      	beq.n	800e56c <RadioSetTxGenericConfig+0x210>
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e568:	2b0c      	cmp	r3, #12
 800e56a:	d104      	bne.n	800e576 <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800e56c:	4b43      	ldr	r3, [pc, #268]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e574:	e005      	b.n	800e582 <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800e576:	4b41      	ldr	r3, [pc, #260]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e578:	2200      	movs	r2, #0
 800e57a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800e57e:	e000      	b.n	800e582 <RadioSetTxGenericConfig+0x226>
            break;
 800e580:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e582:	4b3e      	ldr	r3, [pc, #248]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e584:	2201      	movs	r2, #1
 800e586:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800e58c:	4b3b      	ldr	r3, [pc, #236]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e58e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800e596:	4b39      	ldr	r3, [pc, #228]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e598:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800e5a0:	4b36      	ldr	r3, [pc, #216]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e5a2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e5ac:	4b33      	ldr	r3, [pc, #204]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e5ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800e5b2:	f7ff f87c 	bl	800d6ae <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800e5b6:	2001      	movs	r0, #1
 800e5b8:	f7fe fa0e 	bl	800c9d8 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e5bc:	4832      	ldr	r0, [pc, #200]	; (800e688 <RadioSetTxGenericConfig+0x32c>)
 800e5be:	f000 fcf1 	bl	800efa4 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e5c2:	4832      	ldr	r0, [pc, #200]	; (800e68c <RadioSetTxGenericConfig+0x330>)
 800e5c4:	f000 fdc0 	bl	800f148 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800e5c8:	4b2c      	ldr	r3, [pc, #176]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e5ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5ce:	2b06      	cmp	r3, #6
 800e5d0:	d10d      	bne.n	800e5ee <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800e5d2:	f640 0089 	movw	r0, #2185	; 0x889
 800e5d6:	f000 ff13 	bl	800f400 <SUBGRF_ReadRegister>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f023 0304 	bic.w	r3, r3, #4
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	f640 0089 	movw	r0, #2185	; 0x889
 800e5e8:	f000 fef6 	bl	800f3d8 <SUBGRF_WriteRegister>
        break;
 800e5ec:	e02d      	b.n	800e64a <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800e5ee:	f640 0089 	movw	r0, #2185	; 0x889
 800e5f2:	f000 ff05 	bl	800f400 <SUBGRF_ReadRegister>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	f043 0304 	orr.w	r3, r3, #4
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	4619      	mov	r1, r3
 800e600:	f640 0089 	movw	r0, #2185	; 0x889
 800e604:	f000 fee8 	bl	800f3d8 <SUBGRF_WriteRegister>
        break;
 800e608:	e01f      	b.n	800e64a <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d004      	beq.n	800e61c <RadioSetTxGenericConfig+0x2c0>
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e61a:	d902      	bls.n	800e622 <RadioSetTxGenericConfig+0x2c6>
            return -1;
 800e61c:	f04f 33ff 	mov.w	r3, #4294967295
 800e620:	e027      	b.n	800e672 <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 800e622:	2002      	movs	r0, #2
 800e624:	f7fe f9d8 	bl	800c9d8 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800e628:	4b14      	ldr	r3, [pc, #80]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e62a:	2202      	movs	r2, #2
 800e62c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e634:	4a11      	ldr	r2, [pc, #68]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e636:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800e638:	4b10      	ldr	r3, [pc, #64]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e63a:	2216      	movs	r2, #22
 800e63c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e640:	4811      	ldr	r0, [pc, #68]	; (800e688 <RadioSetTxGenericConfig+0x32c>)
 800e642:	f000 fcaf 	bl	800efa4 <SUBGRF_SetModulationParams>
        break;
 800e646:	e000      	b.n	800e64a <RadioSetTxGenericConfig+0x2ee>
        break;
 800e648:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800e64a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e64e:	4618      	mov	r0, r3
 800e650:	f000 ffde 	bl	800f610 <SUBGRF_SetRfTxPower>
 800e654:	4603      	mov	r3, r0
 800e656:	461a      	mov	r2, r3
 800e658:	4b08      	ldr	r3, [pc, #32]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e65a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800e65e:	4b07      	ldr	r3, [pc, #28]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e660:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e664:	4618      	mov	r0, r3
 800e666:	f001 f9a2 	bl	800f9ae <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800e66a:	4a04      	ldr	r2, [pc, #16]	; (800e67c <RadioSetTxGenericConfig+0x320>)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6053      	str	r3, [r2, #4]
    return 0;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3728      	adds	r7, #40	; 0x28
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000b5c 	.word	0x20000b5c
 800e680:	20000b58 	.word	0x20000b58
 800e684:	20000bb4 	.word	0x20000bb4
 800e688:	20000b94 	.word	0x20000b94
 800e68c:	20000b6a 	.word	0x20000b6a

0800e690 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d002      	beq.n	800e6a4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800e69e:	4a1a      	ldr	r2, [pc, #104]	; (800e708 <SUBGRF_Init+0x78>)
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800e6a4:	f7f3 ff3a 	bl	800251c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800e6a8:	2002      	movs	r0, #2
 800e6aa:	f001 f87d 	bl	800f7a8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800e6ae:	4b17      	ldr	r3, [pc, #92]	; (800e70c <SUBGRF_Init+0x7c>)
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	f000 f977 	bl	800e9a8 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800e6ba:	f7f7 f815 	bl	80056e8 <RBI_IsTCXO>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d10e      	bne.n	800e6e2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800e6c4:	2140      	movs	r1, #64	; 0x40
 800e6c6:	2001      	movs	r0, #1
 800e6c8:	f000 fb78 	bl	800edbc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800e6cc:	2100      	movs	r1, #0
 800e6ce:	f640 1011 	movw	r0, #2321	; 0x911
 800e6d2:	f000 fe81 	bl	800f3d8 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800e6d6:	237f      	movs	r3, #127	; 0x7f
 800e6d8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800e6da:	7b38      	ldrb	r0, [r7, #12]
 800e6dc:	f000 fa85 	bl	800ebea <SUBGRF_Calibrate>
 800e6e0:	e009      	b.n	800e6f6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800e6e2:	2120      	movs	r1, #32
 800e6e4:	f640 1011 	movw	r0, #2321	; 0x911
 800e6e8:	f000 fe76 	bl	800f3d8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800e6ec:	2120      	movs	r1, #32
 800e6ee:	f640 1012 	movw	r0, #2322	; 0x912
 800e6f2:	f000 fe71 	bl	800f3d8 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800e6f6:	f7f6 ffdb 	bl	80056b0 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800e6fa:	4b05      	ldr	r3, [pc, #20]	; (800e710 <SUBGRF_Init+0x80>)
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	701a      	strb	r2, [r3, #0]
}
 800e700:	bf00      	nop
 800e702:	3710      	adds	r7, #16
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	20000bf0 	.word	0x20000bf0
 800e70c:	20000bec 	.word	0x20000bec
 800e710:	20000be4 	.word	0x20000be4

0800e714 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800e714:	b480      	push	{r7}
 800e716:	af00      	add	r7, sp, #0
    return OperatingMode;
 800e718:	4b02      	ldr	r3, [pc, #8]	; (800e724 <SUBGRF_GetOperatingMode+0x10>)
 800e71a:	781b      	ldrb	r3, [r3, #0]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	46bd      	mov	sp, r7
 800e720:	bc80      	pop	{r7}
 800e722:	4770      	bx	lr
 800e724:	20000be4 	.word	0x20000be4

0800e728 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	460b      	mov	r3, r1
 800e732:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800e734:	78fb      	ldrb	r3, [r7, #3]
 800e736:	461a      	mov	r2, r3
 800e738:	6879      	ldr	r1, [r7, #4]
 800e73a:	2000      	movs	r0, #0
 800e73c:	f000 feb8 	bl	800f4b0 <SUBGRF_WriteBuffer>
}
 800e740:	bf00      	nop
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}

0800e748 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b086      	sub	sp, #24
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	4613      	mov	r3, r2
 800e754:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800e756:	2300      	movs	r3, #0
 800e758:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800e75a:	f107 0317 	add.w	r3, r7, #23
 800e75e:	4619      	mov	r1, r3
 800e760:	68b8      	ldr	r0, [r7, #8]
 800e762:	f000 fdbb 	bl	800f2dc <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	79fa      	ldrb	r2, [r7, #7]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d201      	bcs.n	800e774 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800e770:	2301      	movs	r3, #1
 800e772:	e007      	b.n	800e784 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800e774:	7df8      	ldrb	r0, [r7, #23]
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	461a      	mov	r2, r3
 800e77c:	68f9      	ldr	r1, [r7, #12]
 800e77e:	f000 feb9 	bl	800f4f4 <SUBGRF_ReadBuffer>

    return 0;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b084      	sub	sp, #16
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	460b      	mov	r3, r1
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800e79a:	7afb      	ldrb	r3, [r7, #11]
 800e79c:	4619      	mov	r1, r3
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7ff ffc2 	bl	800e728 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 f91b 	bl	800e9e0 <SUBGRF_SetTx>
}
 800e7aa:	bf00      	nop
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b082      	sub	sp, #8
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800e7ba:	2208      	movs	r2, #8
 800e7bc:	6879      	ldr	r1, [r7, #4]
 800e7be:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800e7c2:	f000 fe31 	bl	800f428 <SUBGRF_WriteRegisters>
    return 0;
 800e7c6:	2300      	movs	r3, #0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800e7da:	88fb      	ldrh	r3, [r7, #6]
 800e7dc:	0a1b      	lsrs	r3, r3, #8
 800e7de:	b29b      	uxth	r3, r3
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800e7e4:	88fb      	ldrh	r3, [r7, #6]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800e7ea:	f000 fb6b 	bl	800eec4 <SUBGRF_GetPacketType>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d108      	bne.n	800e806 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800e7f4:	f107 030c 	add.w	r3, r7, #12
 800e7f8:	2202      	movs	r2, #2
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800e800:	f000 fe12 	bl	800f428 <SUBGRF_WriteRegisters>
            break;
 800e804:	e000      	b.n	800e808 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800e806:	bf00      	nop
    }
}
 800e808:	bf00      	nop
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b084      	sub	sp, #16
 800e814:	af00      	add	r7, sp, #0
 800e816:	4603      	mov	r3, r0
 800e818:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800e81a:	88fb      	ldrh	r3, [r7, #6]
 800e81c:	0a1b      	lsrs	r3, r3, #8
 800e81e:	b29b      	uxth	r3, r3
 800e820:	b2db      	uxtb	r3, r3
 800e822:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800e824:	88fb      	ldrh	r3, [r7, #6]
 800e826:	b2db      	uxtb	r3, r3
 800e828:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800e82a:	f000 fb4b 	bl	800eec4 <SUBGRF_GetPacketType>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d108      	bne.n	800e846 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800e834:	f107 030c 	add.w	r3, r7, #12
 800e838:	2202      	movs	r2, #2
 800e83a:	4619      	mov	r1, r3
 800e83c:	f240 60be 	movw	r0, #1726	; 0x6be
 800e840:	f000 fdf2 	bl	800f428 <SUBGRF_WriteRegisters>
            break;
 800e844:	e000      	b.n	800e848 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800e846:	bf00      	nop
    }
}
 800e848:	bf00      	nop
 800e84a:	3710      	adds	r7, #16
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b084      	sub	sp, #16
 800e854:	af00      	add	r7, sp, #0
 800e856:	4603      	mov	r3, r0
 800e858:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800e85a:	2300      	movs	r3, #0
 800e85c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800e85e:	f000 fb31 	bl	800eec4 <SUBGRF_GetPacketType>
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d121      	bne.n	800e8ac <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800e868:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e86c:	f000 fdc8 	bl	800f400 <SUBGRF_ReadRegister>
 800e870:	4603      	mov	r3, r0
 800e872:	f023 0301 	bic.w	r3, r3, #1
 800e876:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800e878:	88fb      	ldrh	r3, [r7, #6]
 800e87a:	0a1b      	lsrs	r3, r3, #8
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	b25b      	sxtb	r3, r3
 800e880:	f003 0301 	and.w	r3, r3, #1
 800e884:	b25a      	sxtb	r2, r3
 800e886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	b25b      	sxtb	r3, r3
 800e88e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800e890:	7bfb      	ldrb	r3, [r7, #15]
 800e892:	4619      	mov	r1, r3
 800e894:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800e898:	f000 fd9e 	bl	800f3d8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800e89c:	88fb      	ldrh	r3, [r7, #6]
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800e8a6:	f000 fd97 	bl	800f3d8 <SUBGRF_WriteRegister>
            break;
 800e8aa:	e000      	b.n	800e8ae <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800e8ac:	bf00      	nop
    }
}
 800e8ae:	bf00      	nop
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}

0800e8b6 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800e8b6:	b580      	push	{r7, lr}
 800e8b8:	b082      	sub	sp, #8
 800e8ba:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800e8c8:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e8cc:	f000 fd98 	bl	800f400 <SUBGRF_ReadRegister>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e8d4:	79fb      	ldrb	r3, [r7, #7]
 800e8d6:	f023 0301 	bic.w	r3, r3, #1
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	4619      	mov	r1, r3
 800e8de:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e8e2:	f000 fd79 	bl	800f3d8 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800e8e6:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e8ea:	f000 fd89 	bl	800f400 <SUBGRF_ReadRegister>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800e8f2:	79bb      	ldrb	r3, [r7, #6]
 800e8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e900:	f000 fd6a 	bl	800f3d8 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800e904:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e908:	f000 f88a 	bl	800ea20 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800e90c:	463b      	mov	r3, r7
 800e90e:	2204      	movs	r2, #4
 800e910:	4619      	mov	r1, r3
 800e912:	f640 0019 	movw	r0, #2073	; 0x819
 800e916:	f000 fda9 	bl	800f46c <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800e91a:	2000      	movs	r0, #0
 800e91c:	f000 f844 	bl	800e9a8 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800e920:	79fb      	ldrb	r3, [r7, #7]
 800e922:	4619      	mov	r1, r3
 800e924:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800e928:	f000 fd56 	bl	800f3d8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800e92c:	79bb      	ldrb	r3, [r7, #6]
 800e92e:	4619      	mov	r1, r3
 800e930:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800e934:	f000 fd50 	bl	800f3d8 <SUBGRF_WriteRegister>

    return number;
 800e938:	683b      	ldr	r3, [r7, #0]
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
	...

0800e944 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b084      	sub	sp, #16
 800e948:	af00      	add	r7, sp, #0
 800e94a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800e94c:	2000      	movs	r0, #0
 800e94e:	f7f6 feb6 	bl	80056be <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800e952:	2002      	movs	r0, #2
 800e954:	f000 ff28 	bl	800f7a8 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e958:	793b      	ldrb	r3, [r7, #4]
 800e95a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800e964:	793b      	ldrb	r3, [r7, #4]
 800e966:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e96e:	b25b      	sxtb	r3, r3
 800e970:	4313      	orrs	r3, r2
 800e972:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800e974:	793b      	ldrb	r3, [r7, #4]
 800e976:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800e97e:	4313      	orrs	r3, r2
 800e980:	b25b      	sxtb	r3, r3
 800e982:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800e984:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800e986:	f107 030f 	add.w	r3, r7, #15
 800e98a:	2201      	movs	r2, #1
 800e98c:	4619      	mov	r1, r3
 800e98e:	2084      	movs	r0, #132	; 0x84
 800e990:	f000 fdd2 	bl	800f538 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800e994:	4b03      	ldr	r3, [pc, #12]	; (800e9a4 <SUBGRF_SetSleep+0x60>)
 800e996:	2200      	movs	r2, #0
 800e998:	701a      	strb	r2, [r3, #0]
}
 800e99a:	bf00      	nop
 800e99c:	3710      	adds	r7, #16
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	20000be4 	.word	0x20000be4

0800e9a8 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800e9b2:	1dfb      	adds	r3, r7, #7
 800e9b4:	2201      	movs	r2, #1
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	2080      	movs	r0, #128	; 0x80
 800e9ba:	f000 fdbd 	bl	800f538 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800e9be:	79fb      	ldrb	r3, [r7, #7]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d103      	bne.n	800e9cc <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800e9c4:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <SUBGRF_SetStandby+0x34>)
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800e9ca:	e002      	b.n	800e9d2 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800e9cc:	4b03      	ldr	r3, [pc, #12]	; (800e9dc <SUBGRF_SetStandby+0x34>)
 800e9ce:	2202      	movs	r2, #2
 800e9d0:	701a      	strb	r2, [r3, #0]
}
 800e9d2:	bf00      	nop
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	20000be4 	.word	0x20000be4

0800e9e0 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800e9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ea1c <SUBGRF_SetTx+0x3c>)
 800e9ea:	2204      	movs	r2, #4
 800e9ec:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	0c1b      	lsrs	r3, r3, #16
 800e9f2:	b2db      	uxtb	r3, r3
 800e9f4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	0a1b      	lsrs	r3, r3, #8
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800ea04:	f107 030c 	add.w	r3, r7, #12
 800ea08:	2203      	movs	r2, #3
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	2083      	movs	r0, #131	; 0x83
 800ea0e:	f000 fd93 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ea12:	bf00      	nop
 800ea14:	3710      	adds	r7, #16
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	20000be4 	.word	0x20000be4

0800ea20 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ea28:	4b0c      	ldr	r3, [pc, #48]	; (800ea5c <SUBGRF_SetRx+0x3c>)
 800ea2a:	2205      	movs	r2, #5
 800ea2c:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	0c1b      	lsrs	r3, r3, #16
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	0a1b      	lsrs	r3, r3, #8
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	b2db      	uxtb	r3, r3
 800ea42:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ea44:	f107 030c 	add.w	r3, r7, #12
 800ea48:	2203      	movs	r2, #3
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	2082      	movs	r0, #130	; 0x82
 800ea4e:	f000 fd73 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ea52:	bf00      	nop
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	20000be4 	.word	0x20000be4

0800ea60 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ea68:	4b0e      	ldr	r3, [pc, #56]	; (800eaa4 <SUBGRF_SetRxBoosted+0x44>)
 800ea6a:	2205      	movs	r2, #5
 800ea6c:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800ea6e:	2197      	movs	r1, #151	; 0x97
 800ea70:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800ea74:	f000 fcb0 	bl	800f3d8 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	0c1b      	lsrs	r3, r3, #16
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	0a1b      	lsrs	r3, r3, #8
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800ea8e:	f107 030c 	add.w	r3, r7, #12
 800ea92:	2203      	movs	r2, #3
 800ea94:	4619      	mov	r1, r3
 800ea96:	2082      	movs	r0, #130	; 0x82
 800ea98:	f000 fd4e 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ea9c:	bf00      	nop
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	20000be4 	.word	0x20000be4

0800eaa8 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	0c1b      	lsrs	r3, r3, #16
 800eab6:	b2db      	uxtb	r3, r3
 800eab8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	0a1b      	lsrs	r3, r3, #8
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	b2db      	uxtb	r3, r3
 800eac6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	0c1b      	lsrs	r3, r3, #16
 800eacc:	b2db      	uxtb	r3, r3
 800eace:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	0a1b      	lsrs	r3, r3, #8
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800eade:	f107 0308 	add.w	r3, r7, #8
 800eae2:	2206      	movs	r2, #6
 800eae4:	4619      	mov	r1, r3
 800eae6:	2094      	movs	r0, #148	; 0x94
 800eae8:	f000 fd26 	bl	800f538 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800eaec:	4b03      	ldr	r3, [pc, #12]	; (800eafc <SUBGRF_SetRxDutyCycle+0x54>)
 800eaee:	2206      	movs	r2, #6
 800eaf0:	701a      	strb	r2, [r3, #0]
}
 800eaf2:	bf00      	nop
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	20000be4 	.word	0x20000be4

0800eb00 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800eb04:	2200      	movs	r2, #0
 800eb06:	2100      	movs	r1, #0
 800eb08:	20c5      	movs	r0, #197	; 0xc5
 800eb0a:	f000 fd15 	bl	800f538 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800eb0e:	4b02      	ldr	r3, [pc, #8]	; (800eb18 <SUBGRF_SetCad+0x18>)
 800eb10:	2207      	movs	r2, #7
 800eb12:	701a      	strb	r2, [r3, #0]
}
 800eb14:	bf00      	nop
 800eb16:	bd80      	pop	{r7, pc}
 800eb18:	20000be4 	.word	0x20000be4

0800eb1c <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800eb20:	2200      	movs	r2, #0
 800eb22:	2100      	movs	r1, #0
 800eb24:	20d1      	movs	r0, #209	; 0xd1
 800eb26:	f000 fd07 	bl	800f538 <SUBGRF_WriteCommand>
}
 800eb2a:	bf00      	nop
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800eb2e:	b580      	push	{r7, lr}
 800eb30:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800eb32:	2200      	movs	r2, #0
 800eb34:	2100      	movs	r1, #0
 800eb36:	20d2      	movs	r0, #210	; 0xd2
 800eb38:	f000 fcfe 	bl	800f538 <SUBGRF_WriteCommand>
}
 800eb3c:	bf00      	nop
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	4603      	mov	r3, r0
 800eb48:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800eb4a:	1dfb      	adds	r3, r7, #7
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	4619      	mov	r1, r3
 800eb50:	209f      	movs	r0, #159	; 0x9f
 800eb52:	f000 fcf1 	bl	800f538 <SUBGRF_WriteCommand>
}
 800eb56:	bf00      	nop
 800eb58:	3708      	adds	r7, #8
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800eb5e:	b580      	push	{r7, lr}
 800eb60:	b084      	sub	sp, #16
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	4603      	mov	r3, r0
 800eb66:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800eb68:	1dfb      	adds	r3, r7, #7
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	20a0      	movs	r0, #160	; 0xa0
 800eb70:	f000 fce2 	bl	800f538 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800eb74:	79fb      	ldrb	r3, [r7, #7]
 800eb76:	2b3f      	cmp	r3, #63	; 0x3f
 800eb78:	d91c      	bls.n	800ebb4 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800eb7a:	79fb      	ldrb	r3, [r7, #7]
 800eb7c:	085b      	lsrs	r3, r3, #1
 800eb7e:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800eb80:	2300      	movs	r3, #0
 800eb82:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800eb88:	e005      	b.n	800eb96 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800eb8a:	7bfb      	ldrb	r3, [r7, #15]
 800eb8c:	089b      	lsrs	r3, r3, #2
 800eb8e:	73fb      	strb	r3, [r7, #15]
            exp++;
 800eb90:	7bbb      	ldrb	r3, [r7, #14]
 800eb92:	3301      	adds	r3, #1
 800eb94:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800eb96:	7bfb      	ldrb	r3, [r7, #15]
 800eb98:	2b1f      	cmp	r3, #31
 800eb9a:	d8f6      	bhi.n	800eb8a <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
 800eb9e:	00db      	lsls	r3, r3, #3
 800eba0:	b2da      	uxtb	r2, r3
 800eba2:	7bbb      	ldrb	r3, [r7, #14]
 800eba4:	4413      	add	r3, r2
 800eba6:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800eba8:	7b7b      	ldrb	r3, [r7, #13]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	f240 7006 	movw	r0, #1798	; 0x706
 800ebb0:	f000 fc12 	bl	800f3d8 <SUBGRF_WriteRegister>
    }
}
 800ebb4:	bf00      	nop
 800ebb6:	3710      	adds	r7, #16
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800ebc2:	f7f6 fd98 	bl	80056f6 <RBI_IsDCDC>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d102      	bne.n	800ebd2 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800ebcc:	2301      	movs	r3, #1
 800ebce:	71fb      	strb	r3, [r7, #7]
 800ebd0:	e001      	b.n	800ebd6 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800ebd6:	1dfb      	adds	r3, r7, #7
 800ebd8:	2201      	movs	r2, #1
 800ebda:	4619      	mov	r1, r3
 800ebdc:	2096      	movs	r0, #150	; 0x96
 800ebde:	f000 fcab 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ebe2:	bf00      	nop
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b084      	sub	sp, #16
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ebf2:	793b      	ldrb	r3, [r7, #4]
 800ebf4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	019b      	lsls	r3, r3, #6
 800ebfc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ebfe:	793b      	ldrb	r3, [r7, #4]
 800ec00:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ec04:	b2db      	uxtb	r3, r3
 800ec06:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ec08:	b25b      	sxtb	r3, r3
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800ec0e:	793b      	ldrb	r3, [r7, #4]
 800ec10:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ec14:	b2db      	uxtb	r3, r3
 800ec16:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ec18:	b25b      	sxtb	r3, r3
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ec1e:	793b      	ldrb	r3, [r7, #4]
 800ec20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800ec28:	b25b      	sxtb	r3, r3
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800ec2e:	793b      	ldrb	r3, [r7, #4]
 800ec30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ec38:	b25b      	sxtb	r3, r3
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ec3e:	793b      	ldrb	r3, [r7, #4]
 800ec40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800ec44:	b2db      	uxtb	r3, r3
 800ec46:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800ec48:	b25b      	sxtb	r3, r3
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800ec4e:	793b      	ldrb	r3, [r7, #4]
 800ec50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ec58:	4313      	orrs	r3, r2
 800ec5a:	b25b      	sxtb	r3, r3
 800ec5c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ec5e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800ec60:	f107 030f 	add.w	r3, r7, #15
 800ec64:	2201      	movs	r2, #1
 800ec66:	4619      	mov	r1, r3
 800ec68:	2089      	movs	r0, #137	; 0x89
 800ec6a:	f000 fc65 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ec6e:	bf00      	nop
 800ec70:	3710      	adds	r7, #16
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
	...

0800ec78 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	4a1b      	ldr	r2, [pc, #108]	; (800ecf0 <SUBGRF_CalibrateImage+0x78>)
 800ec84:	4293      	cmp	r3, r2
 800ec86:	d904      	bls.n	800ec92 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800ec88:	23e1      	movs	r3, #225	; 0xe1
 800ec8a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800ec8c:	23e9      	movs	r3, #233	; 0xe9
 800ec8e:	737b      	strb	r3, [r7, #13]
 800ec90:	e022      	b.n	800ecd8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a17      	ldr	r2, [pc, #92]	; (800ecf4 <SUBGRF_CalibrateImage+0x7c>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d904      	bls.n	800eca4 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800ec9a:	23d7      	movs	r3, #215	; 0xd7
 800ec9c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800ec9e:	23db      	movs	r3, #219	; 0xdb
 800eca0:	737b      	strb	r3, [r7, #13]
 800eca2:	e019      	b.n	800ecd8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	4a14      	ldr	r2, [pc, #80]	; (800ecf8 <SUBGRF_CalibrateImage+0x80>)
 800eca8:	4293      	cmp	r3, r2
 800ecaa:	d904      	bls.n	800ecb6 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800ecac:	23c1      	movs	r3, #193	; 0xc1
 800ecae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800ecb0:	23c5      	movs	r3, #197	; 0xc5
 800ecb2:	737b      	strb	r3, [r7, #13]
 800ecb4:	e010      	b.n	800ecd8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a10      	ldr	r2, [pc, #64]	; (800ecfc <SUBGRF_CalibrateImage+0x84>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d904      	bls.n	800ecc8 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800ecbe:	2375      	movs	r3, #117	; 0x75
 800ecc0:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800ecc2:	2381      	movs	r3, #129	; 0x81
 800ecc4:	737b      	strb	r3, [r7, #13]
 800ecc6:	e007      	b.n	800ecd8 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a0d      	ldr	r2, [pc, #52]	; (800ed00 <SUBGRF_CalibrateImage+0x88>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d903      	bls.n	800ecd8 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800ecd0:	236b      	movs	r3, #107	; 0x6b
 800ecd2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800ecd4:	236f      	movs	r3, #111	; 0x6f
 800ecd6:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800ecd8:	f107 030c 	add.w	r3, r7, #12
 800ecdc:	2202      	movs	r2, #2
 800ecde:	4619      	mov	r1, r3
 800ece0:	2098      	movs	r0, #152	; 0x98
 800ece2:	f000 fc29 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ece6:	bf00      	nop
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	35a4e900 	.word	0x35a4e900
 800ecf4:	32a9f880 	.word	0x32a9f880
 800ecf8:	2de54480 	.word	0x2de54480
 800ecfc:	1b6b0b00 	.word	0x1b6b0b00
 800ed00:	1954fc40 	.word	0x1954fc40

0800ed04 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800ed04:	b590      	push	{r4, r7, lr}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	4604      	mov	r4, r0
 800ed0c:	4608      	mov	r0, r1
 800ed0e:	4611      	mov	r1, r2
 800ed10:	461a      	mov	r2, r3
 800ed12:	4623      	mov	r3, r4
 800ed14:	71fb      	strb	r3, [r7, #7]
 800ed16:	4603      	mov	r3, r0
 800ed18:	71bb      	strb	r3, [r7, #6]
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	717b      	strb	r3, [r7, #5]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800ed22:	79fb      	ldrb	r3, [r7, #7]
 800ed24:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800ed26:	79bb      	ldrb	r3, [r7, #6]
 800ed28:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800ed2a:	797b      	ldrb	r3, [r7, #5]
 800ed2c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800ed2e:	793b      	ldrb	r3, [r7, #4]
 800ed30:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ed32:	f107 030c 	add.w	r3, r7, #12
 800ed36:	2204      	movs	r2, #4
 800ed38:	4619      	mov	r1, r3
 800ed3a:	2095      	movs	r0, #149	; 0x95
 800ed3c:	f000 fbfc 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ed40:	bf00      	nop
 800ed42:	3714      	adds	r7, #20
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd90      	pop	{r4, r7, pc}

0800ed48 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800ed48:	b590      	push	{r4, r7, lr}
 800ed4a:	b085      	sub	sp, #20
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	4604      	mov	r4, r0
 800ed50:	4608      	mov	r0, r1
 800ed52:	4611      	mov	r1, r2
 800ed54:	461a      	mov	r2, r3
 800ed56:	4623      	mov	r3, r4
 800ed58:	80fb      	strh	r3, [r7, #6]
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	80bb      	strh	r3, [r7, #4]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	807b      	strh	r3, [r7, #2]
 800ed62:	4613      	mov	r3, r2
 800ed64:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ed66:	88fb      	ldrh	r3, [r7, #6]
 800ed68:	0a1b      	lsrs	r3, r3, #8
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800ed70:	88fb      	ldrh	r3, [r7, #6]
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ed76:	88bb      	ldrh	r3, [r7, #4]
 800ed78:	0a1b      	lsrs	r3, r3, #8
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800ed80:	88bb      	ldrh	r3, [r7, #4]
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ed86:	887b      	ldrh	r3, [r7, #2]
 800ed88:	0a1b      	lsrs	r3, r3, #8
 800ed8a:	b29b      	uxth	r3, r3
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800ed90:	887b      	ldrh	r3, [r7, #2]
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800ed96:	883b      	ldrh	r3, [r7, #0]
 800ed98:	0a1b      	lsrs	r3, r3, #8
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800eda0:	883b      	ldrh	r3, [r7, #0]
 800eda2:	b2db      	uxtb	r3, r3
 800eda4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800eda6:	f107 0308 	add.w	r3, r7, #8
 800edaa:	2208      	movs	r2, #8
 800edac:	4619      	mov	r1, r3
 800edae:	2008      	movs	r0, #8
 800edb0:	f000 fbc2 	bl	800f538 <SUBGRF_WriteCommand>
}
 800edb4:	bf00      	nop
 800edb6:	3714      	adds	r7, #20
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd90      	pop	{r4, r7, pc}

0800edbc <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b084      	sub	sp, #16
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	4603      	mov	r3, r0
 800edc4:	6039      	str	r1, [r7, #0]
 800edc6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800edc8:	79fb      	ldrb	r3, [r7, #7]
 800edca:	f003 0307 	and.w	r3, r3, #7
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	0c1b      	lsrs	r3, r3, #16
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	0a1b      	lsrs	r3, r3, #8
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800ede8:	f107 030c 	add.w	r3, r7, #12
 800edec:	2204      	movs	r2, #4
 800edee:	4619      	mov	r1, r3
 800edf0:	2097      	movs	r0, #151	; 0x97
 800edf2:	f000 fba1 	bl	800f538 <SUBGRF_WriteCommand>
}
 800edf6:	bf00      	nop
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
	...

0800ee00 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800ee00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ee04:	b084      	sub	sp, #16
 800ee06:	af00      	add	r7, sp, #0
 800ee08:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800ee0e:	4b1d      	ldr	r3, [pc, #116]	; (800ee84 <SUBGRF_SetRfFrequency+0x84>)
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	f083 0301 	eor.w	r3, r3, #1
 800ee16:	b2db      	uxtb	r3, r3
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d005      	beq.n	800ee28 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800ee1c:	6878      	ldr	r0, [r7, #4]
 800ee1e:	f7ff ff2b 	bl	800ec78 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800ee22:	4b18      	ldr	r3, [pc, #96]	; (800ee84 <SUBGRF_SetRfFrequency+0x84>)
 800ee24:	2201      	movs	r2, #1
 800ee26:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	461c      	mov	r4, r3
 800ee2e:	4615      	mov	r5, r2
 800ee30:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800ee34:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800ee38:	4a13      	ldr	r2, [pc, #76]	; (800ee88 <SUBGRF_SetRfFrequency+0x88>)
 800ee3a:	f04f 0300 	mov.w	r3, #0
 800ee3e:	4640      	mov	r0, r8
 800ee40:	4649      	mov	r1, r9
 800ee42:	f7f2 f9ad 	bl	80011a0 <__aeabi_uldivmod>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
 800ee4a:	4613      	mov	r3, r2
 800ee4c:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	0e1b      	lsrs	r3, r3, #24
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	0c1b      	lsrs	r3, r3, #16
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	0a1b      	lsrs	r3, r3, #8
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	b2db      	uxtb	r3, r3
 800ee6a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800ee6c:	f107 0308 	add.w	r3, r7, #8
 800ee70:	2204      	movs	r2, #4
 800ee72:	4619      	mov	r1, r3
 800ee74:	2086      	movs	r0, #134	; 0x86
 800ee76:	f000 fb5f 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ee7a:	bf00      	nop
 800ee7c:	3710      	adds	r7, #16
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ee84:	20000bec 	.word	0x20000bec
 800ee88:	01e84800 	.word	0x01e84800

0800ee8c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b082      	sub	sp, #8
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800ee96:	79fa      	ldrb	r2, [r7, #7]
 800ee98:	4b09      	ldr	r3, [pc, #36]	; (800eec0 <SUBGRF_SetPacketType+0x34>)
 800ee9a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800ee9c:	79fb      	ldrb	r3, [r7, #7]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d104      	bne.n	800eeac <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800eea2:	2100      	movs	r1, #0
 800eea4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800eea8:	f000 fa96 	bl	800f3d8 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800eeac:	1dfb      	adds	r3, r7, #7
 800eeae:	2201      	movs	r2, #1
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	208a      	movs	r0, #138	; 0x8a
 800eeb4:	f000 fb40 	bl	800f538 <SUBGRF_WriteCommand>
}
 800eeb8:	bf00      	nop
 800eeba:	3708      	adds	r7, #8
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}
 800eec0:	20000be5 	.word	0x20000be5

0800eec4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800eec4:	b480      	push	{r7}
 800eec6:	af00      	add	r7, sp, #0
    return PacketType;
 800eec8:	4b02      	ldr	r3, [pc, #8]	; (800eed4 <SUBGRF_GetPacketType+0x10>)
 800eeca:	781b      	ldrb	r3, [r3, #0]
}
 800eecc:	4618      	mov	r0, r3
 800eece:	46bd      	mov	sp, r7
 800eed0:	bc80      	pop	{r7}
 800eed2:	4770      	bx	lr
 800eed4:	20000be5 	.word	0x20000be5

0800eed8 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	71fb      	strb	r3, [r7, #7]
 800eee2:	460b      	mov	r3, r1
 800eee4:	71bb      	strb	r3, [r7, #6]
 800eee6:	4613      	mov	r3, r2
 800eee8:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800eeea:	79fb      	ldrb	r3, [r7, #7]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d124      	bne.n	800ef3a <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 800eef0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800eef4:	2b0f      	cmp	r3, #15
 800eef6:	d106      	bne.n	800ef06 <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800eef8:	2301      	movs	r3, #1
 800eefa:	2201      	movs	r2, #1
 800eefc:	2100      	movs	r1, #0
 800eefe:	2006      	movs	r0, #6
 800ef00:	f7ff ff00 	bl	800ed04 <SUBGRF_SetPaConfig>
 800ef04:	e005      	b.n	800ef12 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800ef06:	2301      	movs	r3, #1
 800ef08:	2201      	movs	r2, #1
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	2004      	movs	r0, #4
 800ef0e:	f7ff fef9 	bl	800ed04 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 800ef12:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef16:	2b0d      	cmp	r3, #13
 800ef18:	dd02      	ble.n	800ef20 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800ef1a:	230e      	movs	r3, #14
 800ef1c:	71bb      	strb	r3, [r7, #6]
 800ef1e:	e006      	b.n	800ef2e <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 800ef20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef24:	f113 0f11 	cmn.w	r3, #17
 800ef28:	da01      	bge.n	800ef2e <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 800ef2a:	23ef      	movs	r3, #239	; 0xef
 800ef2c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 800ef2e:	2118      	movs	r1, #24
 800ef30:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ef34:	f000 fa50 	bl	800f3d8 <SUBGRF_WriteRegister>
 800ef38:	e025      	b.n	800ef86 <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 800ef3a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ef3e:	f000 fa5f 	bl	800f400 <SUBGRF_ReadRegister>
 800ef42:	4603      	mov	r3, r0
 800ef44:	f043 031e 	orr.w	r3, r3, #30
 800ef48:	b2db      	uxtb	r3, r3
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800ef50:	f000 fa42 	bl	800f3d8 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800ef54:	2301      	movs	r3, #1
 800ef56:	2200      	movs	r2, #0
 800ef58:	2107      	movs	r1, #7
 800ef5a:	2004      	movs	r0, #4
 800ef5c:	f7ff fed2 	bl	800ed04 <SUBGRF_SetPaConfig>
        if( power > 22 )
 800ef60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef64:	2b16      	cmp	r3, #22
 800ef66:	dd02      	ble.n	800ef6e <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 800ef68:	2316      	movs	r3, #22
 800ef6a:	71bb      	strb	r3, [r7, #6]
 800ef6c:	e006      	b.n	800ef7c <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 800ef6e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ef72:	f113 0f09 	cmn.w	r3, #9
 800ef76:	da01      	bge.n	800ef7c <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 800ef78:	23f7      	movs	r3, #247	; 0xf7
 800ef7a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 800ef7c:	2138      	movs	r1, #56	; 0x38
 800ef7e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800ef82:	f000 fa29 	bl	800f3d8 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800ef86:	79bb      	ldrb	r3, [r7, #6]
 800ef88:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800ef8a:	797b      	ldrb	r3, [r7, #5]
 800ef8c:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800ef8e:	f107 030c 	add.w	r3, r7, #12
 800ef92:	2202      	movs	r2, #2
 800ef94:	4619      	mov	r1, r3
 800ef96:	208e      	movs	r0, #142	; 0x8e
 800ef98:	f000 face 	bl	800f538 <SUBGRF_WriteCommand>
}
 800ef9c:	bf00      	nop
 800ef9e:	3710      	adds	r7, #16
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800efa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800efa8:	b086      	sub	sp, #24
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800efb2:	4a61      	ldr	r2, [pc, #388]	; (800f138 <SUBGRF_SetModulationParams+0x194>)
 800efb4:	f107 0308 	add.w	r3, r7, #8
 800efb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efbc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	781a      	ldrb	r2, [r3, #0]
 800efc4:	4b5d      	ldr	r3, [pc, #372]	; (800f13c <SUBGRF_SetModulationParams+0x198>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d004      	beq.n	800efd6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff ff5b 	bl	800ee8c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	2b03      	cmp	r3, #3
 800efdc:	f200 80a5 	bhi.w	800f12a <SUBGRF_SetModulationParams+0x186>
 800efe0:	a201      	add	r2, pc, #4	; (adr r2, 800efe8 <SUBGRF_SetModulationParams+0x44>)
 800efe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efe6:	bf00      	nop
 800efe8:	0800eff9 	.word	0x0800eff9
 800efec:	0800f0b9 	.word	0x0800f0b9
 800eff0:	0800f07b 	.word	0x0800f07b
 800eff4:	0800f0e7 	.word	0x0800f0e7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800eff8:	2308      	movs	r3, #8
 800effa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	4a4f      	ldr	r2, [pc, #316]	; (800f140 <SUBGRF_SetModulationParams+0x19c>)
 800f002:	fbb2 f3f3 	udiv	r3, r2, r3
 800f006:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	0c1b      	lsrs	r3, r3, #16
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	0a1b      	lsrs	r3, r3, #8
 800f014:	b2db      	uxtb	r3, r3
 800f016:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f018:	697b      	ldr	r3, [r7, #20]
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	7b1b      	ldrb	r3, [r3, #12]
 800f022:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	7b5b      	ldrb	r3, [r3, #13]
 800f028:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	2200      	movs	r2, #0
 800f030:	461c      	mov	r4, r3
 800f032:	4615      	mov	r5, r2
 800f034:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800f038:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800f03c:	4a41      	ldr	r2, [pc, #260]	; (800f144 <SUBGRF_SetModulationParams+0x1a0>)
 800f03e:	f04f 0300 	mov.w	r3, #0
 800f042:	4640      	mov	r0, r8
 800f044:	4649      	mov	r1, r9
 800f046:	f7f2 f8ab 	bl	80011a0 <__aeabi_uldivmod>
 800f04a:	4602      	mov	r2, r0
 800f04c:	460b      	mov	r3, r1
 800f04e:	4613      	mov	r3, r2
 800f050:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	0c1b      	lsrs	r3, r3, #16
 800f056:	b2db      	uxtb	r3, r3
 800f058:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	0a1b      	lsrs	r3, r3, #8
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	b2db      	uxtb	r3, r3
 800f066:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f068:	7cfb      	ldrb	r3, [r7, #19]
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	f107 0308 	add.w	r3, r7, #8
 800f070:	4619      	mov	r1, r3
 800f072:	208b      	movs	r0, #139	; 0x8b
 800f074:	f000 fa60 	bl	800f538 <SUBGRF_WriteCommand>
        break;
 800f078:	e058      	b.n	800f12c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800f07a:	2304      	movs	r3, #4
 800f07c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	691b      	ldr	r3, [r3, #16]
 800f082:	4a2f      	ldr	r2, [pc, #188]	; (800f140 <SUBGRF_SetModulationParams+0x19c>)
 800f084:	fbb2 f3f3 	udiv	r3, r2, r3
 800f088:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	0c1b      	lsrs	r3, r3, #16
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	0a1b      	lsrs	r3, r3, #8
 800f096:	b2db      	uxtb	r3, r3
 800f098:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	7d1b      	ldrb	r3, [r3, #20]
 800f0a4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f0a6:	7cfb      	ldrb	r3, [r7, #19]
 800f0a8:	b29a      	uxth	r2, r3
 800f0aa:	f107 0308 	add.w	r3, r7, #8
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	208b      	movs	r0, #139	; 0x8b
 800f0b2:	f000 fa41 	bl	800f538 <SUBGRF_WriteCommand>
        break;
 800f0b6:	e039      	b.n	800f12c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800f0b8:	2304      	movs	r3, #4
 800f0ba:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	7e1b      	ldrb	r3, [r3, #24]
 800f0c0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	7e5b      	ldrb	r3, [r3, #25]
 800f0c6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	7e9b      	ldrb	r3, [r3, #26]
 800f0cc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	7edb      	ldrb	r3, [r3, #27]
 800f0d2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f0d4:	7cfb      	ldrb	r3, [r7, #19]
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	f107 0308 	add.w	r3, r7, #8
 800f0dc:	4619      	mov	r1, r3
 800f0de:	208b      	movs	r0, #139	; 0x8b
 800f0e0:	f000 fa2a 	bl	800f538 <SUBGRF_WriteCommand>

        break;
 800f0e4:	e022      	b.n	800f12c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800f0e6:	2305      	movs	r3, #5
 800f0e8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	4a14      	ldr	r2, [pc, #80]	; (800f140 <SUBGRF_SetModulationParams+0x19c>)
 800f0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f0f4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	0c1b      	lsrs	r3, r3, #16
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	0a1b      	lsrs	r3, r3, #8
 800f102:	b2db      	uxtb	r3, r3
 800f104:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	7b1b      	ldrb	r3, [r3, #12]
 800f110:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	7b5b      	ldrb	r3, [r3, #13]
 800f116:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800f118:	7cfb      	ldrb	r3, [r7, #19]
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	f107 0308 	add.w	r3, r7, #8
 800f120:	4619      	mov	r1, r3
 800f122:	208b      	movs	r0, #139	; 0x8b
 800f124:	f000 fa08 	bl	800f538 <SUBGRF_WriteCommand>
        break;
 800f128:	e000      	b.n	800f12c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800f12a:	bf00      	nop
    }
}
 800f12c:	bf00      	nop
 800f12e:	3718      	adds	r7, #24
 800f130:	46bd      	mov	sp, r7
 800f132:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f136:	bf00      	nop
 800f138:	080155d4 	.word	0x080155d4
 800f13c:	20000be5 	.word	0x20000be5
 800f140:	3d090000 	.word	0x3d090000
 800f144:	01e84800 	.word	0x01e84800

0800f148 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b086      	sub	sp, #24
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800f150:	2300      	movs	r3, #0
 800f152:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f154:	4a48      	ldr	r2, [pc, #288]	; (800f278 <SUBGRF_SetPacketParams+0x130>)
 800f156:	f107 030c 	add.w	r3, r7, #12
 800f15a:	ca07      	ldmia	r2, {r0, r1, r2}
 800f15c:	c303      	stmia	r3!, {r0, r1}
 800f15e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	781a      	ldrb	r2, [r3, #0]
 800f164:	4b45      	ldr	r3, [pc, #276]	; (800f27c <SUBGRF_SetPacketParams+0x134>)
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d004      	beq.n	800f176 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	4618      	mov	r0, r3
 800f172:	f7ff fe8b 	bl	800ee8c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	2b03      	cmp	r3, #3
 800f17c:	d878      	bhi.n	800f270 <SUBGRF_SetPacketParams+0x128>
 800f17e:	a201      	add	r2, pc, #4	; (adr r2, 800f184 <SUBGRF_SetPacketParams+0x3c>)
 800f180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f184:	0800f195 	.word	0x0800f195
 800f188:	0800f225 	.word	0x0800f225
 800f18c:	0800f219 	.word	0x0800f219
 800f190:	0800f195 	.word	0x0800f195
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	7a5b      	ldrb	r3, [r3, #9]
 800f198:	2bf1      	cmp	r3, #241	; 0xf1
 800f19a:	d10a      	bne.n	800f1b2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800f19c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800f1a0:	f7ff fb16 	bl	800e7d0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800f1a4:	f248 0005 	movw	r0, #32773	; 0x8005
 800f1a8:	f7ff fb32 	bl	800e810 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800f1ac:	2302      	movs	r3, #2
 800f1ae:	75bb      	strb	r3, [r7, #22]
 800f1b0:	e011      	b.n	800f1d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	7a5b      	ldrb	r3, [r3, #9]
 800f1b6:	2bf2      	cmp	r3, #242	; 0xf2
 800f1b8:	d10a      	bne.n	800f1d0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800f1ba:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800f1be:	f7ff fb07 	bl	800e7d0 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800f1c2:	f241 0021 	movw	r0, #4129	; 0x1021
 800f1c6:	f7ff fb23 	bl	800e810 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800f1ca:	2306      	movs	r3, #6
 800f1cc:	75bb      	strb	r3, [r7, #22]
 800f1ce:	e002      	b.n	800f1d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	7a5b      	ldrb	r3, [r3, #9]
 800f1d4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800f1d6:	2309      	movs	r3, #9
 800f1d8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	885b      	ldrh	r3, [r3, #2]
 800f1de:	0a1b      	lsrs	r3, r3, #8
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	885b      	ldrh	r3, [r3, #2]
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	791b      	ldrb	r3, [r3, #4]
 800f1f2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	795b      	ldrb	r3, [r3, #5]
 800f1f8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	799b      	ldrb	r3, [r3, #6]
 800f1fe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	79db      	ldrb	r3, [r3, #7]
 800f204:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	7a1b      	ldrb	r3, [r3, #8]
 800f20a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800f20c:	7dbb      	ldrb	r3, [r7, #22]
 800f20e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7a9b      	ldrb	r3, [r3, #10]
 800f214:	753b      	strb	r3, [r7, #20]
        break;
 800f216:	e022      	b.n	800f25e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800f218:	2301      	movs	r3, #1
 800f21a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	7b1b      	ldrb	r3, [r3, #12]
 800f220:	733b      	strb	r3, [r7, #12]
        break;
 800f222:	e01c      	b.n	800f25e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800f224:	2306      	movs	r3, #6
 800f226:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	89db      	ldrh	r3, [r3, #14]
 800f22c:	0a1b      	lsrs	r3, r3, #8
 800f22e:	b29b      	uxth	r3, r3
 800f230:	b2db      	uxtb	r3, r3
 800f232:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	89db      	ldrh	r3, [r3, #14]
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	7c1a      	ldrb	r2, [r3, #16]
 800f240:	4b0f      	ldr	r3, [pc, #60]	; (800f280 <SUBGRF_SetPacketParams+0x138>)
 800f242:	4611      	mov	r1, r2
 800f244:	7019      	strb	r1, [r3, #0]
 800f246:	4613      	mov	r3, r2
 800f248:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	7c5b      	ldrb	r3, [r3, #17]
 800f24e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	7c9b      	ldrb	r3, [r3, #18]
 800f254:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	7cdb      	ldrb	r3, [r3, #19]
 800f25a:	747b      	strb	r3, [r7, #17]
        break;
 800f25c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800f25e:	7dfb      	ldrb	r3, [r7, #23]
 800f260:	b29a      	uxth	r2, r3
 800f262:	f107 030c 	add.w	r3, r7, #12
 800f266:	4619      	mov	r1, r3
 800f268:	208c      	movs	r0, #140	; 0x8c
 800f26a:	f000 f965 	bl	800f538 <SUBGRF_WriteCommand>
 800f26e:	e000      	b.n	800f272 <SUBGRF_SetPacketParams+0x12a>
        return;
 800f270:	bf00      	nop
}
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	080155dc 	.word	0x080155dc
 800f27c:	20000be5 	.word	0x20000be5
 800f280:	20000be6 	.word	0x20000be6

0800f284 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	4603      	mov	r3, r0
 800f28c:	460a      	mov	r2, r1
 800f28e:	71fb      	strb	r3, [r7, #7]
 800f290:	4613      	mov	r3, r2
 800f292:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800f294:	79fb      	ldrb	r3, [r7, #7]
 800f296:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800f298:	79bb      	ldrb	r3, [r7, #6]
 800f29a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800f29c:	f107 030c 	add.w	r3, r7, #12
 800f2a0:	2202      	movs	r2, #2
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	208f      	movs	r0, #143	; 0x8f
 800f2a6:	f000 f947 	bl	800f538 <SUBGRF_WriteCommand>
}
 800f2aa:	bf00      	nop
 800f2ac:	3710      	adds	r7, #16
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}

0800f2b2 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800f2b2:	b580      	push	{r7, lr}
 800f2b4:	b082      	sub	sp, #8
 800f2b6:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800f2bc:	1d3b      	adds	r3, r7, #4
 800f2be:	2201      	movs	r2, #1
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	2015      	movs	r0, #21
 800f2c4:	f000 f95a 	bl	800f57c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800f2c8:	793b      	ldrb	r3, [r7, #4]
 800f2ca:	425b      	negs	r3, r3
 800f2cc:	105b      	asrs	r3, r3, #1
 800f2ce:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800f2d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3708      	adds	r7, #8
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b084      	sub	sp, #16
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800f2e6:	f107 030c 	add.w	r3, r7, #12
 800f2ea:	2202      	movs	r2, #2
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	2013      	movs	r0, #19
 800f2f0:	f000 f944 	bl	800f57c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800f2f4:	f7ff fde6 	bl	800eec4 <SUBGRF_GetPacketType>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d10d      	bne.n	800f31a <SUBGRF_GetRxBufferStatus+0x3e>
 800f2fe:	4b0c      	ldr	r3, [pc, #48]	; (800f330 <SUBGRF_GetRxBufferStatus+0x54>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b01      	cmp	r3, #1
 800f306:	d108      	bne.n	800f31a <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800f308:	f240 7002 	movw	r0, #1794	; 0x702
 800f30c:	f000 f878 	bl	800f400 <SUBGRF_ReadRegister>
 800f310:	4603      	mov	r3, r0
 800f312:	461a      	mov	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	701a      	strb	r2, [r3, #0]
 800f318:	e002      	b.n	800f320 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800f31a:	7b3a      	ldrb	r2, [r7, #12]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800f320:	7b7a      	ldrb	r2, [r7, #13]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	701a      	strb	r2, [r3, #0]
}
 800f326:	bf00      	nop
 800f328:	3710      	adds	r7, #16
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	20000be6 	.word	0x20000be6

0800f334 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800f33c:	f107 030c 	add.w	r3, r7, #12
 800f340:	2203      	movs	r2, #3
 800f342:	4619      	mov	r1, r3
 800f344:	2014      	movs	r0, #20
 800f346:	f000 f919 	bl	800f57c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800f34a:	f7ff fdbb 	bl	800eec4 <SUBGRF_GetPacketType>
 800f34e:	4603      	mov	r3, r0
 800f350:	461a      	mov	r2, r3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d002      	beq.n	800f364 <SUBGRF_GetPacketStatus+0x30>
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d013      	beq.n	800f38a <SUBGRF_GetPacketStatus+0x56>
 800f362:	e02a      	b.n	800f3ba <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800f364:	7b3a      	ldrb	r2, [r7, #12]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800f36a:	7b7b      	ldrb	r3, [r7, #13]
 800f36c:	425b      	negs	r3, r3
 800f36e:	105b      	asrs	r3, r3, #1
 800f370:	b25a      	sxtb	r2, r3
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800f376:	7bbb      	ldrb	r3, [r7, #14]
 800f378:	425b      	negs	r3, r3
 800f37a:	105b      	asrs	r3, r3, #1
 800f37c:	b25a      	sxtb	r2, r3
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	609a      	str	r2, [r3, #8]
            break;
 800f388:	e020      	b.n	800f3cc <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800f38a:	7b3b      	ldrb	r3, [r7, #12]
 800f38c:	425b      	negs	r3, r3
 800f38e:	105b      	asrs	r3, r3, #1
 800f390:	b25a      	sxtb	r2, r3
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800f396:	7b7b      	ldrb	r3, [r7, #13]
 800f398:	b25b      	sxtb	r3, r3
 800f39a:	3302      	adds	r3, #2
 800f39c:	109b      	asrs	r3, r3, #2
 800f39e:	b25a      	sxtb	r2, r3
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800f3a4:	7bbb      	ldrb	r3, [r7, #14]
 800f3a6:	425b      	negs	r3, r3
 800f3a8:	105b      	asrs	r3, r3, #1
 800f3aa:	b25a      	sxtb	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800f3b0:	4b08      	ldr	r3, [pc, #32]	; (800f3d4 <SUBGRF_GetPacketStatus+0xa0>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	611a      	str	r2, [r3, #16]
            break;
 800f3b8:	e008      	b.n	800f3cc <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800f3ba:	2214      	movs	r2, #20
 800f3bc:	2100      	movs	r1, #0
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 fe68 	bl	8010094 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	220f      	movs	r2, #15
 800f3c8:	701a      	strb	r2, [r3, #0]
            break;
 800f3ca:	bf00      	nop
    }
}
 800f3cc:	bf00      	nop
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	20000be8 	.word	0x20000be8

0800f3d8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	4603      	mov	r3, r0
 800f3e0:	460a      	mov	r2, r1
 800f3e2:	80fb      	strh	r3, [r7, #6]
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800f3e8:	1d7a      	adds	r2, r7, #5
 800f3ea:	88f9      	ldrh	r1, [r7, #6]
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	4803      	ldr	r0, [pc, #12]	; (800f3fc <SUBGRF_WriteRegister+0x24>)
 800f3f0:	f7fa fa44 	bl	800987c <HAL_SUBGHZ_WriteRegisters>
}
 800f3f4:	bf00      	nop
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	2000045c 	.word	0x2000045c

0800f400 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	4603      	mov	r3, r0
 800f408:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800f40a:	f107 020f 	add.w	r2, r7, #15
 800f40e:	88f9      	ldrh	r1, [r7, #6]
 800f410:	2301      	movs	r3, #1
 800f412:	4804      	ldr	r0, [pc, #16]	; (800f424 <SUBGRF_ReadRegister+0x24>)
 800f414:	f7fa fa91 	bl	800993a <HAL_SUBGHZ_ReadRegisters>
    return data;
 800f418:	7bfb      	ldrb	r3, [r7, #15]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	2000045c 	.word	0x2000045c

0800f428 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b086      	sub	sp, #24
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	4603      	mov	r3, r0
 800f430:	6039      	str	r1, [r7, #0]
 800f432:	80fb      	strh	r3, [r7, #6]
 800f434:	4613      	mov	r3, r2
 800f436:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f438:	f3ef 8310 	mrs	r3, PRIMASK
 800f43c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f43e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f442:	b672      	cpsid	i
}
 800f444:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800f446:	88bb      	ldrh	r3, [r7, #4]
 800f448:	88f9      	ldrh	r1, [r7, #6]
 800f44a:	683a      	ldr	r2, [r7, #0]
 800f44c:	4806      	ldr	r0, [pc, #24]	; (800f468 <SUBGRF_WriteRegisters+0x40>)
 800f44e:	f7fa fa15 	bl	800987c <HAL_SUBGHZ_WriteRegisters>
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	f383 8810 	msr	PRIMASK, r3
}
 800f45c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f45e:	bf00      	nop
 800f460:	3718      	adds	r7, #24
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	2000045c 	.word	0x2000045c

0800f46c <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b086      	sub	sp, #24
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	6039      	str	r1, [r7, #0]
 800f476:	80fb      	strh	r3, [r7, #6]
 800f478:	4613      	mov	r3, r2
 800f47a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f47c:	f3ef 8310 	mrs	r3, PRIMASK
 800f480:	60fb      	str	r3, [r7, #12]
  return(result);
 800f482:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f484:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f486:	b672      	cpsid	i
}
 800f488:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800f48a:	88bb      	ldrh	r3, [r7, #4]
 800f48c:	88f9      	ldrh	r1, [r7, #6]
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	4806      	ldr	r0, [pc, #24]	; (800f4ac <SUBGRF_ReadRegisters+0x40>)
 800f492:	f7fa fa52 	bl	800993a <HAL_SUBGHZ_ReadRegisters>
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	f383 8810 	msr	PRIMASK, r3
}
 800f4a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f4a2:	bf00      	nop
 800f4a4:	3718      	adds	r7, #24
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	2000045c 	.word	0x2000045c

0800f4b0 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b086      	sub	sp, #24
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	6039      	str	r1, [r7, #0]
 800f4ba:	71fb      	strb	r3, [r7, #7]
 800f4bc:	4613      	mov	r3, r2
 800f4be:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f4c0:	f3ef 8310 	mrs	r3, PRIMASK
 800f4c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f4c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f4ca:	b672      	cpsid	i
}
 800f4cc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800f4ce:	79bb      	ldrb	r3, [r7, #6]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	79f9      	ldrb	r1, [r7, #7]
 800f4d4:	683a      	ldr	r2, [r7, #0]
 800f4d6:	4806      	ldr	r0, [pc, #24]	; (800f4f0 <SUBGRF_WriteBuffer+0x40>)
 800f4d8:	f7fa fb43 	bl	8009b62 <HAL_SUBGHZ_WriteBuffer>
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	f383 8810 	msr	PRIMASK, r3
}
 800f4e6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f4e8:	bf00      	nop
 800f4ea:	3718      	adds	r7, #24
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}
 800f4f0:	2000045c 	.word	0x2000045c

0800f4f4 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b086      	sub	sp, #24
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	6039      	str	r1, [r7, #0]
 800f4fe:	71fb      	strb	r3, [r7, #7]
 800f500:	4613      	mov	r3, r2
 800f502:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f504:	f3ef 8310 	mrs	r3, PRIMASK
 800f508:	60fb      	str	r3, [r7, #12]
  return(result);
 800f50a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f50c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f50e:	b672      	cpsid	i
}
 800f510:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800f512:	79bb      	ldrb	r3, [r7, #6]
 800f514:	b29b      	uxth	r3, r3
 800f516:	79f9      	ldrb	r1, [r7, #7]
 800f518:	683a      	ldr	r2, [r7, #0]
 800f51a:	4806      	ldr	r0, [pc, #24]	; (800f534 <SUBGRF_ReadBuffer+0x40>)
 800f51c:	f7fa fb74 	bl	8009c08 <HAL_SUBGHZ_ReadBuffer>
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	f383 8810 	msr	PRIMASK, r3
}
 800f52a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f52c:	bf00      	nop
 800f52e:	3718      	adds	r7, #24
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	2000045c 	.word	0x2000045c

0800f538 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b086      	sub	sp, #24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	4603      	mov	r3, r0
 800f540:	6039      	str	r1, [r7, #0]
 800f542:	71fb      	strb	r3, [r7, #7]
 800f544:	4613      	mov	r3, r2
 800f546:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f548:	f3ef 8310 	mrs	r3, PRIMASK
 800f54c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f54e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f552:	b672      	cpsid	i
}
 800f554:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800f556:	88bb      	ldrh	r3, [r7, #4]
 800f558:	79f9      	ldrb	r1, [r7, #7]
 800f55a:	683a      	ldr	r2, [r7, #0]
 800f55c:	4806      	ldr	r0, [pc, #24]	; (800f578 <SUBGRF_WriteCommand+0x40>)
 800f55e:	f7fa fa4d 	bl	80099fc <HAL_SUBGHZ_ExecSetCmd>
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	f383 8810 	msr	PRIMASK, r3
}
 800f56c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f56e:	bf00      	nop
 800f570:	3718      	adds	r7, #24
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	2000045c 	.word	0x2000045c

0800f57c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b086      	sub	sp, #24
 800f580:	af00      	add	r7, sp, #0
 800f582:	4603      	mov	r3, r0
 800f584:	6039      	str	r1, [r7, #0]
 800f586:	71fb      	strb	r3, [r7, #7]
 800f588:	4613      	mov	r3, r2
 800f58a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f58c:	f3ef 8310 	mrs	r3, PRIMASK
 800f590:	60fb      	str	r3, [r7, #12]
  return(result);
 800f592:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800f594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f596:	b672      	cpsid	i
}
 800f598:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800f59a:	88bb      	ldrh	r3, [r7, #4]
 800f59c:	79f9      	ldrb	r1, [r7, #7]
 800f59e:	683a      	ldr	r2, [r7, #0]
 800f5a0:	4806      	ldr	r0, [pc, #24]	; (800f5bc <SUBGRF_ReadCommand+0x40>)
 800f5a2:	f7fa fa8a 	bl	8009aba <HAL_SUBGHZ_ExecGetCmd>
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	f383 8810 	msr	PRIMASK, r3
}
 800f5b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800f5b2:	bf00      	nop
 800f5b4:	3718      	adds	r7, #24
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	2000045c 	.word	0x2000045c

0800f5c0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	460a      	mov	r2, r1
 800f5ca:	71fb      	strb	r3, [r7, #7]
 800f5cc:	4613      	mov	r3, r2
 800f5ce:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800f5d0:	2301      	movs	r3, #1
 800f5d2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800f5d4:	79bb      	ldrb	r3, [r7, #6]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d10d      	bne.n	800f5f6 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800f5da:	79fb      	ldrb	r3, [r7, #7]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	d104      	bne.n	800f5ea <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800f5e4:	2004      	movs	r0, #4
 800f5e6:	f000 f8df 	bl	800f7a8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800f5ea:	79fb      	ldrb	r3, [r7, #7]
 800f5ec:	2b02      	cmp	r3, #2
 800f5ee:	d107      	bne.n	800f600 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	73fb      	strb	r3, [r7, #15]
 800f5f4:	e004      	b.n	800f600 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800f5f6:	79bb      	ldrb	r3, [r7, #6]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d101      	bne.n	800f600 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800f600:	7bfb      	ldrb	r3, [r7, #15]
 800f602:	4618      	mov	r0, r3
 800f604:	f7f6 f85b 	bl	80056be <RBI_ConfigRFSwitch>
}
 800f608:	bf00      	nop
 800f60a:	3710      	adds	r7, #16
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}

0800f610 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	4603      	mov	r3, r0
 800f618:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800f61a:	2301      	movs	r3, #1
 800f61c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800f61e:	f7f6 f85c 	bl	80056da <RBI_GetTxConfig>
 800f622:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	2b02      	cmp	r3, #2
 800f628:	d016      	beq.n	800f658 <SUBGRF_SetRfTxPower+0x48>
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	dc16      	bgt.n	800f65e <SUBGRF_SetRfTxPower+0x4e>
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d003      	beq.n	800f63e <SUBGRF_SetRfTxPower+0x2e>
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d00a      	beq.n	800f652 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800f63c:	e00f      	b.n	800f65e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800f63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f642:	2b0f      	cmp	r3, #15
 800f644:	dd02      	ble.n	800f64c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800f646:	2302      	movs	r3, #2
 800f648:	73fb      	strb	r3, [r7, #15]
            break;
 800f64a:	e009      	b.n	800f660 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800f64c:	2301      	movs	r3, #1
 800f64e:	73fb      	strb	r3, [r7, #15]
            break;
 800f650:	e006      	b.n	800f660 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800f652:	2301      	movs	r3, #1
 800f654:	73fb      	strb	r3, [r7, #15]
            break;
 800f656:	e003      	b.n	800f660 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800f658:	2302      	movs	r3, #2
 800f65a:	73fb      	strb	r3, [r7, #15]
            break;
 800f65c:	e000      	b.n	800f660 <SUBGRF_SetRfTxPower+0x50>
            break;
 800f65e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800f660:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800f664:	7bfb      	ldrb	r3, [r7, #15]
 800f666:	2202      	movs	r2, #2
 800f668:	4618      	mov	r0, r3
 800f66a:	f7ff fc35 	bl	800eed8 <SUBGRF_SetTxParams>

    return paSelect;
 800f66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3710      	adds	r7, #16
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800f678:	b480      	push	{r7}
 800f67a:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800f67c:	2301      	movs	r3, #1
}
 800f67e:	4618      	mov	r0, r3
 800f680:	46bd      	mov	sp, r7
 800f682:	bc80      	pop	{r7}
 800f684:	4770      	bx	lr
	...

0800f688 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800f690:	4b03      	ldr	r3, [pc, #12]	; (800f6a0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2001      	movs	r0, #1
 800f696:	4798      	blx	r3
}
 800f698:	bf00      	nop
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	20000bf0 	.word	0x20000bf0

0800f6a4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800f6ac:	4b03      	ldr	r3, [pc, #12]	; (800f6bc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	2002      	movs	r0, #2
 800f6b2:	4798      	blx	r3
}
 800f6b4:	bf00      	nop
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	20000bf0 	.word	0x20000bf0

0800f6c0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800f6c8:	4b03      	ldr	r3, [pc, #12]	; (800f6d8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2040      	movs	r0, #64	; 0x40
 800f6ce:	4798      	blx	r3
}
 800f6d0:	bf00      	nop
 800f6d2:	3708      	adds	r7, #8
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	20000bf0 	.word	0x20000bf0

0800f6dc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	460b      	mov	r3, r1
 800f6e6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800f6e8:	78fb      	ldrb	r3, [r7, #3]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d002      	beq.n	800f6f4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d005      	beq.n	800f6fe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 800f6f2:	e00a      	b.n	800f70a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800f6f4:	4b07      	ldr	r3, [pc, #28]	; (800f714 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	2080      	movs	r0, #128	; 0x80
 800f6fa:	4798      	blx	r3
            break;
 800f6fc:	e005      	b.n	800f70a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800f6fe:	4b05      	ldr	r3, [pc, #20]	; (800f714 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f706:	4798      	blx	r3
            break;
 800f708:	bf00      	nop
    }
}
 800f70a:	bf00      	nop
 800f70c:	3708      	adds	r7, #8
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	20000bf0 	.word	0x20000bf0

0800f718 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b082      	sub	sp, #8
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800f720:	4b04      	ldr	r3, [pc, #16]	; (800f734 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f44f 7000 	mov.w	r0, #512	; 0x200
 800f728:	4798      	blx	r3
}
 800f72a:	bf00      	nop
 800f72c:	3708      	adds	r7, #8
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	20000bf0 	.word	0x20000bf0

0800f738 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b082      	sub	sp, #8
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800f740:	4b03      	ldr	r3, [pc, #12]	; (800f750 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2020      	movs	r0, #32
 800f746:	4798      	blx	r3
}
 800f748:	bf00      	nop
 800f74a:	3708      	adds	r7, #8
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	20000bf0 	.word	0x20000bf0

0800f754 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800f75c:	4b03      	ldr	r3, [pc, #12]	; (800f76c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2004      	movs	r0, #4
 800f762:	4798      	blx	r3
}
 800f764:	bf00      	nop
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	20000bf0 	.word	0x20000bf0

0800f770 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800f778:	4b03      	ldr	r3, [pc, #12]	; (800f788 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	2008      	movs	r0, #8
 800f77e:	4798      	blx	r3
}
 800f780:	bf00      	nop
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}
 800f788:	20000bf0 	.word	0x20000bf0

0800f78c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b082      	sub	sp, #8
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800f794:	4b03      	ldr	r3, [pc, #12]	; (800f7a4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2010      	movs	r0, #16
 800f79a:	4798      	blx	r3
}
 800f79c:	bf00      	nop
 800f79e:	3708      	adds	r7, #8
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}
 800f7a4:	20000bf0 	.word	0x20000bf0

0800f7a8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b084      	sub	sp, #16
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800f7b2:	f7f5 ffa0 	bl	80056f6 <RBI_IsDCDC>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b01      	cmp	r3, #1
 800f7ba:	d112      	bne.n	800f7e2 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800f7bc:	f640 1023 	movw	r0, #2339	; 0x923
 800f7c0:	f7ff fe1e 	bl	800f400 <SUBGRF_ReadRegister>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	f023 0306 	bic.w	r3, r3, #6
 800f7ce:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800f7d0:	7bfa      	ldrb	r2, [r7, #15]
 800f7d2:	79fb      	ldrb	r3, [r7, #7]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	4619      	mov	r1, r3
 800f7da:	f640 1023 	movw	r0, #2339	; 0x923
 800f7de:	f7ff fdfb 	bl	800f3d8 <SUBGRF_WriteRegister>
  }
}
 800f7e2:	bf00      	nop
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
	...

0800f7ec <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d101      	bne.n	800f7fe <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800f7fa:	231f      	movs	r3, #31
 800f7fc:	e016      	b.n	800f82c <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800f7fe:	2300      	movs	r3, #0
 800f800:	73fb      	strb	r3, [r7, #15]
 800f802:	e00f      	b.n	800f824 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800f804:	7bfb      	ldrb	r3, [r7, #15]
 800f806:	4a0c      	ldr	r2, [pc, #48]	; (800f838 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800f808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f80c:	687a      	ldr	r2, [r7, #4]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d205      	bcs.n	800f81e <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800f812:	7bfb      	ldrb	r3, [r7, #15]
 800f814:	4a08      	ldr	r2, [pc, #32]	; (800f838 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800f816:	00db      	lsls	r3, r3, #3
 800f818:	4413      	add	r3, r2
 800f81a:	791b      	ldrb	r3, [r3, #4]
 800f81c:	e006      	b.n	800f82c <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800f81e:	7bfb      	ldrb	r3, [r7, #15]
 800f820:	3301      	adds	r3, #1
 800f822:	73fb      	strb	r3, [r7, #15]
 800f824:	7bfb      	ldrb	r3, [r7, #15]
 800f826:	2b15      	cmp	r3, #21
 800f828:	d9ec      	bls.n	800f804 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800f82a:	e7fe      	b.n	800f82a <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3714      	adds	r7, #20
 800f830:	46bd      	mov	sp, r7
 800f832:	bc80      	pop	{r7}
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop
 800f838:	080157fc 	.word	0x080157fc

0800f83c <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b08a      	sub	sp, #40	; 0x28
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800f846:	4b35      	ldr	r3, [pc, #212]	; (800f91c <SUBGRF_GetCFO+0xe0>)
 800f848:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 800f84a:	f640 0007 	movw	r0, #2055	; 0x807
 800f84e:	f7ff fdd7 	bl	800f400 <SUBGRF_ReadRegister>
 800f852:	4603      	mov	r3, r0
 800f854:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800f856:	7ffb      	ldrb	r3, [r7, #31]
 800f858:	08db      	lsrs	r3, r3, #3
 800f85a:	b2db      	uxtb	r3, r3
 800f85c:	f003 0303 	and.w	r3, r3, #3
 800f860:	3328      	adds	r3, #40	; 0x28
 800f862:	443b      	add	r3, r7
 800f864:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800f868:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800f86a:	7ffb      	ldrb	r3, [r7, #31]
 800f86c:	f003 0307 	and.w	r3, r3, #7
 800f870:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800f872:	7fba      	ldrb	r2, [r7, #30]
 800f874:	7f7b      	ldrb	r3, [r7, #29]
 800f876:	3b01      	subs	r3, #1
 800f878:	fa02 f303 	lsl.w	r3, r2, r3
 800f87c:	461a      	mov	r2, r3
 800f87e:	4b28      	ldr	r3, [pc, #160]	; (800f920 <SUBGRF_GetCFO+0xe4>)
 800f880:	fbb3 f3f2 	udiv	r3, r3, r2
 800f884:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800f886:	69ba      	ldr	r2, [r7, #24]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f88e:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800f890:	2301      	movs	r3, #1
 800f892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800f896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f89a:	697a      	ldr	r2, [r7, #20]
 800f89c:	fb02 f303 	mul.w	r3, r2, r3
 800f8a0:	2b07      	cmp	r3, #7
 800f8a2:	d802      	bhi.n	800f8aa <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800f8a4:	2302      	movs	r3, #2
 800f8a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800f8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8ae:	697a      	ldr	r2, [r7, #20]
 800f8b0:	fb02 f303 	mul.w	r3, r2, r3
 800f8b4:	2b03      	cmp	r3, #3
 800f8b6:	d802      	bhi.n	800f8be <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800f8b8:	2304      	movs	r3, #4
 800f8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800f8be:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	fb02 f303 	mul.w	r3, r2, r3
 800f8c8:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 800f8ca:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800f8ce:	f7ff fd97 	bl	800f400 <SUBGRF_ReadRegister>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	021b      	lsls	r3, r3, #8
 800f8d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f8da:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 800f8dc:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800f8e0:	f7ff fd8e 	bl	800f400 <SUBGRF_ReadRegister>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	461a      	mov	r2, r3
 800f8e8:	6a3b      	ldr	r3, [r7, #32]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d005      	beq.n	800f904 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800f8f8:	6a3b      	ldr	r3, [r7, #32]
 800f8fa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800f8fe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800f902:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	095b      	lsrs	r3, r3, #5
 800f908:	6a3a      	ldr	r2, [r7, #32]
 800f90a:	fb02 f303 	mul.w	r3, r2, r3
 800f90e:	11da      	asrs	r2, r3, #7
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	601a      	str	r2, [r3, #0]
}
 800f914:	bf00      	nop
 800f916:	3728      	adds	r7, #40	; 0x28
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	0c0a0804 	.word	0x0c0a0804
 800f920:	01e84800 	.word	0x01e84800

0800f924 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800f924:	b480      	push	{r7}
 800f926:	b087      	sub	sp, #28
 800f928:	af00      	add	r7, sp, #0
 800f92a:	4603      	mov	r3, r0
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	607a      	str	r2, [r7, #4]
 800f930:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800f932:	2300      	movs	r3, #0
 800f934:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800f936:	f04f 33ff 	mov.w	r3, #4294967295
 800f93a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800f93c:	697b      	ldr	r3, [r7, #20]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	371c      	adds	r7, #28
 800f942:	46bd      	mov	sp, r7
 800f944:	bc80      	pop	{r7}
 800f946:	4770      	bx	lr

0800f948 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800f948:	b480      	push	{r7}
 800f94a:	b087      	sub	sp, #28
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	4603      	mov	r3, r0
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	607a      	str	r2, [r7, #4]
 800f954:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800f956:	2300      	movs	r3, #0
 800f958:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800f95a:	f04f 33ff 	mov.w	r3, #4294967295
 800f95e:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800f960:	697b      	ldr	r3, [r7, #20]
}
 800f962:	4618      	mov	r0, r3
 800f964:	371c      	adds	r7, #28
 800f966:	46bd      	mov	sp, r7
 800f968:	bc80      	pop	{r7}
 800f96a:	4770      	bx	lr

0800f96c <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b085      	sub	sp, #20
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800f978:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3714      	adds	r7, #20
 800f980:	46bd      	mov	sp, r7
 800f982:	bc80      	pop	{r7}
 800f984:	4770      	bx	lr

0800f986 <RFW_DeInit>:

void RFW_DeInit( void)
{
 800f986:	b480      	push	{r7}
 800f988:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800f98a:	bf00      	nop
 800f98c:	46bd      	mov	sp, r7
 800f98e:	bc80      	pop	{r7}
 800f990:	4770      	bx	lr

0800f992 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800f992:	b480      	push	{r7}
 800f994:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800f996:	2300      	movs	r3, #0
#endif
}
 800f998:	4618      	mov	r0, r3
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bc80      	pop	{r7}
 800f99e:	4770      	bx	lr

0800f9a0 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800f9a4:	2300      	movs	r3, #0
#endif
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bc80      	pop	{r7}
 800f9ac:	4770      	bx	lr

0800f9ae <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800f9ae:	b480      	push	{r7}
 800f9b0:	b083      	sub	sp, #12
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800f9b8:	bf00      	nop
 800f9ba:	370c      	adds	r7, #12
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bc80      	pop	{r7}
 800f9c0:	4770      	bx	lr

0800f9c2 <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800f9c2:	b480      	push	{r7}
 800f9c4:	b087      	sub	sp, #28
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	60f8      	str	r0, [r7, #12]
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	607a      	str	r2, [r7, #4]
 800f9ce:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800f9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800f9d4:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800f9d6:	697b      	ldr	r3, [r7, #20]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	371c      	adds	r7, #28
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bc80      	pop	{r7}
 800f9e0:	4770      	bx	lr

0800f9e2 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800f9e2:	b480      	push	{r7}
 800f9e4:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800f9e6:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bc80      	pop	{r7}
 800f9f0:	4770      	bx	lr

0800f9f2 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800f9f2:	b480      	push	{r7}
 800f9f4:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800f9f6:	bf00      	nop
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bc80      	pop	{r7}
 800f9fc:	4770      	bx	lr

0800f9fe <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800f9fe:	b480      	push	{r7}
 800fa00:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800fa02:	bf00      	nop
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bc80      	pop	{r7}
 800fa08:	4770      	bx	lr

0800fa0a <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b083      	sub	sp, #12
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	4603      	mov	r3, r0
 800fa12:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800fa14:	bf00      	nop
 800fa16:	370c      	adds	r7, #12
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bc80      	pop	{r7}
 800fa1c:	4770      	bx	lr
	...

0800fa20 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800fa24:	2218      	movs	r2, #24
 800fa26:	2100      	movs	r1, #0
 800fa28:	4807      	ldr	r0, [pc, #28]	; (800fa48 <UTIL_ADV_TRACE_Init+0x28>)
 800fa2a:	f000 fb33 	bl	8010094 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800fa2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa32:	2100      	movs	r1, #0
 800fa34:	4805      	ldr	r0, [pc, #20]	; (800fa4c <UTIL_ADV_TRACE_Init+0x2c>)
 800fa36:	f000 fb2d 	bl	8010094 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800fa3a:	4b05      	ldr	r3, [pc, #20]	; (800fa50 <UTIL_ADV_TRACE_Init+0x30>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4805      	ldr	r0, [pc, #20]	; (800fa54 <UTIL_ADV_TRACE_Init+0x34>)
 800fa40:	4798      	blx	r3
 800fa42:	4603      	mov	r3, r0
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	20000bf4 	.word	0x20000bf4
 800fa4c:	20000c0c 	.word	0x20000c0c
 800fa50:	08015698 	.word	0x08015698
 800fa54:	0800fc9d 	.word	0x0800fc9d

0800fa58 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800fa58:	b408      	push	{r3}
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	b08d      	sub	sp, #52	; 0x34
 800fa5e:	af00      	add	r7, sp, #0
 800fa60:	60f8      	str	r0, [r7, #12]
 800fa62:	60b9      	str	r1, [r7, #8]
 800fa64:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800fa66:	2300      	movs	r3, #0
 800fa68:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800fa6e:	4b37      	ldr	r3, [pc, #220]	; (800fb4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800fa70:	7a1b      	ldrb	r3, [r3, #8]
 800fa72:	461a      	mov	r2, r3
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d902      	bls.n	800fa80 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800fa7a:	f06f 0304 	mvn.w	r3, #4
 800fa7e:	e05e      	b.n	800fb3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800fa80:	4b32      	ldr	r3, [pc, #200]	; (800fb4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800fa82:	68da      	ldr	r2, [r3, #12]
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	4013      	ands	r3, r2
 800fa88:	68ba      	ldr	r2, [r7, #8]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d002      	beq.n	800fa94 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800fa8e:	f06f 0305 	mvn.w	r3, #5
 800fa92:	e054      	b.n	800fb3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800fa94:	4b2d      	ldr	r3, [pc, #180]	; (800fb4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d00a      	beq.n	800fab2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d007      	beq.n	800fab2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800faa2:	4b2a      	ldr	r3, [pc, #168]	; (800fb4c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	f107 0116 	add.w	r1, r7, #22
 800faaa:	f107 0218 	add.w	r2, r7, #24
 800faae:	4610      	mov	r0, r2
 800fab0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800fab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800fab6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800fab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fabc:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fac0:	4823      	ldr	r0, [pc, #140]	; (800fb50 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800fac2:	f001 f8a9 	bl	8010c18 <tiny_vsnprintf_like>
 800fac6:	4603      	mov	r3, r0
 800fac8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800faca:	f000 f9f1 	bl	800feb0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800face:	8afa      	ldrh	r2, [r7, #22]
 800fad0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fad2:	4413      	add	r3, r2
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	f107 0214 	add.w	r2, r7, #20
 800fada:	4611      	mov	r1, r2
 800fadc:	4618      	mov	r0, r3
 800fade:	f000 f969 	bl	800fdb4 <TRACE_AllocateBufer>
 800fae2:	4603      	mov	r3, r0
 800fae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae8:	d025      	beq.n	800fb36 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800faea:	2300      	movs	r3, #0
 800faec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800faee:	e00e      	b.n	800fb0e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800faf0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800faf2:	8aba      	ldrh	r2, [r7, #20]
 800faf4:	3330      	adds	r3, #48	; 0x30
 800faf6:	443b      	add	r3, r7
 800faf8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800fafc:	4b15      	ldr	r3, [pc, #84]	; (800fb54 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800fafe:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800fb00:	8abb      	ldrh	r3, [r7, #20]
 800fb02:	3301      	adds	r3, #1
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800fb08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fb0e:	8afb      	ldrh	r3, [r7, #22]
 800fb10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d3ec      	bcc.n	800faf0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800fb16:	8abb      	ldrh	r3, [r7, #20]
 800fb18:	461a      	mov	r2, r3
 800fb1a:	4b0e      	ldr	r3, [pc, #56]	; (800fb54 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800fb1c:	18d0      	adds	r0, r2, r3
 800fb1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb22:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fb26:	f001 f877 	bl	8010c18 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800fb2a:	f000 f9df 	bl	800feec <TRACE_UnLock>

    return TRACE_Send();
 800fb2e:	f000 f831 	bl	800fb94 <TRACE_Send>
 800fb32:	4603      	mov	r3, r0
 800fb34:	e003      	b.n	800fb3e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800fb36:	f000 f9d9 	bl	800feec <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800fb3a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3734      	adds	r7, #52	; 0x34
 800fb42:	46bd      	mov	sp, r7
 800fb44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fb48:	b001      	add	sp, #4
 800fb4a:	4770      	bx	lr
 800fb4c:	20000bf4 	.word	0x20000bf4
 800fb50:	20000e0c 	.word	0x20000e0c
 800fb54:	20000c0c 	.word	0x20000c0c

0800fb58 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800fb60:	4a03      	ldr	r2, [pc, #12]	; (800fb70 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6053      	str	r3, [r2, #4]
}
 800fb66:	bf00      	nop
 800fb68:	370c      	adds	r7, #12
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bc80      	pop	{r7}
 800fb6e:	4770      	bx	lr
 800fb70:	20000bf4 	.word	0x20000bf4

0800fb74 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b083      	sub	sp, #12
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800fb7e:	4a04      	ldr	r2, [pc, #16]	; (800fb90 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800fb80:	79fb      	ldrb	r3, [r7, #7]
 800fb82:	7213      	strb	r3, [r2, #8]
}
 800fb84:	bf00      	nop
 800fb86:	370c      	adds	r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bc80      	pop	{r7}
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	20000bf4 	.word	0x20000bf4

0800fb94 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b088      	sub	sp, #32
 800fb98:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800fb9e:	2300      	movs	r3, #0
 800fba0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fba2:	f3ef 8310 	mrs	r3, PRIMASK
 800fba6:	613b      	str	r3, [r7, #16]
  return(result);
 800fba8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800fbaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fbac:	b672      	cpsid	i
}
 800fbae:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800fbb0:	f000 f9ba 	bl	800ff28 <TRACE_IsLocked>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d15d      	bne.n	800fc76 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800fbba:	f000 f979 	bl	800feb0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800fbbe:	4b34      	ldr	r3, [pc, #208]	; (800fc90 <TRACE_Send+0xfc>)
 800fbc0:	8a1a      	ldrh	r2, [r3, #16]
 800fbc2:	4b33      	ldr	r3, [pc, #204]	; (800fc90 <TRACE_Send+0xfc>)
 800fbc4:	8a5b      	ldrh	r3, [r3, #18]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d04d      	beq.n	800fc66 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800fbca:	4b31      	ldr	r3, [pc, #196]	; (800fc90 <TRACE_Send+0xfc>)
 800fbcc:	789b      	ldrb	r3, [r3, #2]
 800fbce:	2b01      	cmp	r3, #1
 800fbd0:	d117      	bne.n	800fc02 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800fbd2:	4b2f      	ldr	r3, [pc, #188]	; (800fc90 <TRACE_Send+0xfc>)
 800fbd4:	881a      	ldrh	r2, [r3, #0]
 800fbd6:	4b2e      	ldr	r3, [pc, #184]	; (800fc90 <TRACE_Send+0xfc>)
 800fbd8:	8a1b      	ldrh	r3, [r3, #16]
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	4b2c      	ldr	r3, [pc, #176]	; (800fc90 <TRACE_Send+0xfc>)
 800fbe0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800fbe2:	4b2b      	ldr	r3, [pc, #172]	; (800fc90 <TRACE_Send+0xfc>)
 800fbe4:	2202      	movs	r2, #2
 800fbe6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800fbe8:	4b29      	ldr	r3, [pc, #164]	; (800fc90 <TRACE_Send+0xfc>)
 800fbea:	2200      	movs	r2, #0
 800fbec:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800fbee:	4b28      	ldr	r3, [pc, #160]	; (800fc90 <TRACE_Send+0xfc>)
 800fbf0:	8a9b      	ldrh	r3, [r3, #20]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d105      	bne.n	800fc02 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800fbf6:	4b26      	ldr	r3, [pc, #152]	; (800fc90 <TRACE_Send+0xfc>)
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800fbfc:	4b24      	ldr	r3, [pc, #144]	; (800fc90 <TRACE_Send+0xfc>)
 800fbfe:	2200      	movs	r2, #0
 800fc00:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800fc02:	4b23      	ldr	r3, [pc, #140]	; (800fc90 <TRACE_Send+0xfc>)
 800fc04:	789b      	ldrb	r3, [r3, #2]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d115      	bne.n	800fc36 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800fc0a:	4b21      	ldr	r3, [pc, #132]	; (800fc90 <TRACE_Send+0xfc>)
 800fc0c:	8a5a      	ldrh	r2, [r3, #18]
 800fc0e:	4b20      	ldr	r3, [pc, #128]	; (800fc90 <TRACE_Send+0xfc>)
 800fc10:	8a1b      	ldrh	r3, [r3, #16]
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d908      	bls.n	800fc28 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800fc16:	4b1e      	ldr	r3, [pc, #120]	; (800fc90 <TRACE_Send+0xfc>)
 800fc18:	8a5a      	ldrh	r2, [r3, #18]
 800fc1a:	4b1d      	ldr	r3, [pc, #116]	; (800fc90 <TRACE_Send+0xfc>)
 800fc1c:	8a1b      	ldrh	r3, [r3, #16]
 800fc1e:	1ad3      	subs	r3, r2, r3
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	4b1b      	ldr	r3, [pc, #108]	; (800fc90 <TRACE_Send+0xfc>)
 800fc24:	829a      	strh	r2, [r3, #20]
 800fc26:	e006      	b.n	800fc36 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800fc28:	4b19      	ldr	r3, [pc, #100]	; (800fc90 <TRACE_Send+0xfc>)
 800fc2a:	8a1b      	ldrh	r3, [r3, #16]
 800fc2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fc30:	b29a      	uxth	r2, r3
 800fc32:	4b17      	ldr	r3, [pc, #92]	; (800fc90 <TRACE_Send+0xfc>)
 800fc34:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800fc36:	4b16      	ldr	r3, [pc, #88]	; (800fc90 <TRACE_Send+0xfc>)
 800fc38:	8a1b      	ldrh	r3, [r3, #16]
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	4b15      	ldr	r3, [pc, #84]	; (800fc94 <TRACE_Send+0x100>)
 800fc3e:	4413      	add	r3, r2
 800fc40:	61bb      	str	r3, [r7, #24]
 800fc42:	697b      	ldr	r3, [r7, #20]
 800fc44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f383 8810 	msr	PRIMASK, r3
}
 800fc4c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800fc4e:	f7f2 fce3 	bl	8002618 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800fc52:	4b11      	ldr	r3, [pc, #68]	; (800fc98 <TRACE_Send+0x104>)
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	4a0e      	ldr	r2, [pc, #56]	; (800fc90 <TRACE_Send+0xfc>)
 800fc58:	8a92      	ldrh	r2, [r2, #20]
 800fc5a:	4611      	mov	r1, r2
 800fc5c:	69b8      	ldr	r0, [r7, #24]
 800fc5e:	4798      	blx	r3
 800fc60:	4603      	mov	r3, r0
 800fc62:	77fb      	strb	r3, [r7, #31]
 800fc64:	e00d      	b.n	800fc82 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800fc66:	f000 f941 	bl	800feec <TRACE_UnLock>
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc6e:	68bb      	ldr	r3, [r7, #8]
 800fc70:	f383 8810 	msr	PRIMASK, r3
}
 800fc74:	e005      	b.n	800fc82 <TRACE_Send+0xee>
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f383 8810 	msr	PRIMASK, r3
}
 800fc80:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800fc82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3720      	adds	r7, #32
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	20000bf4 	.word	0x20000bf4
 800fc94:	20000c0c 	.word	0x20000c0c
 800fc98:	08015698 	.word	0x08015698

0800fc9c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b088      	sub	sp, #32
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800fca4:	2300      	movs	r3, #0
 800fca6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fca8:	f3ef 8310 	mrs	r3, PRIMASK
 800fcac:	617b      	str	r3, [r7, #20]
  return(result);
 800fcae:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800fcb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800fcb2:	b672      	cpsid	i
}
 800fcb4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800fcb6:	4b3c      	ldr	r3, [pc, #240]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fcb8:	789b      	ldrb	r3, [r3, #2]
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	d106      	bne.n	800fccc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800fcbe:	4b3a      	ldr	r3, [pc, #232]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800fcc4:	4b38      	ldr	r3, [pc, #224]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	821a      	strh	r2, [r3, #16]
 800fcca:	e00a      	b.n	800fce2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800fccc:	4b36      	ldr	r3, [pc, #216]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fcce:	8a1a      	ldrh	r2, [r3, #16]
 800fcd0:	4b35      	ldr	r3, [pc, #212]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fcd2:	8a9b      	ldrh	r3, [r3, #20]
 800fcd4:	4413      	add	r3, r2
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	4b32      	ldr	r3, [pc, #200]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fce0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800fce2:	4b31      	ldr	r3, [pc, #196]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fce4:	8a1a      	ldrh	r2, [r3, #16]
 800fce6:	4b30      	ldr	r3, [pc, #192]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fce8:	8a5b      	ldrh	r3, [r3, #18]
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d04d      	beq.n	800fd8a <TRACE_TxCpltCallback+0xee>
 800fcee:	4b2e      	ldr	r3, [pc, #184]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fcf0:	8adb      	ldrh	r3, [r3, #22]
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d149      	bne.n	800fd8a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800fcf6:	4b2c      	ldr	r3, [pc, #176]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fcf8:	789b      	ldrb	r3, [r3, #2]
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d117      	bne.n	800fd2e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800fcfe:	4b2a      	ldr	r3, [pc, #168]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd00:	881a      	ldrh	r2, [r3, #0]
 800fd02:	4b29      	ldr	r3, [pc, #164]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd04:	8a1b      	ldrh	r3, [r3, #16]
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	4b27      	ldr	r3, [pc, #156]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd0c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800fd0e:	4b26      	ldr	r3, [pc, #152]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd10:	2202      	movs	r2, #2
 800fd12:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800fd14:	4b24      	ldr	r3, [pc, #144]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800fd1a:	4b23      	ldr	r3, [pc, #140]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd1c:	8a9b      	ldrh	r3, [r3, #20]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d105      	bne.n	800fd2e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800fd22:	4b21      	ldr	r3, [pc, #132]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd24:	2200      	movs	r2, #0
 800fd26:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800fd28:	4b1f      	ldr	r3, [pc, #124]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800fd2e:	4b1e      	ldr	r3, [pc, #120]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd30:	789b      	ldrb	r3, [r3, #2]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d115      	bne.n	800fd62 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800fd36:	4b1c      	ldr	r3, [pc, #112]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd38:	8a5a      	ldrh	r2, [r3, #18]
 800fd3a:	4b1b      	ldr	r3, [pc, #108]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd3c:	8a1b      	ldrh	r3, [r3, #16]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d908      	bls.n	800fd54 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800fd42:	4b19      	ldr	r3, [pc, #100]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd44:	8a5a      	ldrh	r2, [r3, #18]
 800fd46:	4b18      	ldr	r3, [pc, #96]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd48:	8a1b      	ldrh	r3, [r3, #16]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	4b16      	ldr	r3, [pc, #88]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd50:	829a      	strh	r2, [r3, #20]
 800fd52:	e006      	b.n	800fd62 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800fd54:	4b14      	ldr	r3, [pc, #80]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd56:	8a1b      	ldrh	r3, [r3, #16]
 800fd58:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	4b12      	ldr	r3, [pc, #72]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd60:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800fd62:	4b11      	ldr	r3, [pc, #68]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd64:	8a1b      	ldrh	r3, [r3, #16]
 800fd66:	461a      	mov	r2, r3
 800fd68:	4b10      	ldr	r3, [pc, #64]	; (800fdac <TRACE_TxCpltCallback+0x110>)
 800fd6a:	4413      	add	r3, r2
 800fd6c:	61fb      	str	r3, [r7, #28]
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	f383 8810 	msr	PRIMASK, r3
}
 800fd78:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800fd7a:	4b0d      	ldr	r3, [pc, #52]	; (800fdb0 <TRACE_TxCpltCallback+0x114>)
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	4a0a      	ldr	r2, [pc, #40]	; (800fda8 <TRACE_TxCpltCallback+0x10c>)
 800fd80:	8a92      	ldrh	r2, [r2, #20]
 800fd82:	4611      	mov	r1, r2
 800fd84:	69f8      	ldr	r0, [r7, #28]
 800fd86:	4798      	blx	r3
 800fd88:	e00a      	b.n	800fda0 <TRACE_TxCpltCallback+0x104>
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f383 8810 	msr	PRIMASK, r3
}
 800fd94:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800fd96:	f7f2 fc47 	bl	8002628 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800fd9a:	f000 f8a7 	bl	800feec <TRACE_UnLock>
  }
}
 800fd9e:	bf00      	nop
 800fda0:	bf00      	nop
 800fda2:	3720      	adds	r7, #32
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	20000bf4 	.word	0x20000bf4
 800fdac:	20000c0c 	.word	0x20000c0c
 800fdb0:	08015698 	.word	0x08015698

0800fdb4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b087      	sub	sp, #28
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	4603      	mov	r3, r0
 800fdbc:	6039      	str	r1, [r7, #0]
 800fdbe:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800fdc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdc4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fdc6:	f3ef 8310 	mrs	r3, PRIMASK
 800fdca:	60fb      	str	r3, [r7, #12]
  return(result);
 800fdcc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800fdce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fdd0:	b672      	cpsid	i
}
 800fdd2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800fdd4:	4b35      	ldr	r3, [pc, #212]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fdd6:	8a5a      	ldrh	r2, [r3, #18]
 800fdd8:	4b34      	ldr	r3, [pc, #208]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fdda:	8a1b      	ldrh	r3, [r3, #16]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d11b      	bne.n	800fe18 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800fde0:	4b32      	ldr	r3, [pc, #200]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fde2:	8a5b      	ldrh	r3, [r3, #18]
 800fde4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fde8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800fdea:	88fa      	ldrh	r2, [r7, #6]
 800fdec:	8afb      	ldrh	r3, [r7, #22]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d33a      	bcc.n	800fe68 <TRACE_AllocateBufer+0xb4>
 800fdf2:	4b2e      	ldr	r3, [pc, #184]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fdf4:	8a1b      	ldrh	r3, [r3, #16]
 800fdf6:	88fa      	ldrh	r2, [r7, #6]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d235      	bcs.n	800fe68 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800fdfc:	4b2b      	ldr	r3, [pc, #172]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fdfe:	2201      	movs	r2, #1
 800fe00:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800fe02:	4b2a      	ldr	r3, [pc, #168]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe04:	8a5a      	ldrh	r2, [r3, #18]
 800fe06:	4b29      	ldr	r3, [pc, #164]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe08:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800fe0a:	4b28      	ldr	r3, [pc, #160]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe0c:	8a1b      	ldrh	r3, [r3, #16]
 800fe0e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800fe10:	4b26      	ldr	r3, [pc, #152]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe12:	2200      	movs	r2, #0
 800fe14:	825a      	strh	r2, [r3, #18]
 800fe16:	e027      	b.n	800fe68 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800fe18:	4b24      	ldr	r3, [pc, #144]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe1a:	8a5a      	ldrh	r2, [r3, #18]
 800fe1c:	4b23      	ldr	r3, [pc, #140]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe1e:	8a1b      	ldrh	r3, [r3, #16]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d91b      	bls.n	800fe5c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800fe24:	4b21      	ldr	r3, [pc, #132]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe26:	8a5b      	ldrh	r3, [r3, #18]
 800fe28:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fe2c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800fe2e:	88fa      	ldrh	r2, [r7, #6]
 800fe30:	8afb      	ldrh	r3, [r7, #22]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d318      	bcc.n	800fe68 <TRACE_AllocateBufer+0xb4>
 800fe36:	4b1d      	ldr	r3, [pc, #116]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe38:	8a1b      	ldrh	r3, [r3, #16]
 800fe3a:	88fa      	ldrh	r2, [r7, #6]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d213      	bcs.n	800fe68 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800fe40:	4b1a      	ldr	r3, [pc, #104]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe42:	2201      	movs	r2, #1
 800fe44:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800fe46:	4b19      	ldr	r3, [pc, #100]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe48:	8a5a      	ldrh	r2, [r3, #18]
 800fe4a:	4b18      	ldr	r3, [pc, #96]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe4c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800fe4e:	4b17      	ldr	r3, [pc, #92]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe50:	8a1b      	ldrh	r3, [r3, #16]
 800fe52:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800fe54:	4b15      	ldr	r3, [pc, #84]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe56:	2200      	movs	r2, #0
 800fe58:	825a      	strh	r2, [r3, #18]
 800fe5a:	e005      	b.n	800fe68 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800fe5c:	4b13      	ldr	r3, [pc, #76]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe5e:	8a1a      	ldrh	r2, [r3, #16]
 800fe60:	4b12      	ldr	r3, [pc, #72]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe62:	8a5b      	ldrh	r3, [r3, #18]
 800fe64:	1ad3      	subs	r3, r2, r3
 800fe66:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800fe68:	8afa      	ldrh	r2, [r7, #22]
 800fe6a:	88fb      	ldrh	r3, [r7, #6]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d90f      	bls.n	800fe90 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800fe70:	4b0e      	ldr	r3, [pc, #56]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe72:	8a5a      	ldrh	r2, [r3, #18]
 800fe74:	683b      	ldr	r3, [r7, #0]
 800fe76:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800fe78:	4b0c      	ldr	r3, [pc, #48]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe7a:	8a5a      	ldrh	r2, [r3, #18]
 800fe7c:	88fb      	ldrh	r3, [r7, #6]
 800fe7e:	4413      	add	r3, r2
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	4b08      	ldr	r3, [pc, #32]	; (800feac <TRACE_AllocateBufer+0xf8>)
 800fe8a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	82bb      	strh	r3, [r7, #20]
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	f383 8810 	msr	PRIMASK, r3
}
 800fe9a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800fe9c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800fea0:	4618      	mov	r0, r3
 800fea2:	371c      	adds	r7, #28
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bc80      	pop	{r7}
 800fea8:	4770      	bx	lr
 800feaa:	bf00      	nop
 800feac:	20000bf4 	.word	0x20000bf4

0800feb0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b085      	sub	sp, #20
 800feb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800feb6:	f3ef 8310 	mrs	r3, PRIMASK
 800feba:	607b      	str	r3, [r7, #4]
  return(result);
 800febc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800febe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fec0:	b672      	cpsid	i
}
 800fec2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800fec4:	4b08      	ldr	r3, [pc, #32]	; (800fee8 <TRACE_Lock+0x38>)
 800fec6:	8adb      	ldrh	r3, [r3, #22]
 800fec8:	3301      	adds	r3, #1
 800feca:	b29a      	uxth	r2, r3
 800fecc:	4b06      	ldr	r3, [pc, #24]	; (800fee8 <TRACE_Lock+0x38>)
 800fece:	82da      	strh	r2, [r3, #22]
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	f383 8810 	msr	PRIMASK, r3
}
 800feda:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800fedc:	bf00      	nop
 800fede:	3714      	adds	r7, #20
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bc80      	pop	{r7}
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	20000bf4 	.word	0x20000bf4

0800feec <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800feec:	b480      	push	{r7}
 800feee:	b085      	sub	sp, #20
 800fef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fef2:	f3ef 8310 	mrs	r3, PRIMASK
 800fef6:	607b      	str	r3, [r7, #4]
  return(result);
 800fef8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800fefa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800fefc:	b672      	cpsid	i
}
 800fefe:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800ff00:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <TRACE_UnLock+0x38>)
 800ff02:	8adb      	ldrh	r3, [r3, #22]
 800ff04:	3b01      	subs	r3, #1
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	4b06      	ldr	r3, [pc, #24]	; (800ff24 <TRACE_UnLock+0x38>)
 800ff0a:	82da      	strh	r2, [r3, #22]
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	f383 8810 	msr	PRIMASK, r3
}
 800ff16:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ff18:	bf00      	nop
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bc80      	pop	{r7}
 800ff20:	4770      	bx	lr
 800ff22:	bf00      	nop
 800ff24:	20000bf4 	.word	0x20000bf4

0800ff28 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800ff28:	b480      	push	{r7}
 800ff2a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800ff2c:	4b05      	ldr	r3, [pc, #20]	; (800ff44 <TRACE_IsLocked+0x1c>)
 800ff2e:	8adb      	ldrh	r3, [r3, #22]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	bf14      	ite	ne
 800ff34:	2301      	movne	r3, #1
 800ff36:	2300      	moveq	r3, #0
 800ff38:	b2db      	uxtb	r3, r3
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bc80      	pop	{r7}
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	20000bf4 	.word	0x20000bf4

0800ff48 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ff48:	b480      	push	{r7}
 800ff4a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ff4c:	4b04      	ldr	r3, [pc, #16]	; (800ff60 <UTIL_LPM_Init+0x18>)
 800ff4e:	2200      	movs	r2, #0
 800ff50:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ff52:	4b04      	ldr	r3, [pc, #16]	; (800ff64 <UTIL_LPM_Init+0x1c>)
 800ff54:	2200      	movs	r2, #0
 800ff56:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ff58:	bf00      	nop
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bc80      	pop	{r7}
 800ff5e:	4770      	bx	lr
 800ff60:	20000f0c 	.word	0x20000f0c
 800ff64:	20000f10 	.word	0x20000f10

0800ff68 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ff68:	b480      	push	{r7}
 800ff6a:	b087      	sub	sp, #28
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	460b      	mov	r3, r1
 800ff72:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff74:	f3ef 8310 	mrs	r3, PRIMASK
 800ff78:	613b      	str	r3, [r7, #16]
  return(result);
 800ff7a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ff7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ff7e:	b672      	cpsid	i
}
 800ff80:	bf00      	nop
  
  switch( state )
 800ff82:	78fb      	ldrb	r3, [r7, #3]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d008      	beq.n	800ff9a <UTIL_LPM_SetStopMode+0x32>
 800ff88:	2b01      	cmp	r3, #1
 800ff8a:	d10e      	bne.n	800ffaa <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800ff8c:	4b0d      	ldr	r3, [pc, #52]	; (800ffc4 <UTIL_LPM_SetStopMode+0x5c>)
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4313      	orrs	r3, r2
 800ff94:	4a0b      	ldr	r2, [pc, #44]	; (800ffc4 <UTIL_LPM_SetStopMode+0x5c>)
 800ff96:	6013      	str	r3, [r2, #0]
      break;
 800ff98:	e008      	b.n	800ffac <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	43da      	mvns	r2, r3
 800ff9e:	4b09      	ldr	r3, [pc, #36]	; (800ffc4 <UTIL_LPM_SetStopMode+0x5c>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	4a07      	ldr	r2, [pc, #28]	; (800ffc4 <UTIL_LPM_SetStopMode+0x5c>)
 800ffa6:	6013      	str	r3, [r2, #0]
      break;
 800ffa8:	e000      	b.n	800ffac <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800ffaa:	bf00      	nop
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f383 8810 	msr	PRIMASK, r3
}
 800ffb6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ffb8:	bf00      	nop
 800ffba:	371c      	adds	r7, #28
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bc80      	pop	{r7}
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	20000f0c 	.word	0x20000f0c

0800ffc8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b087      	sub	sp, #28
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	460b      	mov	r3, r1
 800ffd2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffd4:	f3ef 8310 	mrs	r3, PRIMASK
 800ffd8:	613b      	str	r3, [r7, #16]
  return(result);
 800ffda:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ffdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ffde:	b672      	cpsid	i
}
 800ffe0:	bf00      	nop
  
  switch(state)
 800ffe2:	78fb      	ldrb	r3, [r7, #3]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d008      	beq.n	800fffa <UTIL_LPM_SetOffMode+0x32>
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d10e      	bne.n	801000a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ffec:	4b0d      	ldr	r3, [pc, #52]	; (8010024 <UTIL_LPM_SetOffMode+0x5c>)
 800ffee:	681a      	ldr	r2, [r3, #0]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4313      	orrs	r3, r2
 800fff4:	4a0b      	ldr	r2, [pc, #44]	; (8010024 <UTIL_LPM_SetOffMode+0x5c>)
 800fff6:	6013      	str	r3, [r2, #0]
      break;
 800fff8:	e008      	b.n	801000c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	43da      	mvns	r2, r3
 800fffe:	4b09      	ldr	r3, [pc, #36]	; (8010024 <UTIL_LPM_SetOffMode+0x5c>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4013      	ands	r3, r2
 8010004:	4a07      	ldr	r2, [pc, #28]	; (8010024 <UTIL_LPM_SetOffMode+0x5c>)
 8010006:	6013      	str	r3, [r2, #0]
      break;
 8010008:	e000      	b.n	801000c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801000a:	bf00      	nop
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	f383 8810 	msr	PRIMASK, r3
}
 8010016:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010018:	bf00      	nop
 801001a:	371c      	adds	r7, #28
 801001c:	46bd      	mov	sp, r7
 801001e:	bc80      	pop	{r7}
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop
 8010024:	20000f10 	.word	0x20000f10

08010028 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b084      	sub	sp, #16
 801002c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801002e:	f3ef 8310 	mrs	r3, PRIMASK
 8010032:	60bb      	str	r3, [r7, #8]
  return(result);
 8010034:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8010036:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8010038:	b672      	cpsid	i
}
 801003a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801003c:	4b12      	ldr	r3, [pc, #72]	; (8010088 <UTIL_LPM_EnterLowPower+0x60>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d006      	beq.n	8010052 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8010044:	4b11      	ldr	r3, [pc, #68]	; (801008c <UTIL_LPM_EnterLowPower+0x64>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801004a:	4b10      	ldr	r3, [pc, #64]	; (801008c <UTIL_LPM_EnterLowPower+0x64>)
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	4798      	blx	r3
 8010050:	e010      	b.n	8010074 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8010052:	4b0f      	ldr	r3, [pc, #60]	; (8010090 <UTIL_LPM_EnterLowPower+0x68>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d006      	beq.n	8010068 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801005a:	4b0c      	ldr	r3, [pc, #48]	; (801008c <UTIL_LPM_EnterLowPower+0x64>)
 801005c:	689b      	ldr	r3, [r3, #8]
 801005e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8010060:	4b0a      	ldr	r3, [pc, #40]	; (801008c <UTIL_LPM_EnterLowPower+0x64>)
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	4798      	blx	r3
 8010066:	e005      	b.n	8010074 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8010068:	4b08      	ldr	r3, [pc, #32]	; (801008c <UTIL_LPM_EnterLowPower+0x64>)
 801006a:	691b      	ldr	r3, [r3, #16]
 801006c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801006e:	4b07      	ldr	r3, [pc, #28]	; (801008c <UTIL_LPM_EnterLowPower+0x64>)
 8010070:	695b      	ldr	r3, [r3, #20]
 8010072:	4798      	blx	r3
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f383 8810 	msr	PRIMASK, r3
}
 801007e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8010080:	bf00      	nop
 8010082:	3710      	adds	r7, #16
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	20000f0c 	.word	0x20000f0c
 801008c:	08015640 	.word	0x08015640
 8010090:	20000f10 	.word	0x20000f10

08010094 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8010094:	b480      	push	{r7}
 8010096:	b085      	sub	sp, #20
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	460b      	mov	r3, r1
 801009e:	70fb      	strb	r3, [r7, #3]
 80100a0:	4613      	mov	r3, r2
 80100a2:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80100a8:	e004      	b.n	80100b4 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	1c5a      	adds	r2, r3, #1
 80100ae:	60fa      	str	r2, [r7, #12]
 80100b0:	78fa      	ldrb	r2, [r7, #3]
 80100b2:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80100b4:	883b      	ldrh	r3, [r7, #0]
 80100b6:	1e5a      	subs	r2, r3, #1
 80100b8:	803a      	strh	r2, [r7, #0]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1f5      	bne.n	80100aa <UTIL_MEM_set_8+0x16>
  }
}
 80100be:	bf00      	nop
 80100c0:	bf00      	nop
 80100c2:	3714      	adds	r7, #20
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bc80      	pop	{r7}
 80100c8:	4770      	bx	lr
	...

080100cc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b090      	sub	sp, #64	; 0x40
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80100d4:	4b73      	ldr	r3, [pc, #460]	; (80102a4 <UTIL_SEQ_Run+0x1d8>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80100da:	4b72      	ldr	r3, [pc, #456]	; (80102a4 <UTIL_SEQ_Run+0x1d8>)
 80100dc:	681a      	ldr	r2, [r3, #0]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4013      	ands	r3, r2
 80100e2:	4a70      	ldr	r2, [pc, #448]	; (80102a4 <UTIL_SEQ_Run+0x1d8>)
 80100e4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80100e6:	4b70      	ldr	r3, [pc, #448]	; (80102a8 <UTIL_SEQ_Run+0x1dc>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80100ec:	4b6f      	ldr	r3, [pc, #444]	; (80102ac <UTIL_SEQ_Run+0x1e0>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80100f2:	4b6f      	ldr	r3, [pc, #444]	; (80102b0 <UTIL_SEQ_Run+0x1e4>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80100f8:	4b6e      	ldr	r3, [pc, #440]	; (80102b4 <UTIL_SEQ_Run+0x1e8>)
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80100fe:	e08d      	b.n	801021c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8010100:	2300      	movs	r3, #0
 8010102:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010104:	e002      	b.n	801010c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8010106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010108:	3301      	adds	r3, #1
 801010a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801010c:	4a6a      	ldr	r2, [pc, #424]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 801010e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010110:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010116:	401a      	ands	r2, r3
 8010118:	4b62      	ldr	r3, [pc, #392]	; (80102a4 <UTIL_SEQ_Run+0x1d8>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4013      	ands	r3, r2
 801011e:	2b00      	cmp	r3, #0
 8010120:	d0f1      	beq.n	8010106 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8010122:	4a65      	ldr	r2, [pc, #404]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 8010124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010126:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	401a      	ands	r2, r3
 801012e:	4b5d      	ldr	r3, [pc, #372]	; (80102a4 <UTIL_SEQ_Run+0x1d8>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	4013      	ands	r3, r2
 8010134:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010136:	4a60      	ldr	r2, [pc, #384]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 8010138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801013a:	00db      	lsls	r3, r3, #3
 801013c:	4413      	add	r3, r2
 801013e:	685a      	ldr	r2, [r3, #4]
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	4013      	ands	r3, r2
 8010144:	2b00      	cmp	r3, #0
 8010146:	d106      	bne.n	8010156 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010148:	4a5b      	ldr	r2, [pc, #364]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 801014a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801014c:	00db      	lsls	r3, r3, #3
 801014e:	4413      	add	r3, r2
 8010150:	f04f 32ff 	mov.w	r2, #4294967295
 8010154:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010156:	4a58      	ldr	r2, [pc, #352]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 8010158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801015a:	00db      	lsls	r3, r3, #3
 801015c:	4413      	add	r3, r2
 801015e:	685a      	ldr	r2, [r3, #4]
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	4013      	ands	r3, r2
 8010164:	4618      	mov	r0, r3
 8010166:	f000 f907 	bl	8010378 <SEQ_BitPosition>
 801016a:	4603      	mov	r3, r0
 801016c:	461a      	mov	r2, r3
 801016e:	4b53      	ldr	r3, [pc, #332]	; (80102bc <UTIL_SEQ_Run+0x1f0>)
 8010170:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010172:	4a51      	ldr	r2, [pc, #324]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 8010174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010176:	00db      	lsls	r3, r3, #3
 8010178:	4413      	add	r3, r2
 801017a:	685a      	ldr	r2, [r3, #4]
 801017c:	4b4f      	ldr	r3, [pc, #316]	; (80102bc <UTIL_SEQ_Run+0x1f0>)
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	2101      	movs	r1, #1
 8010182:	fa01 f303 	lsl.w	r3, r1, r3
 8010186:	43db      	mvns	r3, r3
 8010188:	401a      	ands	r2, r3
 801018a:	494b      	ldr	r1, [pc, #300]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 801018c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801018e:	00db      	lsls	r3, r3, #3
 8010190:	440b      	add	r3, r1
 8010192:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010194:	f3ef 8310 	mrs	r3, PRIMASK
 8010198:	61bb      	str	r3, [r7, #24]
  return(result);
 801019a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801019c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801019e:	b672      	cpsid	i
}
 80101a0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80101a2:	4b46      	ldr	r3, [pc, #280]	; (80102bc <UTIL_SEQ_Run+0x1f0>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2201      	movs	r2, #1
 80101a8:	fa02 f303 	lsl.w	r3, r2, r3
 80101ac:	43da      	mvns	r2, r3
 80101ae:	4b3e      	ldr	r3, [pc, #248]	; (80102a8 <UTIL_SEQ_Run+0x1dc>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4013      	ands	r3, r2
 80101b4:	4a3c      	ldr	r2, [pc, #240]	; (80102a8 <UTIL_SEQ_Run+0x1dc>)
 80101b6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80101b8:	2303      	movs	r3, #3
 80101ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101bc:	e013      	b.n	80101e6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80101be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101c0:	3b01      	subs	r3, #1
 80101c2:	4a3d      	ldr	r2, [pc, #244]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 80101c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80101c8:	4b3c      	ldr	r3, [pc, #240]	; (80102bc <UTIL_SEQ_Run+0x1f0>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2201      	movs	r2, #1
 80101ce:	fa02 f303 	lsl.w	r3, r2, r3
 80101d2:	43da      	mvns	r2, r3
 80101d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101d6:	3b01      	subs	r3, #1
 80101d8:	400a      	ands	r2, r1
 80101da:	4937      	ldr	r1, [pc, #220]	; (80102b8 <UTIL_SEQ_Run+0x1ec>)
 80101dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80101e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101e2:	3b01      	subs	r3, #1
 80101e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d1e8      	bne.n	80101be <UTIL_SEQ_Run+0xf2>
 80101ec:	6a3b      	ldr	r3, [r7, #32]
 80101ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	f383 8810 	msr	PRIMASK, r3
}
 80101f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80101f8:	4b30      	ldr	r3, [pc, #192]	; (80102bc <UTIL_SEQ_Run+0x1f0>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	4a30      	ldr	r2, [pc, #192]	; (80102c0 <UTIL_SEQ_Run+0x1f4>)
 80101fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010202:	4798      	blx	r3

    local_taskset = TaskSet;
 8010204:	4b28      	ldr	r3, [pc, #160]	; (80102a8 <UTIL_SEQ_Run+0x1dc>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801020a:	4b28      	ldr	r3, [pc, #160]	; (80102ac <UTIL_SEQ_Run+0x1e0>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8010210:	4b27      	ldr	r3, [pc, #156]	; (80102b0 <UTIL_SEQ_Run+0x1e4>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8010216:	4b27      	ldr	r3, [pc, #156]	; (80102b4 <UTIL_SEQ_Run+0x1e8>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801021c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801021e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010220:	401a      	ands	r2, r3
 8010222:	4b20      	ldr	r3, [pc, #128]	; (80102a4 <UTIL_SEQ_Run+0x1d8>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	4013      	ands	r3, r2
 8010228:	2b00      	cmp	r3, #0
 801022a:	d005      	beq.n	8010238 <UTIL_SEQ_Run+0x16c>
 801022c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801022e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010230:	4013      	ands	r3, r2
 8010232:	2b00      	cmp	r3, #0
 8010234:	f43f af64 	beq.w	8010100 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010238:	4b20      	ldr	r3, [pc, #128]	; (80102bc <UTIL_SEQ_Run+0x1f0>)
 801023a:	f04f 32ff 	mov.w	r2, #4294967295
 801023e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010240:	f000 f88e 	bl	8010360 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010244:	f3ef 8310 	mrs	r3, PRIMASK
 8010248:	613b      	str	r3, [r7, #16]
  return(result);
 801024a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801024c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801024e:	b672      	cpsid	i
}
 8010250:	bf00      	nop
  local_taskset = TaskSet;
 8010252:	4b15      	ldr	r3, [pc, #84]	; (80102a8 <UTIL_SEQ_Run+0x1dc>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8010258:	4b14      	ldr	r3, [pc, #80]	; (80102ac <UTIL_SEQ_Run+0x1e0>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801025e:	4b14      	ldr	r3, [pc, #80]	; (80102b0 <UTIL_SEQ_Run+0x1e4>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010264:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010268:	401a      	ands	r2, r3
 801026a:	4b0e      	ldr	r3, [pc, #56]	; (80102a4 <UTIL_SEQ_Run+0x1d8>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4013      	ands	r3, r2
 8010270:	2b00      	cmp	r3, #0
 8010272:	d107      	bne.n	8010284 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8010274:	4b0f      	ldr	r3, [pc, #60]	; (80102b4 <UTIL_SEQ_Run+0x1e8>)
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801027a:	4013      	ands	r3, r2
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8010280:	f7f2 f9a4 	bl	80025cc <UTIL_SEQ_Idle>
 8010284:	69fb      	ldr	r3, [r7, #28]
 8010286:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f383 8810 	msr	PRIMASK, r3
}
 801028e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8010290:	f000 f86c 	bl	801036c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8010294:	4a03      	ldr	r2, [pc, #12]	; (80102a4 <UTIL_SEQ_Run+0x1d8>)
 8010296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010298:	6013      	str	r3, [r2, #0]

  return;
 801029a:	bf00      	nop
}
 801029c:	3740      	adds	r7, #64	; 0x40
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	20000050 	.word	0x20000050
 80102a8:	20000f14 	.word	0x20000f14
 80102ac:	20000f18 	.word	0x20000f18
 80102b0:	2000004c 	.word	0x2000004c
 80102b4:	20000f1c 	.word	0x20000f1c
 80102b8:	20000f34 	.word	0x20000f34
 80102bc:	20000f20 	.word	0x20000f20
 80102c0:	20000f24 	.word	0x20000f24

080102c4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b088      	sub	sp, #32
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102d0:	f3ef 8310 	mrs	r3, PRIMASK
 80102d4:	617b      	str	r3, [r7, #20]
  return(result);
 80102d6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80102d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80102da:	b672      	cpsid	i
}
 80102dc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80102de:	68f8      	ldr	r0, [r7, #12]
 80102e0:	f000 f84a 	bl	8010378 <SEQ_BitPosition>
 80102e4:	4603      	mov	r3, r0
 80102e6:	4619      	mov	r1, r3
 80102e8:	4a06      	ldr	r2, [pc, #24]	; (8010304 <UTIL_SEQ_RegTask+0x40>)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102f4:	69bb      	ldr	r3, [r7, #24]
 80102f6:	f383 8810 	msr	PRIMASK, r3
}
 80102fa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80102fc:	bf00      	nop
}
 80102fe:	3720      	adds	r7, #32
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}
 8010304:	20000f24 	.word	0x20000f24

08010308 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010308:	b480      	push	{r7}
 801030a:	b087      	sub	sp, #28
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010312:	f3ef 8310 	mrs	r3, PRIMASK
 8010316:	60fb      	str	r3, [r7, #12]
  return(result);
 8010318:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801031a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801031c:	b672      	cpsid	i
}
 801031e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8010320:	4b0d      	ldr	r3, [pc, #52]	; (8010358 <UTIL_SEQ_SetTask+0x50>)
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4313      	orrs	r3, r2
 8010328:	4a0b      	ldr	r2, [pc, #44]	; (8010358 <UTIL_SEQ_SetTask+0x50>)
 801032a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801032c:	4a0b      	ldr	r2, [pc, #44]	; (801035c <UTIL_SEQ_SetTask+0x54>)
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	431a      	orrs	r2, r3
 8010338:	4908      	ldr	r1, [pc, #32]	; (801035c <UTIL_SEQ_SetTask+0x54>)
 801033a:	683b      	ldr	r3, [r7, #0]
 801033c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	f383 8810 	msr	PRIMASK, r3
}
 801034a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801034c:	bf00      	nop
}
 801034e:	371c      	adds	r7, #28
 8010350:	46bd      	mov	sp, r7
 8010352:	bc80      	pop	{r7}
 8010354:	4770      	bx	lr
 8010356:	bf00      	nop
 8010358:	20000f14 	.word	0x20000f14
 801035c:	20000f34 	.word	0x20000f34

08010360 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010360:	b480      	push	{r7}
 8010362:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010364:	bf00      	nop
}
 8010366:	46bd      	mov	sp, r7
 8010368:	bc80      	pop	{r7}
 801036a:	4770      	bx	lr

0801036c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801036c:	b480      	push	{r7}
 801036e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010370:	bf00      	nop
}
 8010372:	46bd      	mov	sp, r7
 8010374:	bc80      	pop	{r7}
 8010376:	4770      	bx	lr

08010378 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010378:	b480      	push	{r7}
 801037a:	b085      	sub	sp, #20
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8010380:	2300      	movs	r3, #0
 8010382:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	0c1b      	lsrs	r3, r3, #16
 801038c:	041b      	lsls	r3, r3, #16
 801038e:	2b00      	cmp	r3, #0
 8010390:	d104      	bne.n	801039c <SEQ_BitPosition+0x24>
 8010392:	2310      	movs	r3, #16
 8010394:	73fb      	strb	r3, [r7, #15]
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	041b      	lsls	r3, r3, #16
 801039a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d105      	bne.n	80103b2 <SEQ_BitPosition+0x3a>
 80103a6:	7bfb      	ldrb	r3, [r7, #15]
 80103a8:	3308      	adds	r3, #8
 80103aa:	73fb      	strb	r3, [r7, #15]
 80103ac:	68bb      	ldr	r3, [r7, #8]
 80103ae:	021b      	lsls	r3, r3, #8
 80103b0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d105      	bne.n	80103c8 <SEQ_BitPosition+0x50>
 80103bc:	7bfb      	ldrb	r3, [r7, #15]
 80103be:	3304      	adds	r3, #4
 80103c0:	73fb      	strb	r3, [r7, #15]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	011b      	lsls	r3, r3, #4
 80103c6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	0f1b      	lsrs	r3, r3, #28
 80103cc:	4a06      	ldr	r2, [pc, #24]	; (80103e8 <SEQ_BitPosition+0x70>)
 80103ce:	5cd2      	ldrb	r2, [r2, r3]
 80103d0:	7bfb      	ldrb	r3, [r7, #15]
 80103d2:	4413      	add	r3, r2
 80103d4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80103d6:	7bfb      	ldrb	r3, [r7, #15]
 80103d8:	f1c3 031f 	rsb	r3, r3, #31
 80103dc:	b2db      	uxtb	r3, r3
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3714      	adds	r7, #20
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bc80      	pop	{r7}
 80103e6:	4770      	bx	lr
 80103e8:	080158ac 	.word	0x080158ac

080103ec <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80103ec:	b082      	sub	sp, #8
 80103ee:	b480      	push	{r7}
 80103f0:	b087      	sub	sp, #28
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	60f8      	str	r0, [r7, #12]
 80103f6:	1d38      	adds	r0, r7, #4
 80103f8:	e880 0006 	stmia.w	r0, {r1, r2}
 80103fc:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80103fe:	2300      	movs	r3, #0
 8010400:	613b      	str	r3, [r7, #16]
 8010402:	2300      	movs	r3, #0
 8010404:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801040a:	4413      	add	r3, r2
 801040c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801040e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010412:	b29a      	uxth	r2, r3
 8010414:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8010418:	b29b      	uxth	r3, r3
 801041a:	4413      	add	r3, r2
 801041c:	b29b      	uxth	r3, r3
 801041e:	b21b      	sxth	r3, r3
 8010420:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8010422:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801042a:	db0a      	blt.n	8010442 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	3301      	adds	r3, #1
 8010430:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8010432:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010436:	b29b      	uxth	r3, r3
 8010438:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801043c:	b29b      	uxth	r3, r3
 801043e:	b21b      	sxth	r3, r3
 8010440:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	461a      	mov	r2, r3
 8010446:	f107 0310 	add.w	r3, r7, #16
 801044a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801044e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	371c      	adds	r7, #28
 8010456:	46bd      	mov	sp, r7
 8010458:	bc80      	pop	{r7}
 801045a:	b002      	add	sp, #8
 801045c:	4770      	bx	lr
	...

08010460 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b08a      	sub	sp, #40	; 0x28
 8010464:	af02      	add	r7, sp, #8
 8010466:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8010468:	2300      	movs	r3, #0
 801046a:	61bb      	str	r3, [r7, #24]
 801046c:	2300      	movs	r3, #0
 801046e:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8010470:	2300      	movs	r3, #0
 8010472:	613b      	str	r3, [r7, #16]
 8010474:	2300      	movs	r3, #0
 8010476:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8010478:	4b14      	ldr	r3, [pc, #80]	; (80104cc <SysTimeGet+0x6c>)
 801047a:	691b      	ldr	r3, [r3, #16]
 801047c:	f107 0218 	add.w	r2, r7, #24
 8010480:	3204      	adds	r2, #4
 8010482:	4610      	mov	r0, r2
 8010484:	4798      	blx	r3
 8010486:	4603      	mov	r3, r0
 8010488:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801048a:	4b10      	ldr	r3, [pc, #64]	; (80104cc <SysTimeGet+0x6c>)
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	4798      	blx	r3
 8010490:	4603      	mov	r3, r0
 8010492:	b21b      	sxth	r3, r3
 8010494:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8010496:	4b0d      	ldr	r3, [pc, #52]	; (80104cc <SysTimeGet+0x6c>)
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	4798      	blx	r3
 801049c:	4603      	mov	r3, r0
 801049e:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80104a0:	f107 0010 	add.w	r0, r7, #16
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	9300      	str	r3, [sp, #0]
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	f107 0208 	add.w	r2, r7, #8
 80104ae:	ca06      	ldmia	r2, {r1, r2}
 80104b0:	f7ff ff9c 	bl	80103ec <SysTimeAdd>

  return sysTime;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	461a      	mov	r2, r3
 80104b8:	f107 0310 	add.w	r3, r7, #16
 80104bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80104c0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	3720      	adds	r7, #32
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	08015684 	.word	0x08015684

080104d0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80104d4:	4b04      	ldr	r3, [pc, #16]	; (80104e8 <UTIL_TIMER_Init+0x18>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80104da:	4b04      	ldr	r3, [pc, #16]	; (80104ec <UTIL_TIMER_Init+0x1c>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4798      	blx	r3
 80104e0:	4603      	mov	r3, r0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	20000f4c 	.word	0x20000f4c
 80104ec:	08015658 	.word	0x08015658

080104f0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	603b      	str	r3, [r7, #0]
 80104fc:	4613      	mov	r3, r2
 80104fe:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d023      	beq.n	801054e <UTIL_TIMER_Create+0x5e>
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d020      	beq.n	801054e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2200      	movs	r2, #0
 8010510:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8010512:	4b11      	ldr	r3, [pc, #68]	; (8010558 <UTIL_TIMER_Create+0x68>)
 8010514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010516:	68b8      	ldr	r0, [r7, #8]
 8010518:	4798      	blx	r3
 801051a:	4602      	mov	r2, r0
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	2200      	movs	r2, #0
 8010524:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	2200      	movs	r2, #0
 801052a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2200      	movs	r2, #0
 8010530:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	683a      	ldr	r2, [r7, #0]
 8010536:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	69ba      	ldr	r2, [r7, #24]
 801053c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	79fa      	ldrb	r2, [r7, #7]
 8010542:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801054a:	2300      	movs	r3, #0
 801054c:	e000      	b.n	8010550 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801054e:	2301      	movs	r3, #1
  }
}
 8010550:	4618      	mov	r0, r3
 8010552:	3710      	adds	r7, #16
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	08015658 	.word	0x08015658

0801055c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b08a      	sub	sp, #40	; 0x28
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d056      	beq.n	801061e <UTIL_TIMER_Start+0xc2>
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 f9a9 	bl	80108c8 <TimerExists>
 8010576:	4603      	mov	r3, r0
 8010578:	f083 0301 	eor.w	r3, r3, #1
 801057c:	b2db      	uxtb	r3, r3
 801057e:	2b00      	cmp	r3, #0
 8010580:	d04d      	beq.n	801061e <UTIL_TIMER_Start+0xc2>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	7a5b      	ldrb	r3, [r3, #9]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d149      	bne.n	801061e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801058a:	f3ef 8310 	mrs	r3, PRIMASK
 801058e:	613b      	str	r3, [r7, #16]
  return(result);
 8010590:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8010592:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010594:	b672      	cpsid	i
}
 8010596:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801059e:	4b24      	ldr	r3, [pc, #144]	; (8010630 <UTIL_TIMER_Start+0xd4>)
 80105a0:	6a1b      	ldr	r3, [r3, #32]
 80105a2:	4798      	blx	r3
 80105a4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 80105a6:	6a3a      	ldr	r2, [r7, #32]
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d201      	bcs.n	80105b2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a3a      	ldr	r2, [r7, #32]
 80105b6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2201      	movs	r2, #1
 80105c2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 80105ca:	4b1a      	ldr	r3, [pc, #104]	; (8010634 <UTIL_TIMER_Start+0xd8>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d106      	bne.n	80105e0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 80105d2:	4b17      	ldr	r3, [pc, #92]	; (8010630 <UTIL_TIMER_Start+0xd4>)
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f000 f9eb 	bl	80109b4 <TimerInsertNewHeadTimer>
 80105de:	e017      	b.n	8010610 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 80105e0:	4b13      	ldr	r3, [pc, #76]	; (8010630 <UTIL_TIMER_Start+0xd4>)
 80105e2:	699b      	ldr	r3, [r3, #24]
 80105e4:	4798      	blx	r3
 80105e6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681a      	ldr	r2, [r3, #0]
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	441a      	add	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681a      	ldr	r2, [r3, #0]
 80105f8:	4b0e      	ldr	r3, [pc, #56]	; (8010634 <UTIL_TIMER_Start+0xd8>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	429a      	cmp	r2, r3
 8010600:	d203      	bcs.n	801060a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f000 f9d6 	bl	80109b4 <TimerInsertNewHeadTimer>
 8010608:	e002      	b.n	8010610 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f000 f9a2 	bl	8010954 <TimerInsertTimer>
 8010610:	69fb      	ldr	r3, [r7, #28]
 8010612:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	f383 8810 	msr	PRIMASK, r3
}
 801061a:	bf00      	nop
  {
 801061c:	e002      	b.n	8010624 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801061e:	2301      	movs	r3, #1
 8010620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8010624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8010628:	4618      	mov	r0, r3
 801062a:	3728      	adds	r7, #40	; 0x28
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	08015658 	.word	0x08015658
 8010634:	20000f4c 	.word	0x20000f4c

08010638 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b088      	sub	sp, #32
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010640:	2300      	movs	r3, #0
 8010642:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d05b      	beq.n	8010702 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801064a:	f3ef 8310 	mrs	r3, PRIMASK
 801064e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010650:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8010652:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010654:	b672      	cpsid	i
}
 8010656:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8010658:	4b2d      	ldr	r3, [pc, #180]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801065e:	4b2c      	ldr	r3, [pc, #176]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2201      	movs	r2, #1
 8010668:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801066a:	4b29      	ldr	r3, [pc, #164]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d041      	beq.n	80106f6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2200      	movs	r2, #0
 8010676:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8010678:	4b25      	ldr	r3, [pc, #148]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	429a      	cmp	r2, r3
 8010680:	d134      	bne.n	80106ec <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8010682:	4b23      	ldr	r3, [pc, #140]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2200      	movs	r2, #0
 8010688:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801068a:	4b21      	ldr	r3, [pc, #132]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	695b      	ldr	r3, [r3, #20]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00a      	beq.n	80106aa <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8010694:	4b1e      	ldr	r3, [pc, #120]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	695b      	ldr	r3, [r3, #20]
 801069a:	4a1d      	ldr	r2, [pc, #116]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 801069c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801069e:	4b1c      	ldr	r3, [pc, #112]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f000 f92c 	bl	8010900 <TimerSetTimeout>
 80106a8:	e023      	b.n	80106f2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 80106aa:	4b1a      	ldr	r3, [pc, #104]	; (8010714 <UTIL_TIMER_Stop+0xdc>)
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	4798      	blx	r3
            TimerListHead = NULL;
 80106b0:	4b17      	ldr	r3, [pc, #92]	; (8010710 <UTIL_TIMER_Stop+0xd8>)
 80106b2:	2200      	movs	r2, #0
 80106b4:	601a      	str	r2, [r3, #0]
 80106b6:	e01c      	b.n	80106f2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 80106b8:	697a      	ldr	r2, [r7, #20]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	429a      	cmp	r2, r3
 80106be:	d110      	bne.n	80106e2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	695b      	ldr	r3, [r3, #20]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d006      	beq.n	80106d6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	697a      	ldr	r2, [r7, #20]
 80106d2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 80106d4:	e00d      	b.n	80106f2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 80106d6:	2300      	movs	r3, #0
 80106d8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	697a      	ldr	r2, [r7, #20]
 80106de:	615a      	str	r2, [r3, #20]
            break;
 80106e0:	e007      	b.n	80106f2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	695b      	ldr	r3, [r3, #20]
 80106ea:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1e2      	bne.n	80106b8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 80106f2:	2300      	movs	r3, #0
 80106f4:	77fb      	strb	r3, [r7, #31]
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	f383 8810 	msr	PRIMASK, r3
}
 8010700:	e001      	b.n	8010706 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8010702:	2301      	movs	r3, #1
 8010704:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8010706:	7ffb      	ldrb	r3, [r7, #31]
}
 8010708:	4618      	mov	r0, r3
 801070a:	3720      	adds	r7, #32
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}
 8010710:	20000f4c 	.word	0x20000f4c
 8010714:	08015658 	.word	0x08015658

08010718 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8010722:	2300      	movs	r3, #0
 8010724:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d102      	bne.n	8010732 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801072c:	2301      	movs	r3, #1
 801072e:	73fb      	strb	r3, [r7, #15]
 8010730:	e014      	b.n	801075c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8010732:	4b0d      	ldr	r3, [pc, #52]	; (8010768 <UTIL_TIMER_SetPeriod+0x50>)
 8010734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010736:	6838      	ldr	r0, [r7, #0]
 8010738:	4798      	blx	r3
 801073a:	4602      	mov	r2, r0
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f000 f8c1 	bl	80108c8 <TimerExists>
 8010746:	4603      	mov	r3, r0
 8010748:	2b00      	cmp	r3, #0
 801074a:	d007      	beq.n	801075c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f7ff ff73 	bl	8010638 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7ff ff02 	bl	801055c <UTIL_TIMER_Start>
 8010758:	4603      	mov	r3, r0
 801075a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801075c:	7bfb      	ldrb	r3, [r7, #15]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}
 8010766:	bf00      	nop
 8010768:	08015658 	.word	0x08015658

0801076c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801076c:	b590      	push	{r4, r7, lr}
 801076e:	b089      	sub	sp, #36	; 0x24
 8010770:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010772:	f3ef 8310 	mrs	r3, PRIMASK
 8010776:	60bb      	str	r3, [r7, #8]
  return(result);
 8010778:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801077a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801077c:	b672      	cpsid	i
}
 801077e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 8010780:	4b38      	ldr	r3, [pc, #224]	; (8010864 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8010782:	695b      	ldr	r3, [r3, #20]
 8010784:	4798      	blx	r3
 8010786:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8010788:	4b36      	ldr	r3, [pc, #216]	; (8010864 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801078a:	691b      	ldr	r3, [r3, #16]
 801078c:	4798      	blx	r3
 801078e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 8010790:	693a      	ldr	r2, [r7, #16]
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8010798:	4b33      	ldr	r3, [pc, #204]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d037      	beq.n	8010810 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 80107a0:	4b31      	ldr	r3, [pc, #196]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	68fa      	ldr	r2, [r7, #12]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d206      	bcs.n	80107be <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	1ad2      	subs	r2, r2, r3
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	601a      	str	r2, [r3, #0]
 80107bc:	e002      	b.n	80107c4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	2200      	movs	r2, #0
 80107c2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	695b      	ldr	r3, [r3, #20]
 80107c8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1ea      	bne.n	80107a6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80107d0:	e01e      	b.n	8010810 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 80107d2:	4b25      	ldr	r3, [pc, #148]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 80107d8:	4b23      	ldr	r3, [pc, #140]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	695b      	ldr	r3, [r3, #20]
 80107de:	4a22      	ldr	r2, [pc, #136]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 80107e0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 80107e2:	69fb      	ldr	r3, [r7, #28]
 80107e4:	2200      	movs	r2, #0
 80107e6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 80107e8:	69fb      	ldr	r3, [r7, #28]
 80107ea:	2200      	movs	r2, #0
 80107ec:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 80107ee:	69fb      	ldr	r3, [r7, #28]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	69fa      	ldr	r2, [r7, #28]
 80107f4:	6912      	ldr	r2, [r2, #16]
 80107f6:	4610      	mov	r0, r2
 80107f8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80107fa:	69fb      	ldr	r3, [r7, #28]
 80107fc:	7adb      	ldrb	r3, [r3, #11]
 80107fe:	2b01      	cmp	r3, #1
 8010800:	d106      	bne.n	8010810 <UTIL_TIMER_IRQ_Handler+0xa4>
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	7a9b      	ldrb	r3, [r3, #10]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d102      	bne.n	8010810 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801080a:	69f8      	ldr	r0, [r7, #28]
 801080c:	f7ff fea6 	bl	801055c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8010810:	4b15      	ldr	r3, [pc, #84]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d00d      	beq.n	8010834 <UTIL_TIMER_IRQ_Handler+0xc8>
 8010818:	4b13      	ldr	r3, [pc, #76]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d0d7      	beq.n	80107d2 <UTIL_TIMER_IRQ_Handler+0x66>
 8010822:	4b11      	ldr	r3, [pc, #68]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	681c      	ldr	r4, [r3, #0]
 8010828:	4b0e      	ldr	r3, [pc, #56]	; (8010864 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801082a:	699b      	ldr	r3, [r3, #24]
 801082c:	4798      	blx	r3
 801082e:	4603      	mov	r3, r0
 8010830:	429c      	cmp	r4, r3
 8010832:	d3ce      	bcc.n	80107d2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8010834:	4b0c      	ldr	r3, [pc, #48]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d009      	beq.n	8010850 <UTIL_TIMER_IRQ_Handler+0xe4>
 801083c:	4b0a      	ldr	r3, [pc, #40]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	7a1b      	ldrb	r3, [r3, #8]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d104      	bne.n	8010850 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8010846:	4b08      	ldr	r3, [pc, #32]	; (8010868 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	4618      	mov	r0, r3
 801084c:	f000 f858 	bl	8010900 <TimerSetTimeout>
 8010850:	69bb      	ldr	r3, [r7, #24]
 8010852:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f383 8810 	msr	PRIMASK, r3
}
 801085a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801085c:	bf00      	nop
 801085e:	3724      	adds	r7, #36	; 0x24
 8010860:	46bd      	mov	sp, r7
 8010862:	bd90      	pop	{r4, r7, pc}
 8010864:	08015658 	.word	0x08015658
 8010868:	20000f4c 	.word	0x20000f4c

0801086c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b082      	sub	sp, #8
 8010870:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8010872:	4b06      	ldr	r3, [pc, #24]	; (801088c <UTIL_TIMER_GetCurrentTime+0x20>)
 8010874:	69db      	ldr	r3, [r3, #28]
 8010876:	4798      	blx	r3
 8010878:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801087a:	4b04      	ldr	r3, [pc, #16]	; (801088c <UTIL_TIMER_GetCurrentTime+0x20>)
 801087c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	4798      	blx	r3
 8010882:	4603      	mov	r3, r0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3708      	adds	r7, #8
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	08015658 	.word	0x08015658

08010890 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b084      	sub	sp, #16
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8010898:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801089a:	69db      	ldr	r3, [r3, #28]
 801089c:	4798      	blx	r3
 801089e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 80108a0:	4b08      	ldr	r3, [pc, #32]	; (80108c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 80108a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	4798      	blx	r3
 80108a8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 80108aa:	4b06      	ldr	r3, [pc, #24]	; (80108c4 <UTIL_TIMER_GetElapsedTime+0x34>)
 80108ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108ae:	68f9      	ldr	r1, [r7, #12]
 80108b0:	68ba      	ldr	r2, [r7, #8]
 80108b2:	1a8a      	subs	r2, r1, r2
 80108b4:	4610      	mov	r0, r2
 80108b6:	4798      	blx	r3
 80108b8:	4603      	mov	r3, r0
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	08015658 	.word	0x08015658

080108c8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 80108c8:	b480      	push	{r7}
 80108ca:	b085      	sub	sp, #20
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80108d0:	4b0a      	ldr	r3, [pc, #40]	; (80108fc <TimerExists+0x34>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 80108d6:	e008      	b.n	80108ea <TimerExists+0x22>
  {
    if( cur == TimerObject )
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	429a      	cmp	r2, r3
 80108de:	d101      	bne.n	80108e4 <TimerExists+0x1c>
    {
      return true;
 80108e0:	2301      	movs	r3, #1
 80108e2:	e006      	b.n	80108f2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	695b      	ldr	r3, [r3, #20]
 80108e8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1f3      	bne.n	80108d8 <TimerExists+0x10>
  }
  return false;
 80108f0:	2300      	movs	r3, #0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3714      	adds	r7, #20
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bc80      	pop	{r7}
 80108fa:	4770      	bx	lr
 80108fc:	20000f4c 	.word	0x20000f4c

08010900 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8010900:	b590      	push	{r4, r7, lr}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8010908:	4b11      	ldr	r3, [pc, #68]	; (8010950 <TimerSetTimeout+0x50>)
 801090a:	6a1b      	ldr	r3, [r3, #32]
 801090c:	4798      	blx	r3
 801090e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2201      	movs	r2, #1
 8010914:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681c      	ldr	r4, [r3, #0]
 801091a:	4b0d      	ldr	r3, [pc, #52]	; (8010950 <TimerSetTimeout+0x50>)
 801091c:	699b      	ldr	r3, [r3, #24]
 801091e:	4798      	blx	r3
 8010920:	4602      	mov	r2, r0
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	4413      	add	r3, r2
 8010926:	429c      	cmp	r4, r3
 8010928:	d207      	bcs.n	801093a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801092a:	4b09      	ldr	r3, [pc, #36]	; (8010950 <TimerSetTimeout+0x50>)
 801092c:	699b      	ldr	r3, [r3, #24]
 801092e:	4798      	blx	r3
 8010930:	4602      	mov	r2, r0
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	441a      	add	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801093a:	4b05      	ldr	r3, [pc, #20]	; (8010950 <TimerSetTimeout+0x50>)
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	6812      	ldr	r2, [r2, #0]
 8010942:	4610      	mov	r0, r2
 8010944:	4798      	blx	r3
}
 8010946:	bf00      	nop
 8010948:	3714      	adds	r7, #20
 801094a:	46bd      	mov	sp, r7
 801094c:	bd90      	pop	{r4, r7, pc}
 801094e:	bf00      	nop
 8010950:	08015658 	.word	0x08015658

08010954 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8010954:	b480      	push	{r7}
 8010956:	b085      	sub	sp, #20
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801095c:	4b14      	ldr	r3, [pc, #80]	; (80109b0 <TimerInsertTimer+0x5c>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8010962:	4b13      	ldr	r3, [pc, #76]	; (80109b0 <TimerInsertTimer+0x5c>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	695b      	ldr	r3, [r3, #20]
 8010968:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801096a:	e012      	b.n	8010992 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	429a      	cmp	r2, r3
 8010976:	d905      	bls.n	8010984 <TimerInsertTimer+0x30>
    {
        cur = next;
 8010978:	68bb      	ldr	r3, [r7, #8]
 801097a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	695b      	ldr	r3, [r3, #20]
 8010980:	60bb      	str	r3, [r7, #8]
 8010982:	e006      	b.n	8010992 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	68ba      	ldr	r2, [r7, #8]
 801098e:	615a      	str	r2, [r3, #20]
        return;
 8010990:	e009      	b.n	80109a6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	695b      	ldr	r3, [r3, #20]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d1e8      	bne.n	801096c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	2200      	movs	r2, #0
 80109a4:	615a      	str	r2, [r3, #20]
}
 80109a6:	3714      	adds	r7, #20
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bc80      	pop	{r7}
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	20000f4c 	.word	0x20000f4c

080109b4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b084      	sub	sp, #16
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80109bc:	4b0b      	ldr	r3, [pc, #44]	; (80109ec <TimerInsertNewHeadTimer+0x38>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d002      	beq.n	80109ce <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	2200      	movs	r2, #0
 80109cc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	68fa      	ldr	r2, [r7, #12]
 80109d2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 80109d4:	4a05      	ldr	r2, [pc, #20]	; (80109ec <TimerInsertNewHeadTimer+0x38>)
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 80109da:	4b04      	ldr	r3, [pc, #16]	; (80109ec <TimerInsertNewHeadTimer+0x38>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	4618      	mov	r0, r3
 80109e0:	f7ff ff8e 	bl	8010900 <TimerSetTimeout>
}
 80109e4:	bf00      	nop
 80109e6:	3710      	adds	r7, #16
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}
 80109ec:	20000f4c 	.word	0x20000f4c

080109f0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b085      	sub	sp, #20
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
  int i = 0;
 80109f8:	2300      	movs	r3, #0
 80109fa:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80109fc:	e00e      	b.n	8010a1c <ee_skip_atoi+0x2c>
 80109fe:	68fa      	ldr	r2, [r7, #12]
 8010a00:	4613      	mov	r3, r2
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	4413      	add	r3, r2
 8010a06:	005b      	lsls	r3, r3, #1
 8010a08:	4618      	mov	r0, r3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	1c59      	adds	r1, r3, #1
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	6011      	str	r1, [r2, #0]
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	4403      	add	r3, r0
 8010a18:	3b30      	subs	r3, #48	; 0x30
 8010a1a:	60fb      	str	r3, [r7, #12]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	2b2f      	cmp	r3, #47	; 0x2f
 8010a24:	d904      	bls.n	8010a30 <ee_skip_atoi+0x40>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	2b39      	cmp	r3, #57	; 0x39
 8010a2e:	d9e6      	bls.n	80109fe <ee_skip_atoi+0xe>
  return i;
 8010a30:	68fb      	ldr	r3, [r7, #12]
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3714      	adds	r7, #20
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bc80      	pop	{r7}
 8010a3a:	4770      	bx	lr

08010a3c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b099      	sub	sp, #100	; 0x64
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	60f8      	str	r0, [r7, #12]
 8010a44:	60b9      	str	r1, [r7, #8]
 8010a46:	607a      	str	r2, [r7, #4]
 8010a48:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8010a4a:	4b71      	ldr	r3, [pc, #452]	; (8010c10 <ee_number+0x1d4>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8010a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d002      	beq.n	8010a60 <ee_number+0x24>
 8010a5a:	4b6e      	ldr	r3, [pc, #440]	; (8010c14 <ee_number+0x1d8>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	2b01      	cmp	r3, #1
 8010a64:	dd02      	ble.n	8010a6c <ee_number+0x30>
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	2b24      	cmp	r3, #36	; 0x24
 8010a6a:	dd01      	ble.n	8010a70 <ee_number+0x34>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	e0ca      	b.n	8010c06 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 8010a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a72:	f003 0301 	and.w	r3, r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d001      	beq.n	8010a7e <ee_number+0x42>
 8010a7a:	2330      	movs	r3, #48	; 0x30
 8010a7c:	e000      	b.n	8010a80 <ee_number+0x44>
 8010a7e:	2320      	movs	r3, #32
 8010a80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8010a84:	2300      	movs	r3, #0
 8010a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8010a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a8c:	f003 0302 	and.w	r3, r3, #2
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d00b      	beq.n	8010aac <ee_number+0x70>
  {
    if (num < 0)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	da08      	bge.n	8010aac <ee_number+0x70>
    {
      sign = '-';
 8010a9a:	232d      	movs	r3, #45	; 0x2d
 8010a9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	425b      	negs	r3, r3
 8010aa4:	607b      	str	r3, [r7, #4]
      size--;
 8010aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d11e      	bne.n	8010af4 <ee_number+0xb8>
    tmp[i++] = '0';
 8010ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ab8:	1c5a      	adds	r2, r3, #1
 8010aba:	657a      	str	r2, [r7, #84]	; 0x54
 8010abc:	3360      	adds	r3, #96	; 0x60
 8010abe:	443b      	add	r3, r7
 8010ac0:	2230      	movs	r2, #48	; 0x30
 8010ac2:	f803 2c50 	strb.w	r2, [r3, #-80]
 8010ac6:	e018      	b.n	8010afa <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ad0:	fb01 f202 	mul.w	r2, r1, r2
 8010ad4:	1a9b      	subs	r3, r3, r2
 8010ad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ad8:	441a      	add	r2, r3
 8010ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010adc:	1c59      	adds	r1, r3, #1
 8010ade:	6579      	str	r1, [r7, #84]	; 0x54
 8010ae0:	7812      	ldrb	r2, [r2, #0]
 8010ae2:	3360      	adds	r3, #96	; 0x60
 8010ae4:	443b      	add	r3, r7
 8010ae6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8010af2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d1e6      	bne.n	8010ac8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 8010afa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010afe:	429a      	cmp	r2, r3
 8010b00:	dd01      	ble.n	8010b06 <ee_number+0xca>
 8010b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b04:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8010b06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010b0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010b10:	f003 0301 	and.w	r3, r3, #1
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d112      	bne.n	8010b3e <ee_number+0x102>
 8010b18:	e00c      	b.n	8010b34 <ee_number+0xf8>
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	1c5a      	adds	r2, r3, #1
 8010b1e:	60fa      	str	r2, [r7, #12]
 8010b20:	2220      	movs	r2, #32
 8010b22:	701a      	strb	r2, [r3, #0]
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	3b01      	subs	r3, #1
 8010b28:	60bb      	str	r3, [r7, #8]
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <ee_number+0xf8>
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	e068      	b.n	8010c06 <ee_number+0x1ca>
 8010b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b36:	1e5a      	subs	r2, r3, #1
 8010b38:	66ba      	str	r2, [r7, #104]	; 0x68
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	dced      	bgt.n	8010b1a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 8010b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d01b      	beq.n	8010b7e <ee_number+0x142>
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	1c5a      	adds	r2, r3, #1
 8010b4a:	60fa      	str	r2, [r7, #12]
 8010b4c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8010b50:	701a      	strb	r2, [r3, #0]
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	3b01      	subs	r3, #1
 8010b56:	60bb      	str	r3, [r7, #8]
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d10f      	bne.n	8010b7e <ee_number+0x142>
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	e051      	b.n	8010c06 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	1c5a      	adds	r2, r3, #1
 8010b66:	60fa      	str	r2, [r7, #12]
 8010b68:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	3b01      	subs	r3, #1
 8010b72:	60bb      	str	r3, [r7, #8]
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d101      	bne.n	8010b7e <ee_number+0x142>
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	e043      	b.n	8010c06 <ee_number+0x1ca>
 8010b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010b80:	1e5a      	subs	r2, r3, #1
 8010b82:	66ba      	str	r2, [r7, #104]	; 0x68
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	dcec      	bgt.n	8010b62 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8010b88:	e00c      	b.n	8010ba4 <ee_number+0x168>
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	1c5a      	adds	r2, r3, #1
 8010b8e:	60fa      	str	r2, [r7, #12]
 8010b90:	2230      	movs	r2, #48	; 0x30
 8010b92:	701a      	strb	r2, [r3, #0]
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	3b01      	subs	r3, #1
 8010b98:	60bb      	str	r3, [r7, #8]
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d101      	bne.n	8010ba4 <ee_number+0x168>
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	e030      	b.n	8010c06 <ee_number+0x1ca>
 8010ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ba6:	1e5a      	subs	r2, r3, #1
 8010ba8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010baa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bac:	429a      	cmp	r2, r3
 8010bae:	dbec      	blt.n	8010b8a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8010bb0:	e010      	b.n	8010bd4 <ee_number+0x198>
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	60fa      	str	r2, [r7, #12]
 8010bb8:	f107 0110 	add.w	r1, r7, #16
 8010bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010bbe:	440a      	add	r2, r1
 8010bc0:	7812      	ldrb	r2, [r2, #0]
 8010bc2:	701a      	strb	r2, [r3, #0]
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	3b01      	subs	r3, #1
 8010bc8:	60bb      	str	r3, [r7, #8]
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d101      	bne.n	8010bd4 <ee_number+0x198>
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	e018      	b.n	8010c06 <ee_number+0x1ca>
 8010bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010bd6:	1e5a      	subs	r2, r3, #1
 8010bd8:	657a      	str	r2, [r7, #84]	; 0x54
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	dce9      	bgt.n	8010bb2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 8010bde:	e00c      	b.n	8010bfa <ee_number+0x1be>
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	60fa      	str	r2, [r7, #12]
 8010be6:	2220      	movs	r2, #32
 8010be8:	701a      	strb	r2, [r3, #0]
 8010bea:	68bb      	ldr	r3, [r7, #8]
 8010bec:	3b01      	subs	r3, #1
 8010bee:	60bb      	str	r3, [r7, #8]
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d101      	bne.n	8010bfa <ee_number+0x1be>
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	e005      	b.n	8010c06 <ee_number+0x1ca>
 8010bfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010bfc:	1e5a      	subs	r2, r3, #1
 8010bfe:	66ba      	str	r2, [r7, #104]	; 0x68
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	dced      	bgt.n	8010be0 <ee_number+0x1a4>

  return str;
 8010c04:	68fb      	ldr	r3, [r7, #12]
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3764      	adds	r7, #100	; 0x64
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bc80      	pop	{r7}
 8010c0e:	4770      	bx	lr
 8010c10:	20000054 	.word	0x20000054
 8010c14:	20000058 	.word	0x20000058

08010c18 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b092      	sub	sp, #72	; 0x48
 8010c1c:	af04      	add	r7, sp, #16
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	dc01      	bgt.n	8010c30 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	e142      	b.n	8010eb6 <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c34:	e12a      	b.n	8010e8c <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 8010c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	1ad2      	subs	r2, r2, r3
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	3b01      	subs	r3, #1
 8010c40:	429a      	cmp	r2, r3
 8010c42:	f280 8131 	bge.w	8010ea8 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	2b25      	cmp	r3, #37	; 0x25
 8010c4c:	d006      	beq.n	8010c5c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c52:	1c59      	adds	r1, r3, #1
 8010c54:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010c56:	7812      	ldrb	r2, [r2, #0]
 8010c58:	701a      	strb	r2, [r3, #0]
      continue;
 8010c5a:	e114      	b.n	8010e86 <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	3301      	adds	r3, #1
 8010c64:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	781b      	ldrb	r3, [r3, #0]
 8010c6a:	2b30      	cmp	r3, #48	; 0x30
 8010c6c:	d103      	bne.n	8010c76 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 8010c6e:	6a3b      	ldr	r3, [r7, #32]
 8010c70:	f043 0301 	orr.w	r3, r3, #1
 8010c74:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 8010c76:	f04f 33ff 	mov.w	r3, #4294967295
 8010c7a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	781b      	ldrb	r3, [r3, #0]
 8010c80:	2b2f      	cmp	r3, #47	; 0x2f
 8010c82:	d908      	bls.n	8010c96 <tiny_vsnprintf_like+0x7e>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	2b39      	cmp	r3, #57	; 0x39
 8010c8a:	d804      	bhi.n	8010c96 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8010c8c:	1d3b      	adds	r3, r7, #4
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7ff feae 	bl	80109f0 <ee_skip_atoi>
 8010c94:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 8010c96:	f04f 33ff 	mov.w	r3, #4294967295
 8010c9a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 8010c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010ca0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 8010ca2:	230a      	movs	r3, #10
 8010ca4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	3b58      	subs	r3, #88	; 0x58
 8010cac:	2b20      	cmp	r3, #32
 8010cae:	f200 8094 	bhi.w	8010dda <tiny_vsnprintf_like+0x1c2>
 8010cb2:	a201      	add	r2, pc, #4	; (adr r2, 8010cb8 <tiny_vsnprintf_like+0xa0>)
 8010cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb8:	08010dc3 	.word	0x08010dc3
 8010cbc:	08010ddb 	.word	0x08010ddb
 8010cc0:	08010ddb 	.word	0x08010ddb
 8010cc4:	08010ddb 	.word	0x08010ddb
 8010cc8:	08010ddb 	.word	0x08010ddb
 8010ccc:	08010ddb 	.word	0x08010ddb
 8010cd0:	08010ddb 	.word	0x08010ddb
 8010cd4:	08010ddb 	.word	0x08010ddb
 8010cd8:	08010ddb 	.word	0x08010ddb
 8010cdc:	08010ddb 	.word	0x08010ddb
 8010ce0:	08010ddb 	.word	0x08010ddb
 8010ce4:	08010d47 	.word	0x08010d47
 8010ce8:	08010dd1 	.word	0x08010dd1
 8010cec:	08010ddb 	.word	0x08010ddb
 8010cf0:	08010ddb 	.word	0x08010ddb
 8010cf4:	08010ddb 	.word	0x08010ddb
 8010cf8:	08010ddb 	.word	0x08010ddb
 8010cfc:	08010dd1 	.word	0x08010dd1
 8010d00:	08010ddb 	.word	0x08010ddb
 8010d04:	08010ddb 	.word	0x08010ddb
 8010d08:	08010ddb 	.word	0x08010ddb
 8010d0c:	08010ddb 	.word	0x08010ddb
 8010d10:	08010ddb 	.word	0x08010ddb
 8010d14:	08010ddb 	.word	0x08010ddb
 8010d18:	08010ddb 	.word	0x08010ddb
 8010d1c:	08010ddb 	.word	0x08010ddb
 8010d20:	08010ddb 	.word	0x08010ddb
 8010d24:	08010d67 	.word	0x08010d67
 8010d28:	08010ddb 	.word	0x08010ddb
 8010d2c:	08010e27 	.word	0x08010e27
 8010d30:	08010ddb 	.word	0x08010ddb
 8010d34:	08010ddb 	.word	0x08010ddb
 8010d38:	08010dcb 	.word	0x08010dcb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8010d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d3e:	1c5a      	adds	r2, r3, #1
 8010d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d42:	2220      	movs	r2, #32
 8010d44:	701a      	strb	r2, [r3, #0]
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	3b01      	subs	r3, #1
 8010d4a:	61fb      	str	r3, [r7, #28]
 8010d4c:	69fb      	ldr	r3, [r7, #28]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	dcf4      	bgt.n	8010d3c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	1d1a      	adds	r2, r3, #4
 8010d56:	603a      	str	r2, [r7, #0]
 8010d58:	6819      	ldr	r1, [r3, #0]
 8010d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5c:	1c5a      	adds	r2, r3, #1
 8010d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d60:	b2ca      	uxtb	r2, r1
 8010d62:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8010d64:	e08f      	b.n	8010e86 <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	1d1a      	adds	r2, r3, #4
 8010d6a:	603a      	str	r2, [r7, #0]
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 8010d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d101      	bne.n	8010d7a <tiny_vsnprintf_like+0x162>
 8010d76:	4b52      	ldr	r3, [pc, #328]	; (8010ec0 <tiny_vsnprintf_like+0x2a8>)
 8010d78:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8010d7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d7c:	f7ef fa00 	bl	8000180 <strlen>
 8010d80:	4603      	mov	r3, r0
 8010d82:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8010d84:	e004      	b.n	8010d90 <tiny_vsnprintf_like+0x178>
 8010d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d88:	1c5a      	adds	r2, r3, #1
 8010d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d8c:	2220      	movs	r2, #32
 8010d8e:	701a      	strb	r2, [r3, #0]
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	1e5a      	subs	r2, r3, #1
 8010d94:	61fa      	str	r2, [r7, #28]
 8010d96:	693a      	ldr	r2, [r7, #16]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	dbf4      	blt.n	8010d86 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010da0:	e00a      	b.n	8010db8 <tiny_vsnprintf_like+0x1a0>
 8010da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da4:	1c53      	adds	r3, r2, #1
 8010da6:	627b      	str	r3, [r7, #36]	; 0x24
 8010da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010daa:	1c59      	adds	r1, r3, #1
 8010dac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010dae:	7812      	ldrb	r2, [r2, #0]
 8010db0:	701a      	strb	r2, [r3, #0]
 8010db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db4:	3301      	adds	r3, #1
 8010db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010db8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	dbf0      	blt.n	8010da2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 8010dc0:	e061      	b.n	8010e86 <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8010dc2:	6a3b      	ldr	r3, [r7, #32]
 8010dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dc8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 8010dca:	2310      	movs	r3, #16
 8010dcc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8010dce:	e02d      	b.n	8010e2c <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 8010dd0:	6a3b      	ldr	r3, [r7, #32]
 8010dd2:	f043 0302 	orr.w	r3, r3, #2
 8010dd6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 8010dd8:	e025      	b.n	8010e26 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	781b      	ldrb	r3, [r3, #0]
 8010dde:	2b25      	cmp	r3, #37	; 0x25
 8010de0:	d004      	beq.n	8010dec <tiny_vsnprintf_like+0x1d4>
 8010de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de4:	1c5a      	adds	r2, r3, #1
 8010de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010de8:	2225      	movs	r2, #37	; 0x25
 8010dea:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 8010dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	1ad2      	subs	r2, r2, r3
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	3b01      	subs	r3, #1
 8010df6:	429a      	cmp	r2, r3
 8010df8:	da17      	bge.n	8010e2a <tiny_vsnprintf_like+0x212>
        if (*fmt)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d006      	beq.n	8010e10 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 8010e02:	687a      	ldr	r2, [r7, #4]
 8010e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e06:	1c59      	adds	r1, r3, #1
 8010e08:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010e0a:	7812      	ldrb	r2, [r2, #0]
 8010e0c:	701a      	strb	r2, [r3, #0]
 8010e0e:	e002      	b.n	8010e16 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	3b01      	subs	r3, #1
 8010e14:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8010e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	1ad2      	subs	r2, r2, r3
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	429a      	cmp	r2, r3
 8010e22:	db2f      	blt.n	8010e84 <tiny_vsnprintf_like+0x26c>
 8010e24:	e002      	b.n	8010e2c <tiny_vsnprintf_like+0x214>
        break;
 8010e26:	bf00      	nop
 8010e28:	e000      	b.n	8010e2c <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 8010e2a:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	2b6c      	cmp	r3, #108	; 0x6c
 8010e30:	d105      	bne.n	8010e3e <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	1d1a      	adds	r2, r3, #4
 8010e36:	603a      	str	r2, [r7, #0]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8010e3c:	e00f      	b.n	8010e5e <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 8010e3e:	6a3b      	ldr	r3, [r7, #32]
 8010e40:	f003 0302 	and.w	r3, r3, #2
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d005      	beq.n	8010e54 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	1d1a      	adds	r2, r3, #4
 8010e4c:	603a      	str	r2, [r7, #0]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	637b      	str	r3, [r7, #52]	; 0x34
 8010e52:	e004      	b.n	8010e5e <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	1d1a      	adds	r2, r3, #4
 8010e58:	603a      	str	r2, [r7, #0]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	1e5a      	subs	r2, r3, #1
 8010e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	1acb      	subs	r3, r1, r3
 8010e68:	1ad1      	subs	r1, r2, r3
 8010e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e6c:	6a3b      	ldr	r3, [r7, #32]
 8010e6e:	9302      	str	r3, [sp, #8]
 8010e70:	69bb      	ldr	r3, [r7, #24]
 8010e72:	9301      	str	r3, [sp, #4]
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e7c:	f7ff fdde 	bl	8010a3c <ee_number>
 8010e80:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010e82:	e000      	b.n	8010e86 <tiny_vsnprintf_like+0x26e>
        continue;
 8010e84:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	3301      	adds	r3, #1
 8010e8a:	607b      	str	r3, [r7, #4]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f47f aed0 	bne.w	8010c36 <tiny_vsnprintf_like+0x1e>
 8010e96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	1ad2      	subs	r2, r2, r3
 8010e9c:	68bb      	ldr	r3, [r7, #8]
 8010e9e:	3b01      	subs	r3, #1
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	f6bf aec8 	bge.w	8010c36 <tiny_vsnprintf_like+0x1e>
 8010ea6:	e000      	b.n	8010eaa <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 8010ea8:	bf00      	nop
  }

  *str = '\0';
 8010eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eac:	2200      	movs	r2, #0
 8010eae:	701a      	strb	r2, [r3, #0]
  return str - buf;
 8010eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	1ad3      	subs	r3, r2, r3
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3738      	adds	r7, #56	; 0x38
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	08015638 	.word	0x08015638

08010ec4 <__errno>:
 8010ec4:	4b01      	ldr	r3, [pc, #4]	; (8010ecc <__errno+0x8>)
 8010ec6:	6818      	ldr	r0, [r3, #0]
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	2000005c 	.word	0x2000005c

08010ed0 <__libc_init_array>:
 8010ed0:	b570      	push	{r4, r5, r6, lr}
 8010ed2:	4d0d      	ldr	r5, [pc, #52]	; (8010f08 <__libc_init_array+0x38>)
 8010ed4:	4c0d      	ldr	r4, [pc, #52]	; (8010f0c <__libc_init_array+0x3c>)
 8010ed6:	1b64      	subs	r4, r4, r5
 8010ed8:	10a4      	asrs	r4, r4, #2
 8010eda:	2600      	movs	r6, #0
 8010edc:	42a6      	cmp	r6, r4
 8010ede:	d109      	bne.n	8010ef4 <__libc_init_array+0x24>
 8010ee0:	4d0b      	ldr	r5, [pc, #44]	; (8010f10 <__libc_init_array+0x40>)
 8010ee2:	4c0c      	ldr	r4, [pc, #48]	; (8010f14 <__libc_init_array+0x44>)
 8010ee4:	f003 fe9a 	bl	8014c1c <_init>
 8010ee8:	1b64      	subs	r4, r4, r5
 8010eea:	10a4      	asrs	r4, r4, #2
 8010eec:	2600      	movs	r6, #0
 8010eee:	42a6      	cmp	r6, r4
 8010ef0:	d105      	bne.n	8010efe <__libc_init_array+0x2e>
 8010ef2:	bd70      	pop	{r4, r5, r6, pc}
 8010ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ef8:	4798      	blx	r3
 8010efa:	3601      	adds	r6, #1
 8010efc:	e7ee      	b.n	8010edc <__libc_init_array+0xc>
 8010efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8010f02:	4798      	blx	r3
 8010f04:	3601      	adds	r6, #1
 8010f06:	e7f2      	b.n	8010eee <__libc_init_array+0x1e>
 8010f08:	08015cd8 	.word	0x08015cd8
 8010f0c:	08015cd8 	.word	0x08015cd8
 8010f10:	08015cd8 	.word	0x08015cd8
 8010f14:	08015cdc 	.word	0x08015cdc

08010f18 <memcpy>:
 8010f18:	440a      	add	r2, r1
 8010f1a:	4291      	cmp	r1, r2
 8010f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010f20:	d100      	bne.n	8010f24 <memcpy+0xc>
 8010f22:	4770      	bx	lr
 8010f24:	b510      	push	{r4, lr}
 8010f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f2e:	4291      	cmp	r1, r2
 8010f30:	d1f9      	bne.n	8010f26 <memcpy+0xe>
 8010f32:	bd10      	pop	{r4, pc}

08010f34 <memset>:
 8010f34:	4402      	add	r2, r0
 8010f36:	4603      	mov	r3, r0
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d100      	bne.n	8010f3e <memset+0xa>
 8010f3c:	4770      	bx	lr
 8010f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8010f42:	e7f9      	b.n	8010f38 <memset+0x4>

08010f44 <__cvt>:
 8010f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f48:	b088      	sub	sp, #32
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	461f      	mov	r7, r3
 8010f4e:	4614      	mov	r4, r2
 8010f50:	bfb8      	it	lt
 8010f52:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010f56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010f5a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8010f5e:	bfb6      	itet	lt
 8010f60:	461f      	movlt	r7, r3
 8010f62:	2300      	movge	r3, #0
 8010f64:	232d      	movlt	r3, #45	; 0x2d
 8010f66:	7013      	strb	r3, [r2, #0]
 8010f68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f6a:	f023 0820 	bic.w	r8, r3, #32
 8010f6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010f72:	d005      	beq.n	8010f80 <__cvt+0x3c>
 8010f74:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010f78:	d100      	bne.n	8010f7c <__cvt+0x38>
 8010f7a:	3501      	adds	r5, #1
 8010f7c:	2302      	movs	r3, #2
 8010f7e:	e000      	b.n	8010f82 <__cvt+0x3e>
 8010f80:	2303      	movs	r3, #3
 8010f82:	aa07      	add	r2, sp, #28
 8010f84:	9204      	str	r2, [sp, #16]
 8010f86:	aa06      	add	r2, sp, #24
 8010f88:	e9cd a202 	strd	sl, r2, [sp, #8]
 8010f8c:	e9cd 3500 	strd	r3, r5, [sp]
 8010f90:	4622      	mov	r2, r4
 8010f92:	463b      	mov	r3, r7
 8010f94:	f000 fdb0 	bl	8011af8 <_dtoa_r>
 8010f98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010f9c:	4606      	mov	r6, r0
 8010f9e:	d102      	bne.n	8010fa6 <__cvt+0x62>
 8010fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010fa2:	07db      	lsls	r3, r3, #31
 8010fa4:	d522      	bpl.n	8010fec <__cvt+0xa8>
 8010fa6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010faa:	eb06 0905 	add.w	r9, r6, r5
 8010fae:	d110      	bne.n	8010fd2 <__cvt+0x8e>
 8010fb0:	7833      	ldrb	r3, [r6, #0]
 8010fb2:	2b30      	cmp	r3, #48	; 0x30
 8010fb4:	d10a      	bne.n	8010fcc <__cvt+0x88>
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	2300      	movs	r3, #0
 8010fba:	4620      	mov	r0, r4
 8010fbc:	4639      	mov	r1, r7
 8010fbe:	f7ef fd5b 	bl	8000a78 <__aeabi_dcmpeq>
 8010fc2:	b918      	cbnz	r0, 8010fcc <__cvt+0x88>
 8010fc4:	f1c5 0501 	rsb	r5, r5, #1
 8010fc8:	f8ca 5000 	str.w	r5, [sl]
 8010fcc:	f8da 3000 	ldr.w	r3, [sl]
 8010fd0:	4499      	add	r9, r3
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	4639      	mov	r1, r7
 8010fda:	f7ef fd4d 	bl	8000a78 <__aeabi_dcmpeq>
 8010fde:	b108      	cbz	r0, 8010fe4 <__cvt+0xa0>
 8010fe0:	f8cd 901c 	str.w	r9, [sp, #28]
 8010fe4:	2230      	movs	r2, #48	; 0x30
 8010fe6:	9b07      	ldr	r3, [sp, #28]
 8010fe8:	454b      	cmp	r3, r9
 8010fea:	d307      	bcc.n	8010ffc <__cvt+0xb8>
 8010fec:	9b07      	ldr	r3, [sp, #28]
 8010fee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010ff0:	1b9b      	subs	r3, r3, r6
 8010ff2:	4630      	mov	r0, r6
 8010ff4:	6013      	str	r3, [r2, #0]
 8010ff6:	b008      	add	sp, #32
 8010ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ffc:	1c59      	adds	r1, r3, #1
 8010ffe:	9107      	str	r1, [sp, #28]
 8011000:	701a      	strb	r2, [r3, #0]
 8011002:	e7f0      	b.n	8010fe6 <__cvt+0xa2>

08011004 <__exponent>:
 8011004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011006:	4603      	mov	r3, r0
 8011008:	2900      	cmp	r1, #0
 801100a:	bfb8      	it	lt
 801100c:	4249      	neglt	r1, r1
 801100e:	f803 2b02 	strb.w	r2, [r3], #2
 8011012:	bfb4      	ite	lt
 8011014:	222d      	movlt	r2, #45	; 0x2d
 8011016:	222b      	movge	r2, #43	; 0x2b
 8011018:	2909      	cmp	r1, #9
 801101a:	7042      	strb	r2, [r0, #1]
 801101c:	dd2a      	ble.n	8011074 <__exponent+0x70>
 801101e:	f10d 0407 	add.w	r4, sp, #7
 8011022:	46a4      	mov	ip, r4
 8011024:	270a      	movs	r7, #10
 8011026:	46a6      	mov	lr, r4
 8011028:	460a      	mov	r2, r1
 801102a:	fb91 f6f7 	sdiv	r6, r1, r7
 801102e:	fb07 1516 	mls	r5, r7, r6, r1
 8011032:	3530      	adds	r5, #48	; 0x30
 8011034:	2a63      	cmp	r2, #99	; 0x63
 8011036:	f104 34ff 	add.w	r4, r4, #4294967295
 801103a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801103e:	4631      	mov	r1, r6
 8011040:	dcf1      	bgt.n	8011026 <__exponent+0x22>
 8011042:	3130      	adds	r1, #48	; 0x30
 8011044:	f1ae 0502 	sub.w	r5, lr, #2
 8011048:	f804 1c01 	strb.w	r1, [r4, #-1]
 801104c:	1c44      	adds	r4, r0, #1
 801104e:	4629      	mov	r1, r5
 8011050:	4561      	cmp	r1, ip
 8011052:	d30a      	bcc.n	801106a <__exponent+0x66>
 8011054:	f10d 0209 	add.w	r2, sp, #9
 8011058:	eba2 020e 	sub.w	r2, r2, lr
 801105c:	4565      	cmp	r5, ip
 801105e:	bf88      	it	hi
 8011060:	2200      	movhi	r2, #0
 8011062:	4413      	add	r3, r2
 8011064:	1a18      	subs	r0, r3, r0
 8011066:	b003      	add	sp, #12
 8011068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801106a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801106e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011072:	e7ed      	b.n	8011050 <__exponent+0x4c>
 8011074:	2330      	movs	r3, #48	; 0x30
 8011076:	3130      	adds	r1, #48	; 0x30
 8011078:	7083      	strb	r3, [r0, #2]
 801107a:	70c1      	strb	r1, [r0, #3]
 801107c:	1d03      	adds	r3, r0, #4
 801107e:	e7f1      	b.n	8011064 <__exponent+0x60>

08011080 <_printf_float>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	b091      	sub	sp, #68	; 0x44
 8011086:	460c      	mov	r4, r1
 8011088:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801108c:	4616      	mov	r6, r2
 801108e:	461f      	mov	r7, r3
 8011090:	4605      	mov	r5, r0
 8011092:	f001 fb1f 	bl	80126d4 <_localeconv_r>
 8011096:	6803      	ldr	r3, [r0, #0]
 8011098:	9309      	str	r3, [sp, #36]	; 0x24
 801109a:	4618      	mov	r0, r3
 801109c:	f7ef f870 	bl	8000180 <strlen>
 80110a0:	2300      	movs	r3, #0
 80110a2:	930e      	str	r3, [sp, #56]	; 0x38
 80110a4:	f8d8 3000 	ldr.w	r3, [r8]
 80110a8:	900a      	str	r0, [sp, #40]	; 0x28
 80110aa:	3307      	adds	r3, #7
 80110ac:	f023 0307 	bic.w	r3, r3, #7
 80110b0:	f103 0208 	add.w	r2, r3, #8
 80110b4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80110b8:	f8d4 b000 	ldr.w	fp, [r4]
 80110bc:	f8c8 2000 	str.w	r2, [r8]
 80110c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80110c8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80110cc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80110d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80110d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80110d4:	4b9c      	ldr	r3, [pc, #624]	; (8011348 <_printf_float+0x2c8>)
 80110d6:	f04f 32ff 	mov.w	r2, #4294967295
 80110da:	4640      	mov	r0, r8
 80110dc:	f7ef fcfe 	bl	8000adc <__aeabi_dcmpun>
 80110e0:	bb70      	cbnz	r0, 8011140 <_printf_float+0xc0>
 80110e2:	4b99      	ldr	r3, [pc, #612]	; (8011348 <_printf_float+0x2c8>)
 80110e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80110e6:	f04f 32ff 	mov.w	r2, #4294967295
 80110ea:	4640      	mov	r0, r8
 80110ec:	f7ef fcd8 	bl	8000aa0 <__aeabi_dcmple>
 80110f0:	bb30      	cbnz	r0, 8011140 <_printf_float+0xc0>
 80110f2:	2200      	movs	r2, #0
 80110f4:	2300      	movs	r3, #0
 80110f6:	4640      	mov	r0, r8
 80110f8:	4651      	mov	r1, sl
 80110fa:	f7ef fcc7 	bl	8000a8c <__aeabi_dcmplt>
 80110fe:	b110      	cbz	r0, 8011106 <_printf_float+0x86>
 8011100:	232d      	movs	r3, #45	; 0x2d
 8011102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011106:	4b91      	ldr	r3, [pc, #580]	; (801134c <_printf_float+0x2cc>)
 8011108:	4891      	ldr	r0, [pc, #580]	; (8011350 <_printf_float+0x2d0>)
 801110a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801110e:	bf94      	ite	ls
 8011110:	4698      	movls	r8, r3
 8011112:	4680      	movhi	r8, r0
 8011114:	2303      	movs	r3, #3
 8011116:	6123      	str	r3, [r4, #16]
 8011118:	f02b 0304 	bic.w	r3, fp, #4
 801111c:	6023      	str	r3, [r4, #0]
 801111e:	f04f 0a00 	mov.w	sl, #0
 8011122:	9700      	str	r7, [sp, #0]
 8011124:	4633      	mov	r3, r6
 8011126:	aa0f      	add	r2, sp, #60	; 0x3c
 8011128:	4621      	mov	r1, r4
 801112a:	4628      	mov	r0, r5
 801112c:	f000 f9d2 	bl	80114d4 <_printf_common>
 8011130:	3001      	adds	r0, #1
 8011132:	f040 808f 	bne.w	8011254 <_printf_float+0x1d4>
 8011136:	f04f 30ff 	mov.w	r0, #4294967295
 801113a:	b011      	add	sp, #68	; 0x44
 801113c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011140:	4642      	mov	r2, r8
 8011142:	4653      	mov	r3, sl
 8011144:	4640      	mov	r0, r8
 8011146:	4651      	mov	r1, sl
 8011148:	f7ef fcc8 	bl	8000adc <__aeabi_dcmpun>
 801114c:	b140      	cbz	r0, 8011160 <_printf_float+0xe0>
 801114e:	f1ba 0f00 	cmp.w	sl, #0
 8011152:	bfbc      	itt	lt
 8011154:	232d      	movlt	r3, #45	; 0x2d
 8011156:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801115a:	487e      	ldr	r0, [pc, #504]	; (8011354 <_printf_float+0x2d4>)
 801115c:	4b7e      	ldr	r3, [pc, #504]	; (8011358 <_printf_float+0x2d8>)
 801115e:	e7d4      	b.n	801110a <_printf_float+0x8a>
 8011160:	6863      	ldr	r3, [r4, #4]
 8011162:	1c5a      	adds	r2, r3, #1
 8011164:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8011168:	d142      	bne.n	80111f0 <_printf_float+0x170>
 801116a:	2306      	movs	r3, #6
 801116c:	6063      	str	r3, [r4, #4]
 801116e:	2200      	movs	r2, #0
 8011170:	9206      	str	r2, [sp, #24]
 8011172:	aa0e      	add	r2, sp, #56	; 0x38
 8011174:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8011178:	aa0d      	add	r2, sp, #52	; 0x34
 801117a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 801117e:	9203      	str	r2, [sp, #12]
 8011180:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011184:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011188:	6023      	str	r3, [r4, #0]
 801118a:	6863      	ldr	r3, [r4, #4]
 801118c:	9300      	str	r3, [sp, #0]
 801118e:	4642      	mov	r2, r8
 8011190:	4653      	mov	r3, sl
 8011192:	4628      	mov	r0, r5
 8011194:	910b      	str	r1, [sp, #44]	; 0x2c
 8011196:	f7ff fed5 	bl	8010f44 <__cvt>
 801119a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801119c:	2947      	cmp	r1, #71	; 0x47
 801119e:	4680      	mov	r8, r0
 80111a0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80111a2:	d108      	bne.n	80111b6 <_printf_float+0x136>
 80111a4:	1cc8      	adds	r0, r1, #3
 80111a6:	db02      	blt.n	80111ae <_printf_float+0x12e>
 80111a8:	6863      	ldr	r3, [r4, #4]
 80111aa:	4299      	cmp	r1, r3
 80111ac:	dd40      	ble.n	8011230 <_printf_float+0x1b0>
 80111ae:	f1a9 0902 	sub.w	r9, r9, #2
 80111b2:	fa5f f989 	uxtb.w	r9, r9
 80111b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80111ba:	d81f      	bhi.n	80111fc <_printf_float+0x17c>
 80111bc:	3901      	subs	r1, #1
 80111be:	464a      	mov	r2, r9
 80111c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80111c4:	910d      	str	r1, [sp, #52]	; 0x34
 80111c6:	f7ff ff1d 	bl	8011004 <__exponent>
 80111ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80111cc:	1813      	adds	r3, r2, r0
 80111ce:	2a01      	cmp	r2, #1
 80111d0:	4682      	mov	sl, r0
 80111d2:	6123      	str	r3, [r4, #16]
 80111d4:	dc02      	bgt.n	80111dc <_printf_float+0x15c>
 80111d6:	6822      	ldr	r2, [r4, #0]
 80111d8:	07d2      	lsls	r2, r2, #31
 80111da:	d501      	bpl.n	80111e0 <_printf_float+0x160>
 80111dc:	3301      	adds	r3, #1
 80111de:	6123      	str	r3, [r4, #16]
 80111e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d09c      	beq.n	8011122 <_printf_float+0xa2>
 80111e8:	232d      	movs	r3, #45	; 0x2d
 80111ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80111ee:	e798      	b.n	8011122 <_printf_float+0xa2>
 80111f0:	2947      	cmp	r1, #71	; 0x47
 80111f2:	d1bc      	bne.n	801116e <_printf_float+0xee>
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d1ba      	bne.n	801116e <_printf_float+0xee>
 80111f8:	2301      	movs	r3, #1
 80111fa:	e7b7      	b.n	801116c <_printf_float+0xec>
 80111fc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8011200:	d118      	bne.n	8011234 <_printf_float+0x1b4>
 8011202:	2900      	cmp	r1, #0
 8011204:	6863      	ldr	r3, [r4, #4]
 8011206:	dd0b      	ble.n	8011220 <_printf_float+0x1a0>
 8011208:	6121      	str	r1, [r4, #16]
 801120a:	b913      	cbnz	r3, 8011212 <_printf_float+0x192>
 801120c:	6822      	ldr	r2, [r4, #0]
 801120e:	07d0      	lsls	r0, r2, #31
 8011210:	d502      	bpl.n	8011218 <_printf_float+0x198>
 8011212:	3301      	adds	r3, #1
 8011214:	440b      	add	r3, r1
 8011216:	6123      	str	r3, [r4, #16]
 8011218:	65a1      	str	r1, [r4, #88]	; 0x58
 801121a:	f04f 0a00 	mov.w	sl, #0
 801121e:	e7df      	b.n	80111e0 <_printf_float+0x160>
 8011220:	b913      	cbnz	r3, 8011228 <_printf_float+0x1a8>
 8011222:	6822      	ldr	r2, [r4, #0]
 8011224:	07d2      	lsls	r2, r2, #31
 8011226:	d501      	bpl.n	801122c <_printf_float+0x1ac>
 8011228:	3302      	adds	r3, #2
 801122a:	e7f4      	b.n	8011216 <_printf_float+0x196>
 801122c:	2301      	movs	r3, #1
 801122e:	e7f2      	b.n	8011216 <_printf_float+0x196>
 8011230:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011236:	4299      	cmp	r1, r3
 8011238:	db05      	blt.n	8011246 <_printf_float+0x1c6>
 801123a:	6823      	ldr	r3, [r4, #0]
 801123c:	6121      	str	r1, [r4, #16]
 801123e:	07d8      	lsls	r0, r3, #31
 8011240:	d5ea      	bpl.n	8011218 <_printf_float+0x198>
 8011242:	1c4b      	adds	r3, r1, #1
 8011244:	e7e7      	b.n	8011216 <_printf_float+0x196>
 8011246:	2900      	cmp	r1, #0
 8011248:	bfd4      	ite	le
 801124a:	f1c1 0202 	rsble	r2, r1, #2
 801124e:	2201      	movgt	r2, #1
 8011250:	4413      	add	r3, r2
 8011252:	e7e0      	b.n	8011216 <_printf_float+0x196>
 8011254:	6823      	ldr	r3, [r4, #0]
 8011256:	055a      	lsls	r2, r3, #21
 8011258:	d407      	bmi.n	801126a <_printf_float+0x1ea>
 801125a:	6923      	ldr	r3, [r4, #16]
 801125c:	4642      	mov	r2, r8
 801125e:	4631      	mov	r1, r6
 8011260:	4628      	mov	r0, r5
 8011262:	47b8      	blx	r7
 8011264:	3001      	adds	r0, #1
 8011266:	d12b      	bne.n	80112c0 <_printf_float+0x240>
 8011268:	e765      	b.n	8011136 <_printf_float+0xb6>
 801126a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801126e:	f240 80dc 	bls.w	801142a <_printf_float+0x3aa>
 8011272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011276:	2200      	movs	r2, #0
 8011278:	2300      	movs	r3, #0
 801127a:	f7ef fbfd 	bl	8000a78 <__aeabi_dcmpeq>
 801127e:	2800      	cmp	r0, #0
 8011280:	d033      	beq.n	80112ea <_printf_float+0x26a>
 8011282:	4a36      	ldr	r2, [pc, #216]	; (801135c <_printf_float+0x2dc>)
 8011284:	2301      	movs	r3, #1
 8011286:	4631      	mov	r1, r6
 8011288:	4628      	mov	r0, r5
 801128a:	47b8      	blx	r7
 801128c:	3001      	adds	r0, #1
 801128e:	f43f af52 	beq.w	8011136 <_printf_float+0xb6>
 8011292:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011296:	429a      	cmp	r2, r3
 8011298:	db02      	blt.n	80112a0 <_printf_float+0x220>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	07d8      	lsls	r0, r3, #31
 801129e:	d50f      	bpl.n	80112c0 <_printf_float+0x240>
 80112a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80112a4:	4631      	mov	r1, r6
 80112a6:	4628      	mov	r0, r5
 80112a8:	47b8      	blx	r7
 80112aa:	3001      	adds	r0, #1
 80112ac:	f43f af43 	beq.w	8011136 <_printf_float+0xb6>
 80112b0:	f04f 0800 	mov.w	r8, #0
 80112b4:	f104 091a 	add.w	r9, r4, #26
 80112b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112ba:	3b01      	subs	r3, #1
 80112bc:	4543      	cmp	r3, r8
 80112be:	dc09      	bgt.n	80112d4 <_printf_float+0x254>
 80112c0:	6823      	ldr	r3, [r4, #0]
 80112c2:	079b      	lsls	r3, r3, #30
 80112c4:	f100 8101 	bmi.w	80114ca <_printf_float+0x44a>
 80112c8:	68e0      	ldr	r0, [r4, #12]
 80112ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80112cc:	4298      	cmp	r0, r3
 80112ce:	bfb8      	it	lt
 80112d0:	4618      	movlt	r0, r3
 80112d2:	e732      	b.n	801113a <_printf_float+0xba>
 80112d4:	2301      	movs	r3, #1
 80112d6:	464a      	mov	r2, r9
 80112d8:	4631      	mov	r1, r6
 80112da:	4628      	mov	r0, r5
 80112dc:	47b8      	blx	r7
 80112de:	3001      	adds	r0, #1
 80112e0:	f43f af29 	beq.w	8011136 <_printf_float+0xb6>
 80112e4:	f108 0801 	add.w	r8, r8, #1
 80112e8:	e7e6      	b.n	80112b8 <_printf_float+0x238>
 80112ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	dc37      	bgt.n	8011360 <_printf_float+0x2e0>
 80112f0:	4a1a      	ldr	r2, [pc, #104]	; (801135c <_printf_float+0x2dc>)
 80112f2:	2301      	movs	r3, #1
 80112f4:	4631      	mov	r1, r6
 80112f6:	4628      	mov	r0, r5
 80112f8:	47b8      	blx	r7
 80112fa:	3001      	adds	r0, #1
 80112fc:	f43f af1b 	beq.w	8011136 <_printf_float+0xb6>
 8011300:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8011304:	4313      	orrs	r3, r2
 8011306:	d102      	bne.n	801130e <_printf_float+0x28e>
 8011308:	6823      	ldr	r3, [r4, #0]
 801130a:	07d9      	lsls	r1, r3, #31
 801130c:	d5d8      	bpl.n	80112c0 <_printf_float+0x240>
 801130e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011312:	4631      	mov	r1, r6
 8011314:	4628      	mov	r0, r5
 8011316:	47b8      	blx	r7
 8011318:	3001      	adds	r0, #1
 801131a:	f43f af0c 	beq.w	8011136 <_printf_float+0xb6>
 801131e:	f04f 0900 	mov.w	r9, #0
 8011322:	f104 0a1a 	add.w	sl, r4, #26
 8011326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011328:	425b      	negs	r3, r3
 801132a:	454b      	cmp	r3, r9
 801132c:	dc01      	bgt.n	8011332 <_printf_float+0x2b2>
 801132e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011330:	e794      	b.n	801125c <_printf_float+0x1dc>
 8011332:	2301      	movs	r3, #1
 8011334:	4652      	mov	r2, sl
 8011336:	4631      	mov	r1, r6
 8011338:	4628      	mov	r0, r5
 801133a:	47b8      	blx	r7
 801133c:	3001      	adds	r0, #1
 801133e:	f43f aefa 	beq.w	8011136 <_printf_float+0xb6>
 8011342:	f109 0901 	add.w	r9, r9, #1
 8011346:	e7ee      	b.n	8011326 <_printf_float+0x2a6>
 8011348:	7fefffff 	.word	0x7fefffff
 801134c:	080159c4 	.word	0x080159c4
 8011350:	080159c8 	.word	0x080159c8
 8011354:	080159d0 	.word	0x080159d0
 8011358:	080159cc 	.word	0x080159cc
 801135c:	080159d4 	.word	0x080159d4
 8011360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011364:	429a      	cmp	r2, r3
 8011366:	bfa8      	it	ge
 8011368:	461a      	movge	r2, r3
 801136a:	2a00      	cmp	r2, #0
 801136c:	4691      	mov	r9, r2
 801136e:	dc37      	bgt.n	80113e0 <_printf_float+0x360>
 8011370:	f04f 0b00 	mov.w	fp, #0
 8011374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011378:	f104 021a 	add.w	r2, r4, #26
 801137c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011380:	ebaa 0309 	sub.w	r3, sl, r9
 8011384:	455b      	cmp	r3, fp
 8011386:	dc33      	bgt.n	80113f0 <_printf_float+0x370>
 8011388:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 801138c:	429a      	cmp	r2, r3
 801138e:	db3b      	blt.n	8011408 <_printf_float+0x388>
 8011390:	6823      	ldr	r3, [r4, #0]
 8011392:	07da      	lsls	r2, r3, #31
 8011394:	d438      	bmi.n	8011408 <_printf_float+0x388>
 8011396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011398:	990d      	ldr	r1, [sp, #52]	; 0x34
 801139a:	eba3 020a 	sub.w	r2, r3, sl
 801139e:	eba3 0901 	sub.w	r9, r3, r1
 80113a2:	4591      	cmp	r9, r2
 80113a4:	bfa8      	it	ge
 80113a6:	4691      	movge	r9, r2
 80113a8:	f1b9 0f00 	cmp.w	r9, #0
 80113ac:	dc34      	bgt.n	8011418 <_printf_float+0x398>
 80113ae:	f04f 0800 	mov.w	r8, #0
 80113b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113b6:	f104 0a1a 	add.w	sl, r4, #26
 80113ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80113be:	1a9b      	subs	r3, r3, r2
 80113c0:	eba3 0309 	sub.w	r3, r3, r9
 80113c4:	4543      	cmp	r3, r8
 80113c6:	f77f af7b 	ble.w	80112c0 <_printf_float+0x240>
 80113ca:	2301      	movs	r3, #1
 80113cc:	4652      	mov	r2, sl
 80113ce:	4631      	mov	r1, r6
 80113d0:	4628      	mov	r0, r5
 80113d2:	47b8      	blx	r7
 80113d4:	3001      	adds	r0, #1
 80113d6:	f43f aeae 	beq.w	8011136 <_printf_float+0xb6>
 80113da:	f108 0801 	add.w	r8, r8, #1
 80113de:	e7ec      	b.n	80113ba <_printf_float+0x33a>
 80113e0:	4613      	mov	r3, r2
 80113e2:	4631      	mov	r1, r6
 80113e4:	4642      	mov	r2, r8
 80113e6:	4628      	mov	r0, r5
 80113e8:	47b8      	blx	r7
 80113ea:	3001      	adds	r0, #1
 80113ec:	d1c0      	bne.n	8011370 <_printf_float+0x2f0>
 80113ee:	e6a2      	b.n	8011136 <_printf_float+0xb6>
 80113f0:	2301      	movs	r3, #1
 80113f2:	4631      	mov	r1, r6
 80113f4:	4628      	mov	r0, r5
 80113f6:	920b      	str	r2, [sp, #44]	; 0x2c
 80113f8:	47b8      	blx	r7
 80113fa:	3001      	adds	r0, #1
 80113fc:	f43f ae9b 	beq.w	8011136 <_printf_float+0xb6>
 8011400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011402:	f10b 0b01 	add.w	fp, fp, #1
 8011406:	e7b9      	b.n	801137c <_printf_float+0x2fc>
 8011408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801140c:	4631      	mov	r1, r6
 801140e:	4628      	mov	r0, r5
 8011410:	47b8      	blx	r7
 8011412:	3001      	adds	r0, #1
 8011414:	d1bf      	bne.n	8011396 <_printf_float+0x316>
 8011416:	e68e      	b.n	8011136 <_printf_float+0xb6>
 8011418:	464b      	mov	r3, r9
 801141a:	eb08 020a 	add.w	r2, r8, sl
 801141e:	4631      	mov	r1, r6
 8011420:	4628      	mov	r0, r5
 8011422:	47b8      	blx	r7
 8011424:	3001      	adds	r0, #1
 8011426:	d1c2      	bne.n	80113ae <_printf_float+0x32e>
 8011428:	e685      	b.n	8011136 <_printf_float+0xb6>
 801142a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801142c:	2a01      	cmp	r2, #1
 801142e:	dc01      	bgt.n	8011434 <_printf_float+0x3b4>
 8011430:	07db      	lsls	r3, r3, #31
 8011432:	d537      	bpl.n	80114a4 <_printf_float+0x424>
 8011434:	2301      	movs	r3, #1
 8011436:	4642      	mov	r2, r8
 8011438:	4631      	mov	r1, r6
 801143a:	4628      	mov	r0, r5
 801143c:	47b8      	blx	r7
 801143e:	3001      	adds	r0, #1
 8011440:	f43f ae79 	beq.w	8011136 <_printf_float+0xb6>
 8011444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011448:	4631      	mov	r1, r6
 801144a:	4628      	mov	r0, r5
 801144c:	47b8      	blx	r7
 801144e:	3001      	adds	r0, #1
 8011450:	f43f ae71 	beq.w	8011136 <_printf_float+0xb6>
 8011454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011458:	2200      	movs	r2, #0
 801145a:	2300      	movs	r3, #0
 801145c:	f7ef fb0c 	bl	8000a78 <__aeabi_dcmpeq>
 8011460:	b9d8      	cbnz	r0, 801149a <_printf_float+0x41a>
 8011462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011464:	f108 0201 	add.w	r2, r8, #1
 8011468:	3b01      	subs	r3, #1
 801146a:	4631      	mov	r1, r6
 801146c:	4628      	mov	r0, r5
 801146e:	47b8      	blx	r7
 8011470:	3001      	adds	r0, #1
 8011472:	d10e      	bne.n	8011492 <_printf_float+0x412>
 8011474:	e65f      	b.n	8011136 <_printf_float+0xb6>
 8011476:	2301      	movs	r3, #1
 8011478:	464a      	mov	r2, r9
 801147a:	4631      	mov	r1, r6
 801147c:	4628      	mov	r0, r5
 801147e:	47b8      	blx	r7
 8011480:	3001      	adds	r0, #1
 8011482:	f43f ae58 	beq.w	8011136 <_printf_float+0xb6>
 8011486:	f108 0801 	add.w	r8, r8, #1
 801148a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801148c:	3b01      	subs	r3, #1
 801148e:	4543      	cmp	r3, r8
 8011490:	dcf1      	bgt.n	8011476 <_printf_float+0x3f6>
 8011492:	4653      	mov	r3, sl
 8011494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011498:	e6e1      	b.n	801125e <_printf_float+0x1de>
 801149a:	f04f 0800 	mov.w	r8, #0
 801149e:	f104 091a 	add.w	r9, r4, #26
 80114a2:	e7f2      	b.n	801148a <_printf_float+0x40a>
 80114a4:	2301      	movs	r3, #1
 80114a6:	4642      	mov	r2, r8
 80114a8:	e7df      	b.n	801146a <_printf_float+0x3ea>
 80114aa:	2301      	movs	r3, #1
 80114ac:	464a      	mov	r2, r9
 80114ae:	4631      	mov	r1, r6
 80114b0:	4628      	mov	r0, r5
 80114b2:	47b8      	blx	r7
 80114b4:	3001      	adds	r0, #1
 80114b6:	f43f ae3e 	beq.w	8011136 <_printf_float+0xb6>
 80114ba:	f108 0801 	add.w	r8, r8, #1
 80114be:	68e3      	ldr	r3, [r4, #12]
 80114c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80114c2:	1a5b      	subs	r3, r3, r1
 80114c4:	4543      	cmp	r3, r8
 80114c6:	dcf0      	bgt.n	80114aa <_printf_float+0x42a>
 80114c8:	e6fe      	b.n	80112c8 <_printf_float+0x248>
 80114ca:	f04f 0800 	mov.w	r8, #0
 80114ce:	f104 0919 	add.w	r9, r4, #25
 80114d2:	e7f4      	b.n	80114be <_printf_float+0x43e>

080114d4 <_printf_common>:
 80114d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114d8:	4616      	mov	r6, r2
 80114da:	4699      	mov	r9, r3
 80114dc:	688a      	ldr	r2, [r1, #8]
 80114de:	690b      	ldr	r3, [r1, #16]
 80114e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80114e4:	4293      	cmp	r3, r2
 80114e6:	bfb8      	it	lt
 80114e8:	4613      	movlt	r3, r2
 80114ea:	6033      	str	r3, [r6, #0]
 80114ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80114f0:	4607      	mov	r7, r0
 80114f2:	460c      	mov	r4, r1
 80114f4:	b10a      	cbz	r2, 80114fa <_printf_common+0x26>
 80114f6:	3301      	adds	r3, #1
 80114f8:	6033      	str	r3, [r6, #0]
 80114fa:	6823      	ldr	r3, [r4, #0]
 80114fc:	0699      	lsls	r1, r3, #26
 80114fe:	bf42      	ittt	mi
 8011500:	6833      	ldrmi	r3, [r6, #0]
 8011502:	3302      	addmi	r3, #2
 8011504:	6033      	strmi	r3, [r6, #0]
 8011506:	6825      	ldr	r5, [r4, #0]
 8011508:	f015 0506 	ands.w	r5, r5, #6
 801150c:	d106      	bne.n	801151c <_printf_common+0x48>
 801150e:	f104 0a19 	add.w	sl, r4, #25
 8011512:	68e3      	ldr	r3, [r4, #12]
 8011514:	6832      	ldr	r2, [r6, #0]
 8011516:	1a9b      	subs	r3, r3, r2
 8011518:	42ab      	cmp	r3, r5
 801151a:	dc26      	bgt.n	801156a <_printf_common+0x96>
 801151c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011520:	1e13      	subs	r3, r2, #0
 8011522:	6822      	ldr	r2, [r4, #0]
 8011524:	bf18      	it	ne
 8011526:	2301      	movne	r3, #1
 8011528:	0692      	lsls	r2, r2, #26
 801152a:	d42b      	bmi.n	8011584 <_printf_common+0xb0>
 801152c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011530:	4649      	mov	r1, r9
 8011532:	4638      	mov	r0, r7
 8011534:	47c0      	blx	r8
 8011536:	3001      	adds	r0, #1
 8011538:	d01e      	beq.n	8011578 <_printf_common+0xa4>
 801153a:	6823      	ldr	r3, [r4, #0]
 801153c:	68e5      	ldr	r5, [r4, #12]
 801153e:	6832      	ldr	r2, [r6, #0]
 8011540:	f003 0306 	and.w	r3, r3, #6
 8011544:	2b04      	cmp	r3, #4
 8011546:	bf08      	it	eq
 8011548:	1aad      	subeq	r5, r5, r2
 801154a:	68a3      	ldr	r3, [r4, #8]
 801154c:	6922      	ldr	r2, [r4, #16]
 801154e:	bf0c      	ite	eq
 8011550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011554:	2500      	movne	r5, #0
 8011556:	4293      	cmp	r3, r2
 8011558:	bfc4      	itt	gt
 801155a:	1a9b      	subgt	r3, r3, r2
 801155c:	18ed      	addgt	r5, r5, r3
 801155e:	2600      	movs	r6, #0
 8011560:	341a      	adds	r4, #26
 8011562:	42b5      	cmp	r5, r6
 8011564:	d11a      	bne.n	801159c <_printf_common+0xc8>
 8011566:	2000      	movs	r0, #0
 8011568:	e008      	b.n	801157c <_printf_common+0xa8>
 801156a:	2301      	movs	r3, #1
 801156c:	4652      	mov	r2, sl
 801156e:	4649      	mov	r1, r9
 8011570:	4638      	mov	r0, r7
 8011572:	47c0      	blx	r8
 8011574:	3001      	adds	r0, #1
 8011576:	d103      	bne.n	8011580 <_printf_common+0xac>
 8011578:	f04f 30ff 	mov.w	r0, #4294967295
 801157c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011580:	3501      	adds	r5, #1
 8011582:	e7c6      	b.n	8011512 <_printf_common+0x3e>
 8011584:	18e1      	adds	r1, r4, r3
 8011586:	1c5a      	adds	r2, r3, #1
 8011588:	2030      	movs	r0, #48	; 0x30
 801158a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801158e:	4422      	add	r2, r4
 8011590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011598:	3302      	adds	r3, #2
 801159a:	e7c7      	b.n	801152c <_printf_common+0x58>
 801159c:	2301      	movs	r3, #1
 801159e:	4622      	mov	r2, r4
 80115a0:	4649      	mov	r1, r9
 80115a2:	4638      	mov	r0, r7
 80115a4:	47c0      	blx	r8
 80115a6:	3001      	adds	r0, #1
 80115a8:	d0e6      	beq.n	8011578 <_printf_common+0xa4>
 80115aa:	3601      	adds	r6, #1
 80115ac:	e7d9      	b.n	8011562 <_printf_common+0x8e>
	...

080115b0 <_printf_i>:
 80115b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115b4:	7e0f      	ldrb	r7, [r1, #24]
 80115b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80115b8:	2f78      	cmp	r7, #120	; 0x78
 80115ba:	4691      	mov	r9, r2
 80115bc:	4680      	mov	r8, r0
 80115be:	460c      	mov	r4, r1
 80115c0:	469a      	mov	sl, r3
 80115c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80115c6:	d807      	bhi.n	80115d8 <_printf_i+0x28>
 80115c8:	2f62      	cmp	r7, #98	; 0x62
 80115ca:	d80a      	bhi.n	80115e2 <_printf_i+0x32>
 80115cc:	2f00      	cmp	r7, #0
 80115ce:	f000 80d8 	beq.w	8011782 <_printf_i+0x1d2>
 80115d2:	2f58      	cmp	r7, #88	; 0x58
 80115d4:	f000 80a3 	beq.w	801171e <_printf_i+0x16e>
 80115d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80115e0:	e03a      	b.n	8011658 <_printf_i+0xa8>
 80115e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80115e6:	2b15      	cmp	r3, #21
 80115e8:	d8f6      	bhi.n	80115d8 <_printf_i+0x28>
 80115ea:	a101      	add	r1, pc, #4	; (adr r1, 80115f0 <_printf_i+0x40>)
 80115ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80115f0:	08011649 	.word	0x08011649
 80115f4:	0801165d 	.word	0x0801165d
 80115f8:	080115d9 	.word	0x080115d9
 80115fc:	080115d9 	.word	0x080115d9
 8011600:	080115d9 	.word	0x080115d9
 8011604:	080115d9 	.word	0x080115d9
 8011608:	0801165d 	.word	0x0801165d
 801160c:	080115d9 	.word	0x080115d9
 8011610:	080115d9 	.word	0x080115d9
 8011614:	080115d9 	.word	0x080115d9
 8011618:	080115d9 	.word	0x080115d9
 801161c:	08011769 	.word	0x08011769
 8011620:	0801168d 	.word	0x0801168d
 8011624:	0801174b 	.word	0x0801174b
 8011628:	080115d9 	.word	0x080115d9
 801162c:	080115d9 	.word	0x080115d9
 8011630:	0801178b 	.word	0x0801178b
 8011634:	080115d9 	.word	0x080115d9
 8011638:	0801168d 	.word	0x0801168d
 801163c:	080115d9 	.word	0x080115d9
 8011640:	080115d9 	.word	0x080115d9
 8011644:	08011753 	.word	0x08011753
 8011648:	682b      	ldr	r3, [r5, #0]
 801164a:	1d1a      	adds	r2, r3, #4
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	602a      	str	r2, [r5, #0]
 8011650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011658:	2301      	movs	r3, #1
 801165a:	e0a3      	b.n	80117a4 <_printf_i+0x1f4>
 801165c:	6820      	ldr	r0, [r4, #0]
 801165e:	6829      	ldr	r1, [r5, #0]
 8011660:	0606      	lsls	r6, r0, #24
 8011662:	f101 0304 	add.w	r3, r1, #4
 8011666:	d50a      	bpl.n	801167e <_printf_i+0xce>
 8011668:	680e      	ldr	r6, [r1, #0]
 801166a:	602b      	str	r3, [r5, #0]
 801166c:	2e00      	cmp	r6, #0
 801166e:	da03      	bge.n	8011678 <_printf_i+0xc8>
 8011670:	232d      	movs	r3, #45	; 0x2d
 8011672:	4276      	negs	r6, r6
 8011674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011678:	485e      	ldr	r0, [pc, #376]	; (80117f4 <_printf_i+0x244>)
 801167a:	230a      	movs	r3, #10
 801167c:	e019      	b.n	80116b2 <_printf_i+0x102>
 801167e:	680e      	ldr	r6, [r1, #0]
 8011680:	602b      	str	r3, [r5, #0]
 8011682:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011686:	bf18      	it	ne
 8011688:	b236      	sxthne	r6, r6
 801168a:	e7ef      	b.n	801166c <_printf_i+0xbc>
 801168c:	682b      	ldr	r3, [r5, #0]
 801168e:	6820      	ldr	r0, [r4, #0]
 8011690:	1d19      	adds	r1, r3, #4
 8011692:	6029      	str	r1, [r5, #0]
 8011694:	0601      	lsls	r1, r0, #24
 8011696:	d501      	bpl.n	801169c <_printf_i+0xec>
 8011698:	681e      	ldr	r6, [r3, #0]
 801169a:	e002      	b.n	80116a2 <_printf_i+0xf2>
 801169c:	0646      	lsls	r6, r0, #25
 801169e:	d5fb      	bpl.n	8011698 <_printf_i+0xe8>
 80116a0:	881e      	ldrh	r6, [r3, #0]
 80116a2:	4854      	ldr	r0, [pc, #336]	; (80117f4 <_printf_i+0x244>)
 80116a4:	2f6f      	cmp	r7, #111	; 0x6f
 80116a6:	bf0c      	ite	eq
 80116a8:	2308      	moveq	r3, #8
 80116aa:	230a      	movne	r3, #10
 80116ac:	2100      	movs	r1, #0
 80116ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80116b2:	6865      	ldr	r5, [r4, #4]
 80116b4:	60a5      	str	r5, [r4, #8]
 80116b6:	2d00      	cmp	r5, #0
 80116b8:	bfa2      	ittt	ge
 80116ba:	6821      	ldrge	r1, [r4, #0]
 80116bc:	f021 0104 	bicge.w	r1, r1, #4
 80116c0:	6021      	strge	r1, [r4, #0]
 80116c2:	b90e      	cbnz	r6, 80116c8 <_printf_i+0x118>
 80116c4:	2d00      	cmp	r5, #0
 80116c6:	d04d      	beq.n	8011764 <_printf_i+0x1b4>
 80116c8:	4615      	mov	r5, r2
 80116ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80116ce:	fb03 6711 	mls	r7, r3, r1, r6
 80116d2:	5dc7      	ldrb	r7, [r0, r7]
 80116d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80116d8:	4637      	mov	r7, r6
 80116da:	42bb      	cmp	r3, r7
 80116dc:	460e      	mov	r6, r1
 80116de:	d9f4      	bls.n	80116ca <_printf_i+0x11a>
 80116e0:	2b08      	cmp	r3, #8
 80116e2:	d10b      	bne.n	80116fc <_printf_i+0x14c>
 80116e4:	6823      	ldr	r3, [r4, #0]
 80116e6:	07de      	lsls	r6, r3, #31
 80116e8:	d508      	bpl.n	80116fc <_printf_i+0x14c>
 80116ea:	6923      	ldr	r3, [r4, #16]
 80116ec:	6861      	ldr	r1, [r4, #4]
 80116ee:	4299      	cmp	r1, r3
 80116f0:	bfde      	ittt	le
 80116f2:	2330      	movle	r3, #48	; 0x30
 80116f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80116f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80116fc:	1b52      	subs	r2, r2, r5
 80116fe:	6122      	str	r2, [r4, #16]
 8011700:	f8cd a000 	str.w	sl, [sp]
 8011704:	464b      	mov	r3, r9
 8011706:	aa03      	add	r2, sp, #12
 8011708:	4621      	mov	r1, r4
 801170a:	4640      	mov	r0, r8
 801170c:	f7ff fee2 	bl	80114d4 <_printf_common>
 8011710:	3001      	adds	r0, #1
 8011712:	d14c      	bne.n	80117ae <_printf_i+0x1fe>
 8011714:	f04f 30ff 	mov.w	r0, #4294967295
 8011718:	b004      	add	sp, #16
 801171a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801171e:	4835      	ldr	r0, [pc, #212]	; (80117f4 <_printf_i+0x244>)
 8011720:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011724:	6829      	ldr	r1, [r5, #0]
 8011726:	6823      	ldr	r3, [r4, #0]
 8011728:	f851 6b04 	ldr.w	r6, [r1], #4
 801172c:	6029      	str	r1, [r5, #0]
 801172e:	061d      	lsls	r5, r3, #24
 8011730:	d514      	bpl.n	801175c <_printf_i+0x1ac>
 8011732:	07df      	lsls	r7, r3, #31
 8011734:	bf44      	itt	mi
 8011736:	f043 0320 	orrmi.w	r3, r3, #32
 801173a:	6023      	strmi	r3, [r4, #0]
 801173c:	b91e      	cbnz	r6, 8011746 <_printf_i+0x196>
 801173e:	6823      	ldr	r3, [r4, #0]
 8011740:	f023 0320 	bic.w	r3, r3, #32
 8011744:	6023      	str	r3, [r4, #0]
 8011746:	2310      	movs	r3, #16
 8011748:	e7b0      	b.n	80116ac <_printf_i+0xfc>
 801174a:	6823      	ldr	r3, [r4, #0]
 801174c:	f043 0320 	orr.w	r3, r3, #32
 8011750:	6023      	str	r3, [r4, #0]
 8011752:	2378      	movs	r3, #120	; 0x78
 8011754:	4828      	ldr	r0, [pc, #160]	; (80117f8 <_printf_i+0x248>)
 8011756:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801175a:	e7e3      	b.n	8011724 <_printf_i+0x174>
 801175c:	0659      	lsls	r1, r3, #25
 801175e:	bf48      	it	mi
 8011760:	b2b6      	uxthmi	r6, r6
 8011762:	e7e6      	b.n	8011732 <_printf_i+0x182>
 8011764:	4615      	mov	r5, r2
 8011766:	e7bb      	b.n	80116e0 <_printf_i+0x130>
 8011768:	682b      	ldr	r3, [r5, #0]
 801176a:	6826      	ldr	r6, [r4, #0]
 801176c:	6961      	ldr	r1, [r4, #20]
 801176e:	1d18      	adds	r0, r3, #4
 8011770:	6028      	str	r0, [r5, #0]
 8011772:	0635      	lsls	r5, r6, #24
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	d501      	bpl.n	801177c <_printf_i+0x1cc>
 8011778:	6019      	str	r1, [r3, #0]
 801177a:	e002      	b.n	8011782 <_printf_i+0x1d2>
 801177c:	0670      	lsls	r0, r6, #25
 801177e:	d5fb      	bpl.n	8011778 <_printf_i+0x1c8>
 8011780:	8019      	strh	r1, [r3, #0]
 8011782:	2300      	movs	r3, #0
 8011784:	6123      	str	r3, [r4, #16]
 8011786:	4615      	mov	r5, r2
 8011788:	e7ba      	b.n	8011700 <_printf_i+0x150>
 801178a:	682b      	ldr	r3, [r5, #0]
 801178c:	1d1a      	adds	r2, r3, #4
 801178e:	602a      	str	r2, [r5, #0]
 8011790:	681d      	ldr	r5, [r3, #0]
 8011792:	6862      	ldr	r2, [r4, #4]
 8011794:	2100      	movs	r1, #0
 8011796:	4628      	mov	r0, r5
 8011798:	f7ee fcfa 	bl	8000190 <memchr>
 801179c:	b108      	cbz	r0, 80117a2 <_printf_i+0x1f2>
 801179e:	1b40      	subs	r0, r0, r5
 80117a0:	6060      	str	r0, [r4, #4]
 80117a2:	6863      	ldr	r3, [r4, #4]
 80117a4:	6123      	str	r3, [r4, #16]
 80117a6:	2300      	movs	r3, #0
 80117a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117ac:	e7a8      	b.n	8011700 <_printf_i+0x150>
 80117ae:	6923      	ldr	r3, [r4, #16]
 80117b0:	462a      	mov	r2, r5
 80117b2:	4649      	mov	r1, r9
 80117b4:	4640      	mov	r0, r8
 80117b6:	47d0      	blx	sl
 80117b8:	3001      	adds	r0, #1
 80117ba:	d0ab      	beq.n	8011714 <_printf_i+0x164>
 80117bc:	6823      	ldr	r3, [r4, #0]
 80117be:	079b      	lsls	r3, r3, #30
 80117c0:	d413      	bmi.n	80117ea <_printf_i+0x23a>
 80117c2:	68e0      	ldr	r0, [r4, #12]
 80117c4:	9b03      	ldr	r3, [sp, #12]
 80117c6:	4298      	cmp	r0, r3
 80117c8:	bfb8      	it	lt
 80117ca:	4618      	movlt	r0, r3
 80117cc:	e7a4      	b.n	8011718 <_printf_i+0x168>
 80117ce:	2301      	movs	r3, #1
 80117d0:	4632      	mov	r2, r6
 80117d2:	4649      	mov	r1, r9
 80117d4:	4640      	mov	r0, r8
 80117d6:	47d0      	blx	sl
 80117d8:	3001      	adds	r0, #1
 80117da:	d09b      	beq.n	8011714 <_printf_i+0x164>
 80117dc:	3501      	adds	r5, #1
 80117de:	68e3      	ldr	r3, [r4, #12]
 80117e0:	9903      	ldr	r1, [sp, #12]
 80117e2:	1a5b      	subs	r3, r3, r1
 80117e4:	42ab      	cmp	r3, r5
 80117e6:	dcf2      	bgt.n	80117ce <_printf_i+0x21e>
 80117e8:	e7eb      	b.n	80117c2 <_printf_i+0x212>
 80117ea:	2500      	movs	r5, #0
 80117ec:	f104 0619 	add.w	r6, r4, #25
 80117f0:	e7f5      	b.n	80117de <_printf_i+0x22e>
 80117f2:	bf00      	nop
 80117f4:	080159d6 	.word	0x080159d6
 80117f8:	080159e7 	.word	0x080159e7

080117fc <siprintf>:
 80117fc:	b40e      	push	{r1, r2, r3}
 80117fe:	b500      	push	{lr}
 8011800:	b09c      	sub	sp, #112	; 0x70
 8011802:	ab1d      	add	r3, sp, #116	; 0x74
 8011804:	9002      	str	r0, [sp, #8]
 8011806:	9006      	str	r0, [sp, #24]
 8011808:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801180c:	4809      	ldr	r0, [pc, #36]	; (8011834 <siprintf+0x38>)
 801180e:	9107      	str	r1, [sp, #28]
 8011810:	9104      	str	r1, [sp, #16]
 8011812:	4909      	ldr	r1, [pc, #36]	; (8011838 <siprintf+0x3c>)
 8011814:	f853 2b04 	ldr.w	r2, [r3], #4
 8011818:	9105      	str	r1, [sp, #20]
 801181a:	6800      	ldr	r0, [r0, #0]
 801181c:	9301      	str	r3, [sp, #4]
 801181e:	a902      	add	r1, sp, #8
 8011820:	f001 fc30 	bl	8013084 <_svfiprintf_r>
 8011824:	9b02      	ldr	r3, [sp, #8]
 8011826:	2200      	movs	r2, #0
 8011828:	701a      	strb	r2, [r3, #0]
 801182a:	b01c      	add	sp, #112	; 0x70
 801182c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011830:	b003      	add	sp, #12
 8011832:	4770      	bx	lr
 8011834:	2000005c 	.word	0x2000005c
 8011838:	ffff0208 	.word	0xffff0208

0801183c <strcat>:
 801183c:	b510      	push	{r4, lr}
 801183e:	4602      	mov	r2, r0
 8011840:	7814      	ldrb	r4, [r2, #0]
 8011842:	4613      	mov	r3, r2
 8011844:	3201      	adds	r2, #1
 8011846:	2c00      	cmp	r4, #0
 8011848:	d1fa      	bne.n	8011840 <strcat+0x4>
 801184a:	3b01      	subs	r3, #1
 801184c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011850:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011854:	2a00      	cmp	r2, #0
 8011856:	d1f9      	bne.n	801184c <strcat+0x10>
 8011858:	bd10      	pop	{r4, pc}

0801185a <strchr>:
 801185a:	b2c9      	uxtb	r1, r1
 801185c:	4603      	mov	r3, r0
 801185e:	4618      	mov	r0, r3
 8011860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011864:	b112      	cbz	r2, 801186c <strchr+0x12>
 8011866:	428a      	cmp	r2, r1
 8011868:	d1f9      	bne.n	801185e <strchr+0x4>
 801186a:	4770      	bx	lr
 801186c:	2900      	cmp	r1, #0
 801186e:	bf18      	it	ne
 8011870:	2000      	movne	r0, #0
 8011872:	4770      	bx	lr

08011874 <strcpy>:
 8011874:	4603      	mov	r3, r0
 8011876:	f811 2b01 	ldrb.w	r2, [r1], #1
 801187a:	f803 2b01 	strb.w	r2, [r3], #1
 801187e:	2a00      	cmp	r2, #0
 8011880:	d1f9      	bne.n	8011876 <strcpy+0x2>
 8011882:	4770      	bx	lr

08011884 <strncmp>:
 8011884:	b510      	push	{r4, lr}
 8011886:	4603      	mov	r3, r0
 8011888:	b172      	cbz	r2, 80118a8 <strncmp+0x24>
 801188a:	3901      	subs	r1, #1
 801188c:	1884      	adds	r4, r0, r2
 801188e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011892:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011896:	4290      	cmp	r0, r2
 8011898:	d101      	bne.n	801189e <strncmp+0x1a>
 801189a:	42a3      	cmp	r3, r4
 801189c:	d101      	bne.n	80118a2 <strncmp+0x1e>
 801189e:	1a80      	subs	r0, r0, r2
 80118a0:	bd10      	pop	{r4, pc}
 80118a2:	2800      	cmp	r0, #0
 80118a4:	d1f3      	bne.n	801188e <strncmp+0xa>
 80118a6:	e7fa      	b.n	801189e <strncmp+0x1a>
 80118a8:	4610      	mov	r0, r2
 80118aa:	e7f9      	b.n	80118a0 <strncmp+0x1c>

080118ac <strstr>:
 80118ac:	780a      	ldrb	r2, [r1, #0]
 80118ae:	b570      	push	{r4, r5, r6, lr}
 80118b0:	b96a      	cbnz	r2, 80118ce <strstr+0x22>
 80118b2:	bd70      	pop	{r4, r5, r6, pc}
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d109      	bne.n	80118cc <strstr+0x20>
 80118b8:	460c      	mov	r4, r1
 80118ba:	4605      	mov	r5, r0
 80118bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d0f6      	beq.n	80118b2 <strstr+0x6>
 80118c4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80118c8:	429e      	cmp	r6, r3
 80118ca:	d0f7      	beq.n	80118bc <strstr+0x10>
 80118cc:	3001      	adds	r0, #1
 80118ce:	7803      	ldrb	r3, [r0, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1ef      	bne.n	80118b4 <strstr+0x8>
 80118d4:	4618      	mov	r0, r3
 80118d6:	e7ec      	b.n	80118b2 <strstr+0x6>

080118d8 <_strtol_l.constprop.0>:
 80118d8:	2b01      	cmp	r3, #1
 80118da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118de:	4680      	mov	r8, r0
 80118e0:	d001      	beq.n	80118e6 <_strtol_l.constprop.0+0xe>
 80118e2:	2b24      	cmp	r3, #36	; 0x24
 80118e4:	d906      	bls.n	80118f4 <_strtol_l.constprop.0+0x1c>
 80118e6:	f7ff faed 	bl	8010ec4 <__errno>
 80118ea:	2316      	movs	r3, #22
 80118ec:	6003      	str	r3, [r0, #0]
 80118ee:	2000      	movs	r0, #0
 80118f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f4:	4f35      	ldr	r7, [pc, #212]	; (80119cc <_strtol_l.constprop.0+0xf4>)
 80118f6:	460d      	mov	r5, r1
 80118f8:	4628      	mov	r0, r5
 80118fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80118fe:	5de6      	ldrb	r6, [r4, r7]
 8011900:	f016 0608 	ands.w	r6, r6, #8
 8011904:	d1f8      	bne.n	80118f8 <_strtol_l.constprop.0+0x20>
 8011906:	2c2d      	cmp	r4, #45	; 0x2d
 8011908:	d12f      	bne.n	801196a <_strtol_l.constprop.0+0x92>
 801190a:	782c      	ldrb	r4, [r5, #0]
 801190c:	2601      	movs	r6, #1
 801190e:	1c85      	adds	r5, r0, #2
 8011910:	2b00      	cmp	r3, #0
 8011912:	d057      	beq.n	80119c4 <_strtol_l.constprop.0+0xec>
 8011914:	2b10      	cmp	r3, #16
 8011916:	d109      	bne.n	801192c <_strtol_l.constprop.0+0x54>
 8011918:	2c30      	cmp	r4, #48	; 0x30
 801191a:	d107      	bne.n	801192c <_strtol_l.constprop.0+0x54>
 801191c:	7828      	ldrb	r0, [r5, #0]
 801191e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011922:	2858      	cmp	r0, #88	; 0x58
 8011924:	d149      	bne.n	80119ba <_strtol_l.constprop.0+0xe2>
 8011926:	786c      	ldrb	r4, [r5, #1]
 8011928:	2310      	movs	r3, #16
 801192a:	3502      	adds	r5, #2
 801192c:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8011930:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011934:	2700      	movs	r7, #0
 8011936:	fbbe f9f3 	udiv	r9, lr, r3
 801193a:	4638      	mov	r0, r7
 801193c:	fb03 ea19 	mls	sl, r3, r9, lr
 8011940:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011944:	f1bc 0f09 	cmp.w	ip, #9
 8011948:	d814      	bhi.n	8011974 <_strtol_l.constprop.0+0x9c>
 801194a:	4664      	mov	r4, ip
 801194c:	42a3      	cmp	r3, r4
 801194e:	dd22      	ble.n	8011996 <_strtol_l.constprop.0+0xbe>
 8011950:	2f00      	cmp	r7, #0
 8011952:	db1d      	blt.n	8011990 <_strtol_l.constprop.0+0xb8>
 8011954:	4581      	cmp	r9, r0
 8011956:	d31b      	bcc.n	8011990 <_strtol_l.constprop.0+0xb8>
 8011958:	d101      	bne.n	801195e <_strtol_l.constprop.0+0x86>
 801195a:	45a2      	cmp	sl, r4
 801195c:	db18      	blt.n	8011990 <_strtol_l.constprop.0+0xb8>
 801195e:	fb00 4003 	mla	r0, r0, r3, r4
 8011962:	2701      	movs	r7, #1
 8011964:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011968:	e7ea      	b.n	8011940 <_strtol_l.constprop.0+0x68>
 801196a:	2c2b      	cmp	r4, #43	; 0x2b
 801196c:	bf04      	itt	eq
 801196e:	782c      	ldrbeq	r4, [r5, #0]
 8011970:	1c85      	addeq	r5, r0, #2
 8011972:	e7cd      	b.n	8011910 <_strtol_l.constprop.0+0x38>
 8011974:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011978:	f1bc 0f19 	cmp.w	ip, #25
 801197c:	d801      	bhi.n	8011982 <_strtol_l.constprop.0+0xaa>
 801197e:	3c37      	subs	r4, #55	; 0x37
 8011980:	e7e4      	b.n	801194c <_strtol_l.constprop.0+0x74>
 8011982:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011986:	f1bc 0f19 	cmp.w	ip, #25
 801198a:	d804      	bhi.n	8011996 <_strtol_l.constprop.0+0xbe>
 801198c:	3c57      	subs	r4, #87	; 0x57
 801198e:	e7dd      	b.n	801194c <_strtol_l.constprop.0+0x74>
 8011990:	f04f 37ff 	mov.w	r7, #4294967295
 8011994:	e7e6      	b.n	8011964 <_strtol_l.constprop.0+0x8c>
 8011996:	2f00      	cmp	r7, #0
 8011998:	da07      	bge.n	80119aa <_strtol_l.constprop.0+0xd2>
 801199a:	2322      	movs	r3, #34	; 0x22
 801199c:	f8c8 3000 	str.w	r3, [r8]
 80119a0:	4670      	mov	r0, lr
 80119a2:	2a00      	cmp	r2, #0
 80119a4:	d0a4      	beq.n	80118f0 <_strtol_l.constprop.0+0x18>
 80119a6:	1e69      	subs	r1, r5, #1
 80119a8:	e005      	b.n	80119b6 <_strtol_l.constprop.0+0xde>
 80119aa:	b106      	cbz	r6, 80119ae <_strtol_l.constprop.0+0xd6>
 80119ac:	4240      	negs	r0, r0
 80119ae:	2a00      	cmp	r2, #0
 80119b0:	d09e      	beq.n	80118f0 <_strtol_l.constprop.0+0x18>
 80119b2:	2f00      	cmp	r7, #0
 80119b4:	d1f7      	bne.n	80119a6 <_strtol_l.constprop.0+0xce>
 80119b6:	6011      	str	r1, [r2, #0]
 80119b8:	e79a      	b.n	80118f0 <_strtol_l.constprop.0+0x18>
 80119ba:	2430      	movs	r4, #48	; 0x30
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d1b5      	bne.n	801192c <_strtol_l.constprop.0+0x54>
 80119c0:	2308      	movs	r3, #8
 80119c2:	e7b3      	b.n	801192c <_strtol_l.constprop.0+0x54>
 80119c4:	2c30      	cmp	r4, #48	; 0x30
 80119c6:	d0a9      	beq.n	801191c <_strtol_l.constprop.0+0x44>
 80119c8:	230a      	movs	r3, #10
 80119ca:	e7af      	b.n	801192c <_strtol_l.constprop.0+0x54>
 80119cc:	080158bd 	.word	0x080158bd

080119d0 <strtol>:
 80119d0:	4613      	mov	r3, r2
 80119d2:	460a      	mov	r2, r1
 80119d4:	4601      	mov	r1, r0
 80119d6:	4802      	ldr	r0, [pc, #8]	; (80119e0 <strtol+0x10>)
 80119d8:	6800      	ldr	r0, [r0, #0]
 80119da:	f7ff bf7d 	b.w	80118d8 <_strtol_l.constprop.0>
 80119de:	bf00      	nop
 80119e0:	2000005c 	.word	0x2000005c

080119e4 <quorem>:
 80119e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e8:	6903      	ldr	r3, [r0, #16]
 80119ea:	690c      	ldr	r4, [r1, #16]
 80119ec:	42a3      	cmp	r3, r4
 80119ee:	4607      	mov	r7, r0
 80119f0:	db7d      	blt.n	8011aee <quorem+0x10a>
 80119f2:	3c01      	subs	r4, #1
 80119f4:	f101 0814 	add.w	r8, r1, #20
 80119f8:	f100 0514 	add.w	r5, r0, #20
 80119fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011a00:	9301      	str	r3, [sp, #4]
 8011a02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011a06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011a0a:	3301      	adds	r3, #1
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011a12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011a16:	fbb2 f6f3 	udiv	r6, r2, r3
 8011a1a:	d32e      	bcc.n	8011a7a <quorem+0x96>
 8011a1c:	f04f 0e00 	mov.w	lr, #0
 8011a20:	4640      	mov	r0, r8
 8011a22:	46ac      	mov	ip, r5
 8011a24:	46f2      	mov	sl, lr
 8011a26:	f850 2b04 	ldr.w	r2, [r0], #4
 8011a2a:	b293      	uxth	r3, r2
 8011a2c:	fb06 e303 	mla	r3, r6, r3, lr
 8011a30:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011a34:	0c12      	lsrs	r2, r2, #16
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	fb06 e202 	mla	r2, r6, r2, lr
 8011a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8011a40:	f8dc a000 	ldr.w	sl, [ip]
 8011a44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011a48:	b292      	uxth	r2, r2
 8011a4a:	fa13 f38a 	uxtah	r3, r3, sl
 8011a4e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011a52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011a5c:	4581      	cmp	r9, r0
 8011a5e:	f84c 3b04 	str.w	r3, [ip], #4
 8011a62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011a66:	d2de      	bcs.n	8011a26 <quorem+0x42>
 8011a68:	f855 300b 	ldr.w	r3, [r5, fp]
 8011a6c:	b92b      	cbnz	r3, 8011a7a <quorem+0x96>
 8011a6e:	9b01      	ldr	r3, [sp, #4]
 8011a70:	3b04      	subs	r3, #4
 8011a72:	429d      	cmp	r5, r3
 8011a74:	461a      	mov	r2, r3
 8011a76:	d32e      	bcc.n	8011ad6 <quorem+0xf2>
 8011a78:	613c      	str	r4, [r7, #16]
 8011a7a:	4638      	mov	r0, r7
 8011a7c:	f001 f8b4 	bl	8012be8 <__mcmp>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	db24      	blt.n	8011ace <quorem+0xea>
 8011a84:	3601      	adds	r6, #1
 8011a86:	4628      	mov	r0, r5
 8011a88:	f04f 0c00 	mov.w	ip, #0
 8011a8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011a90:	f8d0 e000 	ldr.w	lr, [r0]
 8011a94:	b293      	uxth	r3, r2
 8011a96:	ebac 0303 	sub.w	r3, ip, r3
 8011a9a:	0c12      	lsrs	r2, r2, #16
 8011a9c:	fa13 f38e 	uxtah	r3, r3, lr
 8011aa0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011aa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011aae:	45c1      	cmp	r9, r8
 8011ab0:	f840 3b04 	str.w	r3, [r0], #4
 8011ab4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ab8:	d2e8      	bcs.n	8011a8c <quorem+0xa8>
 8011aba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011ac2:	b922      	cbnz	r2, 8011ace <quorem+0xea>
 8011ac4:	3b04      	subs	r3, #4
 8011ac6:	429d      	cmp	r5, r3
 8011ac8:	461a      	mov	r2, r3
 8011aca:	d30a      	bcc.n	8011ae2 <quorem+0xfe>
 8011acc:	613c      	str	r4, [r7, #16]
 8011ace:	4630      	mov	r0, r6
 8011ad0:	b003      	add	sp, #12
 8011ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ad6:	6812      	ldr	r2, [r2, #0]
 8011ad8:	3b04      	subs	r3, #4
 8011ada:	2a00      	cmp	r2, #0
 8011adc:	d1cc      	bne.n	8011a78 <quorem+0x94>
 8011ade:	3c01      	subs	r4, #1
 8011ae0:	e7c7      	b.n	8011a72 <quorem+0x8e>
 8011ae2:	6812      	ldr	r2, [r2, #0]
 8011ae4:	3b04      	subs	r3, #4
 8011ae6:	2a00      	cmp	r2, #0
 8011ae8:	d1f0      	bne.n	8011acc <quorem+0xe8>
 8011aea:	3c01      	subs	r4, #1
 8011aec:	e7eb      	b.n	8011ac6 <quorem+0xe2>
 8011aee:	2000      	movs	r0, #0
 8011af0:	e7ee      	b.n	8011ad0 <quorem+0xec>
 8011af2:	0000      	movs	r0, r0
 8011af4:	0000      	movs	r0, r0
	...

08011af8 <_dtoa_r>:
 8011af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011afe:	b099      	sub	sp, #100	; 0x64
 8011b00:	4616      	mov	r6, r2
 8011b02:	461f      	mov	r7, r3
 8011b04:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011b08:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8011b0c:	4605      	mov	r5, r0
 8011b0e:	b974      	cbnz	r4, 8011b2e <_dtoa_r+0x36>
 8011b10:	2010      	movs	r0, #16
 8011b12:	f000 fde3 	bl	80126dc <malloc>
 8011b16:	4602      	mov	r2, r0
 8011b18:	6268      	str	r0, [r5, #36]	; 0x24
 8011b1a:	b920      	cbnz	r0, 8011b26 <_dtoa_r+0x2e>
 8011b1c:	4ba8      	ldr	r3, [pc, #672]	; (8011dc0 <_dtoa_r+0x2c8>)
 8011b1e:	21ea      	movs	r1, #234	; 0xea
 8011b20:	48a8      	ldr	r0, [pc, #672]	; (8011dc4 <_dtoa_r+0x2cc>)
 8011b22:	f001 fbbf 	bl	80132a4 <__assert_func>
 8011b26:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b2a:	6004      	str	r4, [r0, #0]
 8011b2c:	60c4      	str	r4, [r0, #12]
 8011b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011b30:	6819      	ldr	r1, [r3, #0]
 8011b32:	b151      	cbz	r1, 8011b4a <_dtoa_r+0x52>
 8011b34:	685a      	ldr	r2, [r3, #4]
 8011b36:	604a      	str	r2, [r1, #4]
 8011b38:	2301      	movs	r3, #1
 8011b3a:	4093      	lsls	r3, r2
 8011b3c:	608b      	str	r3, [r1, #8]
 8011b3e:	4628      	mov	r0, r5
 8011b40:	f000 fe14 	bl	801276c <_Bfree>
 8011b44:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011b46:	2200      	movs	r2, #0
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	1e3b      	subs	r3, r7, #0
 8011b4c:	bfb9      	ittee	lt
 8011b4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011b52:	9305      	strlt	r3, [sp, #20]
 8011b54:	2300      	movge	r3, #0
 8011b56:	f8c8 3000 	strge.w	r3, [r8]
 8011b5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011b5e:	4b9a      	ldr	r3, [pc, #616]	; (8011dc8 <_dtoa_r+0x2d0>)
 8011b60:	bfbc      	itt	lt
 8011b62:	2201      	movlt	r2, #1
 8011b64:	f8c8 2000 	strlt.w	r2, [r8]
 8011b68:	ea33 0309 	bics.w	r3, r3, r9
 8011b6c:	d119      	bne.n	8011ba2 <_dtoa_r+0xaa>
 8011b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011b70:	f242 730f 	movw	r3, #9999	; 0x270f
 8011b74:	6013      	str	r3, [r2, #0]
 8011b76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011b7a:	4333      	orrs	r3, r6
 8011b7c:	f000 8580 	beq.w	8012680 <_dtoa_r+0xb88>
 8011b80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011b82:	b953      	cbnz	r3, 8011b9a <_dtoa_r+0xa2>
 8011b84:	4b91      	ldr	r3, [pc, #580]	; (8011dcc <_dtoa_r+0x2d4>)
 8011b86:	e022      	b.n	8011bce <_dtoa_r+0xd6>
 8011b88:	4b91      	ldr	r3, [pc, #580]	; (8011dd0 <_dtoa_r+0x2d8>)
 8011b8a:	9303      	str	r3, [sp, #12]
 8011b8c:	3308      	adds	r3, #8
 8011b8e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011b90:	6013      	str	r3, [r2, #0]
 8011b92:	9803      	ldr	r0, [sp, #12]
 8011b94:	b019      	add	sp, #100	; 0x64
 8011b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b9a:	4b8c      	ldr	r3, [pc, #560]	; (8011dcc <_dtoa_r+0x2d4>)
 8011b9c:	9303      	str	r3, [sp, #12]
 8011b9e:	3303      	adds	r3, #3
 8011ba0:	e7f5      	b.n	8011b8e <_dtoa_r+0x96>
 8011ba2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011ba6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8011baa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011bae:	2200      	movs	r2, #0
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	f7ee ff61 	bl	8000a78 <__aeabi_dcmpeq>
 8011bb6:	4680      	mov	r8, r0
 8011bb8:	b158      	cbz	r0, 8011bd2 <_dtoa_r+0xda>
 8011bba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	6013      	str	r3, [r2, #0]
 8011bc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f000 8559 	beq.w	801267a <_dtoa_r+0xb82>
 8011bc8:	4882      	ldr	r0, [pc, #520]	; (8011dd4 <_dtoa_r+0x2dc>)
 8011bca:	6018      	str	r0, [r3, #0]
 8011bcc:	1e43      	subs	r3, r0, #1
 8011bce:	9303      	str	r3, [sp, #12]
 8011bd0:	e7df      	b.n	8011b92 <_dtoa_r+0x9a>
 8011bd2:	ab16      	add	r3, sp, #88	; 0x58
 8011bd4:	9301      	str	r3, [sp, #4]
 8011bd6:	ab17      	add	r3, sp, #92	; 0x5c
 8011bd8:	9300      	str	r3, [sp, #0]
 8011bda:	4628      	mov	r0, r5
 8011bdc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011be0:	f001 f8a6 	bl	8012d30 <__d2b>
 8011be4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011be8:	4683      	mov	fp, r0
 8011bea:	2c00      	cmp	r4, #0
 8011bec:	d07e      	beq.n	8011cec <_dtoa_r+0x1f4>
 8011bee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bf0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8011bf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011bf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011bfc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8011c00:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8011c04:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8011c08:	4b73      	ldr	r3, [pc, #460]	; (8011dd8 <_dtoa_r+0x2e0>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f7ee fb14 	bl	8000238 <__aeabi_dsub>
 8011c10:	a365      	add	r3, pc, #404	; (adr r3, 8011da8 <_dtoa_r+0x2b0>)
 8011c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c16:	f7ee fcc7 	bl	80005a8 <__aeabi_dmul>
 8011c1a:	a365      	add	r3, pc, #404	; (adr r3, 8011db0 <_dtoa_r+0x2b8>)
 8011c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c20:	f7ee fb0c 	bl	800023c <__adddf3>
 8011c24:	4606      	mov	r6, r0
 8011c26:	4620      	mov	r0, r4
 8011c28:	460f      	mov	r7, r1
 8011c2a:	f7ee fc53 	bl	80004d4 <__aeabi_i2d>
 8011c2e:	a362      	add	r3, pc, #392	; (adr r3, 8011db8 <_dtoa_r+0x2c0>)
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	f7ee fcb8 	bl	80005a8 <__aeabi_dmul>
 8011c38:	4602      	mov	r2, r0
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	4639      	mov	r1, r7
 8011c40:	f7ee fafc 	bl	800023c <__adddf3>
 8011c44:	4606      	mov	r6, r0
 8011c46:	460f      	mov	r7, r1
 8011c48:	f7ee ff5e 	bl	8000b08 <__aeabi_d2iz>
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	4682      	mov	sl, r0
 8011c50:	2300      	movs	r3, #0
 8011c52:	4630      	mov	r0, r6
 8011c54:	4639      	mov	r1, r7
 8011c56:	f7ee ff19 	bl	8000a8c <__aeabi_dcmplt>
 8011c5a:	b148      	cbz	r0, 8011c70 <_dtoa_r+0x178>
 8011c5c:	4650      	mov	r0, sl
 8011c5e:	f7ee fc39 	bl	80004d4 <__aeabi_i2d>
 8011c62:	4632      	mov	r2, r6
 8011c64:	463b      	mov	r3, r7
 8011c66:	f7ee ff07 	bl	8000a78 <__aeabi_dcmpeq>
 8011c6a:	b908      	cbnz	r0, 8011c70 <_dtoa_r+0x178>
 8011c6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c70:	f1ba 0f16 	cmp.w	sl, #22
 8011c74:	d857      	bhi.n	8011d26 <_dtoa_r+0x22e>
 8011c76:	4b59      	ldr	r3, [pc, #356]	; (8011ddc <_dtoa_r+0x2e4>)
 8011c78:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011c84:	f7ee ff02 	bl	8000a8c <__aeabi_dcmplt>
 8011c88:	2800      	cmp	r0, #0
 8011c8a:	d04e      	beq.n	8011d2a <_dtoa_r+0x232>
 8011c8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c90:	2300      	movs	r3, #0
 8011c92:	930f      	str	r3, [sp, #60]	; 0x3c
 8011c94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011c96:	1b1c      	subs	r4, r3, r4
 8011c98:	1e63      	subs	r3, r4, #1
 8011c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c9c:	bf45      	ittet	mi
 8011c9e:	f1c4 0301 	rsbmi	r3, r4, #1
 8011ca2:	9306      	strmi	r3, [sp, #24]
 8011ca4:	2300      	movpl	r3, #0
 8011ca6:	2300      	movmi	r3, #0
 8011ca8:	bf4c      	ite	mi
 8011caa:	9309      	strmi	r3, [sp, #36]	; 0x24
 8011cac:	9306      	strpl	r3, [sp, #24]
 8011cae:	f1ba 0f00 	cmp.w	sl, #0
 8011cb2:	db3c      	blt.n	8011d2e <_dtoa_r+0x236>
 8011cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cb6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011cba:	4453      	add	r3, sl
 8011cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8011cc2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011cc4:	2b09      	cmp	r3, #9
 8011cc6:	f200 808d 	bhi.w	8011de4 <_dtoa_r+0x2ec>
 8011cca:	2b05      	cmp	r3, #5
 8011ccc:	bfc4      	itt	gt
 8011cce:	3b04      	subgt	r3, #4
 8011cd0:	9322      	strgt	r3, [sp, #136]	; 0x88
 8011cd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011cd4:	f1a3 0302 	sub.w	r3, r3, #2
 8011cd8:	bfcc      	ite	gt
 8011cda:	2400      	movgt	r4, #0
 8011cdc:	2401      	movle	r4, #1
 8011cde:	2b03      	cmp	r3, #3
 8011ce0:	f200 808c 	bhi.w	8011dfc <_dtoa_r+0x304>
 8011ce4:	e8df f003 	tbb	[pc, r3]
 8011ce8:	5b4d4f2d 	.word	0x5b4d4f2d
 8011cec:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8011cf0:	441c      	add	r4, r3
 8011cf2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8011cf6:	2b20      	cmp	r3, #32
 8011cf8:	bfc3      	ittte	gt
 8011cfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011cfe:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8011d02:	fa09 f303 	lslgt.w	r3, r9, r3
 8011d06:	f1c3 0320 	rsble	r3, r3, #32
 8011d0a:	bfc6      	itte	gt
 8011d0c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011d10:	4318      	orrgt	r0, r3
 8011d12:	fa06 f003 	lslle.w	r0, r6, r3
 8011d16:	f7ee fbcd 	bl	80004b4 <__aeabi_ui2d>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8011d20:	3c01      	subs	r4, #1
 8011d22:	9313      	str	r3, [sp, #76]	; 0x4c
 8011d24:	e770      	b.n	8011c08 <_dtoa_r+0x110>
 8011d26:	2301      	movs	r3, #1
 8011d28:	e7b3      	b.n	8011c92 <_dtoa_r+0x19a>
 8011d2a:	900f      	str	r0, [sp, #60]	; 0x3c
 8011d2c:	e7b2      	b.n	8011c94 <_dtoa_r+0x19c>
 8011d2e:	9b06      	ldr	r3, [sp, #24]
 8011d30:	eba3 030a 	sub.w	r3, r3, sl
 8011d34:	9306      	str	r3, [sp, #24]
 8011d36:	f1ca 0300 	rsb	r3, sl, #0
 8011d3a:	930a      	str	r3, [sp, #40]	; 0x28
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	930e      	str	r3, [sp, #56]	; 0x38
 8011d40:	e7bf      	b.n	8011cc2 <_dtoa_r+0x1ca>
 8011d42:	2300      	movs	r3, #0
 8011d44:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	dc5a      	bgt.n	8011e02 <_dtoa_r+0x30a>
 8011d4c:	f04f 0901 	mov.w	r9, #1
 8011d50:	f8cd 9020 	str.w	r9, [sp, #32]
 8011d54:	464b      	mov	r3, r9
 8011d56:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8011d5a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	6042      	str	r2, [r0, #4]
 8011d60:	2204      	movs	r2, #4
 8011d62:	f102 0614 	add.w	r6, r2, #20
 8011d66:	429e      	cmp	r6, r3
 8011d68:	6841      	ldr	r1, [r0, #4]
 8011d6a:	d950      	bls.n	8011e0e <_dtoa_r+0x316>
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f000 fcbd 	bl	80126ec <_Balloc>
 8011d72:	9003      	str	r0, [sp, #12]
 8011d74:	2800      	cmp	r0, #0
 8011d76:	d14e      	bne.n	8011e16 <_dtoa_r+0x31e>
 8011d78:	4b19      	ldr	r3, [pc, #100]	; (8011de0 <_dtoa_r+0x2e8>)
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011d80:	e6ce      	b.n	8011b20 <_dtoa_r+0x28>
 8011d82:	2301      	movs	r3, #1
 8011d84:	e7de      	b.n	8011d44 <_dtoa_r+0x24c>
 8011d86:	2300      	movs	r3, #0
 8011d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011d8c:	eb0a 0903 	add.w	r9, sl, r3
 8011d90:	f109 0301 	add.w	r3, r9, #1
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	9308      	str	r3, [sp, #32]
 8011d98:	bfb8      	it	lt
 8011d9a:	2301      	movlt	r3, #1
 8011d9c:	e7dd      	b.n	8011d5a <_dtoa_r+0x262>
 8011d9e:	2301      	movs	r3, #1
 8011da0:	e7f2      	b.n	8011d88 <_dtoa_r+0x290>
 8011da2:	bf00      	nop
 8011da4:	f3af 8000 	nop.w
 8011da8:	636f4361 	.word	0x636f4361
 8011dac:	3fd287a7 	.word	0x3fd287a7
 8011db0:	8b60c8b3 	.word	0x8b60c8b3
 8011db4:	3fc68a28 	.word	0x3fc68a28
 8011db8:	509f79fb 	.word	0x509f79fb
 8011dbc:	3fd34413 	.word	0x3fd34413
 8011dc0:	08015a05 	.word	0x08015a05
 8011dc4:	08015a1c 	.word	0x08015a1c
 8011dc8:	7ff00000 	.word	0x7ff00000
 8011dcc:	08015a01 	.word	0x08015a01
 8011dd0:	080159f8 	.word	0x080159f8
 8011dd4:	080159d5 	.word	0x080159d5
 8011dd8:	3ff80000 	.word	0x3ff80000
 8011ddc:	08015b10 	.word	0x08015b10
 8011de0:	08015a77 	.word	0x08015a77
 8011de4:	2401      	movs	r4, #1
 8011de6:	2300      	movs	r3, #0
 8011de8:	9322      	str	r3, [sp, #136]	; 0x88
 8011dea:	940b      	str	r4, [sp, #44]	; 0x2c
 8011dec:	f04f 39ff 	mov.w	r9, #4294967295
 8011df0:	2200      	movs	r2, #0
 8011df2:	f8cd 9020 	str.w	r9, [sp, #32]
 8011df6:	2312      	movs	r3, #18
 8011df8:	9223      	str	r2, [sp, #140]	; 0x8c
 8011dfa:	e7ae      	b.n	8011d5a <_dtoa_r+0x262>
 8011dfc:	2301      	movs	r3, #1
 8011dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e00:	e7f4      	b.n	8011dec <_dtoa_r+0x2f4>
 8011e02:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8011e06:	f8cd 9020 	str.w	r9, [sp, #32]
 8011e0a:	464b      	mov	r3, r9
 8011e0c:	e7a5      	b.n	8011d5a <_dtoa_r+0x262>
 8011e0e:	3101      	adds	r1, #1
 8011e10:	6041      	str	r1, [r0, #4]
 8011e12:	0052      	lsls	r2, r2, #1
 8011e14:	e7a5      	b.n	8011d62 <_dtoa_r+0x26a>
 8011e16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011e18:	9a03      	ldr	r2, [sp, #12]
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	9b08      	ldr	r3, [sp, #32]
 8011e1e:	2b0e      	cmp	r3, #14
 8011e20:	f200 80a8 	bhi.w	8011f74 <_dtoa_r+0x47c>
 8011e24:	2c00      	cmp	r4, #0
 8011e26:	f000 80a5 	beq.w	8011f74 <_dtoa_r+0x47c>
 8011e2a:	f1ba 0f00 	cmp.w	sl, #0
 8011e2e:	dd34      	ble.n	8011e9a <_dtoa_r+0x3a2>
 8011e30:	4a9a      	ldr	r2, [pc, #616]	; (801209c <_dtoa_r+0x5a4>)
 8011e32:	f00a 030f 	and.w	r3, sl, #15
 8011e36:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011e3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011e3e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011e42:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011e46:	ea4f 142a 	mov.w	r4, sl, asr #4
 8011e4a:	d016      	beq.n	8011e7a <_dtoa_r+0x382>
 8011e4c:	4b94      	ldr	r3, [pc, #592]	; (80120a0 <_dtoa_r+0x5a8>)
 8011e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011e52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011e56:	f7ee fcd1 	bl	80007fc <__aeabi_ddiv>
 8011e5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e5e:	f004 040f 	and.w	r4, r4, #15
 8011e62:	2703      	movs	r7, #3
 8011e64:	4e8e      	ldr	r6, [pc, #568]	; (80120a0 <_dtoa_r+0x5a8>)
 8011e66:	b954      	cbnz	r4, 8011e7e <_dtoa_r+0x386>
 8011e68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011e6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e70:	f7ee fcc4 	bl	80007fc <__aeabi_ddiv>
 8011e74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e78:	e029      	b.n	8011ece <_dtoa_r+0x3d6>
 8011e7a:	2702      	movs	r7, #2
 8011e7c:	e7f2      	b.n	8011e64 <_dtoa_r+0x36c>
 8011e7e:	07e1      	lsls	r1, r4, #31
 8011e80:	d508      	bpl.n	8011e94 <_dtoa_r+0x39c>
 8011e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011e86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011e8a:	f7ee fb8d 	bl	80005a8 <__aeabi_dmul>
 8011e8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011e92:	3701      	adds	r7, #1
 8011e94:	1064      	asrs	r4, r4, #1
 8011e96:	3608      	adds	r6, #8
 8011e98:	e7e5      	b.n	8011e66 <_dtoa_r+0x36e>
 8011e9a:	f000 80a5 	beq.w	8011fe8 <_dtoa_r+0x4f0>
 8011e9e:	f1ca 0400 	rsb	r4, sl, #0
 8011ea2:	4b7e      	ldr	r3, [pc, #504]	; (801209c <_dtoa_r+0x5a4>)
 8011ea4:	4e7e      	ldr	r6, [pc, #504]	; (80120a0 <_dtoa_r+0x5a8>)
 8011ea6:	f004 020f 	and.w	r2, r4, #15
 8011eaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011eb6:	f7ee fb77 	bl	80005a8 <__aeabi_dmul>
 8011eba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ebe:	1124      	asrs	r4, r4, #4
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	2702      	movs	r7, #2
 8011ec4:	2c00      	cmp	r4, #0
 8011ec6:	f040 8084 	bne.w	8011fd2 <_dtoa_r+0x4da>
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d1d2      	bne.n	8011e74 <_dtoa_r+0x37c>
 8011ece:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	f000 808b 	beq.w	8011fec <_dtoa_r+0x4f4>
 8011ed6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011eda:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8011ede:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011ee2:	4b70      	ldr	r3, [pc, #448]	; (80120a4 <_dtoa_r+0x5ac>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f7ee fdd1 	bl	8000a8c <__aeabi_dcmplt>
 8011eea:	2800      	cmp	r0, #0
 8011eec:	d07e      	beq.n	8011fec <_dtoa_r+0x4f4>
 8011eee:	9b08      	ldr	r3, [sp, #32]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d07b      	beq.n	8011fec <_dtoa_r+0x4f4>
 8011ef4:	f1b9 0f00 	cmp.w	r9, #0
 8011ef8:	dd38      	ble.n	8011f6c <_dtoa_r+0x474>
 8011efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011efe:	4b6a      	ldr	r3, [pc, #424]	; (80120a8 <_dtoa_r+0x5b0>)
 8011f00:	2200      	movs	r2, #0
 8011f02:	f7ee fb51 	bl	80005a8 <__aeabi_dmul>
 8011f06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011f0a:	f10a 38ff 	add.w	r8, sl, #4294967295
 8011f0e:	3701      	adds	r7, #1
 8011f10:	464c      	mov	r4, r9
 8011f12:	4638      	mov	r0, r7
 8011f14:	f7ee fade 	bl	80004d4 <__aeabi_i2d>
 8011f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011f1c:	f7ee fb44 	bl	80005a8 <__aeabi_dmul>
 8011f20:	4b62      	ldr	r3, [pc, #392]	; (80120ac <_dtoa_r+0x5b4>)
 8011f22:	2200      	movs	r2, #0
 8011f24:	f7ee f98a 	bl	800023c <__adddf3>
 8011f28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011f2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8011f30:	9611      	str	r6, [sp, #68]	; 0x44
 8011f32:	2c00      	cmp	r4, #0
 8011f34:	d15d      	bne.n	8011ff2 <_dtoa_r+0x4fa>
 8011f36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f3a:	4b5d      	ldr	r3, [pc, #372]	; (80120b0 <_dtoa_r+0x5b8>)
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f7ee f97b 	bl	8000238 <__aeabi_dsub>
 8011f42:	4602      	mov	r2, r0
 8011f44:	460b      	mov	r3, r1
 8011f46:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011f4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f4c:	4633      	mov	r3, r6
 8011f4e:	f7ee fdbb 	bl	8000ac8 <__aeabi_dcmpgt>
 8011f52:	2800      	cmp	r0, #0
 8011f54:	f040 829c 	bne.w	8012490 <_dtoa_r+0x998>
 8011f58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011f5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f5e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011f62:	f7ee fd93 	bl	8000a8c <__aeabi_dcmplt>
 8011f66:	2800      	cmp	r0, #0
 8011f68:	f040 8290 	bne.w	801248c <_dtoa_r+0x994>
 8011f6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8011f70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	f2c0 8152 	blt.w	8012220 <_dtoa_r+0x728>
 8011f7c:	f1ba 0f0e 	cmp.w	sl, #14
 8011f80:	f300 814e 	bgt.w	8012220 <_dtoa_r+0x728>
 8011f84:	4b45      	ldr	r3, [pc, #276]	; (801209c <_dtoa_r+0x5a4>)
 8011f86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011f8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011f8e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8011f92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	f280 80db 	bge.w	8012150 <_dtoa_r+0x658>
 8011f9a:	9b08      	ldr	r3, [sp, #32]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	f300 80d7 	bgt.w	8012150 <_dtoa_r+0x658>
 8011fa2:	f040 8272 	bne.w	801248a <_dtoa_r+0x992>
 8011fa6:	4b42      	ldr	r3, [pc, #264]	; (80120b0 <_dtoa_r+0x5b8>)
 8011fa8:	2200      	movs	r2, #0
 8011faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011fae:	f7ee fafb 	bl	80005a8 <__aeabi_dmul>
 8011fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011fb6:	f7ee fd7d 	bl	8000ab4 <__aeabi_dcmpge>
 8011fba:	9c08      	ldr	r4, [sp, #32]
 8011fbc:	4626      	mov	r6, r4
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	f040 8248 	bne.w	8012454 <_dtoa_r+0x95c>
 8011fc4:	9f03      	ldr	r7, [sp, #12]
 8011fc6:	2331      	movs	r3, #49	; 0x31
 8011fc8:	f807 3b01 	strb.w	r3, [r7], #1
 8011fcc:	f10a 0a01 	add.w	sl, sl, #1
 8011fd0:	e244      	b.n	801245c <_dtoa_r+0x964>
 8011fd2:	07e2      	lsls	r2, r4, #31
 8011fd4:	d505      	bpl.n	8011fe2 <_dtoa_r+0x4ea>
 8011fd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011fda:	f7ee fae5 	bl	80005a8 <__aeabi_dmul>
 8011fde:	3701      	adds	r7, #1
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	1064      	asrs	r4, r4, #1
 8011fe4:	3608      	adds	r6, #8
 8011fe6:	e76d      	b.n	8011ec4 <_dtoa_r+0x3cc>
 8011fe8:	2702      	movs	r7, #2
 8011fea:	e770      	b.n	8011ece <_dtoa_r+0x3d6>
 8011fec:	9c08      	ldr	r4, [sp, #32]
 8011fee:	46d0      	mov	r8, sl
 8011ff0:	e78f      	b.n	8011f12 <_dtoa_r+0x41a>
 8011ff2:	9903      	ldr	r1, [sp, #12]
 8011ff4:	4b29      	ldr	r3, [pc, #164]	; (801209c <_dtoa_r+0x5a4>)
 8011ff6:	4421      	add	r1, r4
 8011ff8:	9112      	str	r1, [sp, #72]	; 0x48
 8011ffa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ffc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012000:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012004:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012008:	2900      	cmp	r1, #0
 801200a:	d055      	beq.n	80120b8 <_dtoa_r+0x5c0>
 801200c:	4929      	ldr	r1, [pc, #164]	; (80120b4 <_dtoa_r+0x5bc>)
 801200e:	2000      	movs	r0, #0
 8012010:	f7ee fbf4 	bl	80007fc <__aeabi_ddiv>
 8012014:	463b      	mov	r3, r7
 8012016:	4632      	mov	r2, r6
 8012018:	f7ee f90e 	bl	8000238 <__aeabi_dsub>
 801201c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012020:	9f03      	ldr	r7, [sp, #12]
 8012022:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012026:	f7ee fd6f 	bl	8000b08 <__aeabi_d2iz>
 801202a:	4604      	mov	r4, r0
 801202c:	f7ee fa52 	bl	80004d4 <__aeabi_i2d>
 8012030:	4602      	mov	r2, r0
 8012032:	460b      	mov	r3, r1
 8012034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012038:	f7ee f8fe 	bl	8000238 <__aeabi_dsub>
 801203c:	3430      	adds	r4, #48	; 0x30
 801203e:	4602      	mov	r2, r0
 8012040:	460b      	mov	r3, r1
 8012042:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012046:	f807 4b01 	strb.w	r4, [r7], #1
 801204a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801204e:	f7ee fd1d 	bl	8000a8c <__aeabi_dcmplt>
 8012052:	2800      	cmp	r0, #0
 8012054:	d174      	bne.n	8012140 <_dtoa_r+0x648>
 8012056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801205a:	4912      	ldr	r1, [pc, #72]	; (80120a4 <_dtoa_r+0x5ac>)
 801205c:	2000      	movs	r0, #0
 801205e:	f7ee f8eb 	bl	8000238 <__aeabi_dsub>
 8012062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012066:	f7ee fd11 	bl	8000a8c <__aeabi_dcmplt>
 801206a:	2800      	cmp	r0, #0
 801206c:	f040 80b7 	bne.w	80121de <_dtoa_r+0x6e6>
 8012070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012072:	429f      	cmp	r7, r3
 8012074:	f43f af7a 	beq.w	8011f6c <_dtoa_r+0x474>
 8012078:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801207c:	4b0a      	ldr	r3, [pc, #40]	; (80120a8 <_dtoa_r+0x5b0>)
 801207e:	2200      	movs	r2, #0
 8012080:	f7ee fa92 	bl	80005a8 <__aeabi_dmul>
 8012084:	4b08      	ldr	r3, [pc, #32]	; (80120a8 <_dtoa_r+0x5b0>)
 8012086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801208a:	2200      	movs	r2, #0
 801208c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012090:	f7ee fa8a 	bl	80005a8 <__aeabi_dmul>
 8012094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012098:	e7c3      	b.n	8012022 <_dtoa_r+0x52a>
 801209a:	bf00      	nop
 801209c:	08015b10 	.word	0x08015b10
 80120a0:	08015ae8 	.word	0x08015ae8
 80120a4:	3ff00000 	.word	0x3ff00000
 80120a8:	40240000 	.word	0x40240000
 80120ac:	401c0000 	.word	0x401c0000
 80120b0:	40140000 	.word	0x40140000
 80120b4:	3fe00000 	.word	0x3fe00000
 80120b8:	4630      	mov	r0, r6
 80120ba:	4639      	mov	r1, r7
 80120bc:	f7ee fa74 	bl	80005a8 <__aeabi_dmul>
 80120c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80120c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120c6:	9c03      	ldr	r4, [sp, #12]
 80120c8:	9314      	str	r3, [sp, #80]	; 0x50
 80120ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120ce:	f7ee fd1b 	bl	8000b08 <__aeabi_d2iz>
 80120d2:	9015      	str	r0, [sp, #84]	; 0x54
 80120d4:	f7ee f9fe 	bl	80004d4 <__aeabi_i2d>
 80120d8:	4602      	mov	r2, r0
 80120da:	460b      	mov	r3, r1
 80120dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80120e0:	f7ee f8aa 	bl	8000238 <__aeabi_dsub>
 80120e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80120e6:	3330      	adds	r3, #48	; 0x30
 80120e8:	f804 3b01 	strb.w	r3, [r4], #1
 80120ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80120ee:	429c      	cmp	r4, r3
 80120f0:	4606      	mov	r6, r0
 80120f2:	460f      	mov	r7, r1
 80120f4:	f04f 0200 	mov.w	r2, #0
 80120f8:	d124      	bne.n	8012144 <_dtoa_r+0x64c>
 80120fa:	4ba4      	ldr	r3, [pc, #656]	; (801238c <_dtoa_r+0x894>)
 80120fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012100:	f7ee f89c 	bl	800023c <__adddf3>
 8012104:	4602      	mov	r2, r0
 8012106:	460b      	mov	r3, r1
 8012108:	4630      	mov	r0, r6
 801210a:	4639      	mov	r1, r7
 801210c:	f7ee fcdc 	bl	8000ac8 <__aeabi_dcmpgt>
 8012110:	2800      	cmp	r0, #0
 8012112:	d163      	bne.n	80121dc <_dtoa_r+0x6e4>
 8012114:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012118:	499c      	ldr	r1, [pc, #624]	; (801238c <_dtoa_r+0x894>)
 801211a:	2000      	movs	r0, #0
 801211c:	f7ee f88c 	bl	8000238 <__aeabi_dsub>
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	4630      	mov	r0, r6
 8012126:	4639      	mov	r1, r7
 8012128:	f7ee fcb0 	bl	8000a8c <__aeabi_dcmplt>
 801212c:	2800      	cmp	r0, #0
 801212e:	f43f af1d 	beq.w	8011f6c <_dtoa_r+0x474>
 8012132:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012134:	1e7b      	subs	r3, r7, #1
 8012136:	9314      	str	r3, [sp, #80]	; 0x50
 8012138:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801213c:	2b30      	cmp	r3, #48	; 0x30
 801213e:	d0f8      	beq.n	8012132 <_dtoa_r+0x63a>
 8012140:	46c2      	mov	sl, r8
 8012142:	e03b      	b.n	80121bc <_dtoa_r+0x6c4>
 8012144:	4b92      	ldr	r3, [pc, #584]	; (8012390 <_dtoa_r+0x898>)
 8012146:	f7ee fa2f 	bl	80005a8 <__aeabi_dmul>
 801214a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801214e:	e7bc      	b.n	80120ca <_dtoa_r+0x5d2>
 8012150:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8012154:	9f03      	ldr	r7, [sp, #12]
 8012156:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801215a:	4640      	mov	r0, r8
 801215c:	4649      	mov	r1, r9
 801215e:	f7ee fb4d 	bl	80007fc <__aeabi_ddiv>
 8012162:	f7ee fcd1 	bl	8000b08 <__aeabi_d2iz>
 8012166:	4604      	mov	r4, r0
 8012168:	f7ee f9b4 	bl	80004d4 <__aeabi_i2d>
 801216c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012170:	f7ee fa1a 	bl	80005a8 <__aeabi_dmul>
 8012174:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012178:	4602      	mov	r2, r0
 801217a:	460b      	mov	r3, r1
 801217c:	4640      	mov	r0, r8
 801217e:	4649      	mov	r1, r9
 8012180:	f7ee f85a 	bl	8000238 <__aeabi_dsub>
 8012184:	f807 6b01 	strb.w	r6, [r7], #1
 8012188:	9e03      	ldr	r6, [sp, #12]
 801218a:	f8dd c020 	ldr.w	ip, [sp, #32]
 801218e:	1bbe      	subs	r6, r7, r6
 8012190:	45b4      	cmp	ip, r6
 8012192:	4602      	mov	r2, r0
 8012194:	460b      	mov	r3, r1
 8012196:	d136      	bne.n	8012206 <_dtoa_r+0x70e>
 8012198:	f7ee f850 	bl	800023c <__adddf3>
 801219c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121a0:	4680      	mov	r8, r0
 80121a2:	4689      	mov	r9, r1
 80121a4:	f7ee fc90 	bl	8000ac8 <__aeabi_dcmpgt>
 80121a8:	bb58      	cbnz	r0, 8012202 <_dtoa_r+0x70a>
 80121aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80121ae:	4640      	mov	r0, r8
 80121b0:	4649      	mov	r1, r9
 80121b2:	f7ee fc61 	bl	8000a78 <__aeabi_dcmpeq>
 80121b6:	b108      	cbz	r0, 80121bc <_dtoa_r+0x6c4>
 80121b8:	07e1      	lsls	r1, r4, #31
 80121ba:	d422      	bmi.n	8012202 <_dtoa_r+0x70a>
 80121bc:	4628      	mov	r0, r5
 80121be:	4659      	mov	r1, fp
 80121c0:	f000 fad4 	bl	801276c <_Bfree>
 80121c4:	2300      	movs	r3, #0
 80121c6:	703b      	strb	r3, [r7, #0]
 80121c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80121ca:	f10a 0001 	add.w	r0, sl, #1
 80121ce:	6018      	str	r0, [r3, #0]
 80121d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	f43f acdd 	beq.w	8011b92 <_dtoa_r+0x9a>
 80121d8:	601f      	str	r7, [r3, #0]
 80121da:	e4da      	b.n	8011b92 <_dtoa_r+0x9a>
 80121dc:	4627      	mov	r7, r4
 80121de:	463b      	mov	r3, r7
 80121e0:	461f      	mov	r7, r3
 80121e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80121e6:	2a39      	cmp	r2, #57	; 0x39
 80121e8:	d107      	bne.n	80121fa <_dtoa_r+0x702>
 80121ea:	9a03      	ldr	r2, [sp, #12]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d1f7      	bne.n	80121e0 <_dtoa_r+0x6e8>
 80121f0:	9903      	ldr	r1, [sp, #12]
 80121f2:	2230      	movs	r2, #48	; 0x30
 80121f4:	f108 0801 	add.w	r8, r8, #1
 80121f8:	700a      	strb	r2, [r1, #0]
 80121fa:	781a      	ldrb	r2, [r3, #0]
 80121fc:	3201      	adds	r2, #1
 80121fe:	701a      	strb	r2, [r3, #0]
 8012200:	e79e      	b.n	8012140 <_dtoa_r+0x648>
 8012202:	46d0      	mov	r8, sl
 8012204:	e7eb      	b.n	80121de <_dtoa_r+0x6e6>
 8012206:	4b62      	ldr	r3, [pc, #392]	; (8012390 <_dtoa_r+0x898>)
 8012208:	2200      	movs	r2, #0
 801220a:	f7ee f9cd 	bl	80005a8 <__aeabi_dmul>
 801220e:	2200      	movs	r2, #0
 8012210:	2300      	movs	r3, #0
 8012212:	4680      	mov	r8, r0
 8012214:	4689      	mov	r9, r1
 8012216:	f7ee fc2f 	bl	8000a78 <__aeabi_dcmpeq>
 801221a:	2800      	cmp	r0, #0
 801221c:	d09b      	beq.n	8012156 <_dtoa_r+0x65e>
 801221e:	e7cd      	b.n	80121bc <_dtoa_r+0x6c4>
 8012220:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012222:	2a00      	cmp	r2, #0
 8012224:	f000 80d0 	beq.w	80123c8 <_dtoa_r+0x8d0>
 8012228:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801222a:	2a01      	cmp	r2, #1
 801222c:	f300 80b2 	bgt.w	8012394 <_dtoa_r+0x89c>
 8012230:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012232:	2a00      	cmp	r2, #0
 8012234:	f000 80a6 	beq.w	8012384 <_dtoa_r+0x88c>
 8012238:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801223c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801223e:	9f06      	ldr	r7, [sp, #24]
 8012240:	9a06      	ldr	r2, [sp, #24]
 8012242:	441a      	add	r2, r3
 8012244:	9206      	str	r2, [sp, #24]
 8012246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012248:	2101      	movs	r1, #1
 801224a:	441a      	add	r2, r3
 801224c:	4628      	mov	r0, r5
 801224e:	9209      	str	r2, [sp, #36]	; 0x24
 8012250:	f000 fb42 	bl	80128d8 <__i2b>
 8012254:	4606      	mov	r6, r0
 8012256:	2f00      	cmp	r7, #0
 8012258:	dd0c      	ble.n	8012274 <_dtoa_r+0x77c>
 801225a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801225c:	2b00      	cmp	r3, #0
 801225e:	dd09      	ble.n	8012274 <_dtoa_r+0x77c>
 8012260:	42bb      	cmp	r3, r7
 8012262:	9a06      	ldr	r2, [sp, #24]
 8012264:	bfa8      	it	ge
 8012266:	463b      	movge	r3, r7
 8012268:	1ad2      	subs	r2, r2, r3
 801226a:	9206      	str	r2, [sp, #24]
 801226c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801226e:	1aff      	subs	r7, r7, r3
 8012270:	1ad3      	subs	r3, r2, r3
 8012272:	9309      	str	r3, [sp, #36]	; 0x24
 8012274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012276:	b1f3      	cbz	r3, 80122b6 <_dtoa_r+0x7be>
 8012278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801227a:	2b00      	cmp	r3, #0
 801227c:	f000 80a8 	beq.w	80123d0 <_dtoa_r+0x8d8>
 8012280:	2c00      	cmp	r4, #0
 8012282:	dd10      	ble.n	80122a6 <_dtoa_r+0x7ae>
 8012284:	4631      	mov	r1, r6
 8012286:	4622      	mov	r2, r4
 8012288:	4628      	mov	r0, r5
 801228a:	f000 fbe3 	bl	8012a54 <__pow5mult>
 801228e:	465a      	mov	r2, fp
 8012290:	4601      	mov	r1, r0
 8012292:	4606      	mov	r6, r0
 8012294:	4628      	mov	r0, r5
 8012296:	f000 fb35 	bl	8012904 <__multiply>
 801229a:	4659      	mov	r1, fp
 801229c:	4680      	mov	r8, r0
 801229e:	4628      	mov	r0, r5
 80122a0:	f000 fa64 	bl	801276c <_Bfree>
 80122a4:	46c3      	mov	fp, r8
 80122a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122a8:	1b1a      	subs	r2, r3, r4
 80122aa:	d004      	beq.n	80122b6 <_dtoa_r+0x7be>
 80122ac:	4659      	mov	r1, fp
 80122ae:	4628      	mov	r0, r5
 80122b0:	f000 fbd0 	bl	8012a54 <__pow5mult>
 80122b4:	4683      	mov	fp, r0
 80122b6:	2101      	movs	r1, #1
 80122b8:	4628      	mov	r0, r5
 80122ba:	f000 fb0d 	bl	80128d8 <__i2b>
 80122be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	4604      	mov	r4, r0
 80122c4:	f340 8086 	ble.w	80123d4 <_dtoa_r+0x8dc>
 80122c8:	461a      	mov	r2, r3
 80122ca:	4601      	mov	r1, r0
 80122cc:	4628      	mov	r0, r5
 80122ce:	f000 fbc1 	bl	8012a54 <__pow5mult>
 80122d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80122d4:	2b01      	cmp	r3, #1
 80122d6:	4604      	mov	r4, r0
 80122d8:	dd7f      	ble.n	80123da <_dtoa_r+0x8e2>
 80122da:	f04f 0800 	mov.w	r8, #0
 80122de:	6923      	ldr	r3, [r4, #16]
 80122e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80122e4:	6918      	ldr	r0, [r3, #16]
 80122e6:	f000 faa9 	bl	801283c <__hi0bits>
 80122ea:	f1c0 0020 	rsb	r0, r0, #32
 80122ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122f0:	4418      	add	r0, r3
 80122f2:	f010 001f 	ands.w	r0, r0, #31
 80122f6:	f000 8092 	beq.w	801241e <_dtoa_r+0x926>
 80122fa:	f1c0 0320 	rsb	r3, r0, #32
 80122fe:	2b04      	cmp	r3, #4
 8012300:	f340 808a 	ble.w	8012418 <_dtoa_r+0x920>
 8012304:	f1c0 001c 	rsb	r0, r0, #28
 8012308:	9b06      	ldr	r3, [sp, #24]
 801230a:	4403      	add	r3, r0
 801230c:	9306      	str	r3, [sp, #24]
 801230e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012310:	4403      	add	r3, r0
 8012312:	4407      	add	r7, r0
 8012314:	9309      	str	r3, [sp, #36]	; 0x24
 8012316:	9b06      	ldr	r3, [sp, #24]
 8012318:	2b00      	cmp	r3, #0
 801231a:	dd05      	ble.n	8012328 <_dtoa_r+0x830>
 801231c:	4659      	mov	r1, fp
 801231e:	461a      	mov	r2, r3
 8012320:	4628      	mov	r0, r5
 8012322:	f000 fbf1 	bl	8012b08 <__lshift>
 8012326:	4683      	mov	fp, r0
 8012328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801232a:	2b00      	cmp	r3, #0
 801232c:	dd05      	ble.n	801233a <_dtoa_r+0x842>
 801232e:	4621      	mov	r1, r4
 8012330:	461a      	mov	r2, r3
 8012332:	4628      	mov	r0, r5
 8012334:	f000 fbe8 	bl	8012b08 <__lshift>
 8012338:	4604      	mov	r4, r0
 801233a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801233c:	2b00      	cmp	r3, #0
 801233e:	d070      	beq.n	8012422 <_dtoa_r+0x92a>
 8012340:	4621      	mov	r1, r4
 8012342:	4658      	mov	r0, fp
 8012344:	f000 fc50 	bl	8012be8 <__mcmp>
 8012348:	2800      	cmp	r0, #0
 801234a:	da6a      	bge.n	8012422 <_dtoa_r+0x92a>
 801234c:	2300      	movs	r3, #0
 801234e:	4659      	mov	r1, fp
 8012350:	220a      	movs	r2, #10
 8012352:	4628      	mov	r0, r5
 8012354:	f000 fa2c 	bl	80127b0 <__multadd>
 8012358:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801235a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801235e:	4683      	mov	fp, r0
 8012360:	2b00      	cmp	r3, #0
 8012362:	f000 8194 	beq.w	801268e <_dtoa_r+0xb96>
 8012366:	4631      	mov	r1, r6
 8012368:	2300      	movs	r3, #0
 801236a:	220a      	movs	r2, #10
 801236c:	4628      	mov	r0, r5
 801236e:	f000 fa1f 	bl	80127b0 <__multadd>
 8012372:	f1b9 0f00 	cmp.w	r9, #0
 8012376:	4606      	mov	r6, r0
 8012378:	f300 8093 	bgt.w	80124a2 <_dtoa_r+0x9aa>
 801237c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801237e:	2b02      	cmp	r3, #2
 8012380:	dc57      	bgt.n	8012432 <_dtoa_r+0x93a>
 8012382:	e08e      	b.n	80124a2 <_dtoa_r+0x9aa>
 8012384:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012386:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801238a:	e757      	b.n	801223c <_dtoa_r+0x744>
 801238c:	3fe00000 	.word	0x3fe00000
 8012390:	40240000 	.word	0x40240000
 8012394:	9b08      	ldr	r3, [sp, #32]
 8012396:	1e5c      	subs	r4, r3, #1
 8012398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801239a:	42a3      	cmp	r3, r4
 801239c:	bfbf      	itttt	lt
 801239e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80123a0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80123a2:	1ae2      	sublt	r2, r4, r3
 80123a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80123a6:	bfb6      	itet	lt
 80123a8:	189b      	addlt	r3, r3, r2
 80123aa:	1b1c      	subge	r4, r3, r4
 80123ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80123ae:	9b08      	ldr	r3, [sp, #32]
 80123b0:	bfb8      	it	lt
 80123b2:	2400      	movlt	r4, #0
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	bfb9      	ittee	lt
 80123b8:	9b06      	ldrlt	r3, [sp, #24]
 80123ba:	9a08      	ldrlt	r2, [sp, #32]
 80123bc:	9f06      	ldrge	r7, [sp, #24]
 80123be:	9b08      	ldrge	r3, [sp, #32]
 80123c0:	bfbc      	itt	lt
 80123c2:	1a9f      	sublt	r7, r3, r2
 80123c4:	2300      	movlt	r3, #0
 80123c6:	e73b      	b.n	8012240 <_dtoa_r+0x748>
 80123c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80123ca:	9f06      	ldr	r7, [sp, #24]
 80123cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80123ce:	e742      	b.n	8012256 <_dtoa_r+0x75e>
 80123d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123d2:	e76b      	b.n	80122ac <_dtoa_r+0x7b4>
 80123d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80123d6:	2b01      	cmp	r3, #1
 80123d8:	dc19      	bgt.n	801240e <_dtoa_r+0x916>
 80123da:	9b04      	ldr	r3, [sp, #16]
 80123dc:	b9bb      	cbnz	r3, 801240e <_dtoa_r+0x916>
 80123de:	9b05      	ldr	r3, [sp, #20]
 80123e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80123e4:	b99b      	cbnz	r3, 801240e <_dtoa_r+0x916>
 80123e6:	9b05      	ldr	r3, [sp, #20]
 80123e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80123ec:	0d1b      	lsrs	r3, r3, #20
 80123ee:	051b      	lsls	r3, r3, #20
 80123f0:	b183      	cbz	r3, 8012414 <_dtoa_r+0x91c>
 80123f2:	9b06      	ldr	r3, [sp, #24]
 80123f4:	3301      	adds	r3, #1
 80123f6:	9306      	str	r3, [sp, #24]
 80123f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123fa:	3301      	adds	r3, #1
 80123fc:	9309      	str	r3, [sp, #36]	; 0x24
 80123fe:	f04f 0801 	mov.w	r8, #1
 8012402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012404:	2b00      	cmp	r3, #0
 8012406:	f47f af6a 	bne.w	80122de <_dtoa_r+0x7e6>
 801240a:	2001      	movs	r0, #1
 801240c:	e76f      	b.n	80122ee <_dtoa_r+0x7f6>
 801240e:	f04f 0800 	mov.w	r8, #0
 8012412:	e7f6      	b.n	8012402 <_dtoa_r+0x90a>
 8012414:	4698      	mov	r8, r3
 8012416:	e7f4      	b.n	8012402 <_dtoa_r+0x90a>
 8012418:	f43f af7d 	beq.w	8012316 <_dtoa_r+0x81e>
 801241c:	4618      	mov	r0, r3
 801241e:	301c      	adds	r0, #28
 8012420:	e772      	b.n	8012308 <_dtoa_r+0x810>
 8012422:	9b08      	ldr	r3, [sp, #32]
 8012424:	2b00      	cmp	r3, #0
 8012426:	dc36      	bgt.n	8012496 <_dtoa_r+0x99e>
 8012428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801242a:	2b02      	cmp	r3, #2
 801242c:	dd33      	ble.n	8012496 <_dtoa_r+0x99e>
 801242e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012432:	f1b9 0f00 	cmp.w	r9, #0
 8012436:	d10d      	bne.n	8012454 <_dtoa_r+0x95c>
 8012438:	4621      	mov	r1, r4
 801243a:	464b      	mov	r3, r9
 801243c:	2205      	movs	r2, #5
 801243e:	4628      	mov	r0, r5
 8012440:	f000 f9b6 	bl	80127b0 <__multadd>
 8012444:	4601      	mov	r1, r0
 8012446:	4604      	mov	r4, r0
 8012448:	4658      	mov	r0, fp
 801244a:	f000 fbcd 	bl	8012be8 <__mcmp>
 801244e:	2800      	cmp	r0, #0
 8012450:	f73f adb8 	bgt.w	8011fc4 <_dtoa_r+0x4cc>
 8012454:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012456:	9f03      	ldr	r7, [sp, #12]
 8012458:	ea6f 0a03 	mvn.w	sl, r3
 801245c:	f04f 0800 	mov.w	r8, #0
 8012460:	4621      	mov	r1, r4
 8012462:	4628      	mov	r0, r5
 8012464:	f000 f982 	bl	801276c <_Bfree>
 8012468:	2e00      	cmp	r6, #0
 801246a:	f43f aea7 	beq.w	80121bc <_dtoa_r+0x6c4>
 801246e:	f1b8 0f00 	cmp.w	r8, #0
 8012472:	d005      	beq.n	8012480 <_dtoa_r+0x988>
 8012474:	45b0      	cmp	r8, r6
 8012476:	d003      	beq.n	8012480 <_dtoa_r+0x988>
 8012478:	4641      	mov	r1, r8
 801247a:	4628      	mov	r0, r5
 801247c:	f000 f976 	bl	801276c <_Bfree>
 8012480:	4631      	mov	r1, r6
 8012482:	4628      	mov	r0, r5
 8012484:	f000 f972 	bl	801276c <_Bfree>
 8012488:	e698      	b.n	80121bc <_dtoa_r+0x6c4>
 801248a:	2400      	movs	r4, #0
 801248c:	4626      	mov	r6, r4
 801248e:	e7e1      	b.n	8012454 <_dtoa_r+0x95c>
 8012490:	46c2      	mov	sl, r8
 8012492:	4626      	mov	r6, r4
 8012494:	e596      	b.n	8011fc4 <_dtoa_r+0x4cc>
 8012496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012498:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801249c:	2b00      	cmp	r3, #0
 801249e:	f000 80fd 	beq.w	801269c <_dtoa_r+0xba4>
 80124a2:	2f00      	cmp	r7, #0
 80124a4:	dd05      	ble.n	80124b2 <_dtoa_r+0x9ba>
 80124a6:	4631      	mov	r1, r6
 80124a8:	463a      	mov	r2, r7
 80124aa:	4628      	mov	r0, r5
 80124ac:	f000 fb2c 	bl	8012b08 <__lshift>
 80124b0:	4606      	mov	r6, r0
 80124b2:	f1b8 0f00 	cmp.w	r8, #0
 80124b6:	d05c      	beq.n	8012572 <_dtoa_r+0xa7a>
 80124b8:	6871      	ldr	r1, [r6, #4]
 80124ba:	4628      	mov	r0, r5
 80124bc:	f000 f916 	bl	80126ec <_Balloc>
 80124c0:	4607      	mov	r7, r0
 80124c2:	b928      	cbnz	r0, 80124d0 <_dtoa_r+0x9d8>
 80124c4:	4b80      	ldr	r3, [pc, #512]	; (80126c8 <_dtoa_r+0xbd0>)
 80124c6:	4602      	mov	r2, r0
 80124c8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80124cc:	f7ff bb28 	b.w	8011b20 <_dtoa_r+0x28>
 80124d0:	6932      	ldr	r2, [r6, #16]
 80124d2:	3202      	adds	r2, #2
 80124d4:	0092      	lsls	r2, r2, #2
 80124d6:	f106 010c 	add.w	r1, r6, #12
 80124da:	300c      	adds	r0, #12
 80124dc:	f7fe fd1c 	bl	8010f18 <memcpy>
 80124e0:	2201      	movs	r2, #1
 80124e2:	4639      	mov	r1, r7
 80124e4:	4628      	mov	r0, r5
 80124e6:	f000 fb0f 	bl	8012b08 <__lshift>
 80124ea:	9b03      	ldr	r3, [sp, #12]
 80124ec:	3301      	adds	r3, #1
 80124ee:	9308      	str	r3, [sp, #32]
 80124f0:	9b03      	ldr	r3, [sp, #12]
 80124f2:	444b      	add	r3, r9
 80124f4:	930a      	str	r3, [sp, #40]	; 0x28
 80124f6:	9b04      	ldr	r3, [sp, #16]
 80124f8:	f003 0301 	and.w	r3, r3, #1
 80124fc:	46b0      	mov	r8, r6
 80124fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012500:	4606      	mov	r6, r0
 8012502:	9b08      	ldr	r3, [sp, #32]
 8012504:	4621      	mov	r1, r4
 8012506:	3b01      	subs	r3, #1
 8012508:	4658      	mov	r0, fp
 801250a:	9304      	str	r3, [sp, #16]
 801250c:	f7ff fa6a 	bl	80119e4 <quorem>
 8012510:	4603      	mov	r3, r0
 8012512:	3330      	adds	r3, #48	; 0x30
 8012514:	9006      	str	r0, [sp, #24]
 8012516:	4641      	mov	r1, r8
 8012518:	4658      	mov	r0, fp
 801251a:	930b      	str	r3, [sp, #44]	; 0x2c
 801251c:	f000 fb64 	bl	8012be8 <__mcmp>
 8012520:	4632      	mov	r2, r6
 8012522:	4681      	mov	r9, r0
 8012524:	4621      	mov	r1, r4
 8012526:	4628      	mov	r0, r5
 8012528:	f000 fb7a 	bl	8012c20 <__mdiff>
 801252c:	68c2      	ldr	r2, [r0, #12]
 801252e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012530:	4607      	mov	r7, r0
 8012532:	bb02      	cbnz	r2, 8012576 <_dtoa_r+0xa7e>
 8012534:	4601      	mov	r1, r0
 8012536:	4658      	mov	r0, fp
 8012538:	f000 fb56 	bl	8012be8 <__mcmp>
 801253c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801253e:	4602      	mov	r2, r0
 8012540:	4639      	mov	r1, r7
 8012542:	4628      	mov	r0, r5
 8012544:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8012548:	f000 f910 	bl	801276c <_Bfree>
 801254c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801254e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012550:	9f08      	ldr	r7, [sp, #32]
 8012552:	ea43 0102 	orr.w	r1, r3, r2
 8012556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012558:	430b      	orrs	r3, r1
 801255a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801255c:	d10d      	bne.n	801257a <_dtoa_r+0xa82>
 801255e:	2b39      	cmp	r3, #57	; 0x39
 8012560:	d029      	beq.n	80125b6 <_dtoa_r+0xabe>
 8012562:	f1b9 0f00 	cmp.w	r9, #0
 8012566:	dd01      	ble.n	801256c <_dtoa_r+0xa74>
 8012568:	9b06      	ldr	r3, [sp, #24]
 801256a:	3331      	adds	r3, #49	; 0x31
 801256c:	9a04      	ldr	r2, [sp, #16]
 801256e:	7013      	strb	r3, [r2, #0]
 8012570:	e776      	b.n	8012460 <_dtoa_r+0x968>
 8012572:	4630      	mov	r0, r6
 8012574:	e7b9      	b.n	80124ea <_dtoa_r+0x9f2>
 8012576:	2201      	movs	r2, #1
 8012578:	e7e2      	b.n	8012540 <_dtoa_r+0xa48>
 801257a:	f1b9 0f00 	cmp.w	r9, #0
 801257e:	db06      	blt.n	801258e <_dtoa_r+0xa96>
 8012580:	9922      	ldr	r1, [sp, #136]	; 0x88
 8012582:	ea41 0909 	orr.w	r9, r1, r9
 8012586:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012588:	ea59 0101 	orrs.w	r1, r9, r1
 801258c:	d120      	bne.n	80125d0 <_dtoa_r+0xad8>
 801258e:	2a00      	cmp	r2, #0
 8012590:	ddec      	ble.n	801256c <_dtoa_r+0xa74>
 8012592:	4659      	mov	r1, fp
 8012594:	2201      	movs	r2, #1
 8012596:	4628      	mov	r0, r5
 8012598:	9308      	str	r3, [sp, #32]
 801259a:	f000 fab5 	bl	8012b08 <__lshift>
 801259e:	4621      	mov	r1, r4
 80125a0:	4683      	mov	fp, r0
 80125a2:	f000 fb21 	bl	8012be8 <__mcmp>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	9b08      	ldr	r3, [sp, #32]
 80125aa:	dc02      	bgt.n	80125b2 <_dtoa_r+0xaba>
 80125ac:	d1de      	bne.n	801256c <_dtoa_r+0xa74>
 80125ae:	07da      	lsls	r2, r3, #31
 80125b0:	d5dc      	bpl.n	801256c <_dtoa_r+0xa74>
 80125b2:	2b39      	cmp	r3, #57	; 0x39
 80125b4:	d1d8      	bne.n	8012568 <_dtoa_r+0xa70>
 80125b6:	9a04      	ldr	r2, [sp, #16]
 80125b8:	2339      	movs	r3, #57	; 0x39
 80125ba:	7013      	strb	r3, [r2, #0]
 80125bc:	463b      	mov	r3, r7
 80125be:	461f      	mov	r7, r3
 80125c0:	3b01      	subs	r3, #1
 80125c2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80125c6:	2a39      	cmp	r2, #57	; 0x39
 80125c8:	d050      	beq.n	801266c <_dtoa_r+0xb74>
 80125ca:	3201      	adds	r2, #1
 80125cc:	701a      	strb	r2, [r3, #0]
 80125ce:	e747      	b.n	8012460 <_dtoa_r+0x968>
 80125d0:	2a00      	cmp	r2, #0
 80125d2:	dd03      	ble.n	80125dc <_dtoa_r+0xae4>
 80125d4:	2b39      	cmp	r3, #57	; 0x39
 80125d6:	d0ee      	beq.n	80125b6 <_dtoa_r+0xabe>
 80125d8:	3301      	adds	r3, #1
 80125da:	e7c7      	b.n	801256c <_dtoa_r+0xa74>
 80125dc:	9a08      	ldr	r2, [sp, #32]
 80125de:	990a      	ldr	r1, [sp, #40]	; 0x28
 80125e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80125e4:	428a      	cmp	r2, r1
 80125e6:	d02a      	beq.n	801263e <_dtoa_r+0xb46>
 80125e8:	4659      	mov	r1, fp
 80125ea:	2300      	movs	r3, #0
 80125ec:	220a      	movs	r2, #10
 80125ee:	4628      	mov	r0, r5
 80125f0:	f000 f8de 	bl	80127b0 <__multadd>
 80125f4:	45b0      	cmp	r8, r6
 80125f6:	4683      	mov	fp, r0
 80125f8:	f04f 0300 	mov.w	r3, #0
 80125fc:	f04f 020a 	mov.w	r2, #10
 8012600:	4641      	mov	r1, r8
 8012602:	4628      	mov	r0, r5
 8012604:	d107      	bne.n	8012616 <_dtoa_r+0xb1e>
 8012606:	f000 f8d3 	bl	80127b0 <__multadd>
 801260a:	4680      	mov	r8, r0
 801260c:	4606      	mov	r6, r0
 801260e:	9b08      	ldr	r3, [sp, #32]
 8012610:	3301      	adds	r3, #1
 8012612:	9308      	str	r3, [sp, #32]
 8012614:	e775      	b.n	8012502 <_dtoa_r+0xa0a>
 8012616:	f000 f8cb 	bl	80127b0 <__multadd>
 801261a:	4631      	mov	r1, r6
 801261c:	4680      	mov	r8, r0
 801261e:	2300      	movs	r3, #0
 8012620:	220a      	movs	r2, #10
 8012622:	4628      	mov	r0, r5
 8012624:	f000 f8c4 	bl	80127b0 <__multadd>
 8012628:	4606      	mov	r6, r0
 801262a:	e7f0      	b.n	801260e <_dtoa_r+0xb16>
 801262c:	f1b9 0f00 	cmp.w	r9, #0
 8012630:	9a03      	ldr	r2, [sp, #12]
 8012632:	bfcc      	ite	gt
 8012634:	464f      	movgt	r7, r9
 8012636:	2701      	movle	r7, #1
 8012638:	4417      	add	r7, r2
 801263a:	f04f 0800 	mov.w	r8, #0
 801263e:	4659      	mov	r1, fp
 8012640:	2201      	movs	r2, #1
 8012642:	4628      	mov	r0, r5
 8012644:	9308      	str	r3, [sp, #32]
 8012646:	f000 fa5f 	bl	8012b08 <__lshift>
 801264a:	4621      	mov	r1, r4
 801264c:	4683      	mov	fp, r0
 801264e:	f000 facb 	bl	8012be8 <__mcmp>
 8012652:	2800      	cmp	r0, #0
 8012654:	dcb2      	bgt.n	80125bc <_dtoa_r+0xac4>
 8012656:	d102      	bne.n	801265e <_dtoa_r+0xb66>
 8012658:	9b08      	ldr	r3, [sp, #32]
 801265a:	07db      	lsls	r3, r3, #31
 801265c:	d4ae      	bmi.n	80125bc <_dtoa_r+0xac4>
 801265e:	463b      	mov	r3, r7
 8012660:	461f      	mov	r7, r3
 8012662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012666:	2a30      	cmp	r2, #48	; 0x30
 8012668:	d0fa      	beq.n	8012660 <_dtoa_r+0xb68>
 801266a:	e6f9      	b.n	8012460 <_dtoa_r+0x968>
 801266c:	9a03      	ldr	r2, [sp, #12]
 801266e:	429a      	cmp	r2, r3
 8012670:	d1a5      	bne.n	80125be <_dtoa_r+0xac6>
 8012672:	f10a 0a01 	add.w	sl, sl, #1
 8012676:	2331      	movs	r3, #49	; 0x31
 8012678:	e779      	b.n	801256e <_dtoa_r+0xa76>
 801267a:	4b14      	ldr	r3, [pc, #80]	; (80126cc <_dtoa_r+0xbd4>)
 801267c:	f7ff baa7 	b.w	8011bce <_dtoa_r+0xd6>
 8012680:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012682:	2b00      	cmp	r3, #0
 8012684:	f47f aa80 	bne.w	8011b88 <_dtoa_r+0x90>
 8012688:	4b11      	ldr	r3, [pc, #68]	; (80126d0 <_dtoa_r+0xbd8>)
 801268a:	f7ff baa0 	b.w	8011bce <_dtoa_r+0xd6>
 801268e:	f1b9 0f00 	cmp.w	r9, #0
 8012692:	dc03      	bgt.n	801269c <_dtoa_r+0xba4>
 8012694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012696:	2b02      	cmp	r3, #2
 8012698:	f73f aecb 	bgt.w	8012432 <_dtoa_r+0x93a>
 801269c:	9f03      	ldr	r7, [sp, #12]
 801269e:	4621      	mov	r1, r4
 80126a0:	4658      	mov	r0, fp
 80126a2:	f7ff f99f 	bl	80119e4 <quorem>
 80126a6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80126aa:	f807 3b01 	strb.w	r3, [r7], #1
 80126ae:	9a03      	ldr	r2, [sp, #12]
 80126b0:	1aba      	subs	r2, r7, r2
 80126b2:	4591      	cmp	r9, r2
 80126b4:	ddba      	ble.n	801262c <_dtoa_r+0xb34>
 80126b6:	4659      	mov	r1, fp
 80126b8:	2300      	movs	r3, #0
 80126ba:	220a      	movs	r2, #10
 80126bc:	4628      	mov	r0, r5
 80126be:	f000 f877 	bl	80127b0 <__multadd>
 80126c2:	4683      	mov	fp, r0
 80126c4:	e7eb      	b.n	801269e <_dtoa_r+0xba6>
 80126c6:	bf00      	nop
 80126c8:	08015a77 	.word	0x08015a77
 80126cc:	080159d4 	.word	0x080159d4
 80126d0:	080159f8 	.word	0x080159f8

080126d4 <_localeconv_r>:
 80126d4:	4800      	ldr	r0, [pc, #0]	; (80126d8 <_localeconv_r+0x4>)
 80126d6:	4770      	bx	lr
 80126d8:	200001b0 	.word	0x200001b0

080126dc <malloc>:
 80126dc:	4b02      	ldr	r3, [pc, #8]	; (80126e8 <malloc+0xc>)
 80126de:	4601      	mov	r1, r0
 80126e0:	6818      	ldr	r0, [r3, #0]
 80126e2:	f000 bbff 	b.w	8012ee4 <_malloc_r>
 80126e6:	bf00      	nop
 80126e8:	2000005c 	.word	0x2000005c

080126ec <_Balloc>:
 80126ec:	b570      	push	{r4, r5, r6, lr}
 80126ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80126f0:	4604      	mov	r4, r0
 80126f2:	460d      	mov	r5, r1
 80126f4:	b976      	cbnz	r6, 8012714 <_Balloc+0x28>
 80126f6:	2010      	movs	r0, #16
 80126f8:	f7ff fff0 	bl	80126dc <malloc>
 80126fc:	4602      	mov	r2, r0
 80126fe:	6260      	str	r0, [r4, #36]	; 0x24
 8012700:	b920      	cbnz	r0, 801270c <_Balloc+0x20>
 8012702:	4b18      	ldr	r3, [pc, #96]	; (8012764 <_Balloc+0x78>)
 8012704:	4818      	ldr	r0, [pc, #96]	; (8012768 <_Balloc+0x7c>)
 8012706:	2166      	movs	r1, #102	; 0x66
 8012708:	f000 fdcc 	bl	80132a4 <__assert_func>
 801270c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012710:	6006      	str	r6, [r0, #0]
 8012712:	60c6      	str	r6, [r0, #12]
 8012714:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012716:	68f3      	ldr	r3, [r6, #12]
 8012718:	b183      	cbz	r3, 801273c <_Balloc+0x50>
 801271a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012722:	b9b8      	cbnz	r0, 8012754 <_Balloc+0x68>
 8012724:	2101      	movs	r1, #1
 8012726:	fa01 f605 	lsl.w	r6, r1, r5
 801272a:	1d72      	adds	r2, r6, #5
 801272c:	0092      	lsls	r2, r2, #2
 801272e:	4620      	mov	r0, r4
 8012730:	f000 fb5a 	bl	8012de8 <_calloc_r>
 8012734:	b160      	cbz	r0, 8012750 <_Balloc+0x64>
 8012736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801273a:	e00e      	b.n	801275a <_Balloc+0x6e>
 801273c:	2221      	movs	r2, #33	; 0x21
 801273e:	2104      	movs	r1, #4
 8012740:	4620      	mov	r0, r4
 8012742:	f000 fb51 	bl	8012de8 <_calloc_r>
 8012746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012748:	60f0      	str	r0, [r6, #12]
 801274a:	68db      	ldr	r3, [r3, #12]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d1e4      	bne.n	801271a <_Balloc+0x2e>
 8012750:	2000      	movs	r0, #0
 8012752:	bd70      	pop	{r4, r5, r6, pc}
 8012754:	6802      	ldr	r2, [r0, #0]
 8012756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801275a:	2300      	movs	r3, #0
 801275c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012760:	e7f7      	b.n	8012752 <_Balloc+0x66>
 8012762:	bf00      	nop
 8012764:	08015a05 	.word	0x08015a05
 8012768:	08015a88 	.word	0x08015a88

0801276c <_Bfree>:
 801276c:	b570      	push	{r4, r5, r6, lr}
 801276e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012770:	4605      	mov	r5, r0
 8012772:	460c      	mov	r4, r1
 8012774:	b976      	cbnz	r6, 8012794 <_Bfree+0x28>
 8012776:	2010      	movs	r0, #16
 8012778:	f7ff ffb0 	bl	80126dc <malloc>
 801277c:	4602      	mov	r2, r0
 801277e:	6268      	str	r0, [r5, #36]	; 0x24
 8012780:	b920      	cbnz	r0, 801278c <_Bfree+0x20>
 8012782:	4b09      	ldr	r3, [pc, #36]	; (80127a8 <_Bfree+0x3c>)
 8012784:	4809      	ldr	r0, [pc, #36]	; (80127ac <_Bfree+0x40>)
 8012786:	218a      	movs	r1, #138	; 0x8a
 8012788:	f000 fd8c 	bl	80132a4 <__assert_func>
 801278c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012790:	6006      	str	r6, [r0, #0]
 8012792:	60c6      	str	r6, [r0, #12]
 8012794:	b13c      	cbz	r4, 80127a6 <_Bfree+0x3a>
 8012796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012798:	6862      	ldr	r2, [r4, #4]
 801279a:	68db      	ldr	r3, [r3, #12]
 801279c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80127a0:	6021      	str	r1, [r4, #0]
 80127a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80127a6:	bd70      	pop	{r4, r5, r6, pc}
 80127a8:	08015a05 	.word	0x08015a05
 80127ac:	08015a88 	.word	0x08015a88

080127b0 <__multadd>:
 80127b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127b4:	690d      	ldr	r5, [r1, #16]
 80127b6:	4607      	mov	r7, r0
 80127b8:	460c      	mov	r4, r1
 80127ba:	461e      	mov	r6, r3
 80127bc:	f101 0c14 	add.w	ip, r1, #20
 80127c0:	2000      	movs	r0, #0
 80127c2:	f8dc 3000 	ldr.w	r3, [ip]
 80127c6:	b299      	uxth	r1, r3
 80127c8:	fb02 6101 	mla	r1, r2, r1, r6
 80127cc:	0c1e      	lsrs	r6, r3, #16
 80127ce:	0c0b      	lsrs	r3, r1, #16
 80127d0:	fb02 3306 	mla	r3, r2, r6, r3
 80127d4:	b289      	uxth	r1, r1
 80127d6:	3001      	adds	r0, #1
 80127d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80127dc:	4285      	cmp	r5, r0
 80127de:	f84c 1b04 	str.w	r1, [ip], #4
 80127e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80127e6:	dcec      	bgt.n	80127c2 <__multadd+0x12>
 80127e8:	b30e      	cbz	r6, 801282e <__multadd+0x7e>
 80127ea:	68a3      	ldr	r3, [r4, #8]
 80127ec:	42ab      	cmp	r3, r5
 80127ee:	dc19      	bgt.n	8012824 <__multadd+0x74>
 80127f0:	6861      	ldr	r1, [r4, #4]
 80127f2:	4638      	mov	r0, r7
 80127f4:	3101      	adds	r1, #1
 80127f6:	f7ff ff79 	bl	80126ec <_Balloc>
 80127fa:	4680      	mov	r8, r0
 80127fc:	b928      	cbnz	r0, 801280a <__multadd+0x5a>
 80127fe:	4602      	mov	r2, r0
 8012800:	4b0c      	ldr	r3, [pc, #48]	; (8012834 <__multadd+0x84>)
 8012802:	480d      	ldr	r0, [pc, #52]	; (8012838 <__multadd+0x88>)
 8012804:	21b5      	movs	r1, #181	; 0xb5
 8012806:	f000 fd4d 	bl	80132a4 <__assert_func>
 801280a:	6922      	ldr	r2, [r4, #16]
 801280c:	3202      	adds	r2, #2
 801280e:	f104 010c 	add.w	r1, r4, #12
 8012812:	0092      	lsls	r2, r2, #2
 8012814:	300c      	adds	r0, #12
 8012816:	f7fe fb7f 	bl	8010f18 <memcpy>
 801281a:	4621      	mov	r1, r4
 801281c:	4638      	mov	r0, r7
 801281e:	f7ff ffa5 	bl	801276c <_Bfree>
 8012822:	4644      	mov	r4, r8
 8012824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012828:	3501      	adds	r5, #1
 801282a:	615e      	str	r6, [r3, #20]
 801282c:	6125      	str	r5, [r4, #16]
 801282e:	4620      	mov	r0, r4
 8012830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012834:	08015a77 	.word	0x08015a77
 8012838:	08015a88 	.word	0x08015a88

0801283c <__hi0bits>:
 801283c:	0c02      	lsrs	r2, r0, #16
 801283e:	0412      	lsls	r2, r2, #16
 8012840:	4603      	mov	r3, r0
 8012842:	b9ca      	cbnz	r2, 8012878 <__hi0bits+0x3c>
 8012844:	0403      	lsls	r3, r0, #16
 8012846:	2010      	movs	r0, #16
 8012848:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801284c:	bf04      	itt	eq
 801284e:	021b      	lsleq	r3, r3, #8
 8012850:	3008      	addeq	r0, #8
 8012852:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8012856:	bf04      	itt	eq
 8012858:	011b      	lsleq	r3, r3, #4
 801285a:	3004      	addeq	r0, #4
 801285c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012860:	bf04      	itt	eq
 8012862:	009b      	lsleq	r3, r3, #2
 8012864:	3002      	addeq	r0, #2
 8012866:	2b00      	cmp	r3, #0
 8012868:	db05      	blt.n	8012876 <__hi0bits+0x3a>
 801286a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 801286e:	f100 0001 	add.w	r0, r0, #1
 8012872:	bf08      	it	eq
 8012874:	2020      	moveq	r0, #32
 8012876:	4770      	bx	lr
 8012878:	2000      	movs	r0, #0
 801287a:	e7e5      	b.n	8012848 <__hi0bits+0xc>

0801287c <__lo0bits>:
 801287c:	6803      	ldr	r3, [r0, #0]
 801287e:	4602      	mov	r2, r0
 8012880:	f013 0007 	ands.w	r0, r3, #7
 8012884:	d00b      	beq.n	801289e <__lo0bits+0x22>
 8012886:	07d9      	lsls	r1, r3, #31
 8012888:	d421      	bmi.n	80128ce <__lo0bits+0x52>
 801288a:	0798      	lsls	r0, r3, #30
 801288c:	bf49      	itett	mi
 801288e:	085b      	lsrmi	r3, r3, #1
 8012890:	089b      	lsrpl	r3, r3, #2
 8012892:	2001      	movmi	r0, #1
 8012894:	6013      	strmi	r3, [r2, #0]
 8012896:	bf5c      	itt	pl
 8012898:	6013      	strpl	r3, [r2, #0]
 801289a:	2002      	movpl	r0, #2
 801289c:	4770      	bx	lr
 801289e:	b299      	uxth	r1, r3
 80128a0:	b909      	cbnz	r1, 80128a6 <__lo0bits+0x2a>
 80128a2:	0c1b      	lsrs	r3, r3, #16
 80128a4:	2010      	movs	r0, #16
 80128a6:	b2d9      	uxtb	r1, r3
 80128a8:	b909      	cbnz	r1, 80128ae <__lo0bits+0x32>
 80128aa:	3008      	adds	r0, #8
 80128ac:	0a1b      	lsrs	r3, r3, #8
 80128ae:	0719      	lsls	r1, r3, #28
 80128b0:	bf04      	itt	eq
 80128b2:	091b      	lsreq	r3, r3, #4
 80128b4:	3004      	addeq	r0, #4
 80128b6:	0799      	lsls	r1, r3, #30
 80128b8:	bf04      	itt	eq
 80128ba:	089b      	lsreq	r3, r3, #2
 80128bc:	3002      	addeq	r0, #2
 80128be:	07d9      	lsls	r1, r3, #31
 80128c0:	d403      	bmi.n	80128ca <__lo0bits+0x4e>
 80128c2:	085b      	lsrs	r3, r3, #1
 80128c4:	f100 0001 	add.w	r0, r0, #1
 80128c8:	d003      	beq.n	80128d2 <__lo0bits+0x56>
 80128ca:	6013      	str	r3, [r2, #0]
 80128cc:	4770      	bx	lr
 80128ce:	2000      	movs	r0, #0
 80128d0:	4770      	bx	lr
 80128d2:	2020      	movs	r0, #32
 80128d4:	4770      	bx	lr
	...

080128d8 <__i2b>:
 80128d8:	b510      	push	{r4, lr}
 80128da:	460c      	mov	r4, r1
 80128dc:	2101      	movs	r1, #1
 80128de:	f7ff ff05 	bl	80126ec <_Balloc>
 80128e2:	4602      	mov	r2, r0
 80128e4:	b928      	cbnz	r0, 80128f2 <__i2b+0x1a>
 80128e6:	4b05      	ldr	r3, [pc, #20]	; (80128fc <__i2b+0x24>)
 80128e8:	4805      	ldr	r0, [pc, #20]	; (8012900 <__i2b+0x28>)
 80128ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80128ee:	f000 fcd9 	bl	80132a4 <__assert_func>
 80128f2:	2301      	movs	r3, #1
 80128f4:	6144      	str	r4, [r0, #20]
 80128f6:	6103      	str	r3, [r0, #16]
 80128f8:	bd10      	pop	{r4, pc}
 80128fa:	bf00      	nop
 80128fc:	08015a77 	.word	0x08015a77
 8012900:	08015a88 	.word	0x08015a88

08012904 <__multiply>:
 8012904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012908:	4691      	mov	r9, r2
 801290a:	690a      	ldr	r2, [r1, #16]
 801290c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012910:	429a      	cmp	r2, r3
 8012912:	bfb8      	it	lt
 8012914:	460b      	movlt	r3, r1
 8012916:	460c      	mov	r4, r1
 8012918:	bfbc      	itt	lt
 801291a:	464c      	movlt	r4, r9
 801291c:	4699      	movlt	r9, r3
 801291e:	6927      	ldr	r7, [r4, #16]
 8012920:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012924:	68a3      	ldr	r3, [r4, #8]
 8012926:	6861      	ldr	r1, [r4, #4]
 8012928:	eb07 060a 	add.w	r6, r7, sl
 801292c:	42b3      	cmp	r3, r6
 801292e:	b085      	sub	sp, #20
 8012930:	bfb8      	it	lt
 8012932:	3101      	addlt	r1, #1
 8012934:	f7ff feda 	bl	80126ec <_Balloc>
 8012938:	b930      	cbnz	r0, 8012948 <__multiply+0x44>
 801293a:	4602      	mov	r2, r0
 801293c:	4b43      	ldr	r3, [pc, #268]	; (8012a4c <__multiply+0x148>)
 801293e:	4844      	ldr	r0, [pc, #272]	; (8012a50 <__multiply+0x14c>)
 8012940:	f240 115d 	movw	r1, #349	; 0x15d
 8012944:	f000 fcae 	bl	80132a4 <__assert_func>
 8012948:	f100 0514 	add.w	r5, r0, #20
 801294c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012950:	462b      	mov	r3, r5
 8012952:	2200      	movs	r2, #0
 8012954:	4543      	cmp	r3, r8
 8012956:	d321      	bcc.n	801299c <__multiply+0x98>
 8012958:	f104 0314 	add.w	r3, r4, #20
 801295c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012960:	f109 0314 	add.w	r3, r9, #20
 8012964:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012968:	9202      	str	r2, [sp, #8]
 801296a:	1b3a      	subs	r2, r7, r4
 801296c:	3a15      	subs	r2, #21
 801296e:	f022 0203 	bic.w	r2, r2, #3
 8012972:	3204      	adds	r2, #4
 8012974:	f104 0115 	add.w	r1, r4, #21
 8012978:	428f      	cmp	r7, r1
 801297a:	bf38      	it	cc
 801297c:	2204      	movcc	r2, #4
 801297e:	9201      	str	r2, [sp, #4]
 8012980:	9a02      	ldr	r2, [sp, #8]
 8012982:	9303      	str	r3, [sp, #12]
 8012984:	429a      	cmp	r2, r3
 8012986:	d80c      	bhi.n	80129a2 <__multiply+0x9e>
 8012988:	2e00      	cmp	r6, #0
 801298a:	dd03      	ble.n	8012994 <__multiply+0x90>
 801298c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012990:	2b00      	cmp	r3, #0
 8012992:	d059      	beq.n	8012a48 <__multiply+0x144>
 8012994:	6106      	str	r6, [r0, #16]
 8012996:	b005      	add	sp, #20
 8012998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801299c:	f843 2b04 	str.w	r2, [r3], #4
 80129a0:	e7d8      	b.n	8012954 <__multiply+0x50>
 80129a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80129a6:	f1ba 0f00 	cmp.w	sl, #0
 80129aa:	d023      	beq.n	80129f4 <__multiply+0xf0>
 80129ac:	f104 0e14 	add.w	lr, r4, #20
 80129b0:	46a9      	mov	r9, r5
 80129b2:	f04f 0c00 	mov.w	ip, #0
 80129b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80129ba:	f8d9 1000 	ldr.w	r1, [r9]
 80129be:	fa1f fb82 	uxth.w	fp, r2
 80129c2:	b289      	uxth	r1, r1
 80129c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80129c8:	4461      	add	r1, ip
 80129ca:	f8d9 c000 	ldr.w	ip, [r9]
 80129ce:	0c12      	lsrs	r2, r2, #16
 80129d0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80129d4:	fb0a c202 	mla	r2, sl, r2, ip
 80129d8:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80129dc:	b289      	uxth	r1, r1
 80129de:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80129e2:	4577      	cmp	r7, lr
 80129e4:	f849 1b04 	str.w	r1, [r9], #4
 80129e8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80129ec:	d8e3      	bhi.n	80129b6 <__multiply+0xb2>
 80129ee:	9a01      	ldr	r2, [sp, #4]
 80129f0:	f845 c002 	str.w	ip, [r5, r2]
 80129f4:	9a03      	ldr	r2, [sp, #12]
 80129f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80129fa:	3304      	adds	r3, #4
 80129fc:	f1b9 0f00 	cmp.w	r9, #0
 8012a00:	d020      	beq.n	8012a44 <__multiply+0x140>
 8012a02:	6829      	ldr	r1, [r5, #0]
 8012a04:	f104 0c14 	add.w	ip, r4, #20
 8012a08:	46ae      	mov	lr, r5
 8012a0a:	f04f 0a00 	mov.w	sl, #0
 8012a0e:	f8bc b000 	ldrh.w	fp, [ip]
 8012a12:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012a16:	fb09 220b 	mla	r2, r9, fp, r2
 8012a1a:	4492      	add	sl, r2
 8012a1c:	b289      	uxth	r1, r1
 8012a1e:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012a22:	f84e 1b04 	str.w	r1, [lr], #4
 8012a26:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012a2a:	f8be 1000 	ldrh.w	r1, [lr]
 8012a2e:	0c12      	lsrs	r2, r2, #16
 8012a30:	fb09 1102 	mla	r1, r9, r2, r1
 8012a34:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012a38:	4567      	cmp	r7, ip
 8012a3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012a3e:	d8e6      	bhi.n	8012a0e <__multiply+0x10a>
 8012a40:	9a01      	ldr	r2, [sp, #4]
 8012a42:	50a9      	str	r1, [r5, r2]
 8012a44:	3504      	adds	r5, #4
 8012a46:	e79b      	b.n	8012980 <__multiply+0x7c>
 8012a48:	3e01      	subs	r6, #1
 8012a4a:	e79d      	b.n	8012988 <__multiply+0x84>
 8012a4c:	08015a77 	.word	0x08015a77
 8012a50:	08015a88 	.word	0x08015a88

08012a54 <__pow5mult>:
 8012a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a58:	4615      	mov	r5, r2
 8012a5a:	f012 0203 	ands.w	r2, r2, #3
 8012a5e:	4606      	mov	r6, r0
 8012a60:	460f      	mov	r7, r1
 8012a62:	d007      	beq.n	8012a74 <__pow5mult+0x20>
 8012a64:	4c25      	ldr	r4, [pc, #148]	; (8012afc <__pow5mult+0xa8>)
 8012a66:	3a01      	subs	r2, #1
 8012a68:	2300      	movs	r3, #0
 8012a6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a6e:	f7ff fe9f 	bl	80127b0 <__multadd>
 8012a72:	4607      	mov	r7, r0
 8012a74:	10ad      	asrs	r5, r5, #2
 8012a76:	d03d      	beq.n	8012af4 <__pow5mult+0xa0>
 8012a78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012a7a:	b97c      	cbnz	r4, 8012a9c <__pow5mult+0x48>
 8012a7c:	2010      	movs	r0, #16
 8012a7e:	f7ff fe2d 	bl	80126dc <malloc>
 8012a82:	4602      	mov	r2, r0
 8012a84:	6270      	str	r0, [r6, #36]	; 0x24
 8012a86:	b928      	cbnz	r0, 8012a94 <__pow5mult+0x40>
 8012a88:	4b1d      	ldr	r3, [pc, #116]	; (8012b00 <__pow5mult+0xac>)
 8012a8a:	481e      	ldr	r0, [pc, #120]	; (8012b04 <__pow5mult+0xb0>)
 8012a8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012a90:	f000 fc08 	bl	80132a4 <__assert_func>
 8012a94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012a98:	6004      	str	r4, [r0, #0]
 8012a9a:	60c4      	str	r4, [r0, #12]
 8012a9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012aa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012aa4:	b94c      	cbnz	r4, 8012aba <__pow5mult+0x66>
 8012aa6:	f240 2171 	movw	r1, #625	; 0x271
 8012aaa:	4630      	mov	r0, r6
 8012aac:	f7ff ff14 	bl	80128d8 <__i2b>
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	6003      	str	r3, [r0, #0]
 8012aba:	f04f 0900 	mov.w	r9, #0
 8012abe:	07eb      	lsls	r3, r5, #31
 8012ac0:	d50a      	bpl.n	8012ad8 <__pow5mult+0x84>
 8012ac2:	4639      	mov	r1, r7
 8012ac4:	4622      	mov	r2, r4
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	f7ff ff1c 	bl	8012904 <__multiply>
 8012acc:	4639      	mov	r1, r7
 8012ace:	4680      	mov	r8, r0
 8012ad0:	4630      	mov	r0, r6
 8012ad2:	f7ff fe4b 	bl	801276c <_Bfree>
 8012ad6:	4647      	mov	r7, r8
 8012ad8:	106d      	asrs	r5, r5, #1
 8012ada:	d00b      	beq.n	8012af4 <__pow5mult+0xa0>
 8012adc:	6820      	ldr	r0, [r4, #0]
 8012ade:	b938      	cbnz	r0, 8012af0 <__pow5mult+0x9c>
 8012ae0:	4622      	mov	r2, r4
 8012ae2:	4621      	mov	r1, r4
 8012ae4:	4630      	mov	r0, r6
 8012ae6:	f7ff ff0d 	bl	8012904 <__multiply>
 8012aea:	6020      	str	r0, [r4, #0]
 8012aec:	f8c0 9000 	str.w	r9, [r0]
 8012af0:	4604      	mov	r4, r0
 8012af2:	e7e4      	b.n	8012abe <__pow5mult+0x6a>
 8012af4:	4638      	mov	r0, r7
 8012af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012afa:	bf00      	nop
 8012afc:	08015bd8 	.word	0x08015bd8
 8012b00:	08015a05 	.word	0x08015a05
 8012b04:	08015a88 	.word	0x08015a88

08012b08 <__lshift>:
 8012b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b0c:	460c      	mov	r4, r1
 8012b0e:	6849      	ldr	r1, [r1, #4]
 8012b10:	6923      	ldr	r3, [r4, #16]
 8012b12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b16:	68a3      	ldr	r3, [r4, #8]
 8012b18:	4607      	mov	r7, r0
 8012b1a:	4691      	mov	r9, r2
 8012b1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b20:	f108 0601 	add.w	r6, r8, #1
 8012b24:	42b3      	cmp	r3, r6
 8012b26:	db0b      	blt.n	8012b40 <__lshift+0x38>
 8012b28:	4638      	mov	r0, r7
 8012b2a:	f7ff fddf 	bl	80126ec <_Balloc>
 8012b2e:	4605      	mov	r5, r0
 8012b30:	b948      	cbnz	r0, 8012b46 <__lshift+0x3e>
 8012b32:	4602      	mov	r2, r0
 8012b34:	4b2a      	ldr	r3, [pc, #168]	; (8012be0 <__lshift+0xd8>)
 8012b36:	482b      	ldr	r0, [pc, #172]	; (8012be4 <__lshift+0xdc>)
 8012b38:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012b3c:	f000 fbb2 	bl	80132a4 <__assert_func>
 8012b40:	3101      	adds	r1, #1
 8012b42:	005b      	lsls	r3, r3, #1
 8012b44:	e7ee      	b.n	8012b24 <__lshift+0x1c>
 8012b46:	2300      	movs	r3, #0
 8012b48:	f100 0114 	add.w	r1, r0, #20
 8012b4c:	f100 0210 	add.w	r2, r0, #16
 8012b50:	4618      	mov	r0, r3
 8012b52:	4553      	cmp	r3, sl
 8012b54:	db37      	blt.n	8012bc6 <__lshift+0xbe>
 8012b56:	6920      	ldr	r0, [r4, #16]
 8012b58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b5c:	f104 0314 	add.w	r3, r4, #20
 8012b60:	f019 091f 	ands.w	r9, r9, #31
 8012b64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012b6c:	d02f      	beq.n	8012bce <__lshift+0xc6>
 8012b6e:	f1c9 0e20 	rsb	lr, r9, #32
 8012b72:	468a      	mov	sl, r1
 8012b74:	f04f 0c00 	mov.w	ip, #0
 8012b78:	681a      	ldr	r2, [r3, #0]
 8012b7a:	fa02 f209 	lsl.w	r2, r2, r9
 8012b7e:	ea42 020c 	orr.w	r2, r2, ip
 8012b82:	f84a 2b04 	str.w	r2, [sl], #4
 8012b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b8a:	4298      	cmp	r0, r3
 8012b8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012b90:	d8f2      	bhi.n	8012b78 <__lshift+0x70>
 8012b92:	1b03      	subs	r3, r0, r4
 8012b94:	3b15      	subs	r3, #21
 8012b96:	f023 0303 	bic.w	r3, r3, #3
 8012b9a:	3304      	adds	r3, #4
 8012b9c:	f104 0215 	add.w	r2, r4, #21
 8012ba0:	4290      	cmp	r0, r2
 8012ba2:	bf38      	it	cc
 8012ba4:	2304      	movcc	r3, #4
 8012ba6:	f841 c003 	str.w	ip, [r1, r3]
 8012baa:	f1bc 0f00 	cmp.w	ip, #0
 8012bae:	d001      	beq.n	8012bb4 <__lshift+0xac>
 8012bb0:	f108 0602 	add.w	r6, r8, #2
 8012bb4:	3e01      	subs	r6, #1
 8012bb6:	4638      	mov	r0, r7
 8012bb8:	612e      	str	r6, [r5, #16]
 8012bba:	4621      	mov	r1, r4
 8012bbc:	f7ff fdd6 	bl	801276c <_Bfree>
 8012bc0:	4628      	mov	r0, r5
 8012bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012bca:	3301      	adds	r3, #1
 8012bcc:	e7c1      	b.n	8012b52 <__lshift+0x4a>
 8012bce:	3904      	subs	r1, #4
 8012bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012bd8:	4298      	cmp	r0, r3
 8012bda:	d8f9      	bhi.n	8012bd0 <__lshift+0xc8>
 8012bdc:	e7ea      	b.n	8012bb4 <__lshift+0xac>
 8012bde:	bf00      	nop
 8012be0:	08015a77 	.word	0x08015a77
 8012be4:	08015a88 	.word	0x08015a88

08012be8 <__mcmp>:
 8012be8:	690a      	ldr	r2, [r1, #16]
 8012bea:	4603      	mov	r3, r0
 8012bec:	6900      	ldr	r0, [r0, #16]
 8012bee:	1a80      	subs	r0, r0, r2
 8012bf0:	b530      	push	{r4, r5, lr}
 8012bf2:	d10d      	bne.n	8012c10 <__mcmp+0x28>
 8012bf4:	3314      	adds	r3, #20
 8012bf6:	3114      	adds	r1, #20
 8012bf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012bfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012c00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012c04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012c08:	4295      	cmp	r5, r2
 8012c0a:	d002      	beq.n	8012c12 <__mcmp+0x2a>
 8012c0c:	d304      	bcc.n	8012c18 <__mcmp+0x30>
 8012c0e:	2001      	movs	r0, #1
 8012c10:	bd30      	pop	{r4, r5, pc}
 8012c12:	42a3      	cmp	r3, r4
 8012c14:	d3f4      	bcc.n	8012c00 <__mcmp+0x18>
 8012c16:	e7fb      	b.n	8012c10 <__mcmp+0x28>
 8012c18:	f04f 30ff 	mov.w	r0, #4294967295
 8012c1c:	e7f8      	b.n	8012c10 <__mcmp+0x28>
	...

08012c20 <__mdiff>:
 8012c20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c24:	460d      	mov	r5, r1
 8012c26:	4607      	mov	r7, r0
 8012c28:	4611      	mov	r1, r2
 8012c2a:	4628      	mov	r0, r5
 8012c2c:	4614      	mov	r4, r2
 8012c2e:	f7ff ffdb 	bl	8012be8 <__mcmp>
 8012c32:	1e06      	subs	r6, r0, #0
 8012c34:	d111      	bne.n	8012c5a <__mdiff+0x3a>
 8012c36:	4631      	mov	r1, r6
 8012c38:	4638      	mov	r0, r7
 8012c3a:	f7ff fd57 	bl	80126ec <_Balloc>
 8012c3e:	4602      	mov	r2, r0
 8012c40:	b928      	cbnz	r0, 8012c4e <__mdiff+0x2e>
 8012c42:	4b39      	ldr	r3, [pc, #228]	; (8012d28 <__mdiff+0x108>)
 8012c44:	f240 2132 	movw	r1, #562	; 0x232
 8012c48:	4838      	ldr	r0, [pc, #224]	; (8012d2c <__mdiff+0x10c>)
 8012c4a:	f000 fb2b 	bl	80132a4 <__assert_func>
 8012c4e:	2301      	movs	r3, #1
 8012c50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012c54:	4610      	mov	r0, r2
 8012c56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c5a:	bfa4      	itt	ge
 8012c5c:	4623      	movge	r3, r4
 8012c5e:	462c      	movge	r4, r5
 8012c60:	4638      	mov	r0, r7
 8012c62:	6861      	ldr	r1, [r4, #4]
 8012c64:	bfa6      	itte	ge
 8012c66:	461d      	movge	r5, r3
 8012c68:	2600      	movge	r6, #0
 8012c6a:	2601      	movlt	r6, #1
 8012c6c:	f7ff fd3e 	bl	80126ec <_Balloc>
 8012c70:	4602      	mov	r2, r0
 8012c72:	b918      	cbnz	r0, 8012c7c <__mdiff+0x5c>
 8012c74:	4b2c      	ldr	r3, [pc, #176]	; (8012d28 <__mdiff+0x108>)
 8012c76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012c7a:	e7e5      	b.n	8012c48 <__mdiff+0x28>
 8012c7c:	6927      	ldr	r7, [r4, #16]
 8012c7e:	60c6      	str	r6, [r0, #12]
 8012c80:	692e      	ldr	r6, [r5, #16]
 8012c82:	f104 0014 	add.w	r0, r4, #20
 8012c86:	f105 0914 	add.w	r9, r5, #20
 8012c8a:	f102 0e14 	add.w	lr, r2, #20
 8012c8e:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8012c92:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012c96:	3410      	adds	r4, #16
 8012c98:	46f2      	mov	sl, lr
 8012c9a:	2100      	movs	r1, #0
 8012c9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8012ca0:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8012ca4:	fa1f f883 	uxth.w	r8, r3
 8012ca8:	fa11 f18b 	uxtah	r1, r1, fp
 8012cac:	0c1b      	lsrs	r3, r3, #16
 8012cae:	eba1 0808 	sub.w	r8, r1, r8
 8012cb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012cb6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012cba:	fa1f f888 	uxth.w	r8, r8
 8012cbe:	1419      	asrs	r1, r3, #16
 8012cc0:	454e      	cmp	r6, r9
 8012cc2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012cc6:	f84a 3b04 	str.w	r3, [sl], #4
 8012cca:	d8e7      	bhi.n	8012c9c <__mdiff+0x7c>
 8012ccc:	1b73      	subs	r3, r6, r5
 8012cce:	3b15      	subs	r3, #21
 8012cd0:	f023 0303 	bic.w	r3, r3, #3
 8012cd4:	3304      	adds	r3, #4
 8012cd6:	3515      	adds	r5, #21
 8012cd8:	42ae      	cmp	r6, r5
 8012cda:	bf38      	it	cc
 8012cdc:	2304      	movcc	r3, #4
 8012cde:	4418      	add	r0, r3
 8012ce0:	4473      	add	r3, lr
 8012ce2:	469e      	mov	lr, r3
 8012ce4:	4606      	mov	r6, r0
 8012ce6:	4566      	cmp	r6, ip
 8012ce8:	d30e      	bcc.n	8012d08 <__mdiff+0xe8>
 8012cea:	f10c 0103 	add.w	r1, ip, #3
 8012cee:	1a09      	subs	r1, r1, r0
 8012cf0:	f021 0103 	bic.w	r1, r1, #3
 8012cf4:	3803      	subs	r0, #3
 8012cf6:	4584      	cmp	ip, r0
 8012cf8:	bf38      	it	cc
 8012cfa:	2100      	movcc	r1, #0
 8012cfc:	4419      	add	r1, r3
 8012cfe:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8012d02:	b17b      	cbz	r3, 8012d24 <__mdiff+0x104>
 8012d04:	6117      	str	r7, [r2, #16]
 8012d06:	e7a5      	b.n	8012c54 <__mdiff+0x34>
 8012d08:	f856 8b04 	ldr.w	r8, [r6], #4
 8012d0c:	fa11 f488 	uxtah	r4, r1, r8
 8012d10:	1425      	asrs	r5, r4, #16
 8012d12:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 8012d16:	b2a4      	uxth	r4, r4
 8012d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8012d1c:	f84e 4b04 	str.w	r4, [lr], #4
 8012d20:	1429      	asrs	r1, r5, #16
 8012d22:	e7e0      	b.n	8012ce6 <__mdiff+0xc6>
 8012d24:	3f01      	subs	r7, #1
 8012d26:	e7ea      	b.n	8012cfe <__mdiff+0xde>
 8012d28:	08015a77 	.word	0x08015a77
 8012d2c:	08015a88 	.word	0x08015a88

08012d30 <__d2b>:
 8012d30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012d34:	2101      	movs	r1, #1
 8012d36:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8012d3a:	4690      	mov	r8, r2
 8012d3c:	461d      	mov	r5, r3
 8012d3e:	f7ff fcd5 	bl	80126ec <_Balloc>
 8012d42:	4604      	mov	r4, r0
 8012d44:	b930      	cbnz	r0, 8012d54 <__d2b+0x24>
 8012d46:	4602      	mov	r2, r0
 8012d48:	4b25      	ldr	r3, [pc, #148]	; (8012de0 <__d2b+0xb0>)
 8012d4a:	4826      	ldr	r0, [pc, #152]	; (8012de4 <__d2b+0xb4>)
 8012d4c:	f240 310a 	movw	r1, #778	; 0x30a
 8012d50:	f000 faa8 	bl	80132a4 <__assert_func>
 8012d54:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8012d58:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8012d5c:	bb2d      	cbnz	r5, 8012daa <__d2b+0x7a>
 8012d5e:	9301      	str	r3, [sp, #4]
 8012d60:	f1b8 0300 	subs.w	r3, r8, #0
 8012d64:	d026      	beq.n	8012db4 <__d2b+0x84>
 8012d66:	4668      	mov	r0, sp
 8012d68:	9300      	str	r3, [sp, #0]
 8012d6a:	f7ff fd87 	bl	801287c <__lo0bits>
 8012d6e:	9900      	ldr	r1, [sp, #0]
 8012d70:	b1f0      	cbz	r0, 8012db0 <__d2b+0x80>
 8012d72:	9a01      	ldr	r2, [sp, #4]
 8012d74:	f1c0 0320 	rsb	r3, r0, #32
 8012d78:	fa02 f303 	lsl.w	r3, r2, r3
 8012d7c:	430b      	orrs	r3, r1
 8012d7e:	40c2      	lsrs	r2, r0
 8012d80:	6163      	str	r3, [r4, #20]
 8012d82:	9201      	str	r2, [sp, #4]
 8012d84:	9b01      	ldr	r3, [sp, #4]
 8012d86:	61a3      	str	r3, [r4, #24]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	bf14      	ite	ne
 8012d8c:	2102      	movne	r1, #2
 8012d8e:	2101      	moveq	r1, #1
 8012d90:	6121      	str	r1, [r4, #16]
 8012d92:	b1c5      	cbz	r5, 8012dc6 <__d2b+0x96>
 8012d94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012d98:	4405      	add	r5, r0
 8012d9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012d9e:	603d      	str	r5, [r7, #0]
 8012da0:	6030      	str	r0, [r6, #0]
 8012da2:	4620      	mov	r0, r4
 8012da4:	b002      	add	sp, #8
 8012da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012dae:	e7d6      	b.n	8012d5e <__d2b+0x2e>
 8012db0:	6161      	str	r1, [r4, #20]
 8012db2:	e7e7      	b.n	8012d84 <__d2b+0x54>
 8012db4:	a801      	add	r0, sp, #4
 8012db6:	f7ff fd61 	bl	801287c <__lo0bits>
 8012dba:	9b01      	ldr	r3, [sp, #4]
 8012dbc:	6163      	str	r3, [r4, #20]
 8012dbe:	2101      	movs	r1, #1
 8012dc0:	6121      	str	r1, [r4, #16]
 8012dc2:	3020      	adds	r0, #32
 8012dc4:	e7e5      	b.n	8012d92 <__d2b+0x62>
 8012dc6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8012dca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012dce:	6038      	str	r0, [r7, #0]
 8012dd0:	6918      	ldr	r0, [r3, #16]
 8012dd2:	f7ff fd33 	bl	801283c <__hi0bits>
 8012dd6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8012dda:	6031      	str	r1, [r6, #0]
 8012ddc:	e7e1      	b.n	8012da2 <__d2b+0x72>
 8012dde:	bf00      	nop
 8012de0:	08015a77 	.word	0x08015a77
 8012de4:	08015a88 	.word	0x08015a88

08012de8 <_calloc_r>:
 8012de8:	b570      	push	{r4, r5, r6, lr}
 8012dea:	fba1 5402 	umull	r5, r4, r1, r2
 8012dee:	b934      	cbnz	r4, 8012dfe <_calloc_r+0x16>
 8012df0:	4629      	mov	r1, r5
 8012df2:	f000 f877 	bl	8012ee4 <_malloc_r>
 8012df6:	4606      	mov	r6, r0
 8012df8:	b928      	cbnz	r0, 8012e06 <_calloc_r+0x1e>
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	bd70      	pop	{r4, r5, r6, pc}
 8012dfe:	220c      	movs	r2, #12
 8012e00:	6002      	str	r2, [r0, #0]
 8012e02:	2600      	movs	r6, #0
 8012e04:	e7f9      	b.n	8012dfa <_calloc_r+0x12>
 8012e06:	462a      	mov	r2, r5
 8012e08:	4621      	mov	r1, r4
 8012e0a:	f7fe f893 	bl	8010f34 <memset>
 8012e0e:	e7f4      	b.n	8012dfa <_calloc_r+0x12>

08012e10 <_free_r>:
 8012e10:	b538      	push	{r3, r4, r5, lr}
 8012e12:	4605      	mov	r5, r0
 8012e14:	2900      	cmp	r1, #0
 8012e16:	d041      	beq.n	8012e9c <_free_r+0x8c>
 8012e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e1c:	1f0c      	subs	r4, r1, #4
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	bfb8      	it	lt
 8012e22:	18e4      	addlt	r4, r4, r3
 8012e24:	f000 fa9a 	bl	801335c <__malloc_lock>
 8012e28:	4a1d      	ldr	r2, [pc, #116]	; (8012ea0 <_free_r+0x90>)
 8012e2a:	6813      	ldr	r3, [r2, #0]
 8012e2c:	b933      	cbnz	r3, 8012e3c <_free_r+0x2c>
 8012e2e:	6063      	str	r3, [r4, #4]
 8012e30:	6014      	str	r4, [r2, #0]
 8012e32:	4628      	mov	r0, r5
 8012e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e38:	f000 ba96 	b.w	8013368 <__malloc_unlock>
 8012e3c:	42a3      	cmp	r3, r4
 8012e3e:	d908      	bls.n	8012e52 <_free_r+0x42>
 8012e40:	6820      	ldr	r0, [r4, #0]
 8012e42:	1821      	adds	r1, r4, r0
 8012e44:	428b      	cmp	r3, r1
 8012e46:	bf01      	itttt	eq
 8012e48:	6819      	ldreq	r1, [r3, #0]
 8012e4a:	685b      	ldreq	r3, [r3, #4]
 8012e4c:	1809      	addeq	r1, r1, r0
 8012e4e:	6021      	streq	r1, [r4, #0]
 8012e50:	e7ed      	b.n	8012e2e <_free_r+0x1e>
 8012e52:	461a      	mov	r2, r3
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	b10b      	cbz	r3, 8012e5c <_free_r+0x4c>
 8012e58:	42a3      	cmp	r3, r4
 8012e5a:	d9fa      	bls.n	8012e52 <_free_r+0x42>
 8012e5c:	6811      	ldr	r1, [r2, #0]
 8012e5e:	1850      	adds	r0, r2, r1
 8012e60:	42a0      	cmp	r0, r4
 8012e62:	d10b      	bne.n	8012e7c <_free_r+0x6c>
 8012e64:	6820      	ldr	r0, [r4, #0]
 8012e66:	4401      	add	r1, r0
 8012e68:	1850      	adds	r0, r2, r1
 8012e6a:	4283      	cmp	r3, r0
 8012e6c:	6011      	str	r1, [r2, #0]
 8012e6e:	d1e0      	bne.n	8012e32 <_free_r+0x22>
 8012e70:	6818      	ldr	r0, [r3, #0]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	6053      	str	r3, [r2, #4]
 8012e76:	4401      	add	r1, r0
 8012e78:	6011      	str	r1, [r2, #0]
 8012e7a:	e7da      	b.n	8012e32 <_free_r+0x22>
 8012e7c:	d902      	bls.n	8012e84 <_free_r+0x74>
 8012e7e:	230c      	movs	r3, #12
 8012e80:	602b      	str	r3, [r5, #0]
 8012e82:	e7d6      	b.n	8012e32 <_free_r+0x22>
 8012e84:	6820      	ldr	r0, [r4, #0]
 8012e86:	1821      	adds	r1, r4, r0
 8012e88:	428b      	cmp	r3, r1
 8012e8a:	bf04      	itt	eq
 8012e8c:	6819      	ldreq	r1, [r3, #0]
 8012e8e:	685b      	ldreq	r3, [r3, #4]
 8012e90:	6063      	str	r3, [r4, #4]
 8012e92:	bf04      	itt	eq
 8012e94:	1809      	addeq	r1, r1, r0
 8012e96:	6021      	streq	r1, [r4, #0]
 8012e98:	6054      	str	r4, [r2, #4]
 8012e9a:	e7ca      	b.n	8012e32 <_free_r+0x22>
 8012e9c:	bd38      	pop	{r3, r4, r5, pc}
 8012e9e:	bf00      	nop
 8012ea0:	20000f50 	.word	0x20000f50

08012ea4 <sbrk_aligned>:
 8012ea4:	b570      	push	{r4, r5, r6, lr}
 8012ea6:	4e0e      	ldr	r6, [pc, #56]	; (8012ee0 <sbrk_aligned+0x3c>)
 8012ea8:	460c      	mov	r4, r1
 8012eaa:	6831      	ldr	r1, [r6, #0]
 8012eac:	4605      	mov	r5, r0
 8012eae:	b911      	cbnz	r1, 8012eb6 <sbrk_aligned+0x12>
 8012eb0:	f000 f9e8 	bl	8013284 <_sbrk_r>
 8012eb4:	6030      	str	r0, [r6, #0]
 8012eb6:	4621      	mov	r1, r4
 8012eb8:	4628      	mov	r0, r5
 8012eba:	f000 f9e3 	bl	8013284 <_sbrk_r>
 8012ebe:	1c43      	adds	r3, r0, #1
 8012ec0:	d00a      	beq.n	8012ed8 <sbrk_aligned+0x34>
 8012ec2:	1cc4      	adds	r4, r0, #3
 8012ec4:	f024 0403 	bic.w	r4, r4, #3
 8012ec8:	42a0      	cmp	r0, r4
 8012eca:	d007      	beq.n	8012edc <sbrk_aligned+0x38>
 8012ecc:	1a21      	subs	r1, r4, r0
 8012ece:	4628      	mov	r0, r5
 8012ed0:	f000 f9d8 	bl	8013284 <_sbrk_r>
 8012ed4:	3001      	adds	r0, #1
 8012ed6:	d101      	bne.n	8012edc <sbrk_aligned+0x38>
 8012ed8:	f04f 34ff 	mov.w	r4, #4294967295
 8012edc:	4620      	mov	r0, r4
 8012ede:	bd70      	pop	{r4, r5, r6, pc}
 8012ee0:	20000f54 	.word	0x20000f54

08012ee4 <_malloc_r>:
 8012ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee8:	1ccd      	adds	r5, r1, #3
 8012eea:	f025 0503 	bic.w	r5, r5, #3
 8012eee:	3508      	adds	r5, #8
 8012ef0:	2d0c      	cmp	r5, #12
 8012ef2:	bf38      	it	cc
 8012ef4:	250c      	movcc	r5, #12
 8012ef6:	2d00      	cmp	r5, #0
 8012ef8:	4607      	mov	r7, r0
 8012efa:	db01      	blt.n	8012f00 <_malloc_r+0x1c>
 8012efc:	42a9      	cmp	r1, r5
 8012efe:	d905      	bls.n	8012f0c <_malloc_r+0x28>
 8012f00:	230c      	movs	r3, #12
 8012f02:	603b      	str	r3, [r7, #0]
 8012f04:	2600      	movs	r6, #0
 8012f06:	4630      	mov	r0, r6
 8012f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f0c:	4e2e      	ldr	r6, [pc, #184]	; (8012fc8 <_malloc_r+0xe4>)
 8012f0e:	f000 fa25 	bl	801335c <__malloc_lock>
 8012f12:	6833      	ldr	r3, [r6, #0]
 8012f14:	461c      	mov	r4, r3
 8012f16:	bb34      	cbnz	r4, 8012f66 <_malloc_r+0x82>
 8012f18:	4629      	mov	r1, r5
 8012f1a:	4638      	mov	r0, r7
 8012f1c:	f7ff ffc2 	bl	8012ea4 <sbrk_aligned>
 8012f20:	1c43      	adds	r3, r0, #1
 8012f22:	4604      	mov	r4, r0
 8012f24:	d14d      	bne.n	8012fc2 <_malloc_r+0xde>
 8012f26:	6834      	ldr	r4, [r6, #0]
 8012f28:	4626      	mov	r6, r4
 8012f2a:	2e00      	cmp	r6, #0
 8012f2c:	d140      	bne.n	8012fb0 <_malloc_r+0xcc>
 8012f2e:	6823      	ldr	r3, [r4, #0]
 8012f30:	4631      	mov	r1, r6
 8012f32:	4638      	mov	r0, r7
 8012f34:	eb04 0803 	add.w	r8, r4, r3
 8012f38:	f000 f9a4 	bl	8013284 <_sbrk_r>
 8012f3c:	4580      	cmp	r8, r0
 8012f3e:	d13a      	bne.n	8012fb6 <_malloc_r+0xd2>
 8012f40:	6821      	ldr	r1, [r4, #0]
 8012f42:	3503      	adds	r5, #3
 8012f44:	1a6d      	subs	r5, r5, r1
 8012f46:	f025 0503 	bic.w	r5, r5, #3
 8012f4a:	3508      	adds	r5, #8
 8012f4c:	2d0c      	cmp	r5, #12
 8012f4e:	bf38      	it	cc
 8012f50:	250c      	movcc	r5, #12
 8012f52:	4629      	mov	r1, r5
 8012f54:	4638      	mov	r0, r7
 8012f56:	f7ff ffa5 	bl	8012ea4 <sbrk_aligned>
 8012f5a:	3001      	adds	r0, #1
 8012f5c:	d02b      	beq.n	8012fb6 <_malloc_r+0xd2>
 8012f5e:	6823      	ldr	r3, [r4, #0]
 8012f60:	442b      	add	r3, r5
 8012f62:	6023      	str	r3, [r4, #0]
 8012f64:	e00e      	b.n	8012f84 <_malloc_r+0xa0>
 8012f66:	6822      	ldr	r2, [r4, #0]
 8012f68:	1b52      	subs	r2, r2, r5
 8012f6a:	d41e      	bmi.n	8012faa <_malloc_r+0xc6>
 8012f6c:	2a0b      	cmp	r2, #11
 8012f6e:	d916      	bls.n	8012f9e <_malloc_r+0xba>
 8012f70:	1961      	adds	r1, r4, r5
 8012f72:	42a3      	cmp	r3, r4
 8012f74:	6025      	str	r5, [r4, #0]
 8012f76:	bf18      	it	ne
 8012f78:	6059      	strne	r1, [r3, #4]
 8012f7a:	6863      	ldr	r3, [r4, #4]
 8012f7c:	bf08      	it	eq
 8012f7e:	6031      	streq	r1, [r6, #0]
 8012f80:	5162      	str	r2, [r4, r5]
 8012f82:	604b      	str	r3, [r1, #4]
 8012f84:	4638      	mov	r0, r7
 8012f86:	f104 060b 	add.w	r6, r4, #11
 8012f8a:	f000 f9ed 	bl	8013368 <__malloc_unlock>
 8012f8e:	f026 0607 	bic.w	r6, r6, #7
 8012f92:	1d23      	adds	r3, r4, #4
 8012f94:	1af2      	subs	r2, r6, r3
 8012f96:	d0b6      	beq.n	8012f06 <_malloc_r+0x22>
 8012f98:	1b9b      	subs	r3, r3, r6
 8012f9a:	50a3      	str	r3, [r4, r2]
 8012f9c:	e7b3      	b.n	8012f06 <_malloc_r+0x22>
 8012f9e:	6862      	ldr	r2, [r4, #4]
 8012fa0:	42a3      	cmp	r3, r4
 8012fa2:	bf0c      	ite	eq
 8012fa4:	6032      	streq	r2, [r6, #0]
 8012fa6:	605a      	strne	r2, [r3, #4]
 8012fa8:	e7ec      	b.n	8012f84 <_malloc_r+0xa0>
 8012faa:	4623      	mov	r3, r4
 8012fac:	6864      	ldr	r4, [r4, #4]
 8012fae:	e7b2      	b.n	8012f16 <_malloc_r+0x32>
 8012fb0:	4634      	mov	r4, r6
 8012fb2:	6876      	ldr	r6, [r6, #4]
 8012fb4:	e7b9      	b.n	8012f2a <_malloc_r+0x46>
 8012fb6:	230c      	movs	r3, #12
 8012fb8:	603b      	str	r3, [r7, #0]
 8012fba:	4638      	mov	r0, r7
 8012fbc:	f000 f9d4 	bl	8013368 <__malloc_unlock>
 8012fc0:	e7a1      	b.n	8012f06 <_malloc_r+0x22>
 8012fc2:	6025      	str	r5, [r4, #0]
 8012fc4:	e7de      	b.n	8012f84 <_malloc_r+0xa0>
 8012fc6:	bf00      	nop
 8012fc8:	20000f50 	.word	0x20000f50

08012fcc <__ssputs_r>:
 8012fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd0:	688e      	ldr	r6, [r1, #8]
 8012fd2:	429e      	cmp	r6, r3
 8012fd4:	4682      	mov	sl, r0
 8012fd6:	460c      	mov	r4, r1
 8012fd8:	4690      	mov	r8, r2
 8012fda:	461f      	mov	r7, r3
 8012fdc:	d838      	bhi.n	8013050 <__ssputs_r+0x84>
 8012fde:	898a      	ldrh	r2, [r1, #12]
 8012fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012fe4:	d032      	beq.n	801304c <__ssputs_r+0x80>
 8012fe6:	6825      	ldr	r5, [r4, #0]
 8012fe8:	6909      	ldr	r1, [r1, #16]
 8012fea:	eba5 0901 	sub.w	r9, r5, r1
 8012fee:	6965      	ldr	r5, [r4, #20]
 8012ff0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	444b      	add	r3, r9
 8012ffc:	106d      	asrs	r5, r5, #1
 8012ffe:	429d      	cmp	r5, r3
 8013000:	bf38      	it	cc
 8013002:	461d      	movcc	r5, r3
 8013004:	0553      	lsls	r3, r2, #21
 8013006:	d531      	bpl.n	801306c <__ssputs_r+0xa0>
 8013008:	4629      	mov	r1, r5
 801300a:	f7ff ff6b 	bl	8012ee4 <_malloc_r>
 801300e:	4606      	mov	r6, r0
 8013010:	b950      	cbnz	r0, 8013028 <__ssputs_r+0x5c>
 8013012:	230c      	movs	r3, #12
 8013014:	f8ca 3000 	str.w	r3, [sl]
 8013018:	89a3      	ldrh	r3, [r4, #12]
 801301a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801301e:	81a3      	strh	r3, [r4, #12]
 8013020:	f04f 30ff 	mov.w	r0, #4294967295
 8013024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013028:	6921      	ldr	r1, [r4, #16]
 801302a:	464a      	mov	r2, r9
 801302c:	f7fd ff74 	bl	8010f18 <memcpy>
 8013030:	89a3      	ldrh	r3, [r4, #12]
 8013032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801303a:	81a3      	strh	r3, [r4, #12]
 801303c:	6126      	str	r6, [r4, #16]
 801303e:	6165      	str	r5, [r4, #20]
 8013040:	444e      	add	r6, r9
 8013042:	eba5 0509 	sub.w	r5, r5, r9
 8013046:	6026      	str	r6, [r4, #0]
 8013048:	60a5      	str	r5, [r4, #8]
 801304a:	463e      	mov	r6, r7
 801304c:	42be      	cmp	r6, r7
 801304e:	d900      	bls.n	8013052 <__ssputs_r+0x86>
 8013050:	463e      	mov	r6, r7
 8013052:	6820      	ldr	r0, [r4, #0]
 8013054:	4632      	mov	r2, r6
 8013056:	4641      	mov	r1, r8
 8013058:	f000 f966 	bl	8013328 <memmove>
 801305c:	68a3      	ldr	r3, [r4, #8]
 801305e:	1b9b      	subs	r3, r3, r6
 8013060:	60a3      	str	r3, [r4, #8]
 8013062:	6823      	ldr	r3, [r4, #0]
 8013064:	4433      	add	r3, r6
 8013066:	6023      	str	r3, [r4, #0]
 8013068:	2000      	movs	r0, #0
 801306a:	e7db      	b.n	8013024 <__ssputs_r+0x58>
 801306c:	462a      	mov	r2, r5
 801306e:	f000 f981 	bl	8013374 <_realloc_r>
 8013072:	4606      	mov	r6, r0
 8013074:	2800      	cmp	r0, #0
 8013076:	d1e1      	bne.n	801303c <__ssputs_r+0x70>
 8013078:	6921      	ldr	r1, [r4, #16]
 801307a:	4650      	mov	r0, sl
 801307c:	f7ff fec8 	bl	8012e10 <_free_r>
 8013080:	e7c7      	b.n	8013012 <__ssputs_r+0x46>
	...

08013084 <_svfiprintf_r>:
 8013084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013088:	4698      	mov	r8, r3
 801308a:	898b      	ldrh	r3, [r1, #12]
 801308c:	061b      	lsls	r3, r3, #24
 801308e:	b09d      	sub	sp, #116	; 0x74
 8013090:	4607      	mov	r7, r0
 8013092:	460d      	mov	r5, r1
 8013094:	4614      	mov	r4, r2
 8013096:	d50e      	bpl.n	80130b6 <_svfiprintf_r+0x32>
 8013098:	690b      	ldr	r3, [r1, #16]
 801309a:	b963      	cbnz	r3, 80130b6 <_svfiprintf_r+0x32>
 801309c:	2140      	movs	r1, #64	; 0x40
 801309e:	f7ff ff21 	bl	8012ee4 <_malloc_r>
 80130a2:	6028      	str	r0, [r5, #0]
 80130a4:	6128      	str	r0, [r5, #16]
 80130a6:	b920      	cbnz	r0, 80130b2 <_svfiprintf_r+0x2e>
 80130a8:	230c      	movs	r3, #12
 80130aa:	603b      	str	r3, [r7, #0]
 80130ac:	f04f 30ff 	mov.w	r0, #4294967295
 80130b0:	e0d1      	b.n	8013256 <_svfiprintf_r+0x1d2>
 80130b2:	2340      	movs	r3, #64	; 0x40
 80130b4:	616b      	str	r3, [r5, #20]
 80130b6:	2300      	movs	r3, #0
 80130b8:	9309      	str	r3, [sp, #36]	; 0x24
 80130ba:	2320      	movs	r3, #32
 80130bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80130c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80130c4:	2330      	movs	r3, #48	; 0x30
 80130c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013270 <_svfiprintf_r+0x1ec>
 80130ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80130ce:	f04f 0901 	mov.w	r9, #1
 80130d2:	4623      	mov	r3, r4
 80130d4:	469a      	mov	sl, r3
 80130d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130da:	b10a      	cbz	r2, 80130e0 <_svfiprintf_r+0x5c>
 80130dc:	2a25      	cmp	r2, #37	; 0x25
 80130de:	d1f9      	bne.n	80130d4 <_svfiprintf_r+0x50>
 80130e0:	ebba 0b04 	subs.w	fp, sl, r4
 80130e4:	d00b      	beq.n	80130fe <_svfiprintf_r+0x7a>
 80130e6:	465b      	mov	r3, fp
 80130e8:	4622      	mov	r2, r4
 80130ea:	4629      	mov	r1, r5
 80130ec:	4638      	mov	r0, r7
 80130ee:	f7ff ff6d 	bl	8012fcc <__ssputs_r>
 80130f2:	3001      	adds	r0, #1
 80130f4:	f000 80aa 	beq.w	801324c <_svfiprintf_r+0x1c8>
 80130f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130fa:	445a      	add	r2, fp
 80130fc:	9209      	str	r2, [sp, #36]	; 0x24
 80130fe:	f89a 3000 	ldrb.w	r3, [sl]
 8013102:	2b00      	cmp	r3, #0
 8013104:	f000 80a2 	beq.w	801324c <_svfiprintf_r+0x1c8>
 8013108:	2300      	movs	r3, #0
 801310a:	f04f 32ff 	mov.w	r2, #4294967295
 801310e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013112:	f10a 0a01 	add.w	sl, sl, #1
 8013116:	9304      	str	r3, [sp, #16]
 8013118:	9307      	str	r3, [sp, #28]
 801311a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801311e:	931a      	str	r3, [sp, #104]	; 0x68
 8013120:	4654      	mov	r4, sl
 8013122:	2205      	movs	r2, #5
 8013124:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013128:	4851      	ldr	r0, [pc, #324]	; (8013270 <_svfiprintf_r+0x1ec>)
 801312a:	f7ed f831 	bl	8000190 <memchr>
 801312e:	9a04      	ldr	r2, [sp, #16]
 8013130:	b9d8      	cbnz	r0, 801316a <_svfiprintf_r+0xe6>
 8013132:	06d0      	lsls	r0, r2, #27
 8013134:	bf44      	itt	mi
 8013136:	2320      	movmi	r3, #32
 8013138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801313c:	0711      	lsls	r1, r2, #28
 801313e:	bf44      	itt	mi
 8013140:	232b      	movmi	r3, #43	; 0x2b
 8013142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013146:	f89a 3000 	ldrb.w	r3, [sl]
 801314a:	2b2a      	cmp	r3, #42	; 0x2a
 801314c:	d015      	beq.n	801317a <_svfiprintf_r+0xf6>
 801314e:	9a07      	ldr	r2, [sp, #28]
 8013150:	4654      	mov	r4, sl
 8013152:	2000      	movs	r0, #0
 8013154:	f04f 0c0a 	mov.w	ip, #10
 8013158:	4621      	mov	r1, r4
 801315a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801315e:	3b30      	subs	r3, #48	; 0x30
 8013160:	2b09      	cmp	r3, #9
 8013162:	d94e      	bls.n	8013202 <_svfiprintf_r+0x17e>
 8013164:	b1b0      	cbz	r0, 8013194 <_svfiprintf_r+0x110>
 8013166:	9207      	str	r2, [sp, #28]
 8013168:	e014      	b.n	8013194 <_svfiprintf_r+0x110>
 801316a:	eba0 0308 	sub.w	r3, r0, r8
 801316e:	fa09 f303 	lsl.w	r3, r9, r3
 8013172:	4313      	orrs	r3, r2
 8013174:	9304      	str	r3, [sp, #16]
 8013176:	46a2      	mov	sl, r4
 8013178:	e7d2      	b.n	8013120 <_svfiprintf_r+0x9c>
 801317a:	9b03      	ldr	r3, [sp, #12]
 801317c:	1d19      	adds	r1, r3, #4
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	9103      	str	r1, [sp, #12]
 8013182:	2b00      	cmp	r3, #0
 8013184:	bfbb      	ittet	lt
 8013186:	425b      	neglt	r3, r3
 8013188:	f042 0202 	orrlt.w	r2, r2, #2
 801318c:	9307      	strge	r3, [sp, #28]
 801318e:	9307      	strlt	r3, [sp, #28]
 8013190:	bfb8      	it	lt
 8013192:	9204      	strlt	r2, [sp, #16]
 8013194:	7823      	ldrb	r3, [r4, #0]
 8013196:	2b2e      	cmp	r3, #46	; 0x2e
 8013198:	d10c      	bne.n	80131b4 <_svfiprintf_r+0x130>
 801319a:	7863      	ldrb	r3, [r4, #1]
 801319c:	2b2a      	cmp	r3, #42	; 0x2a
 801319e:	d135      	bne.n	801320c <_svfiprintf_r+0x188>
 80131a0:	9b03      	ldr	r3, [sp, #12]
 80131a2:	1d1a      	adds	r2, r3, #4
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	9203      	str	r2, [sp, #12]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	bfb8      	it	lt
 80131ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80131b0:	3402      	adds	r4, #2
 80131b2:	9305      	str	r3, [sp, #20]
 80131b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8013274 <_svfiprintf_r+0x1f0>
 80131b8:	7821      	ldrb	r1, [r4, #0]
 80131ba:	2203      	movs	r2, #3
 80131bc:	4650      	mov	r0, sl
 80131be:	f7ec ffe7 	bl	8000190 <memchr>
 80131c2:	b140      	cbz	r0, 80131d6 <_svfiprintf_r+0x152>
 80131c4:	2340      	movs	r3, #64	; 0x40
 80131c6:	eba0 000a 	sub.w	r0, r0, sl
 80131ca:	fa03 f000 	lsl.w	r0, r3, r0
 80131ce:	9b04      	ldr	r3, [sp, #16]
 80131d0:	4303      	orrs	r3, r0
 80131d2:	3401      	adds	r4, #1
 80131d4:	9304      	str	r3, [sp, #16]
 80131d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131da:	4827      	ldr	r0, [pc, #156]	; (8013278 <_svfiprintf_r+0x1f4>)
 80131dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80131e0:	2206      	movs	r2, #6
 80131e2:	f7ec ffd5 	bl	8000190 <memchr>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	d038      	beq.n	801325c <_svfiprintf_r+0x1d8>
 80131ea:	4b24      	ldr	r3, [pc, #144]	; (801327c <_svfiprintf_r+0x1f8>)
 80131ec:	bb1b      	cbnz	r3, 8013236 <_svfiprintf_r+0x1b2>
 80131ee:	9b03      	ldr	r3, [sp, #12]
 80131f0:	3307      	adds	r3, #7
 80131f2:	f023 0307 	bic.w	r3, r3, #7
 80131f6:	3308      	adds	r3, #8
 80131f8:	9303      	str	r3, [sp, #12]
 80131fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131fc:	4433      	add	r3, r6
 80131fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013200:	e767      	b.n	80130d2 <_svfiprintf_r+0x4e>
 8013202:	fb0c 3202 	mla	r2, ip, r2, r3
 8013206:	460c      	mov	r4, r1
 8013208:	2001      	movs	r0, #1
 801320a:	e7a5      	b.n	8013158 <_svfiprintf_r+0xd4>
 801320c:	2300      	movs	r3, #0
 801320e:	3401      	adds	r4, #1
 8013210:	9305      	str	r3, [sp, #20]
 8013212:	4619      	mov	r1, r3
 8013214:	f04f 0c0a 	mov.w	ip, #10
 8013218:	4620      	mov	r0, r4
 801321a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801321e:	3a30      	subs	r2, #48	; 0x30
 8013220:	2a09      	cmp	r2, #9
 8013222:	d903      	bls.n	801322c <_svfiprintf_r+0x1a8>
 8013224:	2b00      	cmp	r3, #0
 8013226:	d0c5      	beq.n	80131b4 <_svfiprintf_r+0x130>
 8013228:	9105      	str	r1, [sp, #20]
 801322a:	e7c3      	b.n	80131b4 <_svfiprintf_r+0x130>
 801322c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013230:	4604      	mov	r4, r0
 8013232:	2301      	movs	r3, #1
 8013234:	e7f0      	b.n	8013218 <_svfiprintf_r+0x194>
 8013236:	ab03      	add	r3, sp, #12
 8013238:	9300      	str	r3, [sp, #0]
 801323a:	462a      	mov	r2, r5
 801323c:	4b10      	ldr	r3, [pc, #64]	; (8013280 <_svfiprintf_r+0x1fc>)
 801323e:	a904      	add	r1, sp, #16
 8013240:	4638      	mov	r0, r7
 8013242:	f7fd ff1d 	bl	8011080 <_printf_float>
 8013246:	1c42      	adds	r2, r0, #1
 8013248:	4606      	mov	r6, r0
 801324a:	d1d6      	bne.n	80131fa <_svfiprintf_r+0x176>
 801324c:	89ab      	ldrh	r3, [r5, #12]
 801324e:	065b      	lsls	r3, r3, #25
 8013250:	f53f af2c 	bmi.w	80130ac <_svfiprintf_r+0x28>
 8013254:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013256:	b01d      	add	sp, #116	; 0x74
 8013258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801325c:	ab03      	add	r3, sp, #12
 801325e:	9300      	str	r3, [sp, #0]
 8013260:	462a      	mov	r2, r5
 8013262:	4b07      	ldr	r3, [pc, #28]	; (8013280 <_svfiprintf_r+0x1fc>)
 8013264:	a904      	add	r1, sp, #16
 8013266:	4638      	mov	r0, r7
 8013268:	f7fe f9a2 	bl	80115b0 <_printf_i>
 801326c:	e7eb      	b.n	8013246 <_svfiprintf_r+0x1c2>
 801326e:	bf00      	nop
 8013270:	08015be4 	.word	0x08015be4
 8013274:	08015bea 	.word	0x08015bea
 8013278:	08015bee 	.word	0x08015bee
 801327c:	08011081 	.word	0x08011081
 8013280:	08012fcd 	.word	0x08012fcd

08013284 <_sbrk_r>:
 8013284:	b538      	push	{r3, r4, r5, lr}
 8013286:	4d06      	ldr	r5, [pc, #24]	; (80132a0 <_sbrk_r+0x1c>)
 8013288:	2300      	movs	r3, #0
 801328a:	4604      	mov	r4, r0
 801328c:	4608      	mov	r0, r1
 801328e:	602b      	str	r3, [r5, #0]
 8013290:	f7ef faa6 	bl	80027e0 <_sbrk>
 8013294:	1c43      	adds	r3, r0, #1
 8013296:	d102      	bne.n	801329e <_sbrk_r+0x1a>
 8013298:	682b      	ldr	r3, [r5, #0]
 801329a:	b103      	cbz	r3, 801329e <_sbrk_r+0x1a>
 801329c:	6023      	str	r3, [r4, #0]
 801329e:	bd38      	pop	{r3, r4, r5, pc}
 80132a0:	20000f58 	.word	0x20000f58

080132a4 <__assert_func>:
 80132a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80132a6:	4614      	mov	r4, r2
 80132a8:	461a      	mov	r2, r3
 80132aa:	4b09      	ldr	r3, [pc, #36]	; (80132d0 <__assert_func+0x2c>)
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	4605      	mov	r5, r0
 80132b0:	68d8      	ldr	r0, [r3, #12]
 80132b2:	b14c      	cbz	r4, 80132c8 <__assert_func+0x24>
 80132b4:	4b07      	ldr	r3, [pc, #28]	; (80132d4 <__assert_func+0x30>)
 80132b6:	9100      	str	r1, [sp, #0]
 80132b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80132bc:	4906      	ldr	r1, [pc, #24]	; (80132d8 <__assert_func+0x34>)
 80132be:	462b      	mov	r3, r5
 80132c0:	f000 f80e 	bl	80132e0 <fiprintf>
 80132c4:	f000 faaa 	bl	801381c <abort>
 80132c8:	4b04      	ldr	r3, [pc, #16]	; (80132dc <__assert_func+0x38>)
 80132ca:	461c      	mov	r4, r3
 80132cc:	e7f3      	b.n	80132b6 <__assert_func+0x12>
 80132ce:	bf00      	nop
 80132d0:	2000005c 	.word	0x2000005c
 80132d4:	08015bf5 	.word	0x08015bf5
 80132d8:	08015c02 	.word	0x08015c02
 80132dc:	08015c30 	.word	0x08015c30

080132e0 <fiprintf>:
 80132e0:	b40e      	push	{r1, r2, r3}
 80132e2:	b503      	push	{r0, r1, lr}
 80132e4:	4601      	mov	r1, r0
 80132e6:	ab03      	add	r3, sp, #12
 80132e8:	4805      	ldr	r0, [pc, #20]	; (8013300 <fiprintf+0x20>)
 80132ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80132ee:	6800      	ldr	r0, [r0, #0]
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	f000 f895 	bl	8013420 <_vfiprintf_r>
 80132f6:	b002      	add	sp, #8
 80132f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80132fc:	b003      	add	sp, #12
 80132fe:	4770      	bx	lr
 8013300:	2000005c 	.word	0x2000005c

08013304 <__ascii_mbtowc>:
 8013304:	b082      	sub	sp, #8
 8013306:	b901      	cbnz	r1, 801330a <__ascii_mbtowc+0x6>
 8013308:	a901      	add	r1, sp, #4
 801330a:	b142      	cbz	r2, 801331e <__ascii_mbtowc+0x1a>
 801330c:	b14b      	cbz	r3, 8013322 <__ascii_mbtowc+0x1e>
 801330e:	7813      	ldrb	r3, [r2, #0]
 8013310:	600b      	str	r3, [r1, #0]
 8013312:	7812      	ldrb	r2, [r2, #0]
 8013314:	1e10      	subs	r0, r2, #0
 8013316:	bf18      	it	ne
 8013318:	2001      	movne	r0, #1
 801331a:	b002      	add	sp, #8
 801331c:	4770      	bx	lr
 801331e:	4610      	mov	r0, r2
 8013320:	e7fb      	b.n	801331a <__ascii_mbtowc+0x16>
 8013322:	f06f 0001 	mvn.w	r0, #1
 8013326:	e7f8      	b.n	801331a <__ascii_mbtowc+0x16>

08013328 <memmove>:
 8013328:	4288      	cmp	r0, r1
 801332a:	b510      	push	{r4, lr}
 801332c:	eb01 0402 	add.w	r4, r1, r2
 8013330:	d902      	bls.n	8013338 <memmove+0x10>
 8013332:	4284      	cmp	r4, r0
 8013334:	4623      	mov	r3, r4
 8013336:	d807      	bhi.n	8013348 <memmove+0x20>
 8013338:	1e43      	subs	r3, r0, #1
 801333a:	42a1      	cmp	r1, r4
 801333c:	d008      	beq.n	8013350 <memmove+0x28>
 801333e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013342:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013346:	e7f8      	b.n	801333a <memmove+0x12>
 8013348:	4402      	add	r2, r0
 801334a:	4601      	mov	r1, r0
 801334c:	428a      	cmp	r2, r1
 801334e:	d100      	bne.n	8013352 <memmove+0x2a>
 8013350:	bd10      	pop	{r4, pc}
 8013352:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013356:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801335a:	e7f7      	b.n	801334c <memmove+0x24>

0801335c <__malloc_lock>:
 801335c:	4801      	ldr	r0, [pc, #4]	; (8013364 <__malloc_lock+0x8>)
 801335e:	f000 bc19 	b.w	8013b94 <__retarget_lock_acquire_recursive>
 8013362:	bf00      	nop
 8013364:	20000f5c 	.word	0x20000f5c

08013368 <__malloc_unlock>:
 8013368:	4801      	ldr	r0, [pc, #4]	; (8013370 <__malloc_unlock+0x8>)
 801336a:	f000 bc14 	b.w	8013b96 <__retarget_lock_release_recursive>
 801336e:	bf00      	nop
 8013370:	20000f5c 	.word	0x20000f5c

08013374 <_realloc_r>:
 8013374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013378:	4680      	mov	r8, r0
 801337a:	4614      	mov	r4, r2
 801337c:	460e      	mov	r6, r1
 801337e:	b921      	cbnz	r1, 801338a <_realloc_r+0x16>
 8013380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013384:	4611      	mov	r1, r2
 8013386:	f7ff bdad 	b.w	8012ee4 <_malloc_r>
 801338a:	b92a      	cbnz	r2, 8013398 <_realloc_r+0x24>
 801338c:	f7ff fd40 	bl	8012e10 <_free_r>
 8013390:	4625      	mov	r5, r4
 8013392:	4628      	mov	r0, r5
 8013394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013398:	f000 fc64 	bl	8013c64 <_malloc_usable_size_r>
 801339c:	4284      	cmp	r4, r0
 801339e:	4607      	mov	r7, r0
 80133a0:	d802      	bhi.n	80133a8 <_realloc_r+0x34>
 80133a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80133a6:	d812      	bhi.n	80133ce <_realloc_r+0x5a>
 80133a8:	4621      	mov	r1, r4
 80133aa:	4640      	mov	r0, r8
 80133ac:	f7ff fd9a 	bl	8012ee4 <_malloc_r>
 80133b0:	4605      	mov	r5, r0
 80133b2:	2800      	cmp	r0, #0
 80133b4:	d0ed      	beq.n	8013392 <_realloc_r+0x1e>
 80133b6:	42bc      	cmp	r4, r7
 80133b8:	4622      	mov	r2, r4
 80133ba:	4631      	mov	r1, r6
 80133bc:	bf28      	it	cs
 80133be:	463a      	movcs	r2, r7
 80133c0:	f7fd fdaa 	bl	8010f18 <memcpy>
 80133c4:	4631      	mov	r1, r6
 80133c6:	4640      	mov	r0, r8
 80133c8:	f7ff fd22 	bl	8012e10 <_free_r>
 80133cc:	e7e1      	b.n	8013392 <_realloc_r+0x1e>
 80133ce:	4635      	mov	r5, r6
 80133d0:	e7df      	b.n	8013392 <_realloc_r+0x1e>

080133d2 <__sfputc_r>:
 80133d2:	6893      	ldr	r3, [r2, #8]
 80133d4:	3b01      	subs	r3, #1
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	b410      	push	{r4}
 80133da:	6093      	str	r3, [r2, #8]
 80133dc:	da07      	bge.n	80133ee <__sfputc_r+0x1c>
 80133de:	6994      	ldr	r4, [r2, #24]
 80133e0:	42a3      	cmp	r3, r4
 80133e2:	db01      	blt.n	80133e8 <__sfputc_r+0x16>
 80133e4:	290a      	cmp	r1, #10
 80133e6:	d102      	bne.n	80133ee <__sfputc_r+0x1c>
 80133e8:	bc10      	pop	{r4}
 80133ea:	f000 b949 	b.w	8013680 <__swbuf_r>
 80133ee:	6813      	ldr	r3, [r2, #0]
 80133f0:	1c58      	adds	r0, r3, #1
 80133f2:	6010      	str	r0, [r2, #0]
 80133f4:	7019      	strb	r1, [r3, #0]
 80133f6:	4608      	mov	r0, r1
 80133f8:	bc10      	pop	{r4}
 80133fa:	4770      	bx	lr

080133fc <__sfputs_r>:
 80133fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133fe:	4606      	mov	r6, r0
 8013400:	460f      	mov	r7, r1
 8013402:	4614      	mov	r4, r2
 8013404:	18d5      	adds	r5, r2, r3
 8013406:	42ac      	cmp	r4, r5
 8013408:	d101      	bne.n	801340e <__sfputs_r+0x12>
 801340a:	2000      	movs	r0, #0
 801340c:	e007      	b.n	801341e <__sfputs_r+0x22>
 801340e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013412:	463a      	mov	r2, r7
 8013414:	4630      	mov	r0, r6
 8013416:	f7ff ffdc 	bl	80133d2 <__sfputc_r>
 801341a:	1c43      	adds	r3, r0, #1
 801341c:	d1f3      	bne.n	8013406 <__sfputs_r+0xa>
 801341e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013420 <_vfiprintf_r>:
 8013420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013424:	460d      	mov	r5, r1
 8013426:	b09d      	sub	sp, #116	; 0x74
 8013428:	4614      	mov	r4, r2
 801342a:	4698      	mov	r8, r3
 801342c:	4606      	mov	r6, r0
 801342e:	b118      	cbz	r0, 8013438 <_vfiprintf_r+0x18>
 8013430:	6983      	ldr	r3, [r0, #24]
 8013432:	b90b      	cbnz	r3, 8013438 <_vfiprintf_r+0x18>
 8013434:	f000 fb10 	bl	8013a58 <__sinit>
 8013438:	4b89      	ldr	r3, [pc, #548]	; (8013660 <_vfiprintf_r+0x240>)
 801343a:	429d      	cmp	r5, r3
 801343c:	d11b      	bne.n	8013476 <_vfiprintf_r+0x56>
 801343e:	6875      	ldr	r5, [r6, #4]
 8013440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013442:	07d9      	lsls	r1, r3, #31
 8013444:	d405      	bmi.n	8013452 <_vfiprintf_r+0x32>
 8013446:	89ab      	ldrh	r3, [r5, #12]
 8013448:	059a      	lsls	r2, r3, #22
 801344a:	d402      	bmi.n	8013452 <_vfiprintf_r+0x32>
 801344c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801344e:	f000 fba1 	bl	8013b94 <__retarget_lock_acquire_recursive>
 8013452:	89ab      	ldrh	r3, [r5, #12]
 8013454:	071b      	lsls	r3, r3, #28
 8013456:	d501      	bpl.n	801345c <_vfiprintf_r+0x3c>
 8013458:	692b      	ldr	r3, [r5, #16]
 801345a:	b9eb      	cbnz	r3, 8013498 <_vfiprintf_r+0x78>
 801345c:	4629      	mov	r1, r5
 801345e:	4630      	mov	r0, r6
 8013460:	f000 f96e 	bl	8013740 <__swsetup_r>
 8013464:	b1c0      	cbz	r0, 8013498 <_vfiprintf_r+0x78>
 8013466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013468:	07dc      	lsls	r4, r3, #31
 801346a:	d50e      	bpl.n	801348a <_vfiprintf_r+0x6a>
 801346c:	f04f 30ff 	mov.w	r0, #4294967295
 8013470:	b01d      	add	sp, #116	; 0x74
 8013472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013476:	4b7b      	ldr	r3, [pc, #492]	; (8013664 <_vfiprintf_r+0x244>)
 8013478:	429d      	cmp	r5, r3
 801347a:	d101      	bne.n	8013480 <_vfiprintf_r+0x60>
 801347c:	68b5      	ldr	r5, [r6, #8]
 801347e:	e7df      	b.n	8013440 <_vfiprintf_r+0x20>
 8013480:	4b79      	ldr	r3, [pc, #484]	; (8013668 <_vfiprintf_r+0x248>)
 8013482:	429d      	cmp	r5, r3
 8013484:	bf08      	it	eq
 8013486:	68f5      	ldreq	r5, [r6, #12]
 8013488:	e7da      	b.n	8013440 <_vfiprintf_r+0x20>
 801348a:	89ab      	ldrh	r3, [r5, #12]
 801348c:	0598      	lsls	r0, r3, #22
 801348e:	d4ed      	bmi.n	801346c <_vfiprintf_r+0x4c>
 8013490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013492:	f000 fb80 	bl	8013b96 <__retarget_lock_release_recursive>
 8013496:	e7e9      	b.n	801346c <_vfiprintf_r+0x4c>
 8013498:	2300      	movs	r3, #0
 801349a:	9309      	str	r3, [sp, #36]	; 0x24
 801349c:	2320      	movs	r3, #32
 801349e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80134a6:	2330      	movs	r3, #48	; 0x30
 80134a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801366c <_vfiprintf_r+0x24c>
 80134ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134b0:	f04f 0901 	mov.w	r9, #1
 80134b4:	4623      	mov	r3, r4
 80134b6:	469a      	mov	sl, r3
 80134b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134bc:	b10a      	cbz	r2, 80134c2 <_vfiprintf_r+0xa2>
 80134be:	2a25      	cmp	r2, #37	; 0x25
 80134c0:	d1f9      	bne.n	80134b6 <_vfiprintf_r+0x96>
 80134c2:	ebba 0b04 	subs.w	fp, sl, r4
 80134c6:	d00b      	beq.n	80134e0 <_vfiprintf_r+0xc0>
 80134c8:	465b      	mov	r3, fp
 80134ca:	4622      	mov	r2, r4
 80134cc:	4629      	mov	r1, r5
 80134ce:	4630      	mov	r0, r6
 80134d0:	f7ff ff94 	bl	80133fc <__sfputs_r>
 80134d4:	3001      	adds	r0, #1
 80134d6:	f000 80aa 	beq.w	801362e <_vfiprintf_r+0x20e>
 80134da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134dc:	445a      	add	r2, fp
 80134de:	9209      	str	r2, [sp, #36]	; 0x24
 80134e0:	f89a 3000 	ldrb.w	r3, [sl]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	f000 80a2 	beq.w	801362e <_vfiprintf_r+0x20e>
 80134ea:	2300      	movs	r3, #0
 80134ec:	f04f 32ff 	mov.w	r2, #4294967295
 80134f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134f4:	f10a 0a01 	add.w	sl, sl, #1
 80134f8:	9304      	str	r3, [sp, #16]
 80134fa:	9307      	str	r3, [sp, #28]
 80134fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013500:	931a      	str	r3, [sp, #104]	; 0x68
 8013502:	4654      	mov	r4, sl
 8013504:	2205      	movs	r2, #5
 8013506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801350a:	4858      	ldr	r0, [pc, #352]	; (801366c <_vfiprintf_r+0x24c>)
 801350c:	f7ec fe40 	bl	8000190 <memchr>
 8013510:	9a04      	ldr	r2, [sp, #16]
 8013512:	b9d8      	cbnz	r0, 801354c <_vfiprintf_r+0x12c>
 8013514:	06d1      	lsls	r1, r2, #27
 8013516:	bf44      	itt	mi
 8013518:	2320      	movmi	r3, #32
 801351a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801351e:	0713      	lsls	r3, r2, #28
 8013520:	bf44      	itt	mi
 8013522:	232b      	movmi	r3, #43	; 0x2b
 8013524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013528:	f89a 3000 	ldrb.w	r3, [sl]
 801352c:	2b2a      	cmp	r3, #42	; 0x2a
 801352e:	d015      	beq.n	801355c <_vfiprintf_r+0x13c>
 8013530:	9a07      	ldr	r2, [sp, #28]
 8013532:	4654      	mov	r4, sl
 8013534:	2000      	movs	r0, #0
 8013536:	f04f 0c0a 	mov.w	ip, #10
 801353a:	4621      	mov	r1, r4
 801353c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013540:	3b30      	subs	r3, #48	; 0x30
 8013542:	2b09      	cmp	r3, #9
 8013544:	d94e      	bls.n	80135e4 <_vfiprintf_r+0x1c4>
 8013546:	b1b0      	cbz	r0, 8013576 <_vfiprintf_r+0x156>
 8013548:	9207      	str	r2, [sp, #28]
 801354a:	e014      	b.n	8013576 <_vfiprintf_r+0x156>
 801354c:	eba0 0308 	sub.w	r3, r0, r8
 8013550:	fa09 f303 	lsl.w	r3, r9, r3
 8013554:	4313      	orrs	r3, r2
 8013556:	9304      	str	r3, [sp, #16]
 8013558:	46a2      	mov	sl, r4
 801355a:	e7d2      	b.n	8013502 <_vfiprintf_r+0xe2>
 801355c:	9b03      	ldr	r3, [sp, #12]
 801355e:	1d19      	adds	r1, r3, #4
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	9103      	str	r1, [sp, #12]
 8013564:	2b00      	cmp	r3, #0
 8013566:	bfbb      	ittet	lt
 8013568:	425b      	neglt	r3, r3
 801356a:	f042 0202 	orrlt.w	r2, r2, #2
 801356e:	9307      	strge	r3, [sp, #28]
 8013570:	9307      	strlt	r3, [sp, #28]
 8013572:	bfb8      	it	lt
 8013574:	9204      	strlt	r2, [sp, #16]
 8013576:	7823      	ldrb	r3, [r4, #0]
 8013578:	2b2e      	cmp	r3, #46	; 0x2e
 801357a:	d10c      	bne.n	8013596 <_vfiprintf_r+0x176>
 801357c:	7863      	ldrb	r3, [r4, #1]
 801357e:	2b2a      	cmp	r3, #42	; 0x2a
 8013580:	d135      	bne.n	80135ee <_vfiprintf_r+0x1ce>
 8013582:	9b03      	ldr	r3, [sp, #12]
 8013584:	1d1a      	adds	r2, r3, #4
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	9203      	str	r2, [sp, #12]
 801358a:	2b00      	cmp	r3, #0
 801358c:	bfb8      	it	lt
 801358e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013592:	3402      	adds	r4, #2
 8013594:	9305      	str	r3, [sp, #20]
 8013596:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8013670 <_vfiprintf_r+0x250>
 801359a:	7821      	ldrb	r1, [r4, #0]
 801359c:	2203      	movs	r2, #3
 801359e:	4650      	mov	r0, sl
 80135a0:	f7ec fdf6 	bl	8000190 <memchr>
 80135a4:	b140      	cbz	r0, 80135b8 <_vfiprintf_r+0x198>
 80135a6:	2340      	movs	r3, #64	; 0x40
 80135a8:	eba0 000a 	sub.w	r0, r0, sl
 80135ac:	fa03 f000 	lsl.w	r0, r3, r0
 80135b0:	9b04      	ldr	r3, [sp, #16]
 80135b2:	4303      	orrs	r3, r0
 80135b4:	3401      	adds	r4, #1
 80135b6:	9304      	str	r3, [sp, #16]
 80135b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135bc:	482d      	ldr	r0, [pc, #180]	; (8013674 <_vfiprintf_r+0x254>)
 80135be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135c2:	2206      	movs	r2, #6
 80135c4:	f7ec fde4 	bl	8000190 <memchr>
 80135c8:	2800      	cmp	r0, #0
 80135ca:	d03f      	beq.n	801364c <_vfiprintf_r+0x22c>
 80135cc:	4b2a      	ldr	r3, [pc, #168]	; (8013678 <_vfiprintf_r+0x258>)
 80135ce:	bb1b      	cbnz	r3, 8013618 <_vfiprintf_r+0x1f8>
 80135d0:	9b03      	ldr	r3, [sp, #12]
 80135d2:	3307      	adds	r3, #7
 80135d4:	f023 0307 	bic.w	r3, r3, #7
 80135d8:	3308      	adds	r3, #8
 80135da:	9303      	str	r3, [sp, #12]
 80135dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135de:	443b      	add	r3, r7
 80135e0:	9309      	str	r3, [sp, #36]	; 0x24
 80135e2:	e767      	b.n	80134b4 <_vfiprintf_r+0x94>
 80135e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80135e8:	460c      	mov	r4, r1
 80135ea:	2001      	movs	r0, #1
 80135ec:	e7a5      	b.n	801353a <_vfiprintf_r+0x11a>
 80135ee:	2300      	movs	r3, #0
 80135f0:	3401      	adds	r4, #1
 80135f2:	9305      	str	r3, [sp, #20]
 80135f4:	4619      	mov	r1, r3
 80135f6:	f04f 0c0a 	mov.w	ip, #10
 80135fa:	4620      	mov	r0, r4
 80135fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013600:	3a30      	subs	r2, #48	; 0x30
 8013602:	2a09      	cmp	r2, #9
 8013604:	d903      	bls.n	801360e <_vfiprintf_r+0x1ee>
 8013606:	2b00      	cmp	r3, #0
 8013608:	d0c5      	beq.n	8013596 <_vfiprintf_r+0x176>
 801360a:	9105      	str	r1, [sp, #20]
 801360c:	e7c3      	b.n	8013596 <_vfiprintf_r+0x176>
 801360e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013612:	4604      	mov	r4, r0
 8013614:	2301      	movs	r3, #1
 8013616:	e7f0      	b.n	80135fa <_vfiprintf_r+0x1da>
 8013618:	ab03      	add	r3, sp, #12
 801361a:	9300      	str	r3, [sp, #0]
 801361c:	462a      	mov	r2, r5
 801361e:	4b17      	ldr	r3, [pc, #92]	; (801367c <_vfiprintf_r+0x25c>)
 8013620:	a904      	add	r1, sp, #16
 8013622:	4630      	mov	r0, r6
 8013624:	f7fd fd2c 	bl	8011080 <_printf_float>
 8013628:	4607      	mov	r7, r0
 801362a:	1c78      	adds	r0, r7, #1
 801362c:	d1d6      	bne.n	80135dc <_vfiprintf_r+0x1bc>
 801362e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013630:	07d9      	lsls	r1, r3, #31
 8013632:	d405      	bmi.n	8013640 <_vfiprintf_r+0x220>
 8013634:	89ab      	ldrh	r3, [r5, #12]
 8013636:	059a      	lsls	r2, r3, #22
 8013638:	d402      	bmi.n	8013640 <_vfiprintf_r+0x220>
 801363a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801363c:	f000 faab 	bl	8013b96 <__retarget_lock_release_recursive>
 8013640:	89ab      	ldrh	r3, [r5, #12]
 8013642:	065b      	lsls	r3, r3, #25
 8013644:	f53f af12 	bmi.w	801346c <_vfiprintf_r+0x4c>
 8013648:	9809      	ldr	r0, [sp, #36]	; 0x24
 801364a:	e711      	b.n	8013470 <_vfiprintf_r+0x50>
 801364c:	ab03      	add	r3, sp, #12
 801364e:	9300      	str	r3, [sp, #0]
 8013650:	462a      	mov	r2, r5
 8013652:	4b0a      	ldr	r3, [pc, #40]	; (801367c <_vfiprintf_r+0x25c>)
 8013654:	a904      	add	r1, sp, #16
 8013656:	4630      	mov	r0, r6
 8013658:	f7fd ffaa 	bl	80115b0 <_printf_i>
 801365c:	e7e4      	b.n	8013628 <_vfiprintf_r+0x208>
 801365e:	bf00      	nop
 8013660:	08015c5c 	.word	0x08015c5c
 8013664:	08015c7c 	.word	0x08015c7c
 8013668:	08015c3c 	.word	0x08015c3c
 801366c:	08015be4 	.word	0x08015be4
 8013670:	08015bea 	.word	0x08015bea
 8013674:	08015bee 	.word	0x08015bee
 8013678:	08011081 	.word	0x08011081
 801367c:	080133fd 	.word	0x080133fd

08013680 <__swbuf_r>:
 8013680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013682:	460e      	mov	r6, r1
 8013684:	4614      	mov	r4, r2
 8013686:	4605      	mov	r5, r0
 8013688:	b118      	cbz	r0, 8013692 <__swbuf_r+0x12>
 801368a:	6983      	ldr	r3, [r0, #24]
 801368c:	b90b      	cbnz	r3, 8013692 <__swbuf_r+0x12>
 801368e:	f000 f9e3 	bl	8013a58 <__sinit>
 8013692:	4b21      	ldr	r3, [pc, #132]	; (8013718 <__swbuf_r+0x98>)
 8013694:	429c      	cmp	r4, r3
 8013696:	d12b      	bne.n	80136f0 <__swbuf_r+0x70>
 8013698:	686c      	ldr	r4, [r5, #4]
 801369a:	69a3      	ldr	r3, [r4, #24]
 801369c:	60a3      	str	r3, [r4, #8]
 801369e:	89a3      	ldrh	r3, [r4, #12]
 80136a0:	071a      	lsls	r2, r3, #28
 80136a2:	d52f      	bpl.n	8013704 <__swbuf_r+0x84>
 80136a4:	6923      	ldr	r3, [r4, #16]
 80136a6:	b36b      	cbz	r3, 8013704 <__swbuf_r+0x84>
 80136a8:	6923      	ldr	r3, [r4, #16]
 80136aa:	6820      	ldr	r0, [r4, #0]
 80136ac:	1ac0      	subs	r0, r0, r3
 80136ae:	6963      	ldr	r3, [r4, #20]
 80136b0:	b2f6      	uxtb	r6, r6
 80136b2:	4283      	cmp	r3, r0
 80136b4:	4637      	mov	r7, r6
 80136b6:	dc04      	bgt.n	80136c2 <__swbuf_r+0x42>
 80136b8:	4621      	mov	r1, r4
 80136ba:	4628      	mov	r0, r5
 80136bc:	f000 f938 	bl	8013930 <_fflush_r>
 80136c0:	bb30      	cbnz	r0, 8013710 <__swbuf_r+0x90>
 80136c2:	68a3      	ldr	r3, [r4, #8]
 80136c4:	3b01      	subs	r3, #1
 80136c6:	60a3      	str	r3, [r4, #8]
 80136c8:	6823      	ldr	r3, [r4, #0]
 80136ca:	1c5a      	adds	r2, r3, #1
 80136cc:	6022      	str	r2, [r4, #0]
 80136ce:	701e      	strb	r6, [r3, #0]
 80136d0:	6963      	ldr	r3, [r4, #20]
 80136d2:	3001      	adds	r0, #1
 80136d4:	4283      	cmp	r3, r0
 80136d6:	d004      	beq.n	80136e2 <__swbuf_r+0x62>
 80136d8:	89a3      	ldrh	r3, [r4, #12]
 80136da:	07db      	lsls	r3, r3, #31
 80136dc:	d506      	bpl.n	80136ec <__swbuf_r+0x6c>
 80136de:	2e0a      	cmp	r6, #10
 80136e0:	d104      	bne.n	80136ec <__swbuf_r+0x6c>
 80136e2:	4621      	mov	r1, r4
 80136e4:	4628      	mov	r0, r5
 80136e6:	f000 f923 	bl	8013930 <_fflush_r>
 80136ea:	b988      	cbnz	r0, 8013710 <__swbuf_r+0x90>
 80136ec:	4638      	mov	r0, r7
 80136ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80136f0:	4b0a      	ldr	r3, [pc, #40]	; (801371c <__swbuf_r+0x9c>)
 80136f2:	429c      	cmp	r4, r3
 80136f4:	d101      	bne.n	80136fa <__swbuf_r+0x7a>
 80136f6:	68ac      	ldr	r4, [r5, #8]
 80136f8:	e7cf      	b.n	801369a <__swbuf_r+0x1a>
 80136fa:	4b09      	ldr	r3, [pc, #36]	; (8013720 <__swbuf_r+0xa0>)
 80136fc:	429c      	cmp	r4, r3
 80136fe:	bf08      	it	eq
 8013700:	68ec      	ldreq	r4, [r5, #12]
 8013702:	e7ca      	b.n	801369a <__swbuf_r+0x1a>
 8013704:	4621      	mov	r1, r4
 8013706:	4628      	mov	r0, r5
 8013708:	f000 f81a 	bl	8013740 <__swsetup_r>
 801370c:	2800      	cmp	r0, #0
 801370e:	d0cb      	beq.n	80136a8 <__swbuf_r+0x28>
 8013710:	f04f 37ff 	mov.w	r7, #4294967295
 8013714:	e7ea      	b.n	80136ec <__swbuf_r+0x6c>
 8013716:	bf00      	nop
 8013718:	08015c5c 	.word	0x08015c5c
 801371c:	08015c7c 	.word	0x08015c7c
 8013720:	08015c3c 	.word	0x08015c3c

08013724 <__ascii_wctomb>:
 8013724:	4603      	mov	r3, r0
 8013726:	4608      	mov	r0, r1
 8013728:	b141      	cbz	r1, 801373c <__ascii_wctomb+0x18>
 801372a:	2aff      	cmp	r2, #255	; 0xff
 801372c:	d904      	bls.n	8013738 <__ascii_wctomb+0x14>
 801372e:	228a      	movs	r2, #138	; 0x8a
 8013730:	601a      	str	r2, [r3, #0]
 8013732:	f04f 30ff 	mov.w	r0, #4294967295
 8013736:	4770      	bx	lr
 8013738:	700a      	strb	r2, [r1, #0]
 801373a:	2001      	movs	r0, #1
 801373c:	4770      	bx	lr
	...

08013740 <__swsetup_r>:
 8013740:	4b32      	ldr	r3, [pc, #200]	; (801380c <__swsetup_r+0xcc>)
 8013742:	b570      	push	{r4, r5, r6, lr}
 8013744:	681d      	ldr	r5, [r3, #0]
 8013746:	4606      	mov	r6, r0
 8013748:	460c      	mov	r4, r1
 801374a:	b125      	cbz	r5, 8013756 <__swsetup_r+0x16>
 801374c:	69ab      	ldr	r3, [r5, #24]
 801374e:	b913      	cbnz	r3, 8013756 <__swsetup_r+0x16>
 8013750:	4628      	mov	r0, r5
 8013752:	f000 f981 	bl	8013a58 <__sinit>
 8013756:	4b2e      	ldr	r3, [pc, #184]	; (8013810 <__swsetup_r+0xd0>)
 8013758:	429c      	cmp	r4, r3
 801375a:	d10f      	bne.n	801377c <__swsetup_r+0x3c>
 801375c:	686c      	ldr	r4, [r5, #4]
 801375e:	89a3      	ldrh	r3, [r4, #12]
 8013760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013764:	0719      	lsls	r1, r3, #28
 8013766:	d42c      	bmi.n	80137c2 <__swsetup_r+0x82>
 8013768:	06dd      	lsls	r5, r3, #27
 801376a:	d411      	bmi.n	8013790 <__swsetup_r+0x50>
 801376c:	2309      	movs	r3, #9
 801376e:	6033      	str	r3, [r6, #0]
 8013770:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013774:	81a3      	strh	r3, [r4, #12]
 8013776:	f04f 30ff 	mov.w	r0, #4294967295
 801377a:	e03e      	b.n	80137fa <__swsetup_r+0xba>
 801377c:	4b25      	ldr	r3, [pc, #148]	; (8013814 <__swsetup_r+0xd4>)
 801377e:	429c      	cmp	r4, r3
 8013780:	d101      	bne.n	8013786 <__swsetup_r+0x46>
 8013782:	68ac      	ldr	r4, [r5, #8]
 8013784:	e7eb      	b.n	801375e <__swsetup_r+0x1e>
 8013786:	4b24      	ldr	r3, [pc, #144]	; (8013818 <__swsetup_r+0xd8>)
 8013788:	429c      	cmp	r4, r3
 801378a:	bf08      	it	eq
 801378c:	68ec      	ldreq	r4, [r5, #12]
 801378e:	e7e6      	b.n	801375e <__swsetup_r+0x1e>
 8013790:	0758      	lsls	r0, r3, #29
 8013792:	d512      	bpl.n	80137ba <__swsetup_r+0x7a>
 8013794:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013796:	b141      	cbz	r1, 80137aa <__swsetup_r+0x6a>
 8013798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801379c:	4299      	cmp	r1, r3
 801379e:	d002      	beq.n	80137a6 <__swsetup_r+0x66>
 80137a0:	4630      	mov	r0, r6
 80137a2:	f7ff fb35 	bl	8012e10 <_free_r>
 80137a6:	2300      	movs	r3, #0
 80137a8:	6363      	str	r3, [r4, #52]	; 0x34
 80137aa:	89a3      	ldrh	r3, [r4, #12]
 80137ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80137b0:	81a3      	strh	r3, [r4, #12]
 80137b2:	2300      	movs	r3, #0
 80137b4:	6063      	str	r3, [r4, #4]
 80137b6:	6923      	ldr	r3, [r4, #16]
 80137b8:	6023      	str	r3, [r4, #0]
 80137ba:	89a3      	ldrh	r3, [r4, #12]
 80137bc:	f043 0308 	orr.w	r3, r3, #8
 80137c0:	81a3      	strh	r3, [r4, #12]
 80137c2:	6923      	ldr	r3, [r4, #16]
 80137c4:	b94b      	cbnz	r3, 80137da <__swsetup_r+0x9a>
 80137c6:	89a3      	ldrh	r3, [r4, #12]
 80137c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80137cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137d0:	d003      	beq.n	80137da <__swsetup_r+0x9a>
 80137d2:	4621      	mov	r1, r4
 80137d4:	4630      	mov	r0, r6
 80137d6:	f000 fa05 	bl	8013be4 <__smakebuf_r>
 80137da:	89a0      	ldrh	r0, [r4, #12]
 80137dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80137e0:	f010 0301 	ands.w	r3, r0, #1
 80137e4:	d00a      	beq.n	80137fc <__swsetup_r+0xbc>
 80137e6:	2300      	movs	r3, #0
 80137e8:	60a3      	str	r3, [r4, #8]
 80137ea:	6963      	ldr	r3, [r4, #20]
 80137ec:	425b      	negs	r3, r3
 80137ee:	61a3      	str	r3, [r4, #24]
 80137f0:	6923      	ldr	r3, [r4, #16]
 80137f2:	b943      	cbnz	r3, 8013806 <__swsetup_r+0xc6>
 80137f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80137f8:	d1ba      	bne.n	8013770 <__swsetup_r+0x30>
 80137fa:	bd70      	pop	{r4, r5, r6, pc}
 80137fc:	0781      	lsls	r1, r0, #30
 80137fe:	bf58      	it	pl
 8013800:	6963      	ldrpl	r3, [r4, #20]
 8013802:	60a3      	str	r3, [r4, #8]
 8013804:	e7f4      	b.n	80137f0 <__swsetup_r+0xb0>
 8013806:	2000      	movs	r0, #0
 8013808:	e7f7      	b.n	80137fa <__swsetup_r+0xba>
 801380a:	bf00      	nop
 801380c:	2000005c 	.word	0x2000005c
 8013810:	08015c5c 	.word	0x08015c5c
 8013814:	08015c7c 	.word	0x08015c7c
 8013818:	08015c3c 	.word	0x08015c3c

0801381c <abort>:
 801381c:	b508      	push	{r3, lr}
 801381e:	2006      	movs	r0, #6
 8013820:	f000 fa50 	bl	8013cc4 <raise>
 8013824:	2001      	movs	r0, #1
 8013826:	f7ee ff68 	bl	80026fa <_exit>
	...

0801382c <__sflush_r>:
 801382c:	898a      	ldrh	r2, [r1, #12]
 801382e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013830:	4605      	mov	r5, r0
 8013832:	0710      	lsls	r0, r2, #28
 8013834:	460c      	mov	r4, r1
 8013836:	d457      	bmi.n	80138e8 <__sflush_r+0xbc>
 8013838:	684b      	ldr	r3, [r1, #4]
 801383a:	2b00      	cmp	r3, #0
 801383c:	dc04      	bgt.n	8013848 <__sflush_r+0x1c>
 801383e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013840:	2b00      	cmp	r3, #0
 8013842:	dc01      	bgt.n	8013848 <__sflush_r+0x1c>
 8013844:	2000      	movs	r0, #0
 8013846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801384a:	2e00      	cmp	r6, #0
 801384c:	d0fa      	beq.n	8013844 <__sflush_r+0x18>
 801384e:	2300      	movs	r3, #0
 8013850:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013854:	682f      	ldr	r7, [r5, #0]
 8013856:	602b      	str	r3, [r5, #0]
 8013858:	d032      	beq.n	80138c0 <__sflush_r+0x94>
 801385a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801385c:	89a3      	ldrh	r3, [r4, #12]
 801385e:	075a      	lsls	r2, r3, #29
 8013860:	d505      	bpl.n	801386e <__sflush_r+0x42>
 8013862:	6863      	ldr	r3, [r4, #4]
 8013864:	1ac0      	subs	r0, r0, r3
 8013866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013868:	b10b      	cbz	r3, 801386e <__sflush_r+0x42>
 801386a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801386c:	1ac0      	subs	r0, r0, r3
 801386e:	2300      	movs	r3, #0
 8013870:	4602      	mov	r2, r0
 8013872:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013874:	6a21      	ldr	r1, [r4, #32]
 8013876:	4628      	mov	r0, r5
 8013878:	47b0      	blx	r6
 801387a:	1c43      	adds	r3, r0, #1
 801387c:	89a3      	ldrh	r3, [r4, #12]
 801387e:	d106      	bne.n	801388e <__sflush_r+0x62>
 8013880:	6829      	ldr	r1, [r5, #0]
 8013882:	291d      	cmp	r1, #29
 8013884:	d82c      	bhi.n	80138e0 <__sflush_r+0xb4>
 8013886:	4a29      	ldr	r2, [pc, #164]	; (801392c <__sflush_r+0x100>)
 8013888:	40ca      	lsrs	r2, r1
 801388a:	07d6      	lsls	r6, r2, #31
 801388c:	d528      	bpl.n	80138e0 <__sflush_r+0xb4>
 801388e:	2200      	movs	r2, #0
 8013890:	6062      	str	r2, [r4, #4]
 8013892:	04d9      	lsls	r1, r3, #19
 8013894:	6922      	ldr	r2, [r4, #16]
 8013896:	6022      	str	r2, [r4, #0]
 8013898:	d504      	bpl.n	80138a4 <__sflush_r+0x78>
 801389a:	1c42      	adds	r2, r0, #1
 801389c:	d101      	bne.n	80138a2 <__sflush_r+0x76>
 801389e:	682b      	ldr	r3, [r5, #0]
 80138a0:	b903      	cbnz	r3, 80138a4 <__sflush_r+0x78>
 80138a2:	6560      	str	r0, [r4, #84]	; 0x54
 80138a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80138a6:	602f      	str	r7, [r5, #0]
 80138a8:	2900      	cmp	r1, #0
 80138aa:	d0cb      	beq.n	8013844 <__sflush_r+0x18>
 80138ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80138b0:	4299      	cmp	r1, r3
 80138b2:	d002      	beq.n	80138ba <__sflush_r+0x8e>
 80138b4:	4628      	mov	r0, r5
 80138b6:	f7ff faab 	bl	8012e10 <_free_r>
 80138ba:	2000      	movs	r0, #0
 80138bc:	6360      	str	r0, [r4, #52]	; 0x34
 80138be:	e7c2      	b.n	8013846 <__sflush_r+0x1a>
 80138c0:	6a21      	ldr	r1, [r4, #32]
 80138c2:	2301      	movs	r3, #1
 80138c4:	4628      	mov	r0, r5
 80138c6:	47b0      	blx	r6
 80138c8:	1c41      	adds	r1, r0, #1
 80138ca:	d1c7      	bne.n	801385c <__sflush_r+0x30>
 80138cc:	682b      	ldr	r3, [r5, #0]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d0c4      	beq.n	801385c <__sflush_r+0x30>
 80138d2:	2b1d      	cmp	r3, #29
 80138d4:	d001      	beq.n	80138da <__sflush_r+0xae>
 80138d6:	2b16      	cmp	r3, #22
 80138d8:	d101      	bne.n	80138de <__sflush_r+0xb2>
 80138da:	602f      	str	r7, [r5, #0]
 80138dc:	e7b2      	b.n	8013844 <__sflush_r+0x18>
 80138de:	89a3      	ldrh	r3, [r4, #12]
 80138e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138e4:	81a3      	strh	r3, [r4, #12]
 80138e6:	e7ae      	b.n	8013846 <__sflush_r+0x1a>
 80138e8:	690f      	ldr	r7, [r1, #16]
 80138ea:	2f00      	cmp	r7, #0
 80138ec:	d0aa      	beq.n	8013844 <__sflush_r+0x18>
 80138ee:	0793      	lsls	r3, r2, #30
 80138f0:	680e      	ldr	r6, [r1, #0]
 80138f2:	bf08      	it	eq
 80138f4:	694b      	ldreq	r3, [r1, #20]
 80138f6:	600f      	str	r7, [r1, #0]
 80138f8:	bf18      	it	ne
 80138fa:	2300      	movne	r3, #0
 80138fc:	1bf6      	subs	r6, r6, r7
 80138fe:	608b      	str	r3, [r1, #8]
 8013900:	2e00      	cmp	r6, #0
 8013902:	dd9f      	ble.n	8013844 <__sflush_r+0x18>
 8013904:	6a21      	ldr	r1, [r4, #32]
 8013906:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801390a:	4633      	mov	r3, r6
 801390c:	463a      	mov	r2, r7
 801390e:	4628      	mov	r0, r5
 8013910:	47e0      	blx	ip
 8013912:	2800      	cmp	r0, #0
 8013914:	dc06      	bgt.n	8013924 <__sflush_r+0xf8>
 8013916:	89a3      	ldrh	r3, [r4, #12]
 8013918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801391c:	81a3      	strh	r3, [r4, #12]
 801391e:	f04f 30ff 	mov.w	r0, #4294967295
 8013922:	e790      	b.n	8013846 <__sflush_r+0x1a>
 8013924:	4407      	add	r7, r0
 8013926:	1a36      	subs	r6, r6, r0
 8013928:	e7ea      	b.n	8013900 <__sflush_r+0xd4>
 801392a:	bf00      	nop
 801392c:	20400001 	.word	0x20400001

08013930 <_fflush_r>:
 8013930:	b538      	push	{r3, r4, r5, lr}
 8013932:	690b      	ldr	r3, [r1, #16]
 8013934:	4605      	mov	r5, r0
 8013936:	460c      	mov	r4, r1
 8013938:	b913      	cbnz	r3, 8013940 <_fflush_r+0x10>
 801393a:	2500      	movs	r5, #0
 801393c:	4628      	mov	r0, r5
 801393e:	bd38      	pop	{r3, r4, r5, pc}
 8013940:	b118      	cbz	r0, 801394a <_fflush_r+0x1a>
 8013942:	6983      	ldr	r3, [r0, #24]
 8013944:	b90b      	cbnz	r3, 801394a <_fflush_r+0x1a>
 8013946:	f000 f887 	bl	8013a58 <__sinit>
 801394a:	4b14      	ldr	r3, [pc, #80]	; (801399c <_fflush_r+0x6c>)
 801394c:	429c      	cmp	r4, r3
 801394e:	d11b      	bne.n	8013988 <_fflush_r+0x58>
 8013950:	686c      	ldr	r4, [r5, #4]
 8013952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d0ef      	beq.n	801393a <_fflush_r+0xa>
 801395a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801395c:	07d0      	lsls	r0, r2, #31
 801395e:	d404      	bmi.n	801396a <_fflush_r+0x3a>
 8013960:	0599      	lsls	r1, r3, #22
 8013962:	d402      	bmi.n	801396a <_fflush_r+0x3a>
 8013964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013966:	f000 f915 	bl	8013b94 <__retarget_lock_acquire_recursive>
 801396a:	4628      	mov	r0, r5
 801396c:	4621      	mov	r1, r4
 801396e:	f7ff ff5d 	bl	801382c <__sflush_r>
 8013972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013974:	07da      	lsls	r2, r3, #31
 8013976:	4605      	mov	r5, r0
 8013978:	d4e0      	bmi.n	801393c <_fflush_r+0xc>
 801397a:	89a3      	ldrh	r3, [r4, #12]
 801397c:	059b      	lsls	r3, r3, #22
 801397e:	d4dd      	bmi.n	801393c <_fflush_r+0xc>
 8013980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013982:	f000 f908 	bl	8013b96 <__retarget_lock_release_recursive>
 8013986:	e7d9      	b.n	801393c <_fflush_r+0xc>
 8013988:	4b05      	ldr	r3, [pc, #20]	; (80139a0 <_fflush_r+0x70>)
 801398a:	429c      	cmp	r4, r3
 801398c:	d101      	bne.n	8013992 <_fflush_r+0x62>
 801398e:	68ac      	ldr	r4, [r5, #8]
 8013990:	e7df      	b.n	8013952 <_fflush_r+0x22>
 8013992:	4b04      	ldr	r3, [pc, #16]	; (80139a4 <_fflush_r+0x74>)
 8013994:	429c      	cmp	r4, r3
 8013996:	bf08      	it	eq
 8013998:	68ec      	ldreq	r4, [r5, #12]
 801399a:	e7da      	b.n	8013952 <_fflush_r+0x22>
 801399c:	08015c5c 	.word	0x08015c5c
 80139a0:	08015c7c 	.word	0x08015c7c
 80139a4:	08015c3c 	.word	0x08015c3c

080139a8 <std>:
 80139a8:	2300      	movs	r3, #0
 80139aa:	b510      	push	{r4, lr}
 80139ac:	4604      	mov	r4, r0
 80139ae:	e9c0 3300 	strd	r3, r3, [r0]
 80139b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80139b6:	6083      	str	r3, [r0, #8]
 80139b8:	8181      	strh	r1, [r0, #12]
 80139ba:	6643      	str	r3, [r0, #100]	; 0x64
 80139bc:	81c2      	strh	r2, [r0, #14]
 80139be:	6183      	str	r3, [r0, #24]
 80139c0:	4619      	mov	r1, r3
 80139c2:	2208      	movs	r2, #8
 80139c4:	305c      	adds	r0, #92	; 0x5c
 80139c6:	f7fd fab5 	bl	8010f34 <memset>
 80139ca:	4b05      	ldr	r3, [pc, #20]	; (80139e0 <std+0x38>)
 80139cc:	6263      	str	r3, [r4, #36]	; 0x24
 80139ce:	4b05      	ldr	r3, [pc, #20]	; (80139e4 <std+0x3c>)
 80139d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80139d2:	4b05      	ldr	r3, [pc, #20]	; (80139e8 <std+0x40>)
 80139d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80139d6:	4b05      	ldr	r3, [pc, #20]	; (80139ec <std+0x44>)
 80139d8:	6224      	str	r4, [r4, #32]
 80139da:	6323      	str	r3, [r4, #48]	; 0x30
 80139dc:	bd10      	pop	{r4, pc}
 80139de:	bf00      	nop
 80139e0:	08013cfd 	.word	0x08013cfd
 80139e4:	08013d1f 	.word	0x08013d1f
 80139e8:	08013d57 	.word	0x08013d57
 80139ec:	08013d7b 	.word	0x08013d7b

080139f0 <_cleanup_r>:
 80139f0:	4901      	ldr	r1, [pc, #4]	; (80139f8 <_cleanup_r+0x8>)
 80139f2:	f000 b8af 	b.w	8013b54 <_fwalk_reent>
 80139f6:	bf00      	nop
 80139f8:	08013931 	.word	0x08013931

080139fc <__sfmoreglue>:
 80139fc:	b570      	push	{r4, r5, r6, lr}
 80139fe:	2268      	movs	r2, #104	; 0x68
 8013a00:	1e4d      	subs	r5, r1, #1
 8013a02:	4355      	muls	r5, r2
 8013a04:	460e      	mov	r6, r1
 8013a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013a0a:	f7ff fa6b 	bl	8012ee4 <_malloc_r>
 8013a0e:	4604      	mov	r4, r0
 8013a10:	b140      	cbz	r0, 8013a24 <__sfmoreglue+0x28>
 8013a12:	2100      	movs	r1, #0
 8013a14:	e9c0 1600 	strd	r1, r6, [r0]
 8013a18:	300c      	adds	r0, #12
 8013a1a:	60a0      	str	r0, [r4, #8]
 8013a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013a20:	f7fd fa88 	bl	8010f34 <memset>
 8013a24:	4620      	mov	r0, r4
 8013a26:	bd70      	pop	{r4, r5, r6, pc}

08013a28 <__sfp_lock_acquire>:
 8013a28:	4801      	ldr	r0, [pc, #4]	; (8013a30 <__sfp_lock_acquire+0x8>)
 8013a2a:	f000 b8b3 	b.w	8013b94 <__retarget_lock_acquire_recursive>
 8013a2e:	bf00      	nop
 8013a30:	20000f5d 	.word	0x20000f5d

08013a34 <__sfp_lock_release>:
 8013a34:	4801      	ldr	r0, [pc, #4]	; (8013a3c <__sfp_lock_release+0x8>)
 8013a36:	f000 b8ae 	b.w	8013b96 <__retarget_lock_release_recursive>
 8013a3a:	bf00      	nop
 8013a3c:	20000f5d 	.word	0x20000f5d

08013a40 <__sinit_lock_acquire>:
 8013a40:	4801      	ldr	r0, [pc, #4]	; (8013a48 <__sinit_lock_acquire+0x8>)
 8013a42:	f000 b8a7 	b.w	8013b94 <__retarget_lock_acquire_recursive>
 8013a46:	bf00      	nop
 8013a48:	20000f5e 	.word	0x20000f5e

08013a4c <__sinit_lock_release>:
 8013a4c:	4801      	ldr	r0, [pc, #4]	; (8013a54 <__sinit_lock_release+0x8>)
 8013a4e:	f000 b8a2 	b.w	8013b96 <__retarget_lock_release_recursive>
 8013a52:	bf00      	nop
 8013a54:	20000f5e 	.word	0x20000f5e

08013a58 <__sinit>:
 8013a58:	b510      	push	{r4, lr}
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	f7ff fff0 	bl	8013a40 <__sinit_lock_acquire>
 8013a60:	69a3      	ldr	r3, [r4, #24]
 8013a62:	b11b      	cbz	r3, 8013a6c <__sinit+0x14>
 8013a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a68:	f7ff bff0 	b.w	8013a4c <__sinit_lock_release>
 8013a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013a70:	6523      	str	r3, [r4, #80]	; 0x50
 8013a72:	4b13      	ldr	r3, [pc, #76]	; (8013ac0 <__sinit+0x68>)
 8013a74:	4a13      	ldr	r2, [pc, #76]	; (8013ac4 <__sinit+0x6c>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8013a7a:	42a3      	cmp	r3, r4
 8013a7c:	bf04      	itt	eq
 8013a7e:	2301      	moveq	r3, #1
 8013a80:	61a3      	streq	r3, [r4, #24]
 8013a82:	4620      	mov	r0, r4
 8013a84:	f000 f820 	bl	8013ac8 <__sfp>
 8013a88:	6060      	str	r0, [r4, #4]
 8013a8a:	4620      	mov	r0, r4
 8013a8c:	f000 f81c 	bl	8013ac8 <__sfp>
 8013a90:	60a0      	str	r0, [r4, #8]
 8013a92:	4620      	mov	r0, r4
 8013a94:	f000 f818 	bl	8013ac8 <__sfp>
 8013a98:	2200      	movs	r2, #0
 8013a9a:	60e0      	str	r0, [r4, #12]
 8013a9c:	2104      	movs	r1, #4
 8013a9e:	6860      	ldr	r0, [r4, #4]
 8013aa0:	f7ff ff82 	bl	80139a8 <std>
 8013aa4:	68a0      	ldr	r0, [r4, #8]
 8013aa6:	2201      	movs	r2, #1
 8013aa8:	2109      	movs	r1, #9
 8013aaa:	f7ff ff7d 	bl	80139a8 <std>
 8013aae:	68e0      	ldr	r0, [r4, #12]
 8013ab0:	2202      	movs	r2, #2
 8013ab2:	2112      	movs	r1, #18
 8013ab4:	f7ff ff78 	bl	80139a8 <std>
 8013ab8:	2301      	movs	r3, #1
 8013aba:	61a3      	str	r3, [r4, #24]
 8013abc:	e7d2      	b.n	8013a64 <__sinit+0xc>
 8013abe:	bf00      	nop
 8013ac0:	080159c0 	.word	0x080159c0
 8013ac4:	080139f1 	.word	0x080139f1

08013ac8 <__sfp>:
 8013ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013aca:	4607      	mov	r7, r0
 8013acc:	f7ff ffac 	bl	8013a28 <__sfp_lock_acquire>
 8013ad0:	4b1e      	ldr	r3, [pc, #120]	; (8013b4c <__sfp+0x84>)
 8013ad2:	681e      	ldr	r6, [r3, #0]
 8013ad4:	69b3      	ldr	r3, [r6, #24]
 8013ad6:	b913      	cbnz	r3, 8013ade <__sfp+0x16>
 8013ad8:	4630      	mov	r0, r6
 8013ada:	f7ff ffbd 	bl	8013a58 <__sinit>
 8013ade:	3648      	adds	r6, #72	; 0x48
 8013ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013ae4:	3b01      	subs	r3, #1
 8013ae6:	d503      	bpl.n	8013af0 <__sfp+0x28>
 8013ae8:	6833      	ldr	r3, [r6, #0]
 8013aea:	b30b      	cbz	r3, 8013b30 <__sfp+0x68>
 8013aec:	6836      	ldr	r6, [r6, #0]
 8013aee:	e7f7      	b.n	8013ae0 <__sfp+0x18>
 8013af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013af4:	b9d5      	cbnz	r5, 8013b2c <__sfp+0x64>
 8013af6:	4b16      	ldr	r3, [pc, #88]	; (8013b50 <__sfp+0x88>)
 8013af8:	60e3      	str	r3, [r4, #12]
 8013afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013afe:	6665      	str	r5, [r4, #100]	; 0x64
 8013b00:	f000 f847 	bl	8013b92 <__retarget_lock_init_recursive>
 8013b04:	f7ff ff96 	bl	8013a34 <__sfp_lock_release>
 8013b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013b10:	6025      	str	r5, [r4, #0]
 8013b12:	61a5      	str	r5, [r4, #24]
 8013b14:	2208      	movs	r2, #8
 8013b16:	4629      	mov	r1, r5
 8013b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013b1c:	f7fd fa0a 	bl	8010f34 <memset>
 8013b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013b28:	4620      	mov	r0, r4
 8013b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b2c:	3468      	adds	r4, #104	; 0x68
 8013b2e:	e7d9      	b.n	8013ae4 <__sfp+0x1c>
 8013b30:	2104      	movs	r1, #4
 8013b32:	4638      	mov	r0, r7
 8013b34:	f7ff ff62 	bl	80139fc <__sfmoreglue>
 8013b38:	4604      	mov	r4, r0
 8013b3a:	6030      	str	r0, [r6, #0]
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d1d5      	bne.n	8013aec <__sfp+0x24>
 8013b40:	f7ff ff78 	bl	8013a34 <__sfp_lock_release>
 8013b44:	230c      	movs	r3, #12
 8013b46:	603b      	str	r3, [r7, #0]
 8013b48:	e7ee      	b.n	8013b28 <__sfp+0x60>
 8013b4a:	bf00      	nop
 8013b4c:	080159c0 	.word	0x080159c0
 8013b50:	ffff0001 	.word	0xffff0001

08013b54 <_fwalk_reent>:
 8013b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b58:	4606      	mov	r6, r0
 8013b5a:	4688      	mov	r8, r1
 8013b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013b60:	2700      	movs	r7, #0
 8013b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013b66:	f1b9 0901 	subs.w	r9, r9, #1
 8013b6a:	d505      	bpl.n	8013b78 <_fwalk_reent+0x24>
 8013b6c:	6824      	ldr	r4, [r4, #0]
 8013b6e:	2c00      	cmp	r4, #0
 8013b70:	d1f7      	bne.n	8013b62 <_fwalk_reent+0xe>
 8013b72:	4638      	mov	r0, r7
 8013b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b78:	89ab      	ldrh	r3, [r5, #12]
 8013b7a:	2b01      	cmp	r3, #1
 8013b7c:	d907      	bls.n	8013b8e <_fwalk_reent+0x3a>
 8013b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013b82:	3301      	adds	r3, #1
 8013b84:	d003      	beq.n	8013b8e <_fwalk_reent+0x3a>
 8013b86:	4629      	mov	r1, r5
 8013b88:	4630      	mov	r0, r6
 8013b8a:	47c0      	blx	r8
 8013b8c:	4307      	orrs	r7, r0
 8013b8e:	3568      	adds	r5, #104	; 0x68
 8013b90:	e7e9      	b.n	8013b66 <_fwalk_reent+0x12>

08013b92 <__retarget_lock_init_recursive>:
 8013b92:	4770      	bx	lr

08013b94 <__retarget_lock_acquire_recursive>:
 8013b94:	4770      	bx	lr

08013b96 <__retarget_lock_release_recursive>:
 8013b96:	4770      	bx	lr

08013b98 <__swhatbuf_r>:
 8013b98:	b570      	push	{r4, r5, r6, lr}
 8013b9a:	460e      	mov	r6, r1
 8013b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ba0:	2900      	cmp	r1, #0
 8013ba2:	b096      	sub	sp, #88	; 0x58
 8013ba4:	4614      	mov	r4, r2
 8013ba6:	461d      	mov	r5, r3
 8013ba8:	da08      	bge.n	8013bbc <__swhatbuf_r+0x24>
 8013baa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013bae:	2200      	movs	r2, #0
 8013bb0:	602a      	str	r2, [r5, #0]
 8013bb2:	061a      	lsls	r2, r3, #24
 8013bb4:	d410      	bmi.n	8013bd8 <__swhatbuf_r+0x40>
 8013bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013bba:	e00e      	b.n	8013bda <__swhatbuf_r+0x42>
 8013bbc:	466a      	mov	r2, sp
 8013bbe:	f000 f903 	bl	8013dc8 <_fstat_r>
 8013bc2:	2800      	cmp	r0, #0
 8013bc4:	dbf1      	blt.n	8013baa <__swhatbuf_r+0x12>
 8013bc6:	9a01      	ldr	r2, [sp, #4]
 8013bc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013bcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013bd0:	425a      	negs	r2, r3
 8013bd2:	415a      	adcs	r2, r3
 8013bd4:	602a      	str	r2, [r5, #0]
 8013bd6:	e7ee      	b.n	8013bb6 <__swhatbuf_r+0x1e>
 8013bd8:	2340      	movs	r3, #64	; 0x40
 8013bda:	2000      	movs	r0, #0
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	b016      	add	sp, #88	; 0x58
 8013be0:	bd70      	pop	{r4, r5, r6, pc}
	...

08013be4 <__smakebuf_r>:
 8013be4:	898b      	ldrh	r3, [r1, #12]
 8013be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013be8:	079d      	lsls	r5, r3, #30
 8013bea:	4606      	mov	r6, r0
 8013bec:	460c      	mov	r4, r1
 8013bee:	d507      	bpl.n	8013c00 <__smakebuf_r+0x1c>
 8013bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013bf4:	6023      	str	r3, [r4, #0]
 8013bf6:	6123      	str	r3, [r4, #16]
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	6163      	str	r3, [r4, #20]
 8013bfc:	b002      	add	sp, #8
 8013bfe:	bd70      	pop	{r4, r5, r6, pc}
 8013c00:	ab01      	add	r3, sp, #4
 8013c02:	466a      	mov	r2, sp
 8013c04:	f7ff ffc8 	bl	8013b98 <__swhatbuf_r>
 8013c08:	9900      	ldr	r1, [sp, #0]
 8013c0a:	4605      	mov	r5, r0
 8013c0c:	4630      	mov	r0, r6
 8013c0e:	f7ff f969 	bl	8012ee4 <_malloc_r>
 8013c12:	b948      	cbnz	r0, 8013c28 <__smakebuf_r+0x44>
 8013c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c18:	059a      	lsls	r2, r3, #22
 8013c1a:	d4ef      	bmi.n	8013bfc <__smakebuf_r+0x18>
 8013c1c:	f023 0303 	bic.w	r3, r3, #3
 8013c20:	f043 0302 	orr.w	r3, r3, #2
 8013c24:	81a3      	strh	r3, [r4, #12]
 8013c26:	e7e3      	b.n	8013bf0 <__smakebuf_r+0xc>
 8013c28:	4b0d      	ldr	r3, [pc, #52]	; (8013c60 <__smakebuf_r+0x7c>)
 8013c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8013c2c:	89a3      	ldrh	r3, [r4, #12]
 8013c2e:	6020      	str	r0, [r4, #0]
 8013c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013c34:	81a3      	strh	r3, [r4, #12]
 8013c36:	9b00      	ldr	r3, [sp, #0]
 8013c38:	6163      	str	r3, [r4, #20]
 8013c3a:	9b01      	ldr	r3, [sp, #4]
 8013c3c:	6120      	str	r0, [r4, #16]
 8013c3e:	b15b      	cbz	r3, 8013c58 <__smakebuf_r+0x74>
 8013c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c44:	4630      	mov	r0, r6
 8013c46:	f000 f8d1 	bl	8013dec <_isatty_r>
 8013c4a:	b128      	cbz	r0, 8013c58 <__smakebuf_r+0x74>
 8013c4c:	89a3      	ldrh	r3, [r4, #12]
 8013c4e:	f023 0303 	bic.w	r3, r3, #3
 8013c52:	f043 0301 	orr.w	r3, r3, #1
 8013c56:	81a3      	strh	r3, [r4, #12]
 8013c58:	89a0      	ldrh	r0, [r4, #12]
 8013c5a:	4305      	orrs	r5, r0
 8013c5c:	81a5      	strh	r5, [r4, #12]
 8013c5e:	e7cd      	b.n	8013bfc <__smakebuf_r+0x18>
 8013c60:	080139f1 	.word	0x080139f1

08013c64 <_malloc_usable_size_r>:
 8013c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c68:	1f18      	subs	r0, r3, #4
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	bfbc      	itt	lt
 8013c6e:	580b      	ldrlt	r3, [r1, r0]
 8013c70:	18c0      	addlt	r0, r0, r3
 8013c72:	4770      	bx	lr

08013c74 <_raise_r>:
 8013c74:	291f      	cmp	r1, #31
 8013c76:	b538      	push	{r3, r4, r5, lr}
 8013c78:	4604      	mov	r4, r0
 8013c7a:	460d      	mov	r5, r1
 8013c7c:	d904      	bls.n	8013c88 <_raise_r+0x14>
 8013c7e:	2316      	movs	r3, #22
 8013c80:	6003      	str	r3, [r0, #0]
 8013c82:	f04f 30ff 	mov.w	r0, #4294967295
 8013c86:	bd38      	pop	{r3, r4, r5, pc}
 8013c88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013c8a:	b112      	cbz	r2, 8013c92 <_raise_r+0x1e>
 8013c8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c90:	b94b      	cbnz	r3, 8013ca6 <_raise_r+0x32>
 8013c92:	4620      	mov	r0, r4
 8013c94:	f000 f830 	bl	8013cf8 <_getpid_r>
 8013c98:	462a      	mov	r2, r5
 8013c9a:	4601      	mov	r1, r0
 8013c9c:	4620      	mov	r0, r4
 8013c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ca2:	f000 b817 	b.w	8013cd4 <_kill_r>
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d00a      	beq.n	8013cc0 <_raise_r+0x4c>
 8013caa:	1c59      	adds	r1, r3, #1
 8013cac:	d103      	bne.n	8013cb6 <_raise_r+0x42>
 8013cae:	2316      	movs	r3, #22
 8013cb0:	6003      	str	r3, [r0, #0]
 8013cb2:	2001      	movs	r0, #1
 8013cb4:	e7e7      	b.n	8013c86 <_raise_r+0x12>
 8013cb6:	2400      	movs	r4, #0
 8013cb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013cbc:	4628      	mov	r0, r5
 8013cbe:	4798      	blx	r3
 8013cc0:	2000      	movs	r0, #0
 8013cc2:	e7e0      	b.n	8013c86 <_raise_r+0x12>

08013cc4 <raise>:
 8013cc4:	4b02      	ldr	r3, [pc, #8]	; (8013cd0 <raise+0xc>)
 8013cc6:	4601      	mov	r1, r0
 8013cc8:	6818      	ldr	r0, [r3, #0]
 8013cca:	f7ff bfd3 	b.w	8013c74 <_raise_r>
 8013cce:	bf00      	nop
 8013cd0:	2000005c 	.word	0x2000005c

08013cd4 <_kill_r>:
 8013cd4:	b538      	push	{r3, r4, r5, lr}
 8013cd6:	4d07      	ldr	r5, [pc, #28]	; (8013cf4 <_kill_r+0x20>)
 8013cd8:	2300      	movs	r3, #0
 8013cda:	4604      	mov	r4, r0
 8013cdc:	4608      	mov	r0, r1
 8013cde:	4611      	mov	r1, r2
 8013ce0:	602b      	str	r3, [r5, #0]
 8013ce2:	f7ee fcfa 	bl	80026da <_kill>
 8013ce6:	1c43      	adds	r3, r0, #1
 8013ce8:	d102      	bne.n	8013cf0 <_kill_r+0x1c>
 8013cea:	682b      	ldr	r3, [r5, #0]
 8013cec:	b103      	cbz	r3, 8013cf0 <_kill_r+0x1c>
 8013cee:	6023      	str	r3, [r4, #0]
 8013cf0:	bd38      	pop	{r3, r4, r5, pc}
 8013cf2:	bf00      	nop
 8013cf4:	20000f58 	.word	0x20000f58

08013cf8 <_getpid_r>:
 8013cf8:	f7ee bce8 	b.w	80026cc <_getpid>

08013cfc <__sread>:
 8013cfc:	b510      	push	{r4, lr}
 8013cfe:	460c      	mov	r4, r1
 8013d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d04:	f000 f894 	bl	8013e30 <_read_r>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	bfab      	itete	ge
 8013d0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013d0e:	89a3      	ldrhlt	r3, [r4, #12]
 8013d10:	181b      	addge	r3, r3, r0
 8013d12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013d16:	bfac      	ite	ge
 8013d18:	6563      	strge	r3, [r4, #84]	; 0x54
 8013d1a:	81a3      	strhlt	r3, [r4, #12]
 8013d1c:	bd10      	pop	{r4, pc}

08013d1e <__swrite>:
 8013d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d22:	461f      	mov	r7, r3
 8013d24:	898b      	ldrh	r3, [r1, #12]
 8013d26:	05db      	lsls	r3, r3, #23
 8013d28:	4605      	mov	r5, r0
 8013d2a:	460c      	mov	r4, r1
 8013d2c:	4616      	mov	r6, r2
 8013d2e:	d505      	bpl.n	8013d3c <__swrite+0x1e>
 8013d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d34:	2302      	movs	r3, #2
 8013d36:	2200      	movs	r2, #0
 8013d38:	f000 f868 	bl	8013e0c <_lseek_r>
 8013d3c:	89a3      	ldrh	r3, [r4, #12]
 8013d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013d46:	81a3      	strh	r3, [r4, #12]
 8013d48:	4632      	mov	r2, r6
 8013d4a:	463b      	mov	r3, r7
 8013d4c:	4628      	mov	r0, r5
 8013d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d52:	f000 b817 	b.w	8013d84 <_write_r>

08013d56 <__sseek>:
 8013d56:	b510      	push	{r4, lr}
 8013d58:	460c      	mov	r4, r1
 8013d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d5e:	f000 f855 	bl	8013e0c <_lseek_r>
 8013d62:	1c43      	adds	r3, r0, #1
 8013d64:	89a3      	ldrh	r3, [r4, #12]
 8013d66:	bf15      	itete	ne
 8013d68:	6560      	strne	r0, [r4, #84]	; 0x54
 8013d6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013d6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013d72:	81a3      	strheq	r3, [r4, #12]
 8013d74:	bf18      	it	ne
 8013d76:	81a3      	strhne	r3, [r4, #12]
 8013d78:	bd10      	pop	{r4, pc}

08013d7a <__sclose>:
 8013d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d7e:	f000 b813 	b.w	8013da8 <_close_r>
	...

08013d84 <_write_r>:
 8013d84:	b538      	push	{r3, r4, r5, lr}
 8013d86:	4d07      	ldr	r5, [pc, #28]	; (8013da4 <_write_r+0x20>)
 8013d88:	4604      	mov	r4, r0
 8013d8a:	4608      	mov	r0, r1
 8013d8c:	4611      	mov	r1, r2
 8013d8e:	2200      	movs	r2, #0
 8013d90:	602a      	str	r2, [r5, #0]
 8013d92:	461a      	mov	r2, r3
 8013d94:	f7ee fcd8 	bl	8002748 <_write>
 8013d98:	1c43      	adds	r3, r0, #1
 8013d9a:	d102      	bne.n	8013da2 <_write_r+0x1e>
 8013d9c:	682b      	ldr	r3, [r5, #0]
 8013d9e:	b103      	cbz	r3, 8013da2 <_write_r+0x1e>
 8013da0:	6023      	str	r3, [r4, #0]
 8013da2:	bd38      	pop	{r3, r4, r5, pc}
 8013da4:	20000f58 	.word	0x20000f58

08013da8 <_close_r>:
 8013da8:	b538      	push	{r3, r4, r5, lr}
 8013daa:	4d06      	ldr	r5, [pc, #24]	; (8013dc4 <_close_r+0x1c>)
 8013dac:	2300      	movs	r3, #0
 8013dae:	4604      	mov	r4, r0
 8013db0:	4608      	mov	r0, r1
 8013db2:	602b      	str	r3, [r5, #0]
 8013db4:	f7ee fce4 	bl	8002780 <_close>
 8013db8:	1c43      	adds	r3, r0, #1
 8013dba:	d102      	bne.n	8013dc2 <_close_r+0x1a>
 8013dbc:	682b      	ldr	r3, [r5, #0]
 8013dbe:	b103      	cbz	r3, 8013dc2 <_close_r+0x1a>
 8013dc0:	6023      	str	r3, [r4, #0]
 8013dc2:	bd38      	pop	{r3, r4, r5, pc}
 8013dc4:	20000f58 	.word	0x20000f58

08013dc8 <_fstat_r>:
 8013dc8:	b538      	push	{r3, r4, r5, lr}
 8013dca:	4d07      	ldr	r5, [pc, #28]	; (8013de8 <_fstat_r+0x20>)
 8013dcc:	2300      	movs	r3, #0
 8013dce:	4604      	mov	r4, r0
 8013dd0:	4608      	mov	r0, r1
 8013dd2:	4611      	mov	r1, r2
 8013dd4:	602b      	str	r3, [r5, #0]
 8013dd6:	f7ee fcde 	bl	8002796 <_fstat>
 8013dda:	1c43      	adds	r3, r0, #1
 8013ddc:	d102      	bne.n	8013de4 <_fstat_r+0x1c>
 8013dde:	682b      	ldr	r3, [r5, #0]
 8013de0:	b103      	cbz	r3, 8013de4 <_fstat_r+0x1c>
 8013de2:	6023      	str	r3, [r4, #0]
 8013de4:	bd38      	pop	{r3, r4, r5, pc}
 8013de6:	bf00      	nop
 8013de8:	20000f58 	.word	0x20000f58

08013dec <_isatty_r>:
 8013dec:	b538      	push	{r3, r4, r5, lr}
 8013dee:	4d06      	ldr	r5, [pc, #24]	; (8013e08 <_isatty_r+0x1c>)
 8013df0:	2300      	movs	r3, #0
 8013df2:	4604      	mov	r4, r0
 8013df4:	4608      	mov	r0, r1
 8013df6:	602b      	str	r3, [r5, #0]
 8013df8:	f7ee fcdc 	bl	80027b4 <_isatty>
 8013dfc:	1c43      	adds	r3, r0, #1
 8013dfe:	d102      	bne.n	8013e06 <_isatty_r+0x1a>
 8013e00:	682b      	ldr	r3, [r5, #0]
 8013e02:	b103      	cbz	r3, 8013e06 <_isatty_r+0x1a>
 8013e04:	6023      	str	r3, [r4, #0]
 8013e06:	bd38      	pop	{r3, r4, r5, pc}
 8013e08:	20000f58 	.word	0x20000f58

08013e0c <_lseek_r>:
 8013e0c:	b538      	push	{r3, r4, r5, lr}
 8013e0e:	4d07      	ldr	r5, [pc, #28]	; (8013e2c <_lseek_r+0x20>)
 8013e10:	4604      	mov	r4, r0
 8013e12:	4608      	mov	r0, r1
 8013e14:	4611      	mov	r1, r2
 8013e16:	2200      	movs	r2, #0
 8013e18:	602a      	str	r2, [r5, #0]
 8013e1a:	461a      	mov	r2, r3
 8013e1c:	f7ee fcd4 	bl	80027c8 <_lseek>
 8013e20:	1c43      	adds	r3, r0, #1
 8013e22:	d102      	bne.n	8013e2a <_lseek_r+0x1e>
 8013e24:	682b      	ldr	r3, [r5, #0]
 8013e26:	b103      	cbz	r3, 8013e2a <_lseek_r+0x1e>
 8013e28:	6023      	str	r3, [r4, #0]
 8013e2a:	bd38      	pop	{r3, r4, r5, pc}
 8013e2c:	20000f58 	.word	0x20000f58

08013e30 <_read_r>:
 8013e30:	b538      	push	{r3, r4, r5, lr}
 8013e32:	4d07      	ldr	r5, [pc, #28]	; (8013e50 <_read_r+0x20>)
 8013e34:	4604      	mov	r4, r0
 8013e36:	4608      	mov	r0, r1
 8013e38:	4611      	mov	r1, r2
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	602a      	str	r2, [r5, #0]
 8013e3e:	461a      	mov	r2, r3
 8013e40:	f7ee fc65 	bl	800270e <_read>
 8013e44:	1c43      	adds	r3, r0, #1
 8013e46:	d102      	bne.n	8013e4e <_read_r+0x1e>
 8013e48:	682b      	ldr	r3, [r5, #0]
 8013e4a:	b103      	cbz	r3, 8013e4e <_read_r+0x1e>
 8013e4c:	6023      	str	r3, [r4, #0]
 8013e4e:	bd38      	pop	{r3, r4, r5, pc}
 8013e50:	20000f58 	.word	0x20000f58

08013e54 <pow>:
 8013e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e58:	4614      	mov	r4, r2
 8013e5a:	461d      	mov	r5, r3
 8013e5c:	4680      	mov	r8, r0
 8013e5e:	4689      	mov	r9, r1
 8013e60:	f000 f862 	bl	8013f28 <__ieee754_pow>
 8013e64:	4622      	mov	r2, r4
 8013e66:	4606      	mov	r6, r0
 8013e68:	460f      	mov	r7, r1
 8013e6a:	462b      	mov	r3, r5
 8013e6c:	4620      	mov	r0, r4
 8013e6e:	4629      	mov	r1, r5
 8013e70:	f7ec fe34 	bl	8000adc <__aeabi_dcmpun>
 8013e74:	bbc8      	cbnz	r0, 8013eea <pow+0x96>
 8013e76:	2200      	movs	r2, #0
 8013e78:	2300      	movs	r3, #0
 8013e7a:	4640      	mov	r0, r8
 8013e7c:	4649      	mov	r1, r9
 8013e7e:	f7ec fdfb 	bl	8000a78 <__aeabi_dcmpeq>
 8013e82:	b1b8      	cbz	r0, 8013eb4 <pow+0x60>
 8013e84:	2200      	movs	r2, #0
 8013e86:	2300      	movs	r3, #0
 8013e88:	4620      	mov	r0, r4
 8013e8a:	4629      	mov	r1, r5
 8013e8c:	f7ec fdf4 	bl	8000a78 <__aeabi_dcmpeq>
 8013e90:	2800      	cmp	r0, #0
 8013e92:	d141      	bne.n	8013f18 <pow+0xc4>
 8013e94:	4620      	mov	r0, r4
 8013e96:	4629      	mov	r1, r5
 8013e98:	f000 fe39 	bl	8014b0e <finite>
 8013e9c:	b328      	cbz	r0, 8013eea <pow+0x96>
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	4620      	mov	r0, r4
 8013ea4:	4629      	mov	r1, r5
 8013ea6:	f7ec fdf1 	bl	8000a8c <__aeabi_dcmplt>
 8013eaa:	b1f0      	cbz	r0, 8013eea <pow+0x96>
 8013eac:	f7fd f80a 	bl	8010ec4 <__errno>
 8013eb0:	2322      	movs	r3, #34	; 0x22
 8013eb2:	e019      	b.n	8013ee8 <pow+0x94>
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	4639      	mov	r1, r7
 8013eb8:	f000 fe29 	bl	8014b0e <finite>
 8013ebc:	b9c8      	cbnz	r0, 8013ef2 <pow+0x9e>
 8013ebe:	4640      	mov	r0, r8
 8013ec0:	4649      	mov	r1, r9
 8013ec2:	f000 fe24 	bl	8014b0e <finite>
 8013ec6:	b1a0      	cbz	r0, 8013ef2 <pow+0x9e>
 8013ec8:	4620      	mov	r0, r4
 8013eca:	4629      	mov	r1, r5
 8013ecc:	f000 fe1f 	bl	8014b0e <finite>
 8013ed0:	b178      	cbz	r0, 8013ef2 <pow+0x9e>
 8013ed2:	4632      	mov	r2, r6
 8013ed4:	463b      	mov	r3, r7
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	4639      	mov	r1, r7
 8013eda:	f7ec fdff 	bl	8000adc <__aeabi_dcmpun>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	d0e4      	beq.n	8013eac <pow+0x58>
 8013ee2:	f7fc ffef 	bl	8010ec4 <__errno>
 8013ee6:	2321      	movs	r3, #33	; 0x21
 8013ee8:	6003      	str	r3, [r0, #0]
 8013eea:	4630      	mov	r0, r6
 8013eec:	4639      	mov	r1, r7
 8013eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	4639      	mov	r1, r7
 8013efa:	f7ec fdbd 	bl	8000a78 <__aeabi_dcmpeq>
 8013efe:	2800      	cmp	r0, #0
 8013f00:	d0f3      	beq.n	8013eea <pow+0x96>
 8013f02:	4640      	mov	r0, r8
 8013f04:	4649      	mov	r1, r9
 8013f06:	f000 fe02 	bl	8014b0e <finite>
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	d0ed      	beq.n	8013eea <pow+0x96>
 8013f0e:	4620      	mov	r0, r4
 8013f10:	4629      	mov	r1, r5
 8013f12:	f000 fdfc 	bl	8014b0e <finite>
 8013f16:	e7c8      	b.n	8013eaa <pow+0x56>
 8013f18:	4f01      	ldr	r7, [pc, #4]	; (8013f20 <pow+0xcc>)
 8013f1a:	2600      	movs	r6, #0
 8013f1c:	e7e5      	b.n	8013eea <pow+0x96>
 8013f1e:	bf00      	nop
 8013f20:	3ff00000 	.word	0x3ff00000
 8013f24:	00000000 	.word	0x00000000

08013f28 <__ieee754_pow>:
 8013f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f2c:	b093      	sub	sp, #76	; 0x4c
 8013f2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013f32:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8013f36:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8013f3a:	4689      	mov	r9, r1
 8013f3c:	ea56 0102 	orrs.w	r1, r6, r2
 8013f40:	4680      	mov	r8, r0
 8013f42:	d111      	bne.n	8013f68 <__ieee754_pow+0x40>
 8013f44:	1803      	adds	r3, r0, r0
 8013f46:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8013f4a:	4152      	adcs	r2, r2
 8013f4c:	4299      	cmp	r1, r3
 8013f4e:	4b82      	ldr	r3, [pc, #520]	; (8014158 <__ieee754_pow+0x230>)
 8013f50:	4193      	sbcs	r3, r2
 8013f52:	f080 84b9 	bcs.w	80148c8 <__ieee754_pow+0x9a0>
 8013f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013f5a:	4640      	mov	r0, r8
 8013f5c:	4649      	mov	r1, r9
 8013f5e:	f7ec f96d 	bl	800023c <__adddf3>
 8013f62:	4683      	mov	fp, r0
 8013f64:	468c      	mov	ip, r1
 8013f66:	e06f      	b.n	8014048 <__ieee754_pow+0x120>
 8013f68:	4b7c      	ldr	r3, [pc, #496]	; (801415c <__ieee754_pow+0x234>)
 8013f6a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8013f6e:	429c      	cmp	r4, r3
 8013f70:	464d      	mov	r5, r9
 8013f72:	4682      	mov	sl, r0
 8013f74:	dc06      	bgt.n	8013f84 <__ieee754_pow+0x5c>
 8013f76:	d101      	bne.n	8013f7c <__ieee754_pow+0x54>
 8013f78:	2800      	cmp	r0, #0
 8013f7a:	d1ec      	bne.n	8013f56 <__ieee754_pow+0x2e>
 8013f7c:	429e      	cmp	r6, r3
 8013f7e:	dc01      	bgt.n	8013f84 <__ieee754_pow+0x5c>
 8013f80:	d10f      	bne.n	8013fa2 <__ieee754_pow+0x7a>
 8013f82:	b172      	cbz	r2, 8013fa2 <__ieee754_pow+0x7a>
 8013f84:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8013f88:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8013f8c:	ea55 050a 	orrs.w	r5, r5, sl
 8013f90:	d1e1      	bne.n	8013f56 <__ieee754_pow+0x2e>
 8013f92:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013f96:	18db      	adds	r3, r3, r3
 8013f98:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8013f9c:	4152      	adcs	r2, r2
 8013f9e:	429d      	cmp	r5, r3
 8013fa0:	e7d5      	b.n	8013f4e <__ieee754_pow+0x26>
 8013fa2:	2d00      	cmp	r5, #0
 8013fa4:	da39      	bge.n	801401a <__ieee754_pow+0xf2>
 8013fa6:	4b6e      	ldr	r3, [pc, #440]	; (8014160 <__ieee754_pow+0x238>)
 8013fa8:	429e      	cmp	r6, r3
 8013faa:	dc52      	bgt.n	8014052 <__ieee754_pow+0x12a>
 8013fac:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8013fb0:	429e      	cmp	r6, r3
 8013fb2:	f340 849c 	ble.w	80148ee <__ieee754_pow+0x9c6>
 8013fb6:	1533      	asrs	r3, r6, #20
 8013fb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013fbc:	2b14      	cmp	r3, #20
 8013fbe:	dd0f      	ble.n	8013fe0 <__ieee754_pow+0xb8>
 8013fc0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013fc4:	fa22 f103 	lsr.w	r1, r2, r3
 8013fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	f040 848e 	bne.w	80148ee <__ieee754_pow+0x9c6>
 8013fd2:	f001 0101 	and.w	r1, r1, #1
 8013fd6:	f1c1 0302 	rsb	r3, r1, #2
 8013fda:	9300      	str	r3, [sp, #0]
 8013fdc:	b182      	cbz	r2, 8014000 <__ieee754_pow+0xd8>
 8013fde:	e05d      	b.n	801409c <__ieee754_pow+0x174>
 8013fe0:	2a00      	cmp	r2, #0
 8013fe2:	d159      	bne.n	8014098 <__ieee754_pow+0x170>
 8013fe4:	f1c3 0314 	rsb	r3, r3, #20
 8013fe8:	fa46 f103 	asr.w	r1, r6, r3
 8013fec:	fa01 f303 	lsl.w	r3, r1, r3
 8013ff0:	42b3      	cmp	r3, r6
 8013ff2:	f040 8479 	bne.w	80148e8 <__ieee754_pow+0x9c0>
 8013ff6:	f001 0101 	and.w	r1, r1, #1
 8013ffa:	f1c1 0302 	rsb	r3, r1, #2
 8013ffe:	9300      	str	r3, [sp, #0]
 8014000:	4b58      	ldr	r3, [pc, #352]	; (8014164 <__ieee754_pow+0x23c>)
 8014002:	429e      	cmp	r6, r3
 8014004:	d132      	bne.n	801406c <__ieee754_pow+0x144>
 8014006:	2f00      	cmp	r7, #0
 8014008:	f280 846a 	bge.w	80148e0 <__ieee754_pow+0x9b8>
 801400c:	4955      	ldr	r1, [pc, #340]	; (8014164 <__ieee754_pow+0x23c>)
 801400e:	4642      	mov	r2, r8
 8014010:	464b      	mov	r3, r9
 8014012:	2000      	movs	r0, #0
 8014014:	f7ec fbf2 	bl	80007fc <__aeabi_ddiv>
 8014018:	e7a3      	b.n	8013f62 <__ieee754_pow+0x3a>
 801401a:	2300      	movs	r3, #0
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	2a00      	cmp	r2, #0
 8014020:	d13c      	bne.n	801409c <__ieee754_pow+0x174>
 8014022:	4b4e      	ldr	r3, [pc, #312]	; (801415c <__ieee754_pow+0x234>)
 8014024:	429e      	cmp	r6, r3
 8014026:	d1eb      	bne.n	8014000 <__ieee754_pow+0xd8>
 8014028:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801402c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014030:	ea53 030a 	orrs.w	r3, r3, sl
 8014034:	f000 8448 	beq.w	80148c8 <__ieee754_pow+0x9a0>
 8014038:	4b4b      	ldr	r3, [pc, #300]	; (8014168 <__ieee754_pow+0x240>)
 801403a:	429c      	cmp	r4, r3
 801403c:	dd0b      	ble.n	8014056 <__ieee754_pow+0x12e>
 801403e:	2f00      	cmp	r7, #0
 8014040:	f2c0 8448 	blt.w	80148d4 <__ieee754_pow+0x9ac>
 8014044:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8014048:	4658      	mov	r0, fp
 801404a:	4661      	mov	r1, ip
 801404c:	b013      	add	sp, #76	; 0x4c
 801404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014052:	2302      	movs	r3, #2
 8014054:	e7e2      	b.n	801401c <__ieee754_pow+0xf4>
 8014056:	2f00      	cmp	r7, #0
 8014058:	f04f 0b00 	mov.w	fp, #0
 801405c:	f04f 0c00 	mov.w	ip, #0
 8014060:	daf2      	bge.n	8014048 <__ieee754_pow+0x120>
 8014062:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8014066:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 801406a:	e7ed      	b.n	8014048 <__ieee754_pow+0x120>
 801406c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8014070:	d106      	bne.n	8014080 <__ieee754_pow+0x158>
 8014072:	4642      	mov	r2, r8
 8014074:	464b      	mov	r3, r9
 8014076:	4640      	mov	r0, r8
 8014078:	4649      	mov	r1, r9
 801407a:	f7ec fa95 	bl	80005a8 <__aeabi_dmul>
 801407e:	e770      	b.n	8013f62 <__ieee754_pow+0x3a>
 8014080:	4b3a      	ldr	r3, [pc, #232]	; (801416c <__ieee754_pow+0x244>)
 8014082:	429f      	cmp	r7, r3
 8014084:	d10a      	bne.n	801409c <__ieee754_pow+0x174>
 8014086:	2d00      	cmp	r5, #0
 8014088:	db08      	blt.n	801409c <__ieee754_pow+0x174>
 801408a:	4640      	mov	r0, r8
 801408c:	4649      	mov	r1, r9
 801408e:	b013      	add	sp, #76	; 0x4c
 8014090:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014094:	f000 bc5e 	b.w	8014954 <__ieee754_sqrt>
 8014098:	2300      	movs	r3, #0
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	4640      	mov	r0, r8
 801409e:	4649      	mov	r1, r9
 80140a0:	f000 fd32 	bl	8014b08 <fabs>
 80140a4:	4683      	mov	fp, r0
 80140a6:	468c      	mov	ip, r1
 80140a8:	f1ba 0f00 	cmp.w	sl, #0
 80140ac:	d128      	bne.n	8014100 <__ieee754_pow+0x1d8>
 80140ae:	b124      	cbz	r4, 80140ba <__ieee754_pow+0x192>
 80140b0:	4b2c      	ldr	r3, [pc, #176]	; (8014164 <__ieee754_pow+0x23c>)
 80140b2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d122      	bne.n	8014100 <__ieee754_pow+0x1d8>
 80140ba:	2f00      	cmp	r7, #0
 80140bc:	da07      	bge.n	80140ce <__ieee754_pow+0x1a6>
 80140be:	465a      	mov	r2, fp
 80140c0:	4663      	mov	r3, ip
 80140c2:	4928      	ldr	r1, [pc, #160]	; (8014164 <__ieee754_pow+0x23c>)
 80140c4:	2000      	movs	r0, #0
 80140c6:	f7ec fb99 	bl	80007fc <__aeabi_ddiv>
 80140ca:	4683      	mov	fp, r0
 80140cc:	468c      	mov	ip, r1
 80140ce:	2d00      	cmp	r5, #0
 80140d0:	daba      	bge.n	8014048 <__ieee754_pow+0x120>
 80140d2:	9b00      	ldr	r3, [sp, #0]
 80140d4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80140d8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80140dc:	4323      	orrs	r3, r4
 80140de:	d108      	bne.n	80140f2 <__ieee754_pow+0x1ca>
 80140e0:	465a      	mov	r2, fp
 80140e2:	4663      	mov	r3, ip
 80140e4:	4658      	mov	r0, fp
 80140e6:	4661      	mov	r1, ip
 80140e8:	f7ec f8a6 	bl	8000238 <__aeabi_dsub>
 80140ec:	4602      	mov	r2, r0
 80140ee:	460b      	mov	r3, r1
 80140f0:	e790      	b.n	8014014 <__ieee754_pow+0xec>
 80140f2:	9b00      	ldr	r3, [sp, #0]
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d1a7      	bne.n	8014048 <__ieee754_pow+0x120>
 80140f8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80140fc:	469c      	mov	ip, r3
 80140fe:	e7a3      	b.n	8014048 <__ieee754_pow+0x120>
 8014100:	0feb      	lsrs	r3, r5, #31
 8014102:	3b01      	subs	r3, #1
 8014104:	930c      	str	r3, [sp, #48]	; 0x30
 8014106:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014108:	9b00      	ldr	r3, [sp, #0]
 801410a:	4313      	orrs	r3, r2
 801410c:	d104      	bne.n	8014118 <__ieee754_pow+0x1f0>
 801410e:	4642      	mov	r2, r8
 8014110:	464b      	mov	r3, r9
 8014112:	4640      	mov	r0, r8
 8014114:	4649      	mov	r1, r9
 8014116:	e7e7      	b.n	80140e8 <__ieee754_pow+0x1c0>
 8014118:	4b15      	ldr	r3, [pc, #84]	; (8014170 <__ieee754_pow+0x248>)
 801411a:	429e      	cmp	r6, r3
 801411c:	f340 80f6 	ble.w	801430c <__ieee754_pow+0x3e4>
 8014120:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014124:	429e      	cmp	r6, r3
 8014126:	4b10      	ldr	r3, [pc, #64]	; (8014168 <__ieee754_pow+0x240>)
 8014128:	dd09      	ble.n	801413e <__ieee754_pow+0x216>
 801412a:	429c      	cmp	r4, r3
 801412c:	dc0c      	bgt.n	8014148 <__ieee754_pow+0x220>
 801412e:	2f00      	cmp	r7, #0
 8014130:	da0c      	bge.n	801414c <__ieee754_pow+0x224>
 8014132:	2000      	movs	r0, #0
 8014134:	b013      	add	sp, #76	; 0x4c
 8014136:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801413a:	f000 bce0 	b.w	8014afe <__math_oflow>
 801413e:	429c      	cmp	r4, r3
 8014140:	dbf5      	blt.n	801412e <__ieee754_pow+0x206>
 8014142:	4b08      	ldr	r3, [pc, #32]	; (8014164 <__ieee754_pow+0x23c>)
 8014144:	429c      	cmp	r4, r3
 8014146:	dd15      	ble.n	8014174 <__ieee754_pow+0x24c>
 8014148:	2f00      	cmp	r7, #0
 801414a:	dcf2      	bgt.n	8014132 <__ieee754_pow+0x20a>
 801414c:	2000      	movs	r0, #0
 801414e:	b013      	add	sp, #76	; 0x4c
 8014150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014154:	f000 bcce 	b.w	8014af4 <__math_uflow>
 8014158:	fff00000 	.word	0xfff00000
 801415c:	7ff00000 	.word	0x7ff00000
 8014160:	433fffff 	.word	0x433fffff
 8014164:	3ff00000 	.word	0x3ff00000
 8014168:	3fefffff 	.word	0x3fefffff
 801416c:	3fe00000 	.word	0x3fe00000
 8014170:	41e00000 	.word	0x41e00000
 8014174:	4661      	mov	r1, ip
 8014176:	4b60      	ldr	r3, [pc, #384]	; (80142f8 <__ieee754_pow+0x3d0>)
 8014178:	2200      	movs	r2, #0
 801417a:	4658      	mov	r0, fp
 801417c:	f7ec f85c 	bl	8000238 <__aeabi_dsub>
 8014180:	a355      	add	r3, pc, #340	; (adr r3, 80142d8 <__ieee754_pow+0x3b0>)
 8014182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014186:	4604      	mov	r4, r0
 8014188:	460d      	mov	r5, r1
 801418a:	f7ec fa0d 	bl	80005a8 <__aeabi_dmul>
 801418e:	a354      	add	r3, pc, #336	; (adr r3, 80142e0 <__ieee754_pow+0x3b8>)
 8014190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014194:	4606      	mov	r6, r0
 8014196:	460f      	mov	r7, r1
 8014198:	4620      	mov	r0, r4
 801419a:	4629      	mov	r1, r5
 801419c:	f7ec fa04 	bl	80005a8 <__aeabi_dmul>
 80141a0:	4b56      	ldr	r3, [pc, #344]	; (80142fc <__ieee754_pow+0x3d4>)
 80141a2:	4682      	mov	sl, r0
 80141a4:	468b      	mov	fp, r1
 80141a6:	2200      	movs	r2, #0
 80141a8:	4620      	mov	r0, r4
 80141aa:	4629      	mov	r1, r5
 80141ac:	f7ec f9fc 	bl	80005a8 <__aeabi_dmul>
 80141b0:	4602      	mov	r2, r0
 80141b2:	460b      	mov	r3, r1
 80141b4:	a14c      	add	r1, pc, #304	; (adr r1, 80142e8 <__ieee754_pow+0x3c0>)
 80141b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141ba:	f7ec f83d 	bl	8000238 <__aeabi_dsub>
 80141be:	4622      	mov	r2, r4
 80141c0:	462b      	mov	r3, r5
 80141c2:	f7ec f9f1 	bl	80005a8 <__aeabi_dmul>
 80141c6:	4602      	mov	r2, r0
 80141c8:	460b      	mov	r3, r1
 80141ca:	2000      	movs	r0, #0
 80141cc:	494c      	ldr	r1, [pc, #304]	; (8014300 <__ieee754_pow+0x3d8>)
 80141ce:	f7ec f833 	bl	8000238 <__aeabi_dsub>
 80141d2:	4622      	mov	r2, r4
 80141d4:	462b      	mov	r3, r5
 80141d6:	4680      	mov	r8, r0
 80141d8:	4689      	mov	r9, r1
 80141da:	4620      	mov	r0, r4
 80141dc:	4629      	mov	r1, r5
 80141de:	f7ec f9e3 	bl	80005a8 <__aeabi_dmul>
 80141e2:	4602      	mov	r2, r0
 80141e4:	460b      	mov	r3, r1
 80141e6:	4640      	mov	r0, r8
 80141e8:	4649      	mov	r1, r9
 80141ea:	f7ec f9dd 	bl	80005a8 <__aeabi_dmul>
 80141ee:	a340      	add	r3, pc, #256	; (adr r3, 80142f0 <__ieee754_pow+0x3c8>)
 80141f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141f4:	f7ec f9d8 	bl	80005a8 <__aeabi_dmul>
 80141f8:	4602      	mov	r2, r0
 80141fa:	460b      	mov	r3, r1
 80141fc:	4650      	mov	r0, sl
 80141fe:	4659      	mov	r1, fp
 8014200:	f7ec f81a 	bl	8000238 <__aeabi_dsub>
 8014204:	4602      	mov	r2, r0
 8014206:	460b      	mov	r3, r1
 8014208:	4604      	mov	r4, r0
 801420a:	460d      	mov	r5, r1
 801420c:	4630      	mov	r0, r6
 801420e:	4639      	mov	r1, r7
 8014210:	f7ec f814 	bl	800023c <__adddf3>
 8014214:	f04f 0a00 	mov.w	sl, #0
 8014218:	4632      	mov	r2, r6
 801421a:	463b      	mov	r3, r7
 801421c:	4650      	mov	r0, sl
 801421e:	468b      	mov	fp, r1
 8014220:	f7ec f80a 	bl	8000238 <__aeabi_dsub>
 8014224:	4602      	mov	r2, r0
 8014226:	460b      	mov	r3, r1
 8014228:	4620      	mov	r0, r4
 801422a:	4629      	mov	r1, r5
 801422c:	f7ec f804 	bl	8000238 <__aeabi_dsub>
 8014230:	9b00      	ldr	r3, [sp, #0]
 8014232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014234:	3b01      	subs	r3, #1
 8014236:	4313      	orrs	r3, r2
 8014238:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801423c:	bf0c      	ite	eq
 801423e:	4b31      	ldreq	r3, [pc, #196]	; (8014304 <__ieee754_pow+0x3dc>)
 8014240:	4b2d      	ldrne	r3, [pc, #180]	; (80142f8 <__ieee754_pow+0x3d0>)
 8014242:	2600      	movs	r6, #0
 8014244:	2200      	movs	r2, #0
 8014246:	e9cd 2300 	strd	r2, r3, [sp]
 801424a:	4604      	mov	r4, r0
 801424c:	460d      	mov	r5, r1
 801424e:	4632      	mov	r2, r6
 8014250:	463b      	mov	r3, r7
 8014252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014256:	f7eb ffef 	bl	8000238 <__aeabi_dsub>
 801425a:	4652      	mov	r2, sl
 801425c:	465b      	mov	r3, fp
 801425e:	f7ec f9a3 	bl	80005a8 <__aeabi_dmul>
 8014262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014266:	4680      	mov	r8, r0
 8014268:	4689      	mov	r9, r1
 801426a:	4620      	mov	r0, r4
 801426c:	4629      	mov	r1, r5
 801426e:	f7ec f99b 	bl	80005a8 <__aeabi_dmul>
 8014272:	4602      	mov	r2, r0
 8014274:	460b      	mov	r3, r1
 8014276:	4640      	mov	r0, r8
 8014278:	4649      	mov	r1, r9
 801427a:	f7eb ffdf 	bl	800023c <__adddf3>
 801427e:	4632      	mov	r2, r6
 8014280:	463b      	mov	r3, r7
 8014282:	4680      	mov	r8, r0
 8014284:	4689      	mov	r9, r1
 8014286:	4650      	mov	r0, sl
 8014288:	4659      	mov	r1, fp
 801428a:	f7ec f98d 	bl	80005a8 <__aeabi_dmul>
 801428e:	460b      	mov	r3, r1
 8014290:	4604      	mov	r4, r0
 8014292:	460d      	mov	r5, r1
 8014294:	4602      	mov	r2, r0
 8014296:	4649      	mov	r1, r9
 8014298:	4640      	mov	r0, r8
 801429a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801429e:	f7eb ffcd 	bl	800023c <__adddf3>
 80142a2:	4b19      	ldr	r3, [pc, #100]	; (8014308 <__ieee754_pow+0x3e0>)
 80142a4:	4299      	cmp	r1, r3
 80142a6:	4682      	mov	sl, r0
 80142a8:	460f      	mov	r7, r1
 80142aa:	460e      	mov	r6, r1
 80142ac:	f340 82e7 	ble.w	801487e <__ieee754_pow+0x956>
 80142b0:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80142b4:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80142b8:	4303      	orrs	r3, r0
 80142ba:	f000 81e1 	beq.w	8014680 <__ieee754_pow+0x758>
 80142be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80142c2:	2200      	movs	r2, #0
 80142c4:	2300      	movs	r3, #0
 80142c6:	f7ec fbe1 	bl	8000a8c <__aeabi_dcmplt>
 80142ca:	3800      	subs	r0, #0
 80142cc:	bf18      	it	ne
 80142ce:	2001      	movne	r0, #1
 80142d0:	e730      	b.n	8014134 <__ieee754_pow+0x20c>
 80142d2:	bf00      	nop
 80142d4:	f3af 8000 	nop.w
 80142d8:	60000000 	.word	0x60000000
 80142dc:	3ff71547 	.word	0x3ff71547
 80142e0:	f85ddf44 	.word	0xf85ddf44
 80142e4:	3e54ae0b 	.word	0x3e54ae0b
 80142e8:	55555555 	.word	0x55555555
 80142ec:	3fd55555 	.word	0x3fd55555
 80142f0:	652b82fe 	.word	0x652b82fe
 80142f4:	3ff71547 	.word	0x3ff71547
 80142f8:	3ff00000 	.word	0x3ff00000
 80142fc:	3fd00000 	.word	0x3fd00000
 8014300:	3fe00000 	.word	0x3fe00000
 8014304:	bff00000 	.word	0xbff00000
 8014308:	408fffff 	.word	0x408fffff
 801430c:	4bd2      	ldr	r3, [pc, #840]	; (8014658 <__ieee754_pow+0x730>)
 801430e:	402b      	ands	r3, r5
 8014310:	2200      	movs	r2, #0
 8014312:	b943      	cbnz	r3, 8014326 <__ieee754_pow+0x3fe>
 8014314:	4658      	mov	r0, fp
 8014316:	4bd1      	ldr	r3, [pc, #836]	; (801465c <__ieee754_pow+0x734>)
 8014318:	4661      	mov	r1, ip
 801431a:	f7ec f945 	bl	80005a8 <__aeabi_dmul>
 801431e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014322:	4683      	mov	fp, r0
 8014324:	460c      	mov	r4, r1
 8014326:	1523      	asrs	r3, r4, #20
 8014328:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801432c:	4413      	add	r3, r2
 801432e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014330:	4bcb      	ldr	r3, [pc, #812]	; (8014660 <__ieee754_pow+0x738>)
 8014332:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014336:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801433a:	429c      	cmp	r4, r3
 801433c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014340:	dd08      	ble.n	8014354 <__ieee754_pow+0x42c>
 8014342:	4bc8      	ldr	r3, [pc, #800]	; (8014664 <__ieee754_pow+0x73c>)
 8014344:	429c      	cmp	r4, r3
 8014346:	f340 8199 	ble.w	801467c <__ieee754_pow+0x754>
 801434a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801434c:	3301      	adds	r3, #1
 801434e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014350:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014354:	2600      	movs	r6, #0
 8014356:	00f3      	lsls	r3, r6, #3
 8014358:	930d      	str	r3, [sp, #52]	; 0x34
 801435a:	4bc3      	ldr	r3, [pc, #780]	; (8014668 <__ieee754_pow+0x740>)
 801435c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014360:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014364:	4658      	mov	r0, fp
 8014366:	e9cd 3408 	strd	r3, r4, [sp, #32]
 801436a:	461a      	mov	r2, r3
 801436c:	4629      	mov	r1, r5
 801436e:	4623      	mov	r3, r4
 8014370:	f7eb ff62 	bl	8000238 <__aeabi_dsub>
 8014374:	46da      	mov	sl, fp
 8014376:	4652      	mov	r2, sl
 8014378:	462b      	mov	r3, r5
 801437a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801437e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014382:	f7eb ff5b 	bl	800023c <__adddf3>
 8014386:	4602      	mov	r2, r0
 8014388:	460b      	mov	r3, r1
 801438a:	2000      	movs	r0, #0
 801438c:	49b7      	ldr	r1, [pc, #732]	; (801466c <__ieee754_pow+0x744>)
 801438e:	f7ec fa35 	bl	80007fc <__aeabi_ddiv>
 8014392:	4602      	mov	r2, r0
 8014394:	460b      	mov	r3, r1
 8014396:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801439a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801439e:	f7ec f903 	bl	80005a8 <__aeabi_dmul>
 80143a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80143a6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80143aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80143ae:	2300      	movs	r3, #0
 80143b0:	9304      	str	r3, [sp, #16]
 80143b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80143b6:	46ab      	mov	fp, r5
 80143b8:	106d      	asrs	r5, r5, #1
 80143ba:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80143be:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80143c2:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80143c6:	2200      	movs	r2, #0
 80143c8:	4640      	mov	r0, r8
 80143ca:	4649      	mov	r1, r9
 80143cc:	4614      	mov	r4, r2
 80143ce:	461d      	mov	r5, r3
 80143d0:	f7ec f8ea 	bl	80005a8 <__aeabi_dmul>
 80143d4:	4602      	mov	r2, r0
 80143d6:	460b      	mov	r3, r1
 80143d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80143dc:	f7eb ff2c 	bl	8000238 <__aeabi_dsub>
 80143e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80143e4:	4606      	mov	r6, r0
 80143e6:	460f      	mov	r7, r1
 80143e8:	4620      	mov	r0, r4
 80143ea:	4629      	mov	r1, r5
 80143ec:	f7eb ff24 	bl	8000238 <__aeabi_dsub>
 80143f0:	4602      	mov	r2, r0
 80143f2:	460b      	mov	r3, r1
 80143f4:	4650      	mov	r0, sl
 80143f6:	4659      	mov	r1, fp
 80143f8:	f7eb ff1e 	bl	8000238 <__aeabi_dsub>
 80143fc:	4642      	mov	r2, r8
 80143fe:	464b      	mov	r3, r9
 8014400:	f7ec f8d2 	bl	80005a8 <__aeabi_dmul>
 8014404:	4602      	mov	r2, r0
 8014406:	460b      	mov	r3, r1
 8014408:	4630      	mov	r0, r6
 801440a:	4639      	mov	r1, r7
 801440c:	f7eb ff14 	bl	8000238 <__aeabi_dsub>
 8014410:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014414:	f7ec f8c8 	bl	80005a8 <__aeabi_dmul>
 8014418:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801441c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014420:	4610      	mov	r0, r2
 8014422:	4619      	mov	r1, r3
 8014424:	f7ec f8c0 	bl	80005a8 <__aeabi_dmul>
 8014428:	a379      	add	r3, pc, #484	; (adr r3, 8014610 <__ieee754_pow+0x6e8>)
 801442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801442e:	4604      	mov	r4, r0
 8014430:	460d      	mov	r5, r1
 8014432:	f7ec f8b9 	bl	80005a8 <__aeabi_dmul>
 8014436:	a378      	add	r3, pc, #480	; (adr r3, 8014618 <__ieee754_pow+0x6f0>)
 8014438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443c:	f7eb fefe 	bl	800023c <__adddf3>
 8014440:	4622      	mov	r2, r4
 8014442:	462b      	mov	r3, r5
 8014444:	f7ec f8b0 	bl	80005a8 <__aeabi_dmul>
 8014448:	a375      	add	r3, pc, #468	; (adr r3, 8014620 <__ieee754_pow+0x6f8>)
 801444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444e:	f7eb fef5 	bl	800023c <__adddf3>
 8014452:	4622      	mov	r2, r4
 8014454:	462b      	mov	r3, r5
 8014456:	f7ec f8a7 	bl	80005a8 <__aeabi_dmul>
 801445a:	a373      	add	r3, pc, #460	; (adr r3, 8014628 <__ieee754_pow+0x700>)
 801445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014460:	f7eb feec 	bl	800023c <__adddf3>
 8014464:	4622      	mov	r2, r4
 8014466:	462b      	mov	r3, r5
 8014468:	f7ec f89e 	bl	80005a8 <__aeabi_dmul>
 801446c:	a370      	add	r3, pc, #448	; (adr r3, 8014630 <__ieee754_pow+0x708>)
 801446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014472:	f7eb fee3 	bl	800023c <__adddf3>
 8014476:	4622      	mov	r2, r4
 8014478:	462b      	mov	r3, r5
 801447a:	f7ec f895 	bl	80005a8 <__aeabi_dmul>
 801447e:	a36e      	add	r3, pc, #440	; (adr r3, 8014638 <__ieee754_pow+0x710>)
 8014480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014484:	f7eb feda 	bl	800023c <__adddf3>
 8014488:	4622      	mov	r2, r4
 801448a:	4606      	mov	r6, r0
 801448c:	460f      	mov	r7, r1
 801448e:	462b      	mov	r3, r5
 8014490:	4620      	mov	r0, r4
 8014492:	4629      	mov	r1, r5
 8014494:	f7ec f888 	bl	80005a8 <__aeabi_dmul>
 8014498:	4602      	mov	r2, r0
 801449a:	460b      	mov	r3, r1
 801449c:	4630      	mov	r0, r6
 801449e:	4639      	mov	r1, r7
 80144a0:	f7ec f882 	bl	80005a8 <__aeabi_dmul>
 80144a4:	4642      	mov	r2, r8
 80144a6:	4604      	mov	r4, r0
 80144a8:	460d      	mov	r5, r1
 80144aa:	464b      	mov	r3, r9
 80144ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80144b0:	f7eb fec4 	bl	800023c <__adddf3>
 80144b4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80144b8:	f7ec f876 	bl	80005a8 <__aeabi_dmul>
 80144bc:	4622      	mov	r2, r4
 80144be:	462b      	mov	r3, r5
 80144c0:	f7eb febc 	bl	800023c <__adddf3>
 80144c4:	4642      	mov	r2, r8
 80144c6:	4606      	mov	r6, r0
 80144c8:	460f      	mov	r7, r1
 80144ca:	464b      	mov	r3, r9
 80144cc:	4640      	mov	r0, r8
 80144ce:	4649      	mov	r1, r9
 80144d0:	f7ec f86a 	bl	80005a8 <__aeabi_dmul>
 80144d4:	4b66      	ldr	r3, [pc, #408]	; (8014670 <__ieee754_pow+0x748>)
 80144d6:	2200      	movs	r2, #0
 80144d8:	4682      	mov	sl, r0
 80144da:	468b      	mov	fp, r1
 80144dc:	f7eb feae 	bl	800023c <__adddf3>
 80144e0:	4632      	mov	r2, r6
 80144e2:	463b      	mov	r3, r7
 80144e4:	f7eb feaa 	bl	800023c <__adddf3>
 80144e8:	2400      	movs	r4, #0
 80144ea:	460d      	mov	r5, r1
 80144ec:	4622      	mov	r2, r4
 80144ee:	460b      	mov	r3, r1
 80144f0:	4640      	mov	r0, r8
 80144f2:	4649      	mov	r1, r9
 80144f4:	f7ec f858 	bl	80005a8 <__aeabi_dmul>
 80144f8:	4b5d      	ldr	r3, [pc, #372]	; (8014670 <__ieee754_pow+0x748>)
 80144fa:	4680      	mov	r8, r0
 80144fc:	4689      	mov	r9, r1
 80144fe:	2200      	movs	r2, #0
 8014500:	4620      	mov	r0, r4
 8014502:	4629      	mov	r1, r5
 8014504:	f7eb fe98 	bl	8000238 <__aeabi_dsub>
 8014508:	4652      	mov	r2, sl
 801450a:	465b      	mov	r3, fp
 801450c:	f7eb fe94 	bl	8000238 <__aeabi_dsub>
 8014510:	4602      	mov	r2, r0
 8014512:	460b      	mov	r3, r1
 8014514:	4630      	mov	r0, r6
 8014516:	4639      	mov	r1, r7
 8014518:	f7eb fe8e 	bl	8000238 <__aeabi_dsub>
 801451c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014520:	f7ec f842 	bl	80005a8 <__aeabi_dmul>
 8014524:	4622      	mov	r2, r4
 8014526:	4606      	mov	r6, r0
 8014528:	460f      	mov	r7, r1
 801452a:	462b      	mov	r3, r5
 801452c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014530:	f7ec f83a 	bl	80005a8 <__aeabi_dmul>
 8014534:	4602      	mov	r2, r0
 8014536:	460b      	mov	r3, r1
 8014538:	4630      	mov	r0, r6
 801453a:	4639      	mov	r1, r7
 801453c:	f7eb fe7e 	bl	800023c <__adddf3>
 8014540:	4606      	mov	r6, r0
 8014542:	460f      	mov	r7, r1
 8014544:	4602      	mov	r2, r0
 8014546:	460b      	mov	r3, r1
 8014548:	4640      	mov	r0, r8
 801454a:	4649      	mov	r1, r9
 801454c:	f7eb fe76 	bl	800023c <__adddf3>
 8014550:	2400      	movs	r4, #0
 8014552:	a33b      	add	r3, pc, #236	; (adr r3, 8014640 <__ieee754_pow+0x718>)
 8014554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014558:	4620      	mov	r0, r4
 801455a:	460d      	mov	r5, r1
 801455c:	f7ec f824 	bl	80005a8 <__aeabi_dmul>
 8014560:	4642      	mov	r2, r8
 8014562:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014566:	464b      	mov	r3, r9
 8014568:	4620      	mov	r0, r4
 801456a:	4629      	mov	r1, r5
 801456c:	f7eb fe64 	bl	8000238 <__aeabi_dsub>
 8014570:	4602      	mov	r2, r0
 8014572:	460b      	mov	r3, r1
 8014574:	4630      	mov	r0, r6
 8014576:	4639      	mov	r1, r7
 8014578:	f7eb fe5e 	bl	8000238 <__aeabi_dsub>
 801457c:	a332      	add	r3, pc, #200	; (adr r3, 8014648 <__ieee754_pow+0x720>)
 801457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014582:	f7ec f811 	bl	80005a8 <__aeabi_dmul>
 8014586:	a332      	add	r3, pc, #200	; (adr r3, 8014650 <__ieee754_pow+0x728>)
 8014588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458c:	4606      	mov	r6, r0
 801458e:	460f      	mov	r7, r1
 8014590:	4620      	mov	r0, r4
 8014592:	4629      	mov	r1, r5
 8014594:	f7ec f808 	bl	80005a8 <__aeabi_dmul>
 8014598:	4602      	mov	r2, r0
 801459a:	460b      	mov	r3, r1
 801459c:	4630      	mov	r0, r6
 801459e:	4639      	mov	r1, r7
 80145a0:	f7eb fe4c 	bl	800023c <__adddf3>
 80145a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145a6:	4b33      	ldr	r3, [pc, #204]	; (8014674 <__ieee754_pow+0x74c>)
 80145a8:	4413      	add	r3, r2
 80145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ae:	f7eb fe45 	bl	800023c <__adddf3>
 80145b2:	4680      	mov	r8, r0
 80145b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80145b6:	4689      	mov	r9, r1
 80145b8:	f7eb ff8c 	bl	80004d4 <__aeabi_i2d>
 80145bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80145be:	4b2e      	ldr	r3, [pc, #184]	; (8014678 <__ieee754_pow+0x750>)
 80145c0:	4413      	add	r3, r2
 80145c2:	e9d3 6700 	ldrd	r6, r7, [r3]
 80145c6:	4604      	mov	r4, r0
 80145c8:	460d      	mov	r5, r1
 80145ca:	4642      	mov	r2, r8
 80145cc:	464b      	mov	r3, r9
 80145ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80145d2:	f7eb fe33 	bl	800023c <__adddf3>
 80145d6:	4632      	mov	r2, r6
 80145d8:	463b      	mov	r3, r7
 80145da:	f7eb fe2f 	bl	800023c <__adddf3>
 80145de:	4622      	mov	r2, r4
 80145e0:	462b      	mov	r3, r5
 80145e2:	f7eb fe2b 	bl	800023c <__adddf3>
 80145e6:	f04f 0a00 	mov.w	sl, #0
 80145ea:	4622      	mov	r2, r4
 80145ec:	462b      	mov	r3, r5
 80145ee:	4650      	mov	r0, sl
 80145f0:	468b      	mov	fp, r1
 80145f2:	f7eb fe21 	bl	8000238 <__aeabi_dsub>
 80145f6:	4632      	mov	r2, r6
 80145f8:	463b      	mov	r3, r7
 80145fa:	f7eb fe1d 	bl	8000238 <__aeabi_dsub>
 80145fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014602:	f7eb fe19 	bl	8000238 <__aeabi_dsub>
 8014606:	4602      	mov	r2, r0
 8014608:	460b      	mov	r3, r1
 801460a:	4640      	mov	r0, r8
 801460c:	4649      	mov	r1, r9
 801460e:	e60d      	b.n	801422c <__ieee754_pow+0x304>
 8014610:	4a454eef 	.word	0x4a454eef
 8014614:	3fca7e28 	.word	0x3fca7e28
 8014618:	93c9db65 	.word	0x93c9db65
 801461c:	3fcd864a 	.word	0x3fcd864a
 8014620:	a91d4101 	.word	0xa91d4101
 8014624:	3fd17460 	.word	0x3fd17460
 8014628:	518f264d 	.word	0x518f264d
 801462c:	3fd55555 	.word	0x3fd55555
 8014630:	db6fabff 	.word	0xdb6fabff
 8014634:	3fdb6db6 	.word	0x3fdb6db6
 8014638:	33333303 	.word	0x33333303
 801463c:	3fe33333 	.word	0x3fe33333
 8014640:	e0000000 	.word	0xe0000000
 8014644:	3feec709 	.word	0x3feec709
 8014648:	dc3a03fd 	.word	0xdc3a03fd
 801464c:	3feec709 	.word	0x3feec709
 8014650:	145b01f5 	.word	0x145b01f5
 8014654:	be3e2fe0 	.word	0xbe3e2fe0
 8014658:	7ff00000 	.word	0x7ff00000
 801465c:	43400000 	.word	0x43400000
 8014660:	0003988e 	.word	0x0003988e
 8014664:	000bb679 	.word	0x000bb679
 8014668:	08015ca0 	.word	0x08015ca0
 801466c:	3ff00000 	.word	0x3ff00000
 8014670:	40080000 	.word	0x40080000
 8014674:	08015cc0 	.word	0x08015cc0
 8014678:	08015cb0 	.word	0x08015cb0
 801467c:	2601      	movs	r6, #1
 801467e:	e66a      	b.n	8014356 <__ieee754_pow+0x42e>
 8014680:	a39d      	add	r3, pc, #628	; (adr r3, 80148f8 <__ieee754_pow+0x9d0>)
 8014682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014686:	4640      	mov	r0, r8
 8014688:	4649      	mov	r1, r9
 801468a:	f7eb fdd7 	bl	800023c <__adddf3>
 801468e:	4622      	mov	r2, r4
 8014690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014694:	462b      	mov	r3, r5
 8014696:	4650      	mov	r0, sl
 8014698:	4639      	mov	r1, r7
 801469a:	f7eb fdcd 	bl	8000238 <__aeabi_dsub>
 801469e:	4602      	mov	r2, r0
 80146a0:	460b      	mov	r3, r1
 80146a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146a6:	f7ec fa0f 	bl	8000ac8 <__aeabi_dcmpgt>
 80146aa:	2800      	cmp	r0, #0
 80146ac:	f47f ae07 	bne.w	80142be <__ieee754_pow+0x396>
 80146b0:	4aa3      	ldr	r2, [pc, #652]	; (8014940 <__ieee754_pow+0xa18>)
 80146b2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80146b6:	4293      	cmp	r3, r2
 80146b8:	f340 8101 	ble.w	80148be <__ieee754_pow+0x996>
 80146bc:	151b      	asrs	r3, r3, #20
 80146be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80146c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80146c6:	fa4a f303 	asr.w	r3, sl, r3
 80146ca:	4433      	add	r3, r6
 80146cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80146d0:	4f9c      	ldr	r7, [pc, #624]	; (8014944 <__ieee754_pow+0xa1c>)
 80146d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80146d6:	4117      	asrs	r7, r2
 80146d8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80146dc:	2000      	movs	r0, #0
 80146de:	ea23 0107 	bic.w	r1, r3, r7
 80146e2:	f1c2 0214 	rsb	r2, r2, #20
 80146e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80146ea:	fa4a fa02 	asr.w	sl, sl, r2
 80146ee:	2e00      	cmp	r6, #0
 80146f0:	4602      	mov	r2, r0
 80146f2:	460b      	mov	r3, r1
 80146f4:	4620      	mov	r0, r4
 80146f6:	4629      	mov	r1, r5
 80146f8:	bfb8      	it	lt
 80146fa:	f1ca 0a00 	rsblt	sl, sl, #0
 80146fe:	f7eb fd9b 	bl	8000238 <__aeabi_dsub>
 8014702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014706:	4642      	mov	r2, r8
 8014708:	464b      	mov	r3, r9
 801470a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801470e:	f7eb fd95 	bl	800023c <__adddf3>
 8014712:	2400      	movs	r4, #0
 8014714:	a37a      	add	r3, pc, #488	; (adr r3, 8014900 <__ieee754_pow+0x9d8>)
 8014716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471a:	4620      	mov	r0, r4
 801471c:	460d      	mov	r5, r1
 801471e:	f7eb ff43 	bl	80005a8 <__aeabi_dmul>
 8014722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014726:	4606      	mov	r6, r0
 8014728:	460f      	mov	r7, r1
 801472a:	4620      	mov	r0, r4
 801472c:	4629      	mov	r1, r5
 801472e:	f7eb fd83 	bl	8000238 <__aeabi_dsub>
 8014732:	4602      	mov	r2, r0
 8014734:	460b      	mov	r3, r1
 8014736:	4640      	mov	r0, r8
 8014738:	4649      	mov	r1, r9
 801473a:	f7eb fd7d 	bl	8000238 <__aeabi_dsub>
 801473e:	a372      	add	r3, pc, #456	; (adr r3, 8014908 <__ieee754_pow+0x9e0>)
 8014740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014744:	f7eb ff30 	bl	80005a8 <__aeabi_dmul>
 8014748:	a371      	add	r3, pc, #452	; (adr r3, 8014910 <__ieee754_pow+0x9e8>)
 801474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474e:	4680      	mov	r8, r0
 8014750:	4689      	mov	r9, r1
 8014752:	4620      	mov	r0, r4
 8014754:	4629      	mov	r1, r5
 8014756:	f7eb ff27 	bl	80005a8 <__aeabi_dmul>
 801475a:	4602      	mov	r2, r0
 801475c:	460b      	mov	r3, r1
 801475e:	4640      	mov	r0, r8
 8014760:	4649      	mov	r1, r9
 8014762:	f7eb fd6b 	bl	800023c <__adddf3>
 8014766:	4604      	mov	r4, r0
 8014768:	460d      	mov	r5, r1
 801476a:	4602      	mov	r2, r0
 801476c:	460b      	mov	r3, r1
 801476e:	4630      	mov	r0, r6
 8014770:	4639      	mov	r1, r7
 8014772:	f7eb fd63 	bl	800023c <__adddf3>
 8014776:	4632      	mov	r2, r6
 8014778:	463b      	mov	r3, r7
 801477a:	4680      	mov	r8, r0
 801477c:	4689      	mov	r9, r1
 801477e:	f7eb fd5b 	bl	8000238 <__aeabi_dsub>
 8014782:	4602      	mov	r2, r0
 8014784:	460b      	mov	r3, r1
 8014786:	4620      	mov	r0, r4
 8014788:	4629      	mov	r1, r5
 801478a:	f7eb fd55 	bl	8000238 <__aeabi_dsub>
 801478e:	4642      	mov	r2, r8
 8014790:	4606      	mov	r6, r0
 8014792:	460f      	mov	r7, r1
 8014794:	464b      	mov	r3, r9
 8014796:	4640      	mov	r0, r8
 8014798:	4649      	mov	r1, r9
 801479a:	f7eb ff05 	bl	80005a8 <__aeabi_dmul>
 801479e:	a35e      	add	r3, pc, #376	; (adr r3, 8014918 <__ieee754_pow+0x9f0>)
 80147a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147a4:	4604      	mov	r4, r0
 80147a6:	460d      	mov	r5, r1
 80147a8:	f7eb fefe 	bl	80005a8 <__aeabi_dmul>
 80147ac:	a35c      	add	r3, pc, #368	; (adr r3, 8014920 <__ieee754_pow+0x9f8>)
 80147ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b2:	f7eb fd41 	bl	8000238 <__aeabi_dsub>
 80147b6:	4622      	mov	r2, r4
 80147b8:	462b      	mov	r3, r5
 80147ba:	f7eb fef5 	bl	80005a8 <__aeabi_dmul>
 80147be:	a35a      	add	r3, pc, #360	; (adr r3, 8014928 <__ieee754_pow+0xa00>)
 80147c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147c4:	f7eb fd3a 	bl	800023c <__adddf3>
 80147c8:	4622      	mov	r2, r4
 80147ca:	462b      	mov	r3, r5
 80147cc:	f7eb feec 	bl	80005a8 <__aeabi_dmul>
 80147d0:	a357      	add	r3, pc, #348	; (adr r3, 8014930 <__ieee754_pow+0xa08>)
 80147d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147d6:	f7eb fd2f 	bl	8000238 <__aeabi_dsub>
 80147da:	4622      	mov	r2, r4
 80147dc:	462b      	mov	r3, r5
 80147de:	f7eb fee3 	bl	80005a8 <__aeabi_dmul>
 80147e2:	a355      	add	r3, pc, #340	; (adr r3, 8014938 <__ieee754_pow+0xa10>)
 80147e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147e8:	f7eb fd28 	bl	800023c <__adddf3>
 80147ec:	4622      	mov	r2, r4
 80147ee:	462b      	mov	r3, r5
 80147f0:	f7eb feda 	bl	80005a8 <__aeabi_dmul>
 80147f4:	4602      	mov	r2, r0
 80147f6:	460b      	mov	r3, r1
 80147f8:	4640      	mov	r0, r8
 80147fa:	4649      	mov	r1, r9
 80147fc:	f7eb fd1c 	bl	8000238 <__aeabi_dsub>
 8014800:	4604      	mov	r4, r0
 8014802:	460d      	mov	r5, r1
 8014804:	4602      	mov	r2, r0
 8014806:	460b      	mov	r3, r1
 8014808:	4640      	mov	r0, r8
 801480a:	4649      	mov	r1, r9
 801480c:	f7eb fecc 	bl	80005a8 <__aeabi_dmul>
 8014810:	2200      	movs	r2, #0
 8014812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801481a:	4620      	mov	r0, r4
 801481c:	4629      	mov	r1, r5
 801481e:	f7eb fd0b 	bl	8000238 <__aeabi_dsub>
 8014822:	4602      	mov	r2, r0
 8014824:	460b      	mov	r3, r1
 8014826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801482a:	f7eb ffe7 	bl	80007fc <__aeabi_ddiv>
 801482e:	4632      	mov	r2, r6
 8014830:	4604      	mov	r4, r0
 8014832:	460d      	mov	r5, r1
 8014834:	463b      	mov	r3, r7
 8014836:	4640      	mov	r0, r8
 8014838:	4649      	mov	r1, r9
 801483a:	f7eb feb5 	bl	80005a8 <__aeabi_dmul>
 801483e:	4632      	mov	r2, r6
 8014840:	463b      	mov	r3, r7
 8014842:	f7eb fcfb 	bl	800023c <__adddf3>
 8014846:	4602      	mov	r2, r0
 8014848:	460b      	mov	r3, r1
 801484a:	4620      	mov	r0, r4
 801484c:	4629      	mov	r1, r5
 801484e:	f7eb fcf3 	bl	8000238 <__aeabi_dsub>
 8014852:	4642      	mov	r2, r8
 8014854:	464b      	mov	r3, r9
 8014856:	f7eb fcef 	bl	8000238 <__aeabi_dsub>
 801485a:	4602      	mov	r2, r0
 801485c:	460b      	mov	r3, r1
 801485e:	2000      	movs	r0, #0
 8014860:	4939      	ldr	r1, [pc, #228]	; (8014948 <__ieee754_pow+0xa20>)
 8014862:	f7eb fce9 	bl	8000238 <__aeabi_dsub>
 8014866:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801486a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801486e:	da29      	bge.n	80148c4 <__ieee754_pow+0x99c>
 8014870:	4652      	mov	r2, sl
 8014872:	f000 f955 	bl	8014b20 <scalbn>
 8014876:	e9dd 2300 	ldrd	r2, r3, [sp]
 801487a:	f7ff bbfe 	b.w	801407a <__ieee754_pow+0x152>
 801487e:	4b33      	ldr	r3, [pc, #204]	; (801494c <__ieee754_pow+0xa24>)
 8014880:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8014884:	429f      	cmp	r7, r3
 8014886:	f77f af13 	ble.w	80146b0 <__ieee754_pow+0x788>
 801488a:	4b31      	ldr	r3, [pc, #196]	; (8014950 <__ieee754_pow+0xa28>)
 801488c:	440b      	add	r3, r1
 801488e:	4303      	orrs	r3, r0
 8014890:	d009      	beq.n	80148a6 <__ieee754_pow+0x97e>
 8014892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014896:	2200      	movs	r2, #0
 8014898:	2300      	movs	r3, #0
 801489a:	f7ec f8f7 	bl	8000a8c <__aeabi_dcmplt>
 801489e:	3800      	subs	r0, #0
 80148a0:	bf18      	it	ne
 80148a2:	2001      	movne	r0, #1
 80148a4:	e453      	b.n	801414e <__ieee754_pow+0x226>
 80148a6:	4622      	mov	r2, r4
 80148a8:	462b      	mov	r3, r5
 80148aa:	f7eb fcc5 	bl	8000238 <__aeabi_dsub>
 80148ae:	4642      	mov	r2, r8
 80148b0:	464b      	mov	r3, r9
 80148b2:	f7ec f8ff 	bl	8000ab4 <__aeabi_dcmpge>
 80148b6:	2800      	cmp	r0, #0
 80148b8:	f43f aefa 	beq.w	80146b0 <__ieee754_pow+0x788>
 80148bc:	e7e9      	b.n	8014892 <__ieee754_pow+0x96a>
 80148be:	f04f 0a00 	mov.w	sl, #0
 80148c2:	e720      	b.n	8014706 <__ieee754_pow+0x7de>
 80148c4:	4621      	mov	r1, r4
 80148c6:	e7d6      	b.n	8014876 <__ieee754_pow+0x94e>
 80148c8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8014948 <__ieee754_pow+0xa20>
 80148cc:	f04f 0b00 	mov.w	fp, #0
 80148d0:	f7ff bbba 	b.w	8014048 <__ieee754_pow+0x120>
 80148d4:	f04f 0b00 	mov.w	fp, #0
 80148d8:	f04f 0c00 	mov.w	ip, #0
 80148dc:	f7ff bbb4 	b.w	8014048 <__ieee754_pow+0x120>
 80148e0:	4640      	mov	r0, r8
 80148e2:	4649      	mov	r1, r9
 80148e4:	f7ff bb3d 	b.w	8013f62 <__ieee754_pow+0x3a>
 80148e8:	9200      	str	r2, [sp, #0]
 80148ea:	f7ff bb89 	b.w	8014000 <__ieee754_pow+0xd8>
 80148ee:	2300      	movs	r3, #0
 80148f0:	f7ff bb73 	b.w	8013fda <__ieee754_pow+0xb2>
 80148f4:	f3af 8000 	nop.w
 80148f8:	652b82fe 	.word	0x652b82fe
 80148fc:	3c971547 	.word	0x3c971547
 8014900:	00000000 	.word	0x00000000
 8014904:	3fe62e43 	.word	0x3fe62e43
 8014908:	fefa39ef 	.word	0xfefa39ef
 801490c:	3fe62e42 	.word	0x3fe62e42
 8014910:	0ca86c39 	.word	0x0ca86c39
 8014914:	be205c61 	.word	0xbe205c61
 8014918:	72bea4d0 	.word	0x72bea4d0
 801491c:	3e663769 	.word	0x3e663769
 8014920:	c5d26bf1 	.word	0xc5d26bf1
 8014924:	3ebbbd41 	.word	0x3ebbbd41
 8014928:	af25de2c 	.word	0xaf25de2c
 801492c:	3f11566a 	.word	0x3f11566a
 8014930:	16bebd93 	.word	0x16bebd93
 8014934:	3f66c16c 	.word	0x3f66c16c
 8014938:	5555553e 	.word	0x5555553e
 801493c:	3fc55555 	.word	0x3fc55555
 8014940:	3fe00000 	.word	0x3fe00000
 8014944:	000fffff 	.word	0x000fffff
 8014948:	3ff00000 	.word	0x3ff00000
 801494c:	4090cbff 	.word	0x4090cbff
 8014950:	3f6f3400 	.word	0x3f6f3400

08014954 <__ieee754_sqrt>:
 8014954:	f8df c154 	ldr.w	ip, [pc, #340]	; 8014aac <__ieee754_sqrt+0x158>
 8014958:	ea3c 0c01 	bics.w	ip, ip, r1
 801495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014960:	460a      	mov	r2, r1
 8014962:	4606      	mov	r6, r0
 8014964:	460d      	mov	r5, r1
 8014966:	460c      	mov	r4, r1
 8014968:	4607      	mov	r7, r0
 801496a:	4603      	mov	r3, r0
 801496c:	d10f      	bne.n	801498e <__ieee754_sqrt+0x3a>
 801496e:	4602      	mov	r2, r0
 8014970:	460b      	mov	r3, r1
 8014972:	f7eb fe19 	bl	80005a8 <__aeabi_dmul>
 8014976:	4602      	mov	r2, r0
 8014978:	460b      	mov	r3, r1
 801497a:	4630      	mov	r0, r6
 801497c:	4629      	mov	r1, r5
 801497e:	f7eb fc5d 	bl	800023c <__adddf3>
 8014982:	4606      	mov	r6, r0
 8014984:	460d      	mov	r5, r1
 8014986:	4630      	mov	r0, r6
 8014988:	4629      	mov	r1, r5
 801498a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801498e:	2900      	cmp	r1, #0
 8014990:	dc0e      	bgt.n	80149b0 <__ieee754_sqrt+0x5c>
 8014992:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8014996:	ea5c 0707 	orrs.w	r7, ip, r7
 801499a:	d0f4      	beq.n	8014986 <__ieee754_sqrt+0x32>
 801499c:	b141      	cbz	r1, 80149b0 <__ieee754_sqrt+0x5c>
 801499e:	4602      	mov	r2, r0
 80149a0:	460b      	mov	r3, r1
 80149a2:	f7eb fc49 	bl	8000238 <__aeabi_dsub>
 80149a6:	4602      	mov	r2, r0
 80149a8:	460b      	mov	r3, r1
 80149aa:	f7eb ff27 	bl	80007fc <__aeabi_ddiv>
 80149ae:	e7e8      	b.n	8014982 <__ieee754_sqrt+0x2e>
 80149b0:	1521      	asrs	r1, r4, #20
 80149b2:	d074      	beq.n	8014a9e <__ieee754_sqrt+0x14a>
 80149b4:	07cc      	lsls	r4, r1, #31
 80149b6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80149ba:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80149be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80149c2:	bf5e      	ittt	pl
 80149c4:	0fd9      	lsrpl	r1, r3, #31
 80149c6:	005b      	lslpl	r3, r3, #1
 80149c8:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80149cc:	2400      	movs	r4, #0
 80149ce:	0fd9      	lsrs	r1, r3, #31
 80149d0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80149d4:	107f      	asrs	r7, r7, #1
 80149d6:	005b      	lsls	r3, r3, #1
 80149d8:	2516      	movs	r5, #22
 80149da:	4620      	mov	r0, r4
 80149dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80149e0:	1846      	adds	r6, r0, r1
 80149e2:	4296      	cmp	r6, r2
 80149e4:	bfde      	ittt	le
 80149e6:	1b92      	suble	r2, r2, r6
 80149e8:	1870      	addle	r0, r6, r1
 80149ea:	1864      	addle	r4, r4, r1
 80149ec:	0052      	lsls	r2, r2, #1
 80149ee:	3d01      	subs	r5, #1
 80149f0:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80149f4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80149f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149fc:	d1f0      	bne.n	80149e0 <__ieee754_sqrt+0x8c>
 80149fe:	4629      	mov	r1, r5
 8014a00:	f04f 0e20 	mov.w	lr, #32
 8014a04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014a08:	4282      	cmp	r2, r0
 8014a0a:	eb06 0c05 	add.w	ip, r6, r5
 8014a0e:	dc02      	bgt.n	8014a16 <__ieee754_sqrt+0xc2>
 8014a10:	d113      	bne.n	8014a3a <__ieee754_sqrt+0xe6>
 8014a12:	459c      	cmp	ip, r3
 8014a14:	d811      	bhi.n	8014a3a <__ieee754_sqrt+0xe6>
 8014a16:	f1bc 0f00 	cmp.w	ip, #0
 8014a1a:	eb0c 0506 	add.w	r5, ip, r6
 8014a1e:	da43      	bge.n	8014aa8 <__ieee754_sqrt+0x154>
 8014a20:	2d00      	cmp	r5, #0
 8014a22:	db41      	blt.n	8014aa8 <__ieee754_sqrt+0x154>
 8014a24:	f100 0801 	add.w	r8, r0, #1
 8014a28:	1a12      	subs	r2, r2, r0
 8014a2a:	459c      	cmp	ip, r3
 8014a2c:	bf88      	it	hi
 8014a2e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014a32:	eba3 030c 	sub.w	r3, r3, ip
 8014a36:	4431      	add	r1, r6
 8014a38:	4640      	mov	r0, r8
 8014a3a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8014a3e:	f1be 0e01 	subs.w	lr, lr, #1
 8014a42:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8014a46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014a4a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014a4e:	d1db      	bne.n	8014a08 <__ieee754_sqrt+0xb4>
 8014a50:	4313      	orrs	r3, r2
 8014a52:	d006      	beq.n	8014a62 <__ieee754_sqrt+0x10e>
 8014a54:	1c48      	adds	r0, r1, #1
 8014a56:	bf13      	iteet	ne
 8014a58:	3101      	addne	r1, #1
 8014a5a:	3401      	addeq	r4, #1
 8014a5c:	4671      	moveq	r1, lr
 8014a5e:	f021 0101 	bicne.w	r1, r1, #1
 8014a62:	1063      	asrs	r3, r4, #1
 8014a64:	0849      	lsrs	r1, r1, #1
 8014a66:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014a6a:	07e2      	lsls	r2, r4, #31
 8014a6c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014a70:	bf48      	it	mi
 8014a72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8014a76:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8014a7a:	460e      	mov	r6, r1
 8014a7c:	e783      	b.n	8014986 <__ieee754_sqrt+0x32>
 8014a7e:	0ada      	lsrs	r2, r3, #11
 8014a80:	3815      	subs	r0, #21
 8014a82:	055b      	lsls	r3, r3, #21
 8014a84:	2a00      	cmp	r2, #0
 8014a86:	d0fa      	beq.n	8014a7e <__ieee754_sqrt+0x12a>
 8014a88:	02d5      	lsls	r5, r2, #11
 8014a8a:	d50a      	bpl.n	8014aa2 <__ieee754_sqrt+0x14e>
 8014a8c:	f1c1 0420 	rsb	r4, r1, #32
 8014a90:	fa23 f404 	lsr.w	r4, r3, r4
 8014a94:	1e4d      	subs	r5, r1, #1
 8014a96:	408b      	lsls	r3, r1
 8014a98:	4322      	orrs	r2, r4
 8014a9a:	1b41      	subs	r1, r0, r5
 8014a9c:	e78a      	b.n	80149b4 <__ieee754_sqrt+0x60>
 8014a9e:	4608      	mov	r0, r1
 8014aa0:	e7f0      	b.n	8014a84 <__ieee754_sqrt+0x130>
 8014aa2:	0052      	lsls	r2, r2, #1
 8014aa4:	3101      	adds	r1, #1
 8014aa6:	e7ef      	b.n	8014a88 <__ieee754_sqrt+0x134>
 8014aa8:	4680      	mov	r8, r0
 8014aaa:	e7bd      	b.n	8014a28 <__ieee754_sqrt+0xd4>
 8014aac:	7ff00000 	.word	0x7ff00000

08014ab0 <with_errno>:
 8014ab0:	b570      	push	{r4, r5, r6, lr}
 8014ab2:	4604      	mov	r4, r0
 8014ab4:	460d      	mov	r5, r1
 8014ab6:	4616      	mov	r6, r2
 8014ab8:	f7fc fa04 	bl	8010ec4 <__errno>
 8014abc:	4629      	mov	r1, r5
 8014abe:	6006      	str	r6, [r0, #0]
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}

08014ac4 <xflow>:
 8014ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ac6:	4615      	mov	r5, r2
 8014ac8:	461c      	mov	r4, r3
 8014aca:	b180      	cbz	r0, 8014aee <xflow+0x2a>
 8014acc:	4610      	mov	r0, r2
 8014ace:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8014ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ada:	4628      	mov	r0, r5
 8014adc:	4621      	mov	r1, r4
 8014ade:	f7eb fd63 	bl	80005a8 <__aeabi_dmul>
 8014ae2:	2222      	movs	r2, #34	; 0x22
 8014ae4:	b003      	add	sp, #12
 8014ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014aea:	f7ff bfe1 	b.w	8014ab0 <with_errno>
 8014aee:	4610      	mov	r0, r2
 8014af0:	4619      	mov	r1, r3
 8014af2:	e7ee      	b.n	8014ad2 <xflow+0xe>

08014af4 <__math_uflow>:
 8014af4:	2200      	movs	r2, #0
 8014af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014afa:	f7ff bfe3 	b.w	8014ac4 <xflow>

08014afe <__math_oflow>:
 8014afe:	2200      	movs	r2, #0
 8014b00:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014b04:	f7ff bfde 	b.w	8014ac4 <xflow>

08014b08 <fabs>:
 8014b08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014b0c:	4770      	bx	lr

08014b0e <finite>:
 8014b0e:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8014b12:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014b16:	0fc0      	lsrs	r0, r0, #31
 8014b18:	4770      	bx	lr
 8014b1a:	0000      	movs	r0, r0
 8014b1c:	0000      	movs	r0, r0
	...

08014b20 <scalbn>:
 8014b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b22:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8014b26:	4604      	mov	r4, r0
 8014b28:	460d      	mov	r5, r1
 8014b2a:	4617      	mov	r7, r2
 8014b2c:	460b      	mov	r3, r1
 8014b2e:	b996      	cbnz	r6, 8014b56 <scalbn+0x36>
 8014b30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014b34:	4303      	orrs	r3, r0
 8014b36:	d039      	beq.n	8014bac <scalbn+0x8c>
 8014b38:	4b33      	ldr	r3, [pc, #204]	; (8014c08 <scalbn+0xe8>)
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	f7eb fd34 	bl	80005a8 <__aeabi_dmul>
 8014b40:	4b32      	ldr	r3, [pc, #200]	; (8014c0c <scalbn+0xec>)
 8014b42:	429f      	cmp	r7, r3
 8014b44:	4604      	mov	r4, r0
 8014b46:	460d      	mov	r5, r1
 8014b48:	da0f      	bge.n	8014b6a <scalbn+0x4a>
 8014b4a:	a32b      	add	r3, pc, #172	; (adr r3, 8014bf8 <scalbn+0xd8>)
 8014b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b50:	f7eb fd2a 	bl	80005a8 <__aeabi_dmul>
 8014b54:	e006      	b.n	8014b64 <scalbn+0x44>
 8014b56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014b5a:	4296      	cmp	r6, r2
 8014b5c:	d10a      	bne.n	8014b74 <scalbn+0x54>
 8014b5e:	4602      	mov	r2, r0
 8014b60:	f7eb fb6c 	bl	800023c <__adddf3>
 8014b64:	4604      	mov	r4, r0
 8014b66:	460d      	mov	r5, r1
 8014b68:	e020      	b.n	8014bac <scalbn+0x8c>
 8014b6a:	460b      	mov	r3, r1
 8014b6c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8014b70:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8014b74:	19b9      	adds	r1, r7, r6
 8014b76:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8014b7a:	4291      	cmp	r1, r2
 8014b7c:	dd0e      	ble.n	8014b9c <scalbn+0x7c>
 8014b7e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8014b82:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8014b86:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8014b8a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8014b8e:	a31c      	add	r3, pc, #112	; (adr r3, 8014c00 <scalbn+0xe0>)
 8014b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b94:	481e      	ldr	r0, [pc, #120]	; (8014c10 <scalbn+0xf0>)
 8014b96:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8014b9a:	e7d9      	b.n	8014b50 <scalbn+0x30>
 8014b9c:	2900      	cmp	r1, #0
 8014b9e:	dd08      	ble.n	8014bb2 <scalbn+0x92>
 8014ba0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014ba4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ba8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8014bac:	4620      	mov	r0, r4
 8014bae:	4629      	mov	r1, r5
 8014bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bb2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8014bb6:	da12      	bge.n	8014bde <scalbn+0xbe>
 8014bb8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014bbc:	429f      	cmp	r7, r3
 8014bbe:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8014bc2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8014bc6:	dcdc      	bgt.n	8014b82 <scalbn+0x62>
 8014bc8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8014bcc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8014bd0:	a309      	add	r3, pc, #36	; (adr r3, 8014bf8 <scalbn+0xd8>)
 8014bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd6:	480f      	ldr	r0, [pc, #60]	; (8014c14 <scalbn+0xf4>)
 8014bd8:	f041 011f 	orr.w	r1, r1, #31
 8014bdc:	e7b8      	b.n	8014b50 <scalbn+0x30>
 8014bde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014be2:	3136      	adds	r1, #54	; 0x36
 8014be4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014be8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8014bec:	4620      	mov	r0, r4
 8014bee:	4b0a      	ldr	r3, [pc, #40]	; (8014c18 <scalbn+0xf8>)
 8014bf0:	4629      	mov	r1, r5
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	e7ac      	b.n	8014b50 <scalbn+0x30>
 8014bf6:	bf00      	nop
 8014bf8:	c2f8f359 	.word	0xc2f8f359
 8014bfc:	01a56e1f 	.word	0x01a56e1f
 8014c00:	8800759c 	.word	0x8800759c
 8014c04:	7e37e43c 	.word	0x7e37e43c
 8014c08:	43500000 	.word	0x43500000
 8014c0c:	ffff3cb0 	.word	0xffff3cb0
 8014c10:	8800759c 	.word	0x8800759c
 8014c14:	c2f8f359 	.word	0xc2f8f359
 8014c18:	3c900000 	.word	0x3c900000

08014c1c <_init>:
 8014c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c1e:	bf00      	nop
 8014c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c22:	bc08      	pop	{r3}
 8014c24:	469e      	mov	lr, r3
 8014c26:	4770      	bx	lr

08014c28 <_fini>:
 8014c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2a:	bf00      	nop
 8014c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c2e:	bc08      	pop	{r3}
 8014c30:	469e      	mov	lr, r3
 8014c32:	4770      	bx	lr
